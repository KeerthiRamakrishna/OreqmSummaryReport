<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_ComXf_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_public_modulereference_integration_req.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_AUTOSAR_SWS_COMBasedTransformer.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_AUTOSAR_SWS_TransformerGeneral.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_AUTOSAR_TPS_SystemTemplate.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_ComXf_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_ComXf_EB_Extension_ConfigChecks.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_ComXf_TL_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/common_req/ComXf_Xfrm_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_DocBookImporter/reqm_DSN.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_GenericImporter/reqm_SRCXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_GenericImporter/reqm_TCS.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 22:16:34 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_ComXf_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_public_modulereference_integration_req.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_AUTOSAR_SWS_COMBasedTransformer.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_AUTOSAR_SWS_TransformerGeneral.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_AUTOSAR_TPS_SystemTemplate.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_ComXf_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_ComXf_EB_Extension_ConfigChecks.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_Native/asc_ComXf_requirements_ComXf_TL_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/common_req/ComXf_Xfrm_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_DocBookImporter/reqm_DSN.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_GenericImporter/reqm_SRCXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_GenericImporter/reqm_TCS.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/2018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>feavc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swpad</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swts</regex>
      <regex>pdoc</regex>       <!-- since 10/2018: introduced for updated tracing model-->
      <regex>dev</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swadvc</regex>     <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swuvc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/2020: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>
      <regex>doc</regex>

      <!-- legacy items -->
      <regex>req</regex>        <!-- deprecated 10/2017: old swrs type -->
      <regex>dsn</regex>        <!-- deprecated 10/2017: old swdd -->
      <regex>src</regex>        <!-- deprecated 10/2017: old impl type -->
      <regex>tcs</regex>        <!-- deprecated 10/2017: replaced by swintts and swuts -->
      <regex>dsn_arch</regex>   <!-- deprecated 10/2017: old swad type -->
      <regex>man</regex>
      <regex>tso</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='req') and (../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.rejected</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.count</name>
      <description>Requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.req.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='req') or (../@doctype='swrs')) and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='swdd') or (../@doctype='dsn')) and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.doctypes</name>
      <description>Requirements can be covered only by req, dsn_arch, dev, lim, dsn, src, tcs, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req')]</applyto>
          <condition>(./needscoverage/needsobj="req" or ./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swad, dev, lim, swurs, swdd, src, swuts, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.doctypes</name>
      <description>Design elements can only be covered by dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn')]</applyto>
          <condition>(./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.src.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='src')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="tsc" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes") )</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="dsn_arch" or ./fulfilledby/ffbObj/ffbType="dsn_arch" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>



    <rule>
      <name>ERR.dsn_arch.needscoverage.doctypes</name>
      <description>Architectural design objects can only be covered by dsn_arch, dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn_arch')]</applyto>
          <condition>(./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, req, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
         </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
  </rules>
    <oreqmRules>
          <rule>
            <name>WRN.tsc.needscoverage.count</name>
            <description>Violated if there are more than 10 tsc specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='tcs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='tsc'])) &gt; 10]/furtherinfo</applyto>
                    <regex>tsc.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.req.needscoverage.count</name>
            <description>Violated if there are more than 10 req specobjects covering one specobject and no appropriate information is provided in furtherinfo, refinement on req to req are excluded. Refinements of requirements Req to Req and Req to Fea are excluded from this rule since this is tracing on the same level. The justification in furtherinfo must contain the rule name.</description>
           <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(../@doctype != 'req') and (../@doctype != 'fea') and ((count(./needscoverage/needscov[needsobj='req']/coveredby/linkedfrom)) &gt; 10)]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='req'])) &gt; 10]/furtherinfo</applyto>
                    <regex>req.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
     </rule>

        <rule>
            <name>WRN.src.needscoverage.count</name>
            <description>Violated if there are more than 10 src specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='src']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn_arch.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn_arch specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn_arch']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn_arch'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn_arch.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="lim">

    <specobject>
      <id>ComXf.EB.IntReq.RequiresCom01</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>2</version>
      <description>
      <!-- class: major, long-term -->
      <!-- class-reason: important to be known by customer prior to ordering of product  -->
      <!-- Affected AUTOSAR releases: all -->
      The EB Com module shall be initialized before the invocation of <code>ComXf_Init()</code> and
      de-initialized only after <code>ComXf_DeInit()</code> returned.
      This behaviour only applies if a least one non safety related BSW entry is configured
      within the XfrmImplementationMapping of the ComXf module.
      </description>
      <rationale>
      The EB ComXf module requires the usage of Autocore Com module (reference to product description:
      ASCPD-288) if a least one non safety related BSW entry is configured within the
      XfrmImplementationMapping of the ComXf module. For these non safety related BSW entries the EB ComXf
      module uses the post-build configuration and library APIs of the EB Com module. It eases the
      implementation of the module. The configuration of the ComXf module and the Com module have to be
      consistent regarding the configuration of signal groups, which is ensured if the same configuration
      is used.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <specobject>
      <id>ComXf.EB.IntReq.InitRoutines</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        <!-- class: major, long-term -->
        <!-- class-reason: important to be known by customer during integration  -->
        <!-- Affected AUTOSAR releases: all -->
        <code>ComXf_Init()</code> and <code>ComXf_DeInit()</code> must not be
        invoked from the context of a safe application.
      </description>
      <rationale>
        Different transformations might be mapped to different partitions.
        Any module-wide de-/initialization routine shall de-/initialize only
        non-safety relevant data.
        Partitions containing safetly relevant transformations shall provide
        their own individual de-/initialization routine (if needed).
      </rationale>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>ComXf.EB.IntReq.RequiresE2E01</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
      <!-- class: major, long-term -->
      <!-- class-reason: important to be known by customer prior to ordering of product  -->
      <!-- Affected AUTOSAR releases: all -->
      If only safety related BSW entries are configured within the XfrmImplementationMapping
      of the ComXf module, no de-/initialization of the ComXf module is required.
      </description>
      <rationale>
      The EB ComXf module requires the usage of Autocore E2E library if a least one safety related BSW entry
      is configured within the XfrmImplementationMapping of the ComXf module. For these safety related BSW entries
      the EB ComXf module uses library macros of the EB E2E library and the system configuration itself. This means no
      usage of the post-build configuration and library APIs of the EB Com module applies.
      Nevertheless, the configuration of signal groups within the system configuration (for the ComXf module)
      and the Com module have to be consistent.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

    <!-- current Com integration requirements related to ComXf -->

    <specobject>
      <id>ComXf.EB.IntReq.EB_INTREQ_Com_0002</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
      <!-- class: major, long-term -->
      <!-- class-reason: important to be known by customer prior to ordering of product  -->
      <!-- Affected AUTOSAR releases: all -->
        Restrictions to prevent race conditions in Com's Tx-path.

        The Com module exhibits several race conditions in its transmission path that can
        cause inconsistent and/or mutilated data to be transmitted. The transmission of an
        I-PDU can be triggered by a Tx-signal API if the I-PDU has a direct part
        (transmission mode is DIRECT or MIXED).
        The Tx-signal APIs are <code>Com_SendSignal()</code>,
        <code>Com_SendDynSignal()</code>, <code>Com_SendSignalGroup()</code>, and
        <code>Com_SendSignalGroupArray()</code>. The Tx-signal APIs have write access to
        the Com-internal I-PDU buffer. Note that (the internal implementations of) these
        APIs are also used in context of <code>Com_MainFunctionRouteSignals()</code>.
        Additionally the transmission of an I-PDU can be triggered in context of
        <code>Com_MainFunctionTx()</code>, <code>Com_TriggerIPDUSend()</code>, or
        <code>Com_IpduGroupControl()</code>, or <code>Com_SwitchIpduTxMode</code>.
        Triggering of a transmission in general requires the read access to the
        Com-internal I-PDU buffer by the Com lower layers.
        Depending on the implementation of a Tx-callout (<code>ComIPduCallout</code> and
        <code>ComIPduTriggerTransmitCallout</code>), it requires read and/or write
        access to the Com-internal I-PDU buffer. The callouts are invoked when a
        transmission is triggered.
        Depending on the underlying bus system, the API
        <code>Com_TriggerTransmit()</code> is invoked, which requires read access to the
        Com-internal I-PDU buffer.
        A race occurs when an ongoing transmission (access to the Com-internal I-PDU
        buffer by Com lower layer and Com callout) is interrupted by an invocation of a
        Tx-signal API. A race occurs when an ongoing transmission is interrupted by an API
        which triggers another transmission for the same I-PDU and a configured Com callout
        changes data.
        This behavior leads to the following cases:<pre>
          - An I-PDU has a direct part. It also has a call to a Tx-signal API to
            a signal/signal group, in which one of the following transfer properties
            is interrupted by another Tx-signal API call of a signal of the very
            same I-PDU: <code>TRIGGERED</code>,
            <code>TRIGGERED_ON_CHANGE</code>,
            <code>TRIGGERED_ON_CHANGE_WITHOUT_REPETITION</code>, or
            <code>TRIGGERED_WITHOUT_REPETITION</code>.
          - A call to a Tx-signal API for a signal/signal group that belongs to
            the I-PDU interrupts a call to one of the following APIs of the very
            same I-PDU: <code>Com_TriggerIPDUSend()</code>,
                        <code>Com_IpduGroupControl()</code>,
                        <code>Com_SwitchIpduTxMode()</code>, or
                        <code>Com_TriggerTransmit()</code>.
          - A call to a Tx-signal API interrupts a call to
                        <code>Com_MainFunctionTx()</code>.
          - A callout uses the data of the I-PDU for a calculation (e.g. to
            calculate a CRC) and a call to Tx-signal API interrupts the sending of
            the I-PDU.</pre>
        With a call to <code>Com_SendDynSignal()</code> not only the content of an I-PDU
        may change, but also the length of the I-PDU.

        Work-around
        To prevent inconsistencies in the I-PDU, ensure the following:<pre>
          - A call to a Tx-signal API that triggers a transmission does not
            interrupt a call to a Tx-signal API for signals which belong to the same
            I-PDU.
          - A call to a Tx-signal API does not interrupt one of the following
            APIs: <code>Com_TriggerIPDUSend()</code>,
                  <code>Com_SwitchIpduTxMode()</code>, or
                  <code>Com_TriggerTransmit()</code>.
          - A call to a Tx-signal API does not interrupt
                  <code>Com_MainFunctionTx()</code>.
          - Additionally, if a callout is configured that modifies I-PDU data:
            Ensure that the APIs:
                  <code>Com_TriggerIPDUSend()</code>and
                  <code>Com_SwitchIpduTxMode()</code> and
                  <code>Com_TriggerTransmit()</code> and
                  <code>Com_MainFunctionTx()</code>
            do not interrupt each other for the very same I-PDU.</pre>
      </description>
      <rationale>
        This issue could be avoided if you lock the PDU buffer or use expensive double
        buffers. However if you lock the PDU buffer while the callout function or the
        <code>PduR_ComTransmit</code> function is called, it leads to an undefined
        locking time. It is not acceptable to disable interrupts for too long. Therefore a
        usage restriction has been defined in the work-around section to avoid race
        conditions.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

    <specobject>
      <id>ComXf.EB.IntReq.EB_INTREQ_Com_0003</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
      <!-- class: major, long-term -->
      <!-- class-reason: important to be known by customer prior to ordering of product  -->
      <!-- Affected AUTOSAR releases: all -->
        The access to the shadow buffer of a signal group is not protected.
        Therefore restrictions apply to the mutually possible preemptions.<pre>
        - On the Tx-side: A call to <code>Com_UpdateShadowSignal()</code> shall
          not get interrupted by <code>Com_SendSignalGroup()</code> for the signal
          group to which the group signal belongs to.
        - On the Rx side: A call to <code>Com_ReceiveShadowSignal()</code> shall
          not get interrupted by <code>Com_ReceiveSignalGroup()</code> for the
          signal group to which the group signal belongs to.</pre>
      </description>
      <rationale>
        Restriction on allowed mutual preemptions.

       Work-around:<pre>
        - Ensure that <code>Com_SendSignalGroup()</code> does not interrupt
          <code>Com_UpdateShadowSignal()</code> for the signal group to which
          the group signal belongs to.
        - Ensure that <code>Com_ReceiveSignalGroup()</code> does not interrupt
          <code>Com_ReceiveShadowSignal()</code> for the signal group to which
          the group signal belongs to.</pre>
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>ComXf.EB.IntReq.EB_INTREQ_Com_0005</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        <!-- class: long term -->
        <!-- class-reason:
       * no restriction for application expected
       * will NOT be updated in future releases -->
        <!-- [ASCCOM-1591] -->
        Limitation on Com signals/signal groups with update-bits.

        AUTOSAR COM SWS specifies that signals/signal groups with update-bits which have
        not been updated shall be discarded. However, if after an update of an I-PDU the
        value of a signal changes from e.g. x to y without the update bit is set, a call to
        <code>Com_ReceiveSignal()/Com_ReceiveSignalGroup()-Com_ReceiveGroupSignal()</code>
        returns the changed value (i.e. y) and not the last received value (i.e. x). Note:
        It is very unlikely that the receiver receives an updated value without the
        update-bit set. Because at sender side, the sender always sets the update-bit in
        case a new value is transmitted. The value of a signal/signal group only changes
        when the <code>Com_SendSignal()/Com_SendSignalGroup()</code> is invoked which sets
        the update-bit. An impact may only occur if the value on the sender is changed while
        the update-bit is not set. If this conditions occur this has no impact on the
        following use-cases:<pre>
          - For applications (SWCs), at least if the EB-optimization
            <code>DirectReadFromCom</code> in Rte is not used. Since the Rte
            reads the value from the Com module only if it is notified by the Com
            module. This does not happen when the update-bit is not set. Also it
            writes the received value into a buffer and reads requests from the
            application and uses the value of the buffer.
          - For applications which only use Com APIs when
            <code>ComNotification</code> is received.</pre>

        However, this conditions may have an impact on the following use-case:
        Applications, which directly use the Com APIs, usually get the correct value, since
        the value of a signal usually does not change without setting the update-bit. If you
        use the Com APIs without <code>ComNotification</code>, changed values may be read
        that have no update-bit set. The following work-around is only applicable in this
        case.
        Work-around for signals of type U/SINT8/16/32
        Configure a filter (<code>ComFilterAlgorithm</code>) <code>NEW_IS_WITHIN</code>,
        with the parameters [ComFilterMin,
        ComFilterMax] = maximum possible value range.
      </description>
      <rationale>
        This limitation allows a more efficient implementation and for the application
        usually the behavior does not change.
        Requirements: - COM324
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>ComXf.SWS_ComXf_00017</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer does not support Client-Server communication. (SRS_Xfrm_00201)
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00032</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer does not support external trigger communication.(SRS_Xfrm_00201)
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00018</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer only supports composite data types (i.e. Signal Groups from COM).
        (SRS_Xfrm_00201)
      </description>
      <furtherinfo>
        Justifying rule: WRN.tsc.needscoverage.count violation.
        This swurs is covered by more than 10 EB swurs.
      </furtherinfo>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03040_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03050_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03080_Serialize_StructOfOneElement_Safe</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03110_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03140_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03150_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03180_Deserialize_StructOfOneElement_Safe</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04110_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>347</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01110_StOfAllBasic</srcid><srcstatus/><internalId>409</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00019</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer only supports fix sized data types. (SRS_Xfrm_00201)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03020_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03030_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03120_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03130_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01020_ArrayOfUint8</srcid><srcstatus/><internalId>407</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01030_NestedArrayOfStruct</srcid><srcstatus/><internalId>408</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01120_ArrayOfUint8</srcid><srcstatus/><internalId>410</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01130_NestedArrayOfStruct</srcid><srcstatus/><internalId>411</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer only supports signal groups which are byte aligned.
        (SRS_Xfrm_00201)
      </description>
      <comment>
        Refined due to enhancement: "Support for serialization of un-aligned / non-consecutively
        mapped signal groups"
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.UnAlignedSignalGroupsTx</srcid><srcstatus/><internalId>163</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.UnAlignedSignalGroupsRx</srcid><srcstatus/><internalId>164</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.UnAlignedSignalGroupsTx_Safety</srcid><srcstatus/><internalId>186</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.UnAlignedSignalGroupsRx_Safety</srcid><srcstatus/><internalId>187</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
   <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>

   <specobject>
      <id>ComXf.SWS_ComXf_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer shall support signal group where all group signals are mapped
        successively (possibly with gaps where positions in the signal group layout have no
        corresponding signal defined) to the IPdu.(SRS_Xfrm_00201)
      </description>
      <comment>
        Refined due to enhancement: "Support for serialization of un-aligned / non-consecutively
        mapped signal groups"
        AUTOSAR R22-11: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.PartialSignalMappingTx</srcid><srcstatus/><internalId>165</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.PartialSignalMappingRx</srcid><srcstatus/><internalId>166</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.NonConsecutiveMappingTx</srcid><srcstatus/><internalId>167</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.NonConsecutiveMappingRx</srcid><srcstatus/><internalId>168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R4.2.1, Release</source>
      <version>1</version>
      <description>
        The header file ComXf[_&amp;lt;Ie&amp;gt;].h shall be the main include file for the COM
        Based transformer and include TransformerTypes.h and its Module Interlink Types Header file
        SchM_&amp;lt;bsnp&amp;gt;_[&amp;lt;vi&amp;gt;_&amp;lt;ai&amp;gt;]Type.h where
        &amp;lt;Ie&amp;gt; is the optional implementation specific file name extension according
        [SWS_BSW_00103], &amp;lt;bsnp&amp;gt; is the BSW Scheduler Name Prefix according
        [SWS_Rte_07593] and [SWS_Rte_07594], &amp;lt;vi&amp;gt; is the vendorId of the BSW
        module and &amp;lt;ai&amp;gt; is the vendorApiInfix of the BSW module. (SRS_BSW_00346)
      </description>
      <comment>
        See Deviation: Module Interlink Types Header File
        Further:
          - Implementation specific file name extension is not applied (i.e. ComXf.h is always provided)

        Note: The file TransformerTypes.h contains the general transformer data types.
              TransformerTypes.h and SchM_ComXfType.h are included indirectly.
        AUTOSAR R22-11 comment: Requirement is deleted in R22-11.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.ModuleInterlinkTypesHeaderFile</srcid><srcstatus/><internalId>255</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_02001_Includes</srcid><srcstatus/><internalId>326</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.IncludeFileStructure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The serialization is based on the Ecu configuration of the COM module and
          - the Software Components PortPrototype,
          - the dataElement list defined by the respective SenderReceiverInterface,
          - the SenderReceiverToSignalGroupMapping,
          - and the ISignalToIPduMapping for the SystemSignalGroup.
        (SRS_Xfrm_00201, SRS_Xfrm_00202)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
         <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01020_ArrayOfUint8</srcid><srcstatus/><internalId>407</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01030_NestedArrayOfStruct</srcid><srcstatus/><internalId>408</internalId></linkedfrom></coveredby></needscov>
         <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00031</srcid><srcstatus/><internalId>58</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
         <provcov>
            <linksto>ComXf.top.004</linksto>
            <dstversion>1</dstversion>
         <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00003</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based transformer shall only be used as the top-most transformer (first) in a
        transformer chain. (SRS_Xfrm_00009, SRS_Xfrm_00011)
      </description>
      <comment>
        This requirement is informational only. Further, is already checked by constr_3123 in
        System Template AUTOSAR CP R22-11.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based transformer defined in this document shall be used as a transformer if
         • the attribute protocol of the TransformationTechnology is set to COM-Based
         • and the attribute version of the TransformationTechnology is set to 1.0.0
         • and the attribute transformerClass of the TransformationTechnology is set to serializer
        (SRS_Xfrm_00201)
      </description>
      <comment>
        Note that there are multiple inconsistencies for the requirements of attributes of
        TransformationTechnology in the AUTOSAR SWS:
          - version number of TransformationTechnology for ComXf in ASR421 is 1 but in ASR430 is
            1.0.0
          - version number of TransformationTechnology for SomeIpXf in both ASR versions is 1
          - the required value of transformerClass attribute for ComXf was introduced in ASR430
          - the required value of transformerClass attribute for SomeIpXf was introduced in ASR421
          - the requirement for values of TransformationTechnology attributes for E2EXf was
            introduced in ASR430 (does not exist in ASR421)
          - version number of TransformationTechnology for E2EXf in ASR430 is 1.0.0
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.TransformationTechnology.GeneratedCodeCheck</srcid><srcstatus/><internalId>189</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_W_00007</srcid><srcstatus/><internalId>200</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_W_00021</srcid><srcstatus/><internalId>204</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_MCG_E_00018</srcid><srcstatus/><internalId>208</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer shall support all basic data types that are supported by the COM
        module in [SWS_Com_00675] except for UINT8_DYN. (SRS_Xfrm_00201)
      </description>
      <comment>
        refined for each data type
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00015.boolean</srcid><srcstatus/><internalId>17</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015.uint8</srcid><srcstatus/><internalId>18</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015.uint16</srcid><srcstatus/><internalId>19</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015.uint32</srcid><srcstatus/><internalId>20</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015.sint8</srcid><srcstatus/><internalId>21</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015.sint16</srcid><srcstatus/><internalId>22</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015.sint32</srcid><srcstatus/><internalId>23</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015.uint8_n</srcid><srcstatus/><internalId>24</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015.float32</srcid><srcstatus/><internalId>25</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015.float64</srcid><srcstatus/><internalId>26</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015.uint64</srcid><srcstatus/><internalId>27</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015.sint64</srcid><srcstatus/><internalId>28</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.boolean</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type boolean
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.uint8</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type uint8
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03040_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03050_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.uint16</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type uint16
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03040_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03050_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
     </providescoverage>
   <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.uint32</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type uint32
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.sint8</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type sint8
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.sint16</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type sint16
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.sint32</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type sint32
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.uint8_n</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type uint8[n]
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.float32</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type float32
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.float64</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type float64
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.uint64</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type uint64
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00015.sint64</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00015 applies for data type sint64
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer shall handle each dataElement of the SenderReceiverInterface
        individually. (SRS_Xfrm_00201)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03020_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03030_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01020_ArrayOfUint8</srcid><srcstatus/><internalId>407</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01030_NestedArrayOfStruct</srcid><srcstatus/><internalId>408</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>ComXf.top.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer shall handle each dataElement of the SenderReceiverInterface like
        defined for the COM module[4] when the COM API Com_SendSignal (rep. Com_ReceiveSignal)
        is called for a shadow signal.(SRS_Xfrm_00201)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03040_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03050_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03140_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03150_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01020_ArrayOfUint8</srcid><srcstatus/><internalId>407</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01030_NestedArrayOfStruct</srcid><srcstatus/><internalId>408</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01110_StOfAllBasic</srcid><srcstatus/><internalId>409</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01120_ArrayOfUint8</srcid><srcstatus/><internalId>410</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01130_NestedArrayOfStruct</srcid><srcstatus/><internalId>411</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.COM_COMXF.ASCCOM-610_SignalInvalidation</srcid><srcstatus/><internalId>260</internalId></linkedfrom><linkedfrom><srcid>dev.COM.ASCCOM-775</srcid><srcstatus/><internalId>261</internalId></linkedfrom><linkedfrom><srcid>dev.COM_COMXF.ASCCOM-1588_SmallRXIPdu</srcid><srcstatus/><internalId>262</internalId></linkedfrom><linkedfrom><srcid>dev.COM_COMXF.ASCCOM-1724_SymbolicNameValueFile</srcid><srcstatus/><internalId>263</internalId></linkedfrom><linkedfrom><srcid>dev.COM_COMXF.ASCCOM-1910_NoDynGroupSignal</srcid><srcstatus/><internalId>264</internalId></linkedfrom><linkedfrom><srcid>dev.COM_COMXF.ZeroSizeSigTransfProp</srcid><srcstatus/><internalId>265</internalId></linkedfrom><linkedfrom><srcid>dev.COM_COMXF.OverlappingComSignals</srcid><srcstatus/><internalId>266</internalId></linkedfrom><linkedfrom><srcid>dev.COM_COMXF.ConfigurableCallbackCalloutFunctoinDeclarations</srcid><srcstatus/><internalId>267</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>ComXf.top.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        If the signal layout of the signal group array representation contains gaps,those gaps shall
        be set during transmission to the value defined by the the ComTxIPduUnusedAreasDefault of
        the respective ComTxIPdu that this signal group is mapped to.
        (SRS_Xfrm_00201, SRS_Xfrm_00202)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.UnAlignedSignalGroupsTx</srcid><srcstatus/><internalId>163</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ComXf_R22-11.arxml</source>
      <version>1</version>
      <description>
         Buffer reservation for further transformers The COM
         Based Transformer shall consider the header and/or trailer ISignals defined in the
         ISignalGroup which are processed by further transformers.(SRS_Xfrm_00201, SRS_Xfrm_00202)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.BufferReservation</srcid><srcstatus/><internalId>269</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R4.2.1, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer shall calculate the ’COM Data Offset’ by collecting all other
        transformer’s headerLength information and add the start position inside the ComIPdu.
        (SRS_Xfrm_00201, SRS_Xfrm_00202)
      </description>
      <comment>
        The meaning of COM Data Offset is the bit position of the ComSignalGroup within the IPdu.
        AUTOSAR R22-11 comment: Requirement is deleted in R22-11.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03020_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03030_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03120_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03130_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01020_ArrayOfUint8</srcid><srcstatus/><internalId>407</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01030_NestedArrayOfStruct</srcid><srcstatus/><internalId>408</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01120_ArrayOfUint8</srcid><srcstatus/><internalId>410</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01130_NestedArrayOfStruct</srcid><srcstatus/><internalId>411</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer shall place the serialized data element into the data buffer at
        the bit position according to the configuration of the ISignalGroup in Com.
        (SRS_Xfrm_00201, SRS_Xfrm_00202)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01020_ArrayOfUint8</srcid><srcstatus/><internalId>407</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01110_StOfAllBasic</srcid><srcstatus/><internalId>409</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01120_ArrayOfUint8</srcid><srcstatus/><internalId>410</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        To allow migration, the deserialization shall be able to accept larger array representations
        and ignore dataElements appended at the end of a previously known parameter list.
        (SRS_Xfrm_00201)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03160_DesLargeArray_Safe</srcid><srcstatus/><internalId>343</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01140_DesLargeArray</srcid><srcstatus/><internalId>412</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        Type of error                           | Related error code   | Value [hex]
        ----------------------------------------------------------------------------
        Error code if any other API service,    | COMXF_E_UNINIT       | 0x01
        except LdCom_GetVersionInfo is called   |                      |
        before the transformer module was       |                      |
        initialized with Init or after a        |                      |
        call to Deinit                          |                      |
        ----------------------------------------------------------------------------
        Error code if an invalid configuration  | COMXF_E_INIT_FAILED  | 0x02
        set was selected
        ----------------------------------------------------------------------------
        API service called with wrong parameter | COMXF_E_PARAM        | 0x03
        ----------------------------------------------------------------------------
        API service called with invalid pointer | COMXF_E_PARAM_POINTER| 0x04
        ----------------------------------------------------------------------------
        (SRS_BSW_00337)
      </description>
      <comment>
        This requirement is not applicable: This error type is never returned, because
        post-build selectable is not supported.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00028.E_UNINIT</srcid><srcstatus/><internalId>37</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00028.E_INIT_FAILED</srcid><srcstatus/><internalId>38</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00028.E_PARAM</srcid><srcstatus/><internalId>39</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00028.E_PARAM_POINTER</srcid><srcstatus/><internalId>40</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_02003_DevelopmentErrorCodes</srcid><srcstatus/><internalId>328</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
        <provcov>
          <linksto>ComXf.top.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00028.E_UNINIT</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00028 applies for error code:
        COMXF_E_UNINIT (0x01) : Error code if any other API service, except GetVersionInfo is
        called before the transformer module was initialized with Init or after a call to DeInit
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01150_Err_Det_Uninit</srcid><srcstatus/><internalId>413</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00028.E_INIT_FAILED</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00028 applies for error code:
        COMXF_E_INIT_FAILED (0x02) : Error code if an invalid configuration set was selected
      </description>
      <comment>
        This requirement is not applicable: This error type is never returned, because
        post-build selectable is not supported.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00028.E_PARAM</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00028 applies for error code:
        COMXF_E_PARAM (0x03) : API service called with wrong parameter
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01152_Err_Det_Param</srcid><srcstatus/><internalId>414</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00028.E_PARAM_POINTER</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00028 applies for error code:
        COMXF_E_PARAM_POINTER (0x04) : API service called with invalid pointer
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01153_Err_Det_Pointer</srcid><srcstatus/><internalId>415</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        Name            | ComXf_ConfigType
        Kind            | Structure
        Elements        | implementation specific
                        |  Type    -
                        |  Comment -
        Description     | This is the type of the data structure containing the initialization data
                          for the transformer.
        Available via   | ComXf.h
        (SRS_BSW_00404, SRS_BSW_00441)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01001_ComXfConfigType</srcid><srcstatus/><internalId>402</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00060</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer shall only provide functions for transformers where the
        TransformationTechnology is referenced as the first reference in the list of ordered
        references transformerChain from a DataTransformation to a TransformationTechnology
        (SRS_Xfrm_00011)
      </description>
      <comment>
        This requirement duplicates the linked requirements in combination with constr_3123 of
        System Template AUTOSAR Release R22-11 and is checked by Rte.
        AUTOSAR R22-11 comment: The modification to the requirement was made without any impact on
                                its functionality.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00008</srcid><srcstatus/><internalId>46</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00011</srcid><srcstatus/><internalId>52</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>2</version>
      <description>
        Service Name       | ComXf_&lt;transformerId&gt;
        Syntax             | uint8 ComXf_&lt;transformerId&gt; (
                                     uint8* buffer,
                                     uint32* bufferLength,
                                     &lt;paramtype&gt; dataElement)
        Service ID [hex]   | 0x03
        Sync/Async         | Synchronous
        Reentrancy         | Reentrant
        Parameters (in)    | dataElement  | Data element which shall be transformed
        Parameters (inout) | None
        Parameters (out)   | buffer       | Buffer allocated by the RTE, where the transformed data
                                          | has to be stored by the transformer
                           | bufferLength | Used length of the buffer
        Return value       | uint8        | 0x00 (E_OK): Serialization successful
                                          | 0x81 (E_SER_GENERIC_ERROR): A generic error occurred
        Description        | This function transforms a Sender/Receiver communication using the
                             serialization of COM Based Transformer. It takes the data element as
                             input and outputs a uint8 array containing the serialized data.
        Available via      | ComXf.h
        (SRS_Xfrm_00201)
        where
          • type is data type of the data element after all data conversion activities of the RTE
          • paramtype is derived from type according to the parameter passing rules defined by the
            SRS BSW General [5] (see [SRS_BSW_00484], [SRS_BSW_00485], and [SRS_BSW_00486]) and
            SWS BSW General [8] (see [SWS_BSW_00186] and [SWS_BSW_00187])
          • transformerId is the name pattern for the transformer specified be the General
            Specification on Transformers [2] [SWS_Xfrm_00062].

        The function specified in [SWS_ComXf_00007] exists for each transformed Sender/Receiver
        communication which uses the COM Based Transforme
      </description>
      <comment>
        According to dev.ComXf.Reentrancy, this API is non-reentrant for same transformerId (same
        Com SignalGroup ID), but reentrant for different transformerIds (different Com SignalGroup
        IDs). Requirement SWS_Xfrm_00062 is replaced by requirement ComXf.EB.transformerId.
        Incorporated RfC 68623 'Insufficient specification of autonomous error response' ,
        see: https://jira.autosar.org/browse/AR-6694.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.Reentrancy</srcid><srcstatus/><internalId>256</internalId></linkedfrom><linkedfrom><srcid>dev.ComXf.BufferLength</srcid><srcstatus/><internalId>257</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_03001_DataType</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_09001_DataType_Safe</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_01101</srcid><srcstatus/><internalId>324</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00007.1</srcid><srcstatus/><internalId>44</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00007.2</srcid><srcstatus/><internalId>45</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00036</linksto>
          <!-- general transformer function -->
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00011</linksto>
          <!-- out-of-place buffer -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00012</linksto>
          <!-- no altering of input buffer -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00006</linksto>
          <!-- define source (=target) data type -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00013</linksto>
          <!-- first in chain / out-of-place buffering -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.transformerId</linksto>
          <!-- name pattern transformerId -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00009</linksto>
          <!-- reentrancy -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00007.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00007 applies for return value E_OK.
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03030_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01030_NestedArrayOfStruct</srcid><srcstatus/><internalId>408</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00030</linksto>
          <!-- returns err from subset of defined error codes -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031.E_OK</linksto>
          <!-- error returned -->
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00007.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00007 applies for return value E_SER_GENERIC_ERROR.
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03060_InputParamSer</srcid><srcstatus/><internalId>335</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01150_Err_Det_Uninit</srcid><srcstatus/><internalId>413</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01152_Err_Det_Param</srcid><srcstatus/><internalId>414</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01153_Err_Det_Pointer</srcid><srcstatus/><internalId>415</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00027</linksto>
          <!-- hard error returned -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00030</linksto>
          <!-- returns err from subset of defined error codes -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031.GENERIC_ERROR</linksto>
          <!-- error returned -->
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The function specified in [SWS_ComXf_00007] shall exist for the first reference in the list
        of ordered references transformerChain from a DataTransformation to a
        TransformationTechnology if the DataTransformation is referenced by an ISignalGroup in
        the role comBasedSignalGroupTransformation where the ISignalGroup references a
        SystemSignalGroup which is referenced by SenderReceiverToSignalGroupMapping.
        (SRS_Xfrm_00201)
      </description>
      <comment>
        AUTOSAR R22-11 comment: The modification to the requirement was made without any impact on
                                its functionality.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_03001_DataType</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_09001_DataType_Safe</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_01101</srcid><srcstatus/><internalId>324</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The function specified in [SWS_ComXf_00007] shall serialize complex data elements of
        Sender/Receiver communication into a linear byte array representation using the COM Based
        Transformation.(SRS_Xfrm_00201)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_09001_DataType_Safe</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03020_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03030_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03040_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03050_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04010_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01020_ArrayOfUint8</srcid><srcstatus/><internalId>407</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01030_NestedArrayOfStruct</srcid><srcstatus/><internalId>408</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>2</version>
      <description>
        Service Name       | ComXf_Inv_&lt;transformerId&gt;
        Syntax             | uint8 ComXf_Inv_&lt;transformerId&gt; (
                                     const uint8* buffer,
                                     uint32 bufferLength,
                                     &lt;type&gt;* dataElement)
        Service ID [hex]   | 0x04
        Sync/Async         | Synchronous
        Reentrancy         | Reentrant
        Parameters (in)    | buffer       | Buffer allocated by the RTE, where the still
                                          | serialized data are stored by the Rte
                           | bufferLength | Used length of the buffer
        Parameters (inout) | None
        Parameters (out)   | dataElement  | Data element which is the result of the transformation
                                          | and contains the deserialized data element
        Return value       | uint8        | 0x00 (E_OK): Serialization successful
                                          | 0x01 (E_NO_DATA): No data available which can be
                                          | deserialized
                                          | 0x81 (E_SER_GENERIC_ERROR): A generic error occurred
        Description        | This function deserializes a Sender/Receiver communication using the
                             deserialization of COM Based Transformer. It takes the uint8 array
                             containing the serialized data as input and outputs the original
                             data element which will be passed to the Rte.
        Available via      | ComXf.h
        (SRS_Xfrm_00201)
        where
          - type is data type of the data element before all data conversion activities of the RTE
          - transformerId is the name pattern for the transformer specified in [SWS_Xfrm_00062] ([2]).

        Note: In contrast to AUTOSAR, this API is non-reentrant for same transformerId (same Com
        SignalGroup ID), but reentrant for different transformerIds (different Com SignalGroup IDs).
      </description>
      <comment>
        According to dev.ComXf.Reentrancy, this API is non-reentrant for same
        transformerId (same Com SignalGroup ID), but reentrant for different transformerIds
        (different Com SignalGroup IDs).
        Requirement SWS_Xfrm_00062 is replaced by requirement ComXf.EB.transformerId.
        Incorporated RfC 68623 'Insufficient specification of autonomous error response' ,
        see: https://jira.autosar.org/browse/AR-6694.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.Reentrancy</srcid><srcstatus/><internalId>256</internalId></linkedfrom><linkedfrom><srcid>dev.ComXf.BufferLength</srcid><srcstatus/><internalId>257</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00010.1</srcid><srcstatus/><internalId>49</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010.2</srcid><srcstatus/><internalId>50</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010.3</srcid><srcstatus/><internalId>51</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_03001_DataType</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_09001_DataType_Safe</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_01101</srcid><srcstatus/><internalId>324</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00042</linksto>
          <!-- general transformer function -->
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00011</linksto>
          <!-- out-of-place buffer -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00012</linksto>
          <!-- no altering of input buffer -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00006</linksto>
          <!-- define source (=target) data type -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00014</linksto>
          <!-- first in chain / out-of-place buffering -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.transformerId</linksto>
          <!-- name pattern transformerId -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00009</linksto>
          <!-- reentrancy -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00010.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00010 applies for return value E_OK.
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03130_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01130_NestedArrayOfStruct</srcid><srcstatus/><internalId>411</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00030</linksto>
          <!-- returns err from subset of defined error codes -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031.E_OK</linksto>
          <!-- error returned -->
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00010.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00010 applies for return value E_SER_GENERIC_ERROR.
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03170_InputParamDeser</srcid><srcstatus/><internalId>344</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01150_Err_Det_Uninit</srcid><srcstatus/><internalId>413</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01152_Err_Det_Param</srcid><srcstatus/><internalId>414</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01153_Err_Det_Pointer</srcid><srcstatus/><internalId>415</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00027</linksto>
          <!-- hard error returned -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00030</linksto>
          <!-- returns err from subset of defined error codes -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031.GENERIC_ERROR</linksto>
          <!-- error returned -->
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00010.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        ComXf.SWS_ComXf_00010 applies for return value E_NO_DATA.
      </description>
      <comment>
        Incorporated RfC 69896 'Execution of Transformer chain in case of unqueued
        communication when no data is available',
        see https://jira.autosar.org/browse/AR-13599.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01153_Err_Det_Pointer</srcid><srcstatus/><internalId>415</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00028</linksto>
          <!-- soft error returned -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00030</linksto>
          <!-- returns err from subset of defined error codes -->
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031.E_NO_DATA</linksto>
          <!-- error returned -->
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The function specified in [SWS_ComXf_00010] shall existfor the first reference in the list
        of ordered references transformerChain from aDataTransformation to a
        TransformationTechnology if the DataTransformation is referenced by an ISignalGroup in the
        role comBasedSignalGroupTransformation where the ISignalGroup references a SystemSignalGroup
        which is referenced by SenderReceiverToSignalGroupMapping.(SRS_Xfrm_00201)
      </description>
      <comment>
        AUTOSAR R22-11 comment: The modification to the requirement was made without any impact on
                                its functionality.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_03001_DataType</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_09001_DataType_Safe</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_01101</srcid><srcstatus/><internalId>324</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        If ComXf_Inv_&lt;transformerId&gt; specified in SWS_ComXf_00010 is called with buffer equal
        to NULL_PTR and bufferLength equal to 0, then the output buffer buffer shall not be changed
        and ComXf_Inv_&lt;transformerId&gt; shall return with E_NO_DATA.(SRS_Xfrm_00201)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03170_InputParamDeser</srcid><srcstatus/><internalId>344</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01153_Err_Det_Pointer</srcid><srcstatus/><internalId>415</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031.E_NO_DATA</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The function specified in [SWS_ComXf_00010] shall deserialize a linear byte array to
        primitive or complex data elements of Sender/Receiver communication using the COM Based
        Transformation. (SRS_Xfrm_00201)
      </description>
      <comment>
        Here, with "primitive data element", the opaque data type UINT8_N is ment.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03110_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03120_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03130_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03140_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03150_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_04110_StOfAllBasic_64Bit</srcid><srcstatus/><internalId>347</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01110_StOfAllBasic</srcid><srcstatus/><internalId>409</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01120_ArrayOfUint8</srcid><srcstatus/><internalId>410</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01130_NestedArrayOfStruct</srcid><srcstatus/><internalId>411</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>

     <specobject>
      <id>ComXf.SWS_ComXf_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        Service Name        | ComXf_Init
        Syntax              | void ComXf_Init (const ComXf_ConfigType* config)
        Service ID [hex]    | 0x01
        Sync/Async          | Synchronous
        Reentrancy          | Reentrant
        Parameters (in)     | config | Pointer to the transformer's configuration data.
        Parameters (inout)  | None
        Parameters (out)    | None
        Return value        | None
        Description         | This service initializes the transformer for the further processing.
        Available via       | ComXf.h
        (SRS_BSW_00407, SRS_BSW_00411)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01002_ComXfInit</srcid><srcstatus/><internalId>403</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>lim</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.IntReq.InitRoutines</srcid><srcstatus/><internalId>1</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00058</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        Service Name        | ComXf_DeInit
        Syntax              | void ComXf_DeInit (void)
        Service ID [hex]    | 0x02
        Sync/Async          | Synchronous
        Reentrancy          | Reentrant
        Parameters (in)     | None
        Parameters (inout)  | None
        Parameters (out)    | None
        Return value        | None
        Description         | This service deinitializes the transformer.
        Available via       | ComXf.h
        (SRS_BSW_00407, SRS_BSW_00411)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>lim</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.IntReq.InitRoutines</srcid><srcstatus/><internalId>1</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00059</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        Service Name        | ComXf_GetVersionInfo
        Syntax              | void ComXf_GetVersionInfo (Std_VersionInfoType* VersionInfo)
        Service ID [hex]    | 0x00
        Sync/Async          | Synchronous
        Reentrancy          | Reentrant
        Parameters (in)     | None
        Parameters (inout)  | None
        Parameters (out)    | VersionInfo | Pointer to where to store the version information of
                                            this module.
        Return value        | None
        Description         | This service returns the version information of the called transformer
                              module.
        Available via       | ComXf.h
        (SRS_BSW_00407, SRS_BSW_00411)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01004_ComXfGetVersionInfo</srcid><srcstatus/><internalId>404</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00057</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_91001.Std_VersionInfoType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer is configured based on the COM module configuration
        [Specification of Communication AUTOSAR_SWS_COM]
        (SRS_Xfrm_00202)
        Still, there is an EcuC necessary to map the implementation of the transformer. The
        EcuC defined in [General Specification of Transformers AUTOSAR_ASWS_TransformerGeneral]
        shall be used.
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01010_StOfAllBasic</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01020_ArrayOfUint8</srcid><srcstatus/><internalId>407</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_01030_NestedArrayOfStruct</srcid><srcstatus/><internalId>408</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <!-- Considers COM config container ComIPdu,ComSignal -->
          <linksto>ComXf.SWS_Xfrm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <!-- Considers COM parameter ComSignalEndianness - COM.ASR40.COM157_Conf_* -->
          <linksto>ComXf.SWS_Xfrm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <!-- Considers COM parameter ComBitSize,ComSignalEndianness,ComSignalLength,ComSignalType -->
          <linksto>ComXf.SWS_Xfrm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <!-- Considers COM config container ComIPdu,ComSignal,ComTimeBase -->
          <linksto>ComXf.SWS_Xfrm_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <!-- Considers Ecu configuration of the COM module for ComXf -->
          <linksto>ComXf.SWS_ComXf_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00033</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The vendor specific module definition of the COM Based Transformer - based on the Xfrm
        configuration General Specification of Transformers AUTOSAR_ASWS_TransformerGeneral - may be
        extended by the vendor to support the close interaction with the Com module
        Specification of Communication AUTOSAR_SWS_COM.(SRS_Xfrm_00202)
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00034</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The COM Based Transformer shall be configured to be postBuild when the configuration of the
        Com module General Specification of Transformers AUTOSAR_ASWS_TransformerGeneral is
        postBuild for the respective ComSignalGroups.(SRS_Xfrm_00202)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.Postbuild</srcid><srcstatus/><internalId>268</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_ComXf_00025</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_COMBasedTransformer.pdf R22-11, Release</source>
      <version>1</version>
      <description>
        The apiServicePrefix of the COM Based Transformer’s EcuC shall be set to ComXf.
        (SRS_BSW_00159, SRS_Xfrm_00202)
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_33</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>ComXf.SWS_Xfrm_00008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The ways to deal with unexpected data shall be specified by the transformer
        specific SWS. In general the transformer shall discard the unexpected data
        but shall tolerate the expected fraction.(SRS_Xfrm_00005)
      </description>
      <comment/>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00013</srcid><srcstatus/><internalId>35</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00049</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        An implementation of a transformer shall be able to cope with NULL_PTR as
        input data. The detailed behavior shall be specified in the specific
        transformer SWS.(SRS_Xfrm_00005)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00028.E_PARAM_POINTER</srcid><srcstatus/><internalId>40</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00108</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer which is called with NULL_PTR as input data shall
        not change the output buffer unless the transformer invocation shall trigger an autonomous
        error reaction (see also [SWS_Rte_07420]).(SRS_Xfrm_00005)
      </description>
      <comment>
        Incorporated RfC 69896 'Execution of Transformer chain in case of unqueued
        communication when no data is available', see
        https://jira.autosar.org/browse/AR-13599.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00035</srcid><srcstatus/><internalId>53</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01153_Err_Det_Pointer</srcid><srcstatus/><internalId>415</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall be implemented re-entrant because there exist valid
        configurations which can lead to a concurrent execution of a transformer.(SRS_Xfrm_00006)
      </description>
      <comment/>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <!-- refined to the both transformer functions available -->
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00007</srcid><srcstatus/><internalId>43</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010</srcid><srcstatus/><internalId>48</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00054</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        If a VariableDataPrototype is mapped to multiple ISignals which refer to
        DataTransformations and if those DataTransformations refer to the same
        TransformationTechnologys at the beginning of their list of ordered
        references transformer and no XfrmVariableDataPrototypeInstanceRef
        is specified for that TransformationTechnology and no ComBasedTransformer
        is included in the transformer chains, the execution should be optimzed.

        As optimization those first transformers should be executed only once
        and the result should be taken as input for the further transformers
        for those ISignals.(SRS_Xfrm_00006)
      </description>
      <comment>
         This requirement is not applicable.
         For this requirement refinement, the ComBasedTransformer is used within the transformer
         chain, explicitely excluded by the requirement itself.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00055</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        If the transformer execution is optimized, the XfrmImplementationMapping shall
        map all transformers which execution can be optimized to the
        same BswModuleEntry.(SRS_Xfrm_00006)
      </description>
      <comment>
         This requirement is not applicable.
         For this requirement refinement, the ComBasedTransformer is used within the transformer
         chain, explicitely excluded by requirement ComXf.SWS_Xfrm_00054.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A deserializer transformer (serializer transformer on receiver side) shall
        be able to return all or a subset of the deserialized data to the RTE.
        (SRS_Xfrm_0001, SRS_Xfrm_00007)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00013</srcid><srcstatus/><internalId>35</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00012</srcid><srcstatus/><internalId>54</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        If a transformer cannot generate a valid output, it shall return a hard error.
        (SRS_Xfrm_00004)
      </description>
      <comment/>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00007.2</srcid><srcstatus/><internalId>45</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010.2</srcid><srcstatus/><internalId>50</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00051</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        If a transformer returns a hard error, it shall leave the output buffer unchanged.
        (SRS_Xfrm_00004)
      </description>
      <comment>
        A dataElement is not consider as output buffer which implies that only the serializing
        transformer function (ComXf.SWS_ComXf_00007) applies to this requirement.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.OutputBufferHandling</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        If a transformer produces an output but wants to signal warning to the SWC,
        it shall return a soft error.(SRS_Xfrm_00004)
      </description>
      <comment>
         The requirement is only applicable for the Com inverted transformer function
         (ComXf.SWS_ComXf_00010).
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00010.3</srcid><srcstatus/><internalId>51</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00029</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        Each transformer class shall have its own set of abstract errors.
        (SRS_Xfrm_00004, SRS_Xfrm_00010)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_Xfrm_00031</srcid><srcstatus/><internalId>87</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        Each transformer shall return only errors which are a subset of the errors defined for the
        transformer's transformer class.(SRS_Xfrm_00004, SRS_Xfrm_00010, SRS_Xfrm_00011)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00007.1</srcid><srcstatus/><internalId>44</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00007.2</srcid><srcstatus/><internalId>45</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010.1</srcid><srcstatus/><internalId>49</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010.2</srcid><srcstatus/><internalId>50</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010.3</srcid><srcstatus/><internalId>51</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall consider that the target ECU might have a different architecture
        than the sender ECU (e.g. 8/16/32bit, little/big endian, etc.) so the on-wire format
        shall be fixed.(SRS_Xfrm_00008)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00031</srcid><srcstatus/><internalId>58</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.PackingByteOrder_Safety</srcid><srcstatus/><internalId>188</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall clearly define endianness of multi-byte words.(SRS_Xfrm_00008)
      </description>
      <comment/>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00031</srcid><srcstatus/><internalId>58</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall clearly define the ordering of the contained data elements
        in the complex data if it is a serializer.(SRS_Xfrm_00008)
      </description>
      <comment>
        Refined to the different ordering applied to the data types and parameters.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00031</srcid><srcstatus/><internalId>58</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall clearly define the data semantics.(SRS_Xfrm_00008)
      </description>
      <comment/>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00031</srcid><srcstatus/><internalId>58</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall clearly define the source (=target) data type of the data
        represented by the byte array if it is a serializer.(SRS_Xfrm_00008)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00007</srcid><srcstatus/><internalId>43</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010</srcid><srcstatus/><internalId>48</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00007</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall clearly define the padding of data.(SRS_Xfrm_00008)
      </description>
      <comment>
        This requirement is not applicable.
        This requirement is for the implementer of the 'Specification of COM Based Transformer',
        not the SW developer of the ComXf module.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer which uses out-of-place buffering shall work with two buffers:
        One for the input to the transformer and one for its output.(SRS_Xfrm_00003)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00007</srcid><srcstatus/><internalId>43</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010</srcid><srcstatus/><internalId>48</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer which uses out-of-place buffering shall not alter the data
        of the input buffer.(SRS_Xfrm_00003)
      </description>
      <comment>
        The requirement is refined to the specifications of the COM Based transformer functions
        (ComXf_ and ComXf_Inv_) showing the const qualifier for its input. ComXf_ shows the const
        qualifier for the dataElement which shall be transformed
        (const &amp;lt;type&amp;gt;* dataElement). ComXf_Inv_ shows the const qualifier for the
        buffer, where the serialized data are stored by the Rte (const uint8* buffer).
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00007</srcid><srcstatus/><internalId>43</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010</srcid><srcstatus/><internalId>48</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The first transformer in the chain on the sending side shall use out-of-place
        buffering.(SRS_Xfrm_00003)
      </description>
      <comment>
        The Com Based transformer is a transformer of the class Serializer. It serializes
        complex data elements into a linear form. Therefore it can only be used as the
        first transformer on the sending side and the last transformer on the receiving side
        (in execution order). On sending side a buffer will be allocated by the RTE, where the
        transformed data has to be stored by the transformer and therefore only out-of-place
        buffering is used.
        The requirement is refined to the restriction that the Com Based transformer must be the
        first transformer and only out-of-place buffering can be used on sending side.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00006</srcid><srcstatus/><internalId>42</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00007</srcid><srcstatus/><internalId>43</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The first transformer in the chain on the sending side shall use out-of-place
        buffering.(SRS_Xfrm_00003)
      </description>
      <comment>
        The Com Based transformer is a transformer of the class Serializer. It serializes
        complex data elements into a linear form. Therefore it can only be used as the
        first transformer on the sending side and the last transformer on the receiving side
        (in execution order). On receiving side a buffer will be allocated by the RTE, where the
        transformed data has to be stored and therefore only out-of-place buffering is used.
        The requirement is refined to the restriction that the Com Based transformer must be the
        last transformer and only out-of-place buffering can be used on receiving side.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00006</srcid><srcstatus/><internalId>42</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010</srcid><srcstatus/><internalId>48</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A serializer shall take data elements (complex or atomic) and serialize them
        into a linear representation (byte array).(SRS_Xfrm_00001)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00009</srcid><srcstatus/><internalId>47</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00018</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The serialization algorithm shall be defined for all possible complex data
        input.(SRS_Xfrm_00001)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00009</srcid><srcstatus/><internalId>47</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        Transformers shall return errors to the RTE as return codes.(SRS_Xfrm_00004)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_Xfrm_00031</srcid><srcstatus/><internalId>87</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>3</version>
      <description>
        A serializer transformer shall return one of the following errors(SRS_Xfrm_00010):
        --------------------------------------------------------------------------------
         Error Name              | Error Code    | Error Type | Description
        --------------------------------------------------------------------------------
         E_OK                    | 0x00          | -          | Serialization was
                                 |               |            | successful.
        --------------------------------------------------------------------------------
         E_NO_DATA               | 0x01          | Soft       | No data available which
                                 |               |            | can be deserialized.
        --------------------------------------------------------------------------------
         Reserved                | 0x80          | Hard       | This is reserved to avoid
                                 |               |            | number clashes for autonomous
                                 |               |            | error reactions.
        --------------------------------------------------------------------------------
         E_SER_GENERIC_ERROR     | 0x81          | Hard       | A generic not precisely
                                 |               |            | detailed error occurred.
        --------------------------------------------------------------------------------
         Reserved                | 0x82 -        | Hard       | These are reserved to be
                                 | 0x86          |            | compliant with SOME/IP which
                                 |               |            | defines errors with these
                                 |               |            | values that do not relate to
                                 |               |            | serialization and thus cannot
                                 |               |            | be created by a transformer.
        --------------------------------------------------------------------------------
         E_SER_WRONG_            | 0x87          | Hard       | The version of the
         PROTOCOL_VERSION        |               |            | receiving transformer
                                 |               |            | did not match the sending
                                 |               |            | transformer.
        --------------------------------------------------------------------------------
         E_SER_WRONG_            | 0x88          | Hard       | Interface version of serialized
         INTERFACE_VERSION       |               |            | data is not supported.
        --------------------------------------------------------------------------------
         E_SER_MALFORMED_MESSAGE | 0x89          | Hard       | The received message
                                 |               |            | is malformed. The
                                 |               |            | transformer is not able
                                 |               |            | to produce an output.
        --------------------------------------------------------------------------------
         E_SER_WRONG_            | 0x8a          | Hard       | The received message type
         MESSAGE_TYPE            |               |            | was not expected.
        --------------------------------------------------------------------------------
      </description>
      <comment>
        The requirement is refined to separate the checking of the error codes by the APIs.
        Incorporated RfC 69896 'Execution of Transformer chain in case of unqueued
        communication when no data is available', see https://jira.autosar.org/browse/AR-13599
        Incorporated RfC 68623 (Insufficient specification of autonomous error response),
        see https://jira.autosar.org/browse/AR-6694.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_02004_SerializerErrorCodes</srcid><srcstatus/><internalId>329</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_Xfrm_00031.E_OK</srcid><srcstatus/><internalId>88</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00031.E_NO_DATA</srcid><srcstatus/><internalId>89</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00031.Reserved</srcid><srcstatus/><internalId>90</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00031.GENERIC_ERROR</srcid><srcstatus/><internalId>91</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00031.Reserved1</srcid><srcstatus/><internalId>92</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00031.WRONG_PROTOCOL_VERSION</srcid><srcstatus/><internalId>93</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00031.WRONG_INTERFACE_VERSION</srcid><srcstatus/><internalId>94</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00031.MALFORMED_MESSAGE</srcid><srcstatus/><internalId>95</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00031.WRONG_MESSAGE_TYPE</srcid><srcstatus/><internalId>96</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00031.E_OK</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>3</version>
      <description>
        A serializer transformer shall return one of the following errors:
        --------------------------------------------------------------------------------
         Error Name              | Error Code    | Error Type | Description
        --------------------------------------------------------------------------------
         E_OK                    | 0x00          | -          | Serialization was
                                 |               |            | successful.
        --------------------------------------------------------------------------------
      </description>
      <comment>
        Remains the same in incorporating AR-6694 'Insufficient specification
        of autonomous error response'.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00007.1</srcid><srcstatus/><internalId>44</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010.1</srcid><srcstatus/><internalId>49</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00031.E_NO_DATA</id>
      <status>approved</status>
      <source>Bugzilla RfC 69896</source>
      <version>3</version>
      <description>
        A serializer transformer shall return one of the following errors:
        --------------------------------------------------------------------------------
         Error Name              | Error Code    | Error Type | Description
        --------------------------------------------------------------------------------
         E_NO_DATA               | 0x01          | -          | No data available which
                                 |               |            | can be deserialized.
        --------------------------------------------------------------------------------
      </description>
      <comment>
        Incorporated AR-13599 'Execution of Transformer chain in case of unqueued
        communication when no data is available', see https://jira.autosar.org/browse/AR-13599.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00010.3</srcid><srcstatus/><internalId>51</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00035</srcid><srcstatus/><internalId>53</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00031.Reserved</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>3</version>
      <description>
        A serializer transformer shall return one of the following errors:
        --------------------------------------------------------------------------------
         Error Name              | Error Code    | Error Type | Description
        --------------------------------------------------------------------------------
         Reserved                | 0x80          | Hard       | This is reserved to
                                 |               |            | avoid number clashes for
                                                              | autonomous error
                                                              | reactions.
        --------------------------------------------------------------------------------
      </description>
      <comment>
        This requirement is not applicable, since the error code's value changed in incorporating
        AR-6694 'Insufficient specification of autonomous error response'.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00031.GENERIC_ERROR</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>3</version>
      <description>
        A serializer transformer shall return one of the following errors:
        --------------------------------------------------------------------------------
         Error Name              | Error Code    | Error Type | Description
        --------------------------------------------------------------------------------
         E_SER_GENERIC_ERROR     | 0x81          | Hard       | A generic not precisely
                                 |               |            | detailed error occured.
        --------------------------------------------------------------------------------
      </description>
      <comment>
        Value changed in incorporating AR-6694
        'Insufficient specification of autonomous error response',
        see https://jira.autosar.org/browse/AR-6694
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00007.2</srcid><srcstatus/><internalId>45</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010.2</srcid><srcstatus/><internalId>50</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00031.Reserved1</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>3</version>
      <description>
        A serializer transformer shall return one of the following errors:
        --------------------------------------------------------------------------------
         Error Name              | Error Code    | Error Type | Description
        --------------------------------------------------------------------------------
         Reserved                | 0x82-0x86     | Hard       | These are reserved to be
                                 |               |            | compliant with SOME/IP
                                 |               |            | which defines errors with
                                 |               |            | these values that don’t
                                 |               |            | relate to serialization
                                 |               |            | and thus can’t be
                                 |               |            | created by a transformer.
        --------------------------------------------------------------------------------
      </description>
      <comment>
        This requirement is not applicable, since the error code's value changed in incorporating
        AR-6694 'Insufficient specification of autonomous error response'.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00031.WRONG_PROTOCOL_VERSION</id>
      <status>rejected</status>
      <source>Bugzilla RfC 68623</source>
      <version>3</version>
      <description>
        A serializer transformer shall return this error as described:
        --------------------------------------------------------------------------------
         Error Name              | Error Code   | Error Type | Description
        --------------------------------------------------------------------------------
         E_SER_WRONG_            | 0x87          | Hard       | The version of the
         PROTOCOL_VERSION        |               |            | receiving transformer
                                 |               |            | didn't match the sending
                                 |               |            | transformer.
        --------------------------------------------------------------------------------
      </description>
      <comment>
        This requirement is not applicable. Only E_OK - 0x00, E_NO_DATA - 0x01 and
        E_SER_GENERIC_ERROR - 0x81 are used.
        Added by AR-6694 'Insufficient specification of autonomous error response',
        see https://jira.autosar.org/browse/AR-6694.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00031.WRONG_INTERFACE_VERSION</id>
      <status>rejected</status>
      <source>Bugzilla RfC 68623</source>
      <version>3</version>
      <description>
        A serializer transformer shall return this error as described:
        --------------------------------------------------------------------------------
         Error Name              | Error Code   | Error Type | Description
        --------------------------------------------------------------------------------
         E_SER_WRONG_            | 0x88          | Hard       | Interface version of serialized
         INTERFACE_VERSION       |               |            | data is not supported.
        --------------------------------------------------------------------------------
      </description>
      <comment>
        This requirement is not applicable. Only E_OK - 0x00, E_NO_DATA - 0x01 and
        E_SER_GENERIC_ERROR - 0x81 are used.
        Added by AR-6694  'Insufficient specification of autonomous error response',
        see https://jira.autosar.org/browse/AR-6694
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00031.MALFORMED_MESSAGE</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>3</version>
      <description>
        A serializer transformer shall return this error as described:
        --------------------------------------------------------------------------------
         Error Name              | Error Code   | Error Type | Description
        --------------------------------------------------------------------------------
         E_SER_MALFORMED_MESSAGE | 0x89          | Hard       | The received message
                                 |               |            | is malformed. The
                                 |               |            | transformer is not able
                                 |               |            | to produce an output.
        --------------------------------------------------------------------------------
      </description>
      <comment>
        This requirement is not applicable. Only E_OK - 0x00, E_NO_DATA - 0x01 and
        E_SER_GENERIC_ERROR - 0x81 are used.
        Value changed in incorporating AR-6694
        'Insufficient specification of autonomous error response',
        see https://jira.autosar.org/browse/AR-6694.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00031.WRONG_MESSAGE_TYPE</id>
      <status>rejected</status>
      <source>Bugzilla RfC 68623</source>
      <version>3</version>
      <description>
        A serializer transformer shall return this error as described:
        --------------------------------------------------------------------------------
         Error Name              | Error Code   | Error Type | Description
        --------------------------------------------------------------------------------
         E_SER_WRONG_            | 0x8a          | Hard       | The received message type
         MESSAGE_TYPE            |               |            | was not expected.
        --------------------------------------------------------------------------------
      </description>
      <comment>
        This requirement is not applicable. Only E_OK - 0x00, E_NO_DATA - 0x01 and
        E_SER_GENERIC_ERROR - 0x81 are used.
        Added by AR-6694 'Insufficient specification of autonomous error response',
        see https://jira.autosar.org/browse/AR-6694.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00061</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        ------------------------------------------------------------------------------------
        Type of error                                | Related error code          | Value
        ------------------------------------------------------------------------------------
        Error code if any other API service,
        except GetVersionInfo is called before the
        transformer module was initialized with Init
        or after a call to DeInit                    | &lt;MIP&gt;_E_UNINIT        | 0x01
        ------------------------------------------------------------------------------------
        Error code if an invalid configuration set
        was selected                                 | &lt;MIP&gt;_E_INIT_FAILED   | 0x02
        ------------------------------------------------------------------------------------
        API service called with wrong parameter      | &lt;MIP&gt;_E_PARAM         | 0x03
        ------------------------------------------------------------------------------------
        API service called with invalid pointer      | &lt;MIP&gt;_E_PARAM_POINTER | 0x04
        ------------------------------------------------------------------------------------

        (SRS_BSW_00337)
        where MIP is the Module Implementation Prefix of the transformer as defined in
        [SWS_BSW_00102] totally written in uppercase.
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00028</srcid><srcstatus/><internalId>36</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00034</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall use the ImplementationDataTypes defined by RTE in the
        transformer's Module Interlink Types Header file.(SRS_Xfrm_00002)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00001</srcid><srcstatus/><internalId>12</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00060</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        Name:          &lt;Mip&gt;_ConfigType
        Type:          Structure
        Elements:      implementation specific   Type     --
                                                 Comment  --
        Description:   This is the type of the data structure containing the initialization data for
                       the transformer.
        Available via: &lt;Mip&gt;.h
        (SRS_BSW_00404, SRS_BSW_00441)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00030</srcid><srcstatus/><internalId>41</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00062</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The name pattern transformerId should be used for the APIs
        which belong to the BswModuleEntry referenced from a XfrmImplementation-
        Mapping:
        - Com_&lt;ComSignalName&gt; if no XfrmVariableDataPrototypeInstanceRef
          exists in the XfrmImplementationMapping and XfrmISignalRef is used in
          XfrmSignal and the data are sent/received using Com module.
        - Com_&lt;ComSignalGroupName&gt; if no XfrmVariableDataPrototypeIn-
          stanceRef exists in the XfrmImplementationMapping and XfrmISignal-
          Ref is used in XfrmSignal and the data are sent/received using Com module.
        - LdCom_&lt;LdComIpduName&gt; if no XfrmVariableDataPrototypeIn-
          stanceRef exists in the XfrmImplementationMapping and the data
          are sent/received using LdCom module.
        - &lt;ComponentName&gt;_&lt;p&gt;_&lt;o&gt; if XfrmVariableDataPrototypeIn-
          stanceRef exists.
        where
        - &lt;ComponentName&gt; is the shortName of the SwComponentPrototype which
          describes the context of XfrmVariableDataPrototypeInstanceRef.
        - &lt;p&gt; is the shortName of the PortPrototype which describes the context of
          XfrmVariableDataPrototypeInstanceRef. (This is comparable to p used
          in the RTE APIs.)
        - &lt;o&gt; is the shortName of the VariableDataPrototype referenced by Xfrm-
          VariableDataPrototypeInstanceRef. (This is comparable to o used in the
          RTE APIs.)
        - &lt;ComSignalName&gt; is the shortName of ComSignal which references the
          ISignal (using ComSystemTemplateSystemSignalRef that references
          ISignalToIPduMapping which references the ISignal) that references the
          DataTransformation.
        - &lt;ComSignalGroupName&gt; is the shortName of ComSignalGroup which ref-
          erences the ISignalGroup (using ComSystemTemplateSystemSignal-
          GroupRef that references ISignalToIPduMapping which references the
          ISignalGroup) that references the DataTransformation.
        - &lt;LdComIpduName&gt; is the shortName of LdComIPdu which references
          the ISignal (using LdComSystemTemplateSignalRef that references
          ISignalToIPduMapping which references the ISignal) that references the
          DataTransformation.
        (SRS_Xfrm_00002)
      </description>
      <comment>
        This requirement is informational only.
        ComXf.SWS_Xfrm_00062 is replaced by requirement ComXf.EB.transformerId.
        This is done because ComXf.SWS_Xfrm_00062 is handled differently as it is
        specified. Furthermore, the implementation of the requirement is optional
        (see the "should be" within the requirement).
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The function &lt;Mip&gt;_&lt;transformerId&gt; specified in SWS_Xfrm_00036
        shall exist for the first reference in the list of ordered references
        transformer from a DataTransformation to a TransformationTechnology if
        the DataTransformation is referenced by an ISignal in the role dataTransformation
        where the ISignal references a SystemSignal which is referenced by
        SenderReceiverToSignalMapping, a SenderRecRecordElementMapping or a
        SenderRecArrayElementMapping.(SRS_Xfrm_00002)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00008</srcid><srcstatus/><internalId>46</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00052</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        Each function that satisfies the name pattern &lt;Mip&gt;_&lt;transformerId&gt;
        (independent from the position in the transformer chain) shall implement its
        BswModuleEntry which has the same shortName and is referenced by
        XfrmTransformerBswModuleEntryRef.(SRS_Xfrm_00002)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_04001_MemoryPartitions</srcid><srcstatus/><internalId>317</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.Xfrm_MCG_E_00005</srcid><srcstatus/><internalId>209</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00056</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        If the transformer execution is optimized and one function transforms data
        (independent from the position in the transformer chain) for multiple ISignals,
        the &lt;sigName&gt; of the functions name pattern
        (&lt;Mip&gt;_&lt;transformerId&gt;) may be any shortName of any ISignal which
        is transformed by that BswModuleEntry.(SRS_Xfrm_00006)
      </description>
      <comment>
         This requirement is not applicable.
         For this requirement refinement, the ComBasedTransformer is used within the transformer
         chain, explicitely excluded by requirement ComXf.SWS_Xfrm_00054.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The function &lt;Mip&gt;_Inv_&lt;transformerId&gt; specified in SWS_Xfrm_00042
        shall exist for the first reference in the list of ordered references transformer
        from a DataTransformation to a TransformationTechnology if the DataTransformation
        is referenced by an ISignal in the role dataTransformation where the ISignal
        references a SystemSignal which is referenced by SenderReceiverToSignalMapping,
        a SenderRecRecordElementMapping or a SenderRecArrayElementMapping.(SRS_Xfrm_00002)
      </description>
      <comment/>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00011</srcid><srcstatus/><internalId>52</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00107</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The function &lt;Mip&gt;_Inv_&lt;transformerId&gt; specified in [SWS_Xfrm_00042] shall
        exist for the first reference in the list of ordered references transformer from a
        DataTransformation to a TransformationTechnology if the DataTransformation is referenced by
        an DataPrototypeMapping in the role firstToSecondDataTransformation.(SRS_Xfrm_00002)
      </description>
      <comment>Only applicable for serializing transformers</comment>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.Xfrm.FirstToSecondDataTransformation</srcid><srcstatus/><internalId>270</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00053</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        Each function that satisfies the name pattern &lt;Mip&gt;_Inv_&lt;transformerId&gt;
        (independent from the position in the transformer chain) shall implement its
        BswModuleEntry which has the same shortName and is referenced by
        XfmInvTransformationBswModuleEntryRef.(SRS_Xfrm_00002)
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_04001_MemoryPartitions</srcid><srcstatus/><internalId>317</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.Xfrm_MCG_E_00005</srcid><srcstatus/><internalId>209</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00058</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        Service name:         &lt;Mip&gt;_Init
        Syntax:               void &lt;Mip&gt;_Init(
                                          const &lt;Mip&gt;_ConfigType* config)
        Service ID[hex]:      0x01
        Sync/Async:           Synchronous
        Reentrancy:           Reentrant
        Parameters (in):      config        Pointer to the transformer's configuration data.
        Parameters
        (inout):              None
        Parameters (out):     None
        Return value:         None
        Description: This service initializes the transformer for the further processing.
        Available via: &lt;Mip&gt;.h
        (SRS_BSW_00407, SRS_BSW_00411)

        where
          - Mip is the Module Implementation Prefix of the transformer as defined in
            [SWS_BSW_00102]
      </description>
      <comment/>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00026</srcid><srcstatus/><internalId>55</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00059</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        Service name:         &lt;Mip&gt;_DeInit
        Syntax:               void &lt;Mip&gt;_DeInit(void)
        Service ID[hex]:      0x02
        Sync/Async:           Synchronous
        Reentrancy:           Reentrant
        Parameters (in):      None
        Parameters
        (inout):              None
        Parameters (out):     None
        Return value:         None
        Description: This service deinitializes the transformer.
        Available via: &lt;Mip&gt;.h
        (SRS_BSW_00407, SRS_BSW_00411)

        where
        - Mip is the Module Implementation Prefix of the transformer as defined in
          [SWS_BSW_00102]
      </description>
      <comment/>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00027</srcid><srcstatus/><internalId>56</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        Service name:         &lt;Mip&gt;_GetVersionInfo
        Syntax:               void &lt;Mip&gt;_GetVersionInfo(
                                        Std_VersionInfoType* VersionInfo)
        Service ID[hex]:      0x00
        Sync/Async:           Synchronous
        Reentrancy:           Reentrant
        Parameters (in):      None
        Parameters
        (inout):              None
        Parameters (out):     VersionInfo     Pointer to where to store the version information of
                                              this module.
        Return value:         None
        Description: This service returns the version information of the called transformer module.
        Available via: &lt;Mip&gt;.h
        (SRS_BSW_00407, SRS_BSW_00411)

        where
          - Mip is the Module Implementation Prefix of the transformer as defined in
          [SWS_BSW_00102]
      </description>
      <comment/>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00024</srcid><srcstatus/><internalId>57</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00070</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall support the Extended Production Errors
        shown in Table(SRS_BSW_00466, SRS_BSW_00469)
        -----------------------------------------------------------------------------
        Error Name:        | XFRM_E_MALFORMED_MESSAGE
        -----------------------------------------------------------------------------
        Short Description: | Transformer not able to produce output due to malformed
                             message content.
        -----------------------------------------------------------------------------
        Long Description:  | The data handed over to the transformer was malformed.
                             The transformer was not able to produce an output based on
                             the input because it was malformed.
        -----------------------------------------------------------------------------
        Detection Criteria:| Fail   The format of the transformer's input doesn't
                                    conform to the specification of the specific transformer.
                             PASS   The format of the transformer's input conforms to
                                    the specification of the specific transformer.
        -----------------------------------------------------------------------------
        Secondary Parameters: | N/A
        -----------------------------------------------------------------------------
        Time Required:     | N/A
        -----------------------------------------------------------------------------
        Monitor Frequency: | On every execution of transformer.
        -----------------------------------------------------------------------------
      </description>
      <comment>
        All extended production errors of the ComXf module are specified by this source.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.UnsupportedExtendedProductionErrors</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00071</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The Extended Production Error XFRM_E_MALFORMED_MESSAGE shall exist for every transformer
        which has XFRM_E_MALFORMED_MESSAGE set.(SRS_BSW_00466, SRS_BSW_00469)
      </description>
      <comment>
        All extended production errors of the ComXf module are specified by this source.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.UnsupportedExtendedProductionErrors</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>

    <specobject>
      <id>ComXf.ECUC_Xfrm_00013_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        Name         XfrmDevErrorDetect [ECUC_Xfrm_00013]
        Description  Switches the Development Error Detection and Notification ON or OFF.
                     true: detection and notification is enabled.
                     false: detection and notification is disabled.
        Multiplicity 1
        Type         EcucBooleanParamDef
        Default Value false
        Post-Build Variant false
        Value
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency scope: local
      </description>
      <comment>
        This is a configuration parameter requirement with some functional specification
        (partly checked by VSMD checker).
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01150_Err_Det_Uninit</srcid><srcstatus/><internalId>413</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.DEV_ERROR_DETECT</srcid><srcstatus/><internalId>124</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>

    <specobject>
      <id>ComXf.ECUC_Xfrm_00016_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        SWS Item          [ECUC_Xfrm_00016]
        Container Name    XfrmDemEventParameterRefs
        Parent Container  XfrmImplementationMapping
        Description       Container for the references to DemEventParameter elements which
                          shall be invoked using the API Dem_ReportErrorStatus API in case the
                          corresponding error occurs. The EventId is taken from the referenced
                          DemEventParameter's DemEventId value. The standardized errors are
                          provided in the container and can be extended by vendor specific error
                          references.
        Configuration Parameters
      </description>
      <comment>
        Extended production errors are not supported
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.UnsupportedExtendedProductionErrors</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>

    <specobject>
      <id>ComXf.ECUC_Xfrm_00019_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        Name         XfrmVersionInfoApi [ECUC_Xfrm_00019]
        Parent Container XfrmGeneral
        Description  Activate/Deactivate the version information API.
                     true: version information API activated
                     false: version information API deactivated
        Multiplicity 1
        Type         EcucBooleanParamDef
        Default Value false
        Post-Build Variant false
        Value
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency scope: local
      </description>
      <comment>
        This is a configuration parameter requirement with some functional specification
        (partly checked by VSMD checker).
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01150_Err_Det_Uninit</srcid><srcstatus/><internalId>413</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.VERSION_INFO_API</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_CONSTR_09094</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        If there exists a XfrmImplementationMapping which references
        an ISignal or ISignalGroup sig1 and contains the optional parameter XfrmVari-
        ableDataPrototypeInstanceRef, all XfrmImplementationMappings which
        reference the same ISignal or ISignalGroup sig1 shall contain a XfrmVariable-
        DataPrototypeInstanceRef.(SRS_Xfrm_00001)
      </description>
      <comment>
        This means, if XfrmVariableDataPrototypeInstanceRef is used for one transformer
        in a chain, it also has to be used for all other transformers in that chain.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_05001_MultipleRec</srcid><srcstatus/><internalId>318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_CONSTR_09095</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The XfrmVariableDataPrototypeInstanceRef shall refer to
        the instance of a VariableDataPrototype which belongs to a subclass of an Atom-
        icSwComponentType.(SRS_Xfrm_00001)
      </description>
      <comment>
        This means that XfrmVariableDataPrototypeInstanceRef shall referr to a port
        of a composition.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_05001_MultipleRec</srcid><srcstatus/><internalId>318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_CONSTR_09096</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        If no XfrmSignal exists and hence no ISignal or ISignalGroup is referenced,
        XfrmVariableDataPrototypeInstanceRef shall be used to reference the instance of the
        VariableDataPrototype which data shall be transformed.(SRS_Xfrm_00001)
      </description>
      <comment>
        This means that XfrmVariableDataPrototypeInstanceRef shall referr to a port
        of a composition.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.Xfrm.XfrmSignal</srcid><srcstatus/><internalId>271</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>

    <specobject>
      <id>ComXf.ECUC_Xfrm_00015_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        Name             XFRM_E_MALFORMED_MESSAGE [ECUC_Xfrm_00015]
        Parent Container XfrmDemEventParameterRefs
        Description      Reference to configured DEM event to report if malformed messages
                         were received by the transformer.
        Multiplicity     0..1
        Type             Symbolic name reference to DemEventParameter
        Post-Build Variant false
        Multiplicity
        Post-Build Variant false
        Value
        Multiplicity        Pre-compile time X All Variants
        Configuration Class Link time        no
                            Post-build time  no
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency  scope: local
                            dependency: Dem
      </description>
      <comment>
        Extended production errors are not supported
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.UnsupportedExtendedProductionErrors</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MemPartitioning.RAMbyTransformerId</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The global data of the transformer functions &amp;lt;Mip&amp;gt;_&amp;lt;transformerId&amp;gt;
        and &amp;lt;Mip&amp;gt;_Inv_&amp;lt;transformerId&amp;gt; shall be assigned to dedicated
        memory partitions by the PartitionId.
      </description>
      <comment>
        This requirement is not applicable. The ComXf module does not maintain own data in RAM.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MemPartitioning.PartitionHoldingInitStatus</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The initialization status variable of a transformer shall be assigned to
        the referenced PartitionId.
      </description>
      <rationale>
        This requirement is not applicable.
        The ComXf module does not maintain an init state variable.
        Instead it is checked whether the Com module is initialized via the Com_ComXf_GetStatus
        API function.
      </rationale>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MemPartitioning.InitByPartitionId</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Each partition shall have a separate Init-function to initialize all transformers of this
        partition. The Init function shall be entitled
        &amp;lt;Mip&amp;gt;[_&amp;lt;PartitionId&amp;gt;]_Init(). The PartitionId infix and the
        preceding underscore shall be ommited completely in case of the default partition.
      </description>
      <comment>
        This requirement is not applicable. Nothing is done in the Init API of the ComXf module,
        therefore no &amp;lt;Mip&amp;gt;[_&amp;lt;PartitionId&amp;gt;]_Init() is needed.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MemPartitioning.DeInitByPartitionId</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Each partition shall have a separate Init-function to de-initialize all transformers of
        this partition. The Init function shall be entitled
        &amp;lt;Mip&amp;gt;[_&amp;lt;PartitionId&amp;gt;]_DeInit(). The PartitionId infix and the
        preceding underscore shall be ommited completely in case of the default partition.
      </description>
      <comment>
        This requirement is not applicable. Nothing is done in the DeInit API of the ComXf module,
        therefore no &amp;lt;Mip&amp;gt;[_&amp;lt;PartitionId&amp;gt;]_DeInit() is needed.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MemPartitioning.MemorySectionByPartitionId</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        <para>
          Memory sections that hold the global data of a transformer and are mapped to
          specific partitions shall include the partitionID in their names in the form:
        </para>
        <itemizedlist>
          <listitem>
            {PREFIX}[_{partitionID}]_START_SEC_VAR_{INIT_POLICY}[_{safety}]_{ALIGNMENT} and
          </listitem>
          <listitem>
            {PREFIX}[_{partitionID}]_STOP_SEC_VAR_{INIT_POLICY}[_{safety}]_{ALIGNMENT} respectively.
          </listitem>
        </itemizedlist>
          In case of the default partition the _{partitionID} infix shall be omitted.
          The _{safety} tag is optional and indicates the maximum possible safety level, if no
          _{safety} tag is added the default QM level is assumed.
      </description>
      <comment>
        This requirement is not applicable. The ComXf module does not maintain own data,
        therefore no memory sections are needed.

        This requirement is based on SWS_MemMap_00022 from AUTOSAR_SWS_MemoryMapping.pdf.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>

    <specobject>
      <id>ComXf.EB.DEV_ERROR_DETECT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Macro Name: COMXF_DEV_ERROR_DETECT
        Description: Enables/Disables the Development Error Detection and Notification.
        Value Source: XfrmGeneral/XfrmDevErrorDetect
        Value Formula:
        true:  STD_ON
        false: STD_OFF
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.ECUC_Xfrm_00013_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>

    <specobject>
      <id>ComXf.EB.VERSION_INFO_API</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Macro Name: COMXF_VERSION_INFO_API
        Description: Activate/Deactivate the version information API.
        Value Source: XfrmGeneral/XfrmVersionInfoApi
        Value Formula:
        true:  STD_ON
        false: STD_OFF
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.ECUC_Xfrm_00019_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>


    <specobject>
      <id>ComXf.EB.MemPartitioning.XfrmOsApplicationRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name         XfrmOsApplicationRef
        Description  Reference to an Os application to which the BSW belongs.
                     Enabled: Map global variables of transformer or inverted transformer function
                     to dedicated memory partition.
                     Disabled: No dedicated memory partition assigned
        Multiplicity 0..1
        Type         Reference to [ OsApplication ]
        Post-Build Variant false
        Value
        Value Configuration Pre-compile time  X  All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency scope: local
        Position     /AUTOSAR/../XfrmImplementationMapping/XfrmImplementationMapping
      </description>
      <needscoverage>
        <!--
            src obj is covered indirectly by the tests, please refer to Memory Partitioning test.

            (Normally src is covered by linking to the configuration parameter in xdm schema file.
            However, if source coverage here is set to required it causes additional dependencies in the
            asc_E2ESEXfmgmt requirements tracing, which we want to avoid.)
            -->
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_04001_MemoryPartitions</srcid><srcstatus/><internalId>317</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MemPartitioning.UniquePartitionId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        A unique ID PartitionId shall exist for each individual Os application referenced by
        parameter XfrmOsApplicationRef.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_04001_MemoryPartitions</srcid><srcstatus/><internalId>317</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MemPartitioning.DefaultPartitionId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        All transformers with no Os application referenced by parameter XfrmOsApplicationRef
        (parameter is empty or disabled), shall be assigned to the default partition.
      </description>
      <comment>
        It shall be possible to configure a system composed of transformers assigned to
        specific partitions and to the default partition side by side.
        Rationale: This behaviour is facilitated for development only.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_04001_MemoryPartitions</srcid><srcstatus/><internalId>317</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_01101</srcid><srcstatus/><internalId>324</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MemPartitioning.FileName</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The files &amp;lt;Mip&amp;gt;_&amp;lt;PartitionId&amp;gt;_PartitionApi.c/.h shall hold the
        global data of the transformer functions &amp;lt;Mip&amp;gt;_&amp;lt;transformerId&amp;gt; and
        &amp;lt;Mip&amp;gt;_Inv_&amp;lt;transformerId&amp;gt; for a PartitionId.
      </description>
      <comment>
        In case the partitioning is enabled the names of the following
        generated files shall contain the name of the matching partition:
          - ComXf[_PartitionNameInfix]_PartitionApi.h,
          - ComXf[_PartitionNameInfix]_PartitionApi.c.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_04001_MemoryPartitions</srcid><srcstatus/><internalId>317</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MemPartitioning.DefaultFileName</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The files &amp;lt;Mip&amp;gt;_PartitionApi.c/.h shall hold the global data
        of the transformer functions &amp;lt;Mip&amp;gt;_&amp;lt;transformerId&amp;gt; and
        &amp;lt;Mip&amp;gt;_Inv_&amp;lt;transformerId&amp;gt; for the default partition.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_04001_MemoryPartitions</srcid><srcstatus/><internalId>317</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>

    <specobject>
      <id>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Description  Macro Name: .&lt;MIP&gt;_XFRMBUFFERLENGTHTYPE_ISUINT32
                     Description: Enables usage of uint32 type for API parameter bufferLength
                     Value Source: XfrmGeneral/XfrmBufferLengthType
                     Value Formula:
                     UINT32: STD_ON
                     UINT16: STD_OFF
      </description>
      <furtherinfo>
        Justifying rule: WRN.tsc.needscoverage.count violation.
        This tcs is covered by more than 10 EB tcs.
      </furtherinfo>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_03001_DataType</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03020_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03030_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03040_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03050_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03080_Serialize_StructOfOneElement_Safe</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03110_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03120_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03130_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03140_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03150_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03180_Deserialize_StructOfOneElement_Safe</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_05001_PackingByteOrder_Safe</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_05002_PackingByteOrder_Opaque_Safe</srcid><srcstatus/><internalId>349</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_05102_UnPackingByteOrder_Opaque_Safe</srcid><srcstatus/><internalId>350</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>

    <specobject>
      <id>ComXf.EB.OutermostImplementationDataType</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The transformer shall use the ImplementationDataType defined on the port of the outermost
        SwComponentType.
      </description>
      <comment>
        A SwComponentType is referred to as outermost SwComponentType if at the SwConnector to its
        inner SwComponentType a PortInterfaceMapping exists. If no PortInterfaceMapping exists at
        any of the SwConnectors then the ImplementationDataType of the original SwComponentType
        shall be selected. In this context "original SwComponentType" defines the SwComponentType
        from which the search of the outermost SwComponentType starts. This process is valid for
        client/server and sender/receiver communications.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_06001_CompSwCmpTypeSimpleStruct</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_07001_CompSwCmpTypeSimpleStruct_Safe</srcid><srcstatus/><internalId>320</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_91001.Rte_Cs_TransactionHandleType</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall use the type Rte_Cs_TransactionHandleType defined in file Rte.h
        of module Rte.
      </description>
      <comment>
        This requirement is informational only. Refinement of requirement SWS_Xfrm_91001.
        The COM based transformer does not make use of this type.
      </comment>
      <releases>
        <release>AUTOSAR R2-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_91001</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_91001.Std_ExtractProtocolHeaderFieldsType</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall use the type Std_ExtractProtocolHeaderFieldsType defined in
        file Std_Types.h of module Std.
      </description>
      <comment>
        This requirement is informational only. Refinement of requirement SWS_Xfrm_91001.
        The COM based transformer does not make use of this type.
      </comment>
      <releases>
        <release>AUTOSAR R2-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_91001</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_91001.Std_MessageResultType</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall use the type Std_MessageResultType defined in file Std_Types.h
        of module Std.
      </description>
      <comment>
        This requirement is informational only. Refinement of requirement SWS_Xfrm_91001.
        The COM based transformer does not make use of this type.
      </comment>
      <releases>
        <release>AUTOSAR R2-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_91001</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_91001.Std_MessageTypeType</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall use the type Std_MessageTypeType defined in file
        Std_Types.h of module Std.
      </description>
      <comment>
        This requirement is informational only. Refinement of requirement SWS_Xfrm_91001.
        The COM based transformer does not make use of this type.
      </comment>
      <releases>
        <release>AUTOSAR R2-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_91001</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_91001.Std_ReturnType</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall use the type Std_ReturnType defined in file Std_Types.h of module Std.
      </description>
      <comment>
        This requirement is informational only. Refinement of requirement SWS_Xfrm_91001.
        The COM based transformer uses uint8 as a return type.
      </comment>
      <releases>
        <release>AUTOSAR R2-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_91001</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_91001.Std_TransformerForwardCode</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall use the type Std_TransformerForwardCode defined in file Std_Types.h
        of module Std.
      </description>
      <comment>
        This requirement is informational only. Refinement of requirement SWS_Xfrm_91001.
      </comment>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_91001</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_91001.Std_VersionInfoType</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        A transformer shall use the type Std_VersionInfoType defined in file
        Std_Types.h of module Std.
      </description>
      <comment>
        Refinement of requirement SWS_Xfrm_91001.
      </comment>
      <releases>
        <release>AUTOSAR R2-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00024</srcid><srcstatus/><internalId>57</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_91001</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_91002</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        Service name:       &lt;Mip&gt;_ExtractProtocolHeaderFields
        Syntax:             Std_ReturnType &lt;Mip&gt;_ExtractProtocolHeaderFields(
                                        const uint8 *buffer,
                                        uint32 bufferLength,
                                        Std_MessageTypeType *messageType,
                                        Std_MessageResultType *messageResult
                                        )
        Service ID[hex]:    0x05
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant
        Parameters (in):    buffer          Buffer allocated by the RTE, where the transformed data
                                            has to be stored by the transformer
                            bufferLength    Length of the buffer
        Parameters
        (inout):            None
        Parameters (out):   messageType     Canonical representation of the message type
                                            (extracted from the transformers protocol header).
                            messageResult   Canonical representation of the message result type
                                            (extracted from the transformers protocol header).
        Return value:       Std_ReturnType  E_OK: Relevant protocol header fields have been
                                            extracted successfully.
                                            E_NOT_OK: An error occurred during parsing of the
                                            protocol header.
        Description:        Function to extract the relevant protocol header fields of the message
                            and the type of the message result of a transformer.
                            - At the time being, this is limited to the types used for C/S
                            communication (i.e., REQUEST and RESPONSE and OK and ERROR).
        Available via:      &lt;Mip&gt;.h
        (SRS_Xfrm_00002)
      </description>
      <comment>This requirement is not applicable for ComXf, ComXf only supports S/R communication.
      </comment>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00112</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The function &lt;Mip&gt;_ExtractProtocolHeaderFields specified in [SWS_Xfrm_91002] shall
        exist in case the respective transformer processes relevant protocol header fields related
        to the type of a message and the type of the message result. This function shall extract
        this information and provide it in a canonical representation via its output arguments.
        (SRS_Xfrm_00002)
      </description>
      <comment>This requirement is not applicable for ComXf, ComXf only supports S/R communication.
      </comment>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00113</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The function &lt;Mip&gt;_ExtractProtocolHeaderFields specified in [SWS_Xfrm_91002]
        shall return E_NOT_OK in case of an error (e.g., parsing error) during extraction.
        Neither messageType nor messageResult shall be modified in this case.(SRS_Xfrm_00002)
      </description>
      <comment>This requirement is not applicable for ComXf, ComXf only supports S/R communication.
      </comment>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00114</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        The function &lt;Mip&gt;_ExtractProtocolHeaderFields specified in [SWS_Xfrm_91002]
        shall return E_OK otherwise.(SRS_Xfrm_00002)
      </description>
      <comment>This requirement is not applicable for ComXf, ComXf only supports S/R communication.
      </comment>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>

    <specobject>
      <id>ComXf.SWS_Xfrm_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_TransformerGeneral.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
       The function &lt;Mip&gt;_&lt;transformerId&gt; specified in
       [SWS_Xfrm_00036] shall exist for the first reference in the list of ordered references
       transformer from a DataTransformation to a TransformationTechnology
       if the DataTransformation is referenced by an DataPrototypeMapping in the
       role firstToSecondDataTransformation.(SRS_Xfrm_00002)
      </description>
      <comment>Only applicable for serializing transformers</comment>
      <releases>
       <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
       <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.ComXf.Xfrm.FirstToSecondDataTransformation</srcid><srcstatus/><internalId>270</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MemPartitioning.SafetyPartition</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        <para>
          XfrmTransformerBswModuleEntry or XfrmInvTransformerBswModuleEntry is considered
          a safety transformer if following conditions are fulfilled:
        </para>
        <itemizedlist>
          <listitem>
            The Xfrm configuration parameter XfrmIsSafetyTransformer is disabled and a safety
            transformer is configured within the transformer chain of the referenced
            ISignal/ISignalGroup. Furthermore the parameter
            EndToEndTransformationComSpecProps.disableEndToEndCheck is set to false.
            Then the XfrmTransformerBswModuleEntry or XfrmInvTransformerBswModuleEntry shall
            be within a safety related partition.
          </listitem>
          <listitem>
            The Xfrm configuration parameter XfrmIsSafetyTransformer is enabled and set to true.
            Then the previous conditions (safety transformer in chain and value of
            EndToEndTransformationComSpecProps.disableEndToEndCheck) are irrelevant.
          </listitem>
        </itemizedlist>
        In all other cases the XfrmTransformerBswModuleEntry or XfrmInvTransformerBswModuleEntry
        shall be within a non safety related partition.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.GeneratedFiles.SafeInfix</srcid><srcstatus/><internalId>173</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_03001_DataType</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_05001_MultipleRec</srcid><srcstatus/><internalId>318</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_09001_DataType_Safe</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_01102</srcid><srcstatus/><internalId>325</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_constr_09094</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the number of XfrmImplementationMappings which reference the same ISignal or ISignalGroup
        is not the same as the number of XfrmImplementationMappings which reference the same
        VariableDataPrototype then TRUE
      </description>
      <comment>
        There is at least one further transformer which references the same ISignal or ISignalGroup
        as this XfrmImplementationMapping, but has not configured an
        XfrmVariableDataPrototypeInstanceRef.
      </comment>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_474</srcid><srcstatus/><internalId>285</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01014_TwoTransformersWithSameSignalGroupRefButNoXfrmVariableDataPrototypeInstanceRef</srcid><srcstatus/><internalId>364</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_E_00001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the name of the referenced XfrmImplementationMapping is different than the name of the
        referenced  BswModuleEntry then TRUE
      </description>
      <comment>
        The name of the XfrmImplementationMapping has to be identical to the short name of
        the enabled BswModuleEntryRef.
      </comment>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_348</srcid><srcstatus/><internalId>283</internalId></linkedfrom><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_378</srcid><srcstatus/><internalId>284</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01001_WrongTransformerBswmRef</srcid><srcstatus/><internalId>351</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_GEN_01002_WrongInvTransformerBswmRef</srcid><srcstatus/><internalId>352</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_E_00002</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the name of the XfrmImplementationMapping is not a valid C identifier
        then FALSE
      </description>
      <comment>
        The short name of the XfrmImplementationMapping must be a valid C programming
        language function name.
      </comment>
      <needscoverage>
       <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_213</srcid><srcstatus/><internalId>281</internalId></linkedfrom></coveredby></needscov>
       <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01007_WrongContainerName</srcid><srcstatus/><internalId>357</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_E_00003</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the XfrmTransformerBswModuleEntryRef parameter exist in the XfrmImplementationMapping AND
        name of the mapping does not start with the ComXf_ prefix
        then TRUE
      </description>
      <comment>
        The name of the XfrmImplementationMapping of a serializing transformer must
        start with the ComXf_ prefix.
      </comment>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_201</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01004_WrongSerializerPrefix</srcid><srcstatus/><internalId>354</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_E_00004</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the XfrmInvTransformerBswModuleEntryRef parameter exist in the XfrmImplementationMapping
        AND the mappings name does not start with the ComXf_Inv_ prefix then TRUE
      </description>
      <comment>
        The name of the XfrmImplementationMapping of a deserializing transformer must start
        with the ComXf_Inv_ prefix.
      </comment>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_205</srcid><srcstatus/><internalId>279</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01005_WrongDeserializerPrefix</srcid><srcstatus/><internalId>355</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_GEN_01006_WrongDeserializerInfix</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_E_00005</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the number of enabled XfrmTransformerBswModuleEntryRef AND
        XfrmInvTransformerBswModuleEntryRef nodes in an XfrmImplementationMapping is not exactly one
        then TRUE
      </description>
      <comment>
        Exactly one of the parameters must be enabled, either XfrmInvTransformerBswModuleEntryRef
        or XfrmTransformerBswModuleEntryRef.
      </comment>
      <needscoverage>
       <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_209</srcid><srcstatus/><internalId>280</internalId></linkedfrom></coveredby></needscov>
       <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01003_NoEnabledBswmRef</srcid><srcstatus/><internalId>353</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_E_00006</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the referenced VariableDataPrototype is valid AND it references a dataElement
        then FALSE
      </description>
      <comment>
        The VariableDataPrototype parameter of the XfrmImplementationMapping container must
        reference a valid VariableDataPrototype from the system mode
      </comment>
      <needscoverage>
       <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_510</srcid><srcstatus/><internalId>288</internalId></linkedfrom></coveredby></needscov>
       <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01011_WrongDataElementRef</srcid><srcstatus/><internalId>361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_E_00007</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the number of XfrmImplementationMappings which reference the same VariableDataPrototype,
        SwComponentPrototype and PortPrototype is greater than one
        then TRUE
      </description>
      <comment>
        Multiple XfrmImplementationMapping containers of the inverse transformers must not use
        the same combination of the references to VariableDataPrototype, SwComponentPrototype and
        PortPrototype.
      </comment>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_480</srcid><srcstatus/><internalId>286</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01013_IdenticalXfrmVariableDataPrototypeInstanceRefUsedByTwoInvTransformers</srcid><srcstatus/><internalId>363</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_E_00008</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If there exist exactly 2 context references in the XfrmVariableDataPrototypeInstanceRef AND
        the index of the context reference is equal to 1 AND
        the context reference points to an invalid node OR
        the context reference points to a node which is not a of SwComponentPrototype type
        then TRUE
      </description>
      <comment>
        The first context reference of the XfrmVariableDataPrototypeInstanceRef container must
        refer to a valid SwComponentPrototype.
      </comment>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_542</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01009_WrongSwComponentPrototypeRef</srcid><srcstatus/><internalId>359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_E_00009</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If there exist exactly 2 context references in the XfrmVariableDataPrototypeInstanceRef AND
        the index of the context reference is equal to 2 AND
        the context reference points to an invalid node OR
        the context reference points to a node which is not a of PortPrototype type
        then TRUE
      </description>
      <comment>
        The second context reference of the XfrmVariableDataPrototypeInstanceRef container must
        refer to a valid PortPrototype.
      </comment>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_546</srcid><srcstatus/><internalId>290</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01010_WrongPortPrototypeRef</srcid><srcstatus/><internalId>360</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_E_00010</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If XfrmImplementationMapping has configured the XfrmVariableDataPrototypeInstanceRef AND
        XfrmTransformerBswModuleEntryRef parameter exists
        then TRUE
      </description>
      <comment>
        The configuration of multiple receivers shall be allowed only for inverse transformers.
      </comment>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_488</srcid><srcstatus/><internalId>287</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01008_SameISignalGroupRefForMultipleSerializers</srcid><srcstatus/><internalId>358</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_XDM_E_00011</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the number of configured value of the XfrmBufferLengthType is not equal to the
        number of transformer modules
        then FALSE
      </description>
      <comment>
        The XfrmBufferLengthType parameter value of the ComXf module must be configured
        with the identical value as in other transformer modules.
      </comment>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_121</srcid><srcstatus/><internalId>277</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_01012_WrongXfrmBufferLengthType</srcid><srcstatus/><internalId>362</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
     <id>ComXf.SYST.SenderRecRecordElementMapping</id>
      <status>approved</status>
      <source>AUTOSAR_TPS_SystemTemplate.pdf R22-11</source>
      <version>1</version>
      <description>
        SenderRecRecordElementMapping:
        Mapping of a primitive record element to a SystemSignal. If the
        VariableDataPrototype that is referenced by SenderReceiverToSignalGroupMapping
        is typed by an ApplicationDataType the reference applicationRecordElement shall be
        used. If the VariableDataPrototype is typed by the ImplementationDataType the
        reference implementationRecordElement shall be used. Either the
        implementationRecordElement or applicationRecordElement reference shall be used.
      </description>
      <releases>
        <release>AUTOSAR R22-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00011</srcid><srcstatus/><internalId>216</internalId></linkedfrom></coveredby></needscov>
        <!-- tests distinguish if ApplicationDataType or ImplementationDataType are applied -->
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_03001_DataType</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_09001_DataType_Safe</srcid><srcstatus/><internalId>322</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>

    <specobject>
     <id>ComXf.SYST.ISignalTriggeringReferencesISignalPort</id>
      <status>approved</status>
      <source>AUTOSAR_TPS_SystemTemplate.pdf R22-11</source>
      <version>1</version>
      <description>
        ComXf shall only (de-)serialize group signals which reference from ISignalTriggering to
        ISignalPort. Only group signals which reference an ISignalPort are received/send by
        Application or Com Signal Gateway.
      </description>
      <comment>
        Based on requirements TPS_SYST_01142 and TPS_SYST_02106.
      </comment>
      <releases>
        <release>AUTOSAR R22-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00009</srcid><srcstatus/><internalId>211</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_08001_ASCCOMXF442</srcid><srcstatus/><internalId>321</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>

    <specobject>
     <id>ComXf.constr_3514</id>
      <status>approved</status>
      <source>AUTOSAR_TPS_SystemTemplate.pdf R22-11</source>
      <version>1</version>
      <description>
        No two ISignalToIPduMappings shall reference the identical ISignal
        No two ISignalToIPduMappings shall reference the identical ISignal in the role iSignal in
        the scope of one System.
      </description>
      <comment>
        An ISignal shall be referenced only by one ISignalToIPduMapping via the
        ISignalRef reference.
      </comment>
      <releases>
        <release>AUTOSAR R22-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.ComXf_MCG_W_00016</srcid><srcstatus/><internalId>221</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>

    <specobject>
     <id>ComXf.TPS_SYST_02278</id>
      <status>approved</status>
      <source>AUTOSAR_TPS_SystemTemplate.pdf R22-11</source>
      <version>1</version>
      <description>
        Existence of SystemSignals in a SystemSignalGroup that are not referenced by a
        SenderRecCompositeTypeMapping.

        There are use cases where not all SystemSignals of a SystemSignalGroup are referenced by
        a SenderRecRecordElementMapping or a SenderRecArrayElementMapping.
        One example is the ComBased Transformer use case where the SystemSignalGroup contains
        SystemSignals that are added by additional Transformers like the E2E Transformer
        (e.g. CRC and Alive Counter), but only the application data element signals are mapped by
        the SenderReceiverToSignalGroupMapping. One additional use case is the partial mapping of
        composite data types where only a subset of elements of the composite data type are mapped
        to SystemSignals of the SystemSignalGroup.
      </description>
      <comment>
        The COM based transformer shall be able to serialize a sub-set of elements of a composite
        data type.

        No requirement or constraint exists for such use case in AUTOSAR 4.2.1, but it is listed as a valid
        one. See second paragraph under Figure 5.10: "Mapping example for nested composite data types".

        If a VariableDataPrototype with a composite data type in a PPortPrototype is mapped
        to a SystemSignalGroup then it is allowed to map only a subset of elements of the composite data type that
        are primitives to separate SystemSignals of the SystemSignalGroup. This means
        that it is possible to transmit a subset of a composite data element in a ISignalGroup.
      </comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
        <release>AUTOSAR CP R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.PartialSignalMappingTx</srcid><srcstatus/><internalId>165</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.PartialSignalMappingRx</srcid><srcstatus/><internalId>166</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

  <specobject>
    <id>ComXf.EB.PublishedInformation</id>
    <status>approved</status>
    <source>EB</source>
    <version>1</version>
    <description>
      The standardized common published parameters as required by BSW00402 in the General Requirements on Basic Software Modules [3]
      shall be published within the header file of this module and need to be provided in the BSW Module Description.
      The according module abbreviation can be found in the List of Basic Software Modules [10].
    </description>
    <!--
      TODO:
      The ComXf module's SWS misses a requirement about the published information or a hint
      about it at all. Since the SomeIpXf is not available by the Component of a Cluster
      by Bugzilla, the issue is left open.
      The requirement should be updated if known how to handle it by SWS.
    -->
    <needscoverage>
      <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_01005_PublishedInformation</srcid><srcstatus/><internalId>405</internalId></linkedfrom></coveredby></needscov>
    <containerCovstatus>covered</containerCovstatus></needscoverage>
    <providescoverage>
      <provcov>
        <linksto>ComXf.top.003</linksto>
        <dstversion>1</dstversion>
      <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
    </providescoverage>
  <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>

    <specobject>
      <id>ComXf.EB.UnAlignedSignalGroupsTx</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       The COM Based Transformer shall support unaligned signal groups for serialization.
       That is, the signal group can start or end at non-byte boundaries.
       If signals or a group signals of a different signal group are mapped to the
       remaining bits at the beginning or at the end of an unaligned signal group,
       then the latest value / initial value (ComSignalInitValue)
       of these signals or a group signals shall be taken for the
       initialization of these bits.
       Unused bits / areas shall be initialized with the value specified
       in parameter ComTxIPduUnusedAreasDefault of the Com module.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_IMP_01001_StOfAllBasic_Unaligned</srcid><srcstatus/><internalId>390</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_IMP_01002_NestedArrayOfStruct_Unaligned</srcid><srcstatus/><internalId>391</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>

    <specobject>
      <id>ComXf.EB.UnAlignedSignalGroupsRx</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       The COM Based Transformer shall support unaligned signal groups for de-serialization.
       That is, the signal group can start or end at non-byte boundaries.
      </description>
      <verifycrit>No error or warning shall be issued when such a signal is configured.</verifycrit>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_IMP_01010_StOfAllBasic_Unaligned</srcid><srcstatus/><internalId>392</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_IMP_01011_NestedArrayOfStruct_Unaligned</srcid><srcstatus/><internalId>393</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>

    <specobject>
      <id>ComXf.EB.PartialSignalMappingTx</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       The COM Based Transformer shall support signal groups where only a
       a sub-set of group signals are mapped to the IPdu.
       Not mapped group signals shall be initialized with the configured initial value
       (ComSignalInitValue).
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_IMP_02001_StOfAllBasic_Unaligned</srcid><srcstatus/><internalId>394</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_IMP_02002_NestedArrayOfStruct_Unaligned</srcid><srcstatus/><internalId>395</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>ComXf.TPS_SYST_02278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>

    <specobject>
      <id>ComXf.EB.PartialSignalMappingRx</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       The COM Based Transformer shall support signal groups where only a
       a sub-set of group signals are mapped to the IPdu.
      </description>
      <verifycrit>No error or warning shall be issued when such a signal is configured.</verifycrit>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_IMP_02010_StOfAllBasic_Unaligned</srcid><srcstatus/><internalId>396</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_IMP_02011_NestedArrayOfStruct_Unaligned</srcid><srcstatus/><internalId>397</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>ComXf.TPS_SYST_02278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>

    <specobject>
      <id>ComXf.EB.NonConsecutiveMappingTx</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       The COM Based Transformer shall support signal groups where group
       signals need not be mapped consecutively to the IPdu.
       Unused bits / areas shall be initialized with the value specified
       in parameter ComTxIPduUnusedAreasDefault.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_IMP_01001_StOfAllBasic_Unaligned</srcid><srcstatus/><internalId>390</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_IMP_01002_NestedArrayOfStruct_Unaligned</srcid><srcstatus/><internalId>391</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>

    <specobject>
      <id>ComXf.EB.NonConsecutiveMappingRx</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       The COM Based Transformer shall support signal groups where group
       signals need not be mapped consecutively to the IPdu.
      </description>
      <verifycrit>No error or warning shall be issued when such a signal is configured.</verifycrit>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_IMP_01010_StOfAllBasic_Unaligned</srcid><srcstatus/><internalId>392</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MissingSignalMappings</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       The COM Based Transformer shall ignore the generation
       of XfrmImplementationMappings
       where the referenced XfrmISignalGroupRef is not
       mapped to a Port / DataElement in the System.
      </description>
      <verifycrit>Generation is continued for other XfrmImplementationMappings.</verifycrit>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_02001_NoMapping</srcid><srcstatus/><internalId>315</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>

    <specobject>
       <id>ComXf.EB.transformerId</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
       The name pattern transformerId should be used for the APIs which belong to the
       BswModuleEntry referenced from a XfrmImplementationMapping by the
       XfrmTransformerBswModuleEntryRef or XfrmInvTransformerBswModuleEntryRef.
       This shall be applied for the &lt;Mip&gt; APIs:
       &lt;Mip&gt;_&lt;transformerId&gt;
       &lt;Mip&gt;_Inv_&lt;transformerId&gt;
      </description>
      <comment>
        replaces requirement ComXf.SWS_Xfrm_00062
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00007</srcid><srcstatus/><internalId>43</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00010</srcid><srcstatus/><internalId>48</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_04001_MemoryPartitions</srcid><srcstatus/><internalId>317</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>

    <specobject>
      <id>ComXf.EB.StaticFiles</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf module shall be built of the following static header files:
          - ComXf.h (main include file for the COM Based transformer),
          - ComXf_Api_Stc.h,
          - ComXf_Int.h,
          - ComXf_Version.h.

        The ComXf module shall be built of the following static source files:
          - ComXf.c.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_02002_Files</srcid><srcstatus/><internalId>327</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>

    <specobject>
      <id>ComXf.EB.GeneratedFiles</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The ComXf module shall be built of the following generated header files:
          - ComXf_PartitionApi.h,
          - ComXf_Api.h,
          - ComXf_Cfg.h.

        The ComXf module shall be built of the following generated source files:
          - ComXf_PartitionApi.c.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_02002_Files</srcid><srcstatus/><internalId>327</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.GeneratedFiles.SafeInfix</srcid><srcstatus/><internalId>173</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>ComXf.top.017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>

    <specobject>
      <id>ComXf.EB.GeneratedFiles.SafeInfix</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case when the configured transformer chain for the memory partition is
        safe the following generated required files of the partition shall contain the
        _S infix:
          - ComXf_S_PartitionApi.h,
          - ComXf_S_PartitionApi.c.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_04001_MemoryPartitions</srcid><srcstatus/><internalId>317</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_09001_DataType_Safe</srcid><srcstatus/><internalId>322</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.GeneratedFiles</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.SafetyPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>

    <specobject>
      <id>ComXf.EB.IncludeFileStructure</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        ComXf shall implement the following include structure:

        - ComXf.h shall include: ComXf_Api.h and ComXf_Api_Stc.h
        - ComXf_Api.h shall include: Std_Types.h, TransformerTypes.h, SchM_ComXfType.h and MemMap.h
        - ComXf_Api_Stc.h shall include: ComXf_Cfg.h, ComXf_Version.h and MemMap.h
        - ComXf_Cfg.h shall include: Std_Types.h

        - ComXf.c shall include: ComXf_Int.h and MemMap.h
        - ComXf_Int.h shall include: Com_ComXf.h, TransformerTypes.h, ComXf_Cfg.h, ComXf_Api_Stc.h,
                                     ComXf_Trace.h, Det.h and MemMap.h
        - ComXf_Api.c shall include: ComXf_Api.h, ComXf_Int.h and MemMap.h

        - ComXf_Trace.h shall contain no includes.
        - ComXf_Version.h shall contain no includes.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_02001_Includes</srcid><srcstatus/><internalId>326</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00001</srcid><srcstatus/><internalId>12</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>

    <specobject>
      <id>ComXf.EB.MCG.UnitTests</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There may be unit tests for the MCG, but these are not required.
      </description>
      <furtherinfo>
        Justifying rule: WRN.tsc.needscoverage.count violation.
        This swurs is covered by more than 10 EB swurs.
      </furtherinfo>
      <comment>
        Rationale:
        Unit tests are helpful with implementing software; however, since they test only
        small units, they cannot guarantee the correctness of the tested code in the greater
        context.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.BufferPropertiesTest.test_bufferPropertiesWithTheSameReferenceShallBeEqual</srcid><srcstatus/><internalId>292</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.BufferPropertiesTest.test_bufferPropertiesWithDifferentClassShallNotBeEqual</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.BufferPropertiesTest.test_nonNullBufferPropertyComparedToNullObjectShallNotBeEqual</srcid><srcstatus/><internalId>294</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.BufferPropertiesTest.test_bufferPropertiesConstructedFromTheSameSignalPropertiesShallBeEqual</srcid><srcstatus/><internalId>295</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.BufferPropertiesTest.test_bufferPropertiesWithDifferentEndBitPositionShallNotBeEqual</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.GeneratorPartitionHandlerTest.testIsSafePartitionShallReturnFalseForNonExistentPartition</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.GeneratorPartitionHandlerTest.testIsSafePartitionShallReturnFalseIfNoSafeTransformatonFunctionsAreInThePartition</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.GeneratorPartitionHandlerTest.testIsSafePartitionShallReturnTrueIfAtLeastOneSafeTransformationFunctionIsInThePartition</srcid><srcstatus/><internalId>299</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testGetBitSizeShallReturnTheSameValueThatIsSetInSignalProperties</srcid><srcstatus/><internalId>300</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testGetOffsetShallReturnTheSameValueThatIsSetInSignalProperties</srcid><srcstatus/><internalId>301</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallThrowAnExceptionIfSignalOffsetHasAnInvalidValueButSignalSizeIsValid</srcid><srcstatus/><internalId>302</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallThrowAnExceptionIfSignalSizeHasAnInvalidValueButSignalOffsetIsValid</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallNotThrowAnExceptionIfBothSignalSizeAndOffsetAreInvalid</srcid><srcstatus/><internalId>304</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallThrowAnExceptionIfSignalSizeIsInvalidButEndiannessNotNull</srcid><srcstatus/><internalId>305</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallThrowAnExceptionIfSignalSizeIsValidButEndiannessIsNull</srcid><srcstatus/><internalId>306</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallThrowAnExceptionIfPrimitiveTypeInputParameterIsNull</srcid><srcstatus/><internalId>307</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.RootDataElementTest.test01_Equals</srcid><srcstatus/><internalId>308</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.RootDataElementTest.test02_HashCode</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.TransformationFunctionTest.testEquals</srcid><srcstatus/><internalId>310</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.TransformationFunctionTest.testHashCode</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.TransformationFunctionTest.testCompareTo</srcid><srcstatus/><internalId>312</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.comxf.test.generator.intermediate.factory.DataTypeMappingTest.test_mapToOutermostDatatypeElement</srcid><srcstatus/><internalId>313</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>

    <specobject>
      <id>ComXf.EB.SafetySer</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a basic software entry of the ComXf module references a transformer which is
        part of a transformer chain that includes the E2EXf transformer (safety related), the basic
        software entry of the ComXf module shall use the pack macros from the E2E library for
        serialization of the composite data type.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_01102</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03020_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03030_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03040_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03050_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>334</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>

    <specobject>
      <id>ComXf.EB.SafetyDeser</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a basic software entry of the ComXf module references a transformer which is
        part of a transformer chain that includes the E2EXf transformer (safety related), the basic
        software entry of the ComXf module shall use the unpack macros from the E2E library for
        de-serialization of the composite data type.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_01102</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03110_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03120_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03130_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03140_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03150_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>342</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>

    <specobject>
      <id>ComXf.EB.SafetyDet</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a basic software entry of the ComXf module references a transformer which is
        part of a transformer chain that includes the E2EXf transformer (safety related), the basic
        software entry of the ComXf module shall not implement development errors.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03060_InputParamSer</srcid><srcstatus/><internalId>335</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03170_InputParamDeser</srcid><srcstatus/><internalId>344</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>

    <specobject>
      <id>ComXf.EB.SafetyPrecon</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       If a basic software entry of the ComXf module references a transformer which is
       part of a transformer chain that includes the E2EXf transformer (safety related), the basic
       software entry of the ComXf module shall provide semantically the same functionality
       of precondition checks as it is specified within the ComXf module for the serializing and
       de-serializing functions but without development errors.
       Instead of development errors the return value shall be set to E_SER_GENERIC_ERROR.
      </description>
      <needscoverage>
         <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03060_InputParamSer</srcid><srcstatus/><internalId>335</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
         <provcov>
            <linksto>ComXf.top.002</linksto>
            <dstversion>1</dstversion>
         <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>

    <specobject>
      <id>ComXf.EB.SafetyInit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       If a basic software entry of the ComXf module references a transformer which is
       part of a transformer chain that includes the E2EXf transformer (safety related), the basic
       software entry of the ComXf module shall provide functionality for buffer initialization/preparation
       of the Pdu initial value.
      </description>
      <needscoverage>
         <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03070_Safe_Init</srcid><srcstatus/><internalId>336</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
         <provcov>
            <linksto>ComXf.top.004</linksto>
            <dstversion>1</dstversion>
         <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>

    <specobject>
      <id>ComXf.EB.SafetyXfrmBufferLengthType</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       If a basic software entry of the ComXf module references a transformer which is
       part of a transformer chain that includes the E2EXf transformer (safety related), the basic
       software entry of the ComXf module shall be able to instrument the bufferLength type of
        the precondition check functionality (ether with uint16 or uint32) according to the Xfrm configuration
        parameter XfrmBufferLengthType from the ComXf module.
      </description>
      <needscoverage>
         <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03060_InputParamSer</srcid><srcstatus/><internalId>335</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03070_Safe_Init</srcid><srcstatus/><internalId>336</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
         <provcov>
            <linksto>ComXf.top.004</linksto>
            <dstversion>1</dstversion>
         <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Safety_RangeChecks</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a basic software entry of the ComXf module references a transformer which is
        part of a transformer chain that includes the E2EXf transformer (safety related), the basic
        software entry of the ComXf module shall implement range checks on each group signal
        during serialization of the corresponding data element member.
        If the value of the data element member cannot be represented by the mapped group signal in
        relation to the configured bit-length and signal type, the ComXf module shall return the
        error code E2E_RANGECHK_INVALID (0xFFU).
        The range checks shall not apply for float and byte array (opaque data type UINT8_N) signal types.
      </description>
      <comment>
        64bit range checks are currently not supported.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03030_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_IMP_03001_StOfAllBasic_Unaligned_Safe</srcid><srcstatus/><internalId>398</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Safety_RangeChecks_SerBehavior</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Except from the error E2E_RANGECHK_INVALID (0xFFU) caused by range checks the serialization
        shall still be done correctly.
        This behavior ensures that no data corruption occurs out of the buffer boundary.
      </description>
      <comment>
        64bit range checks are currently not supported.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03030_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_IMP_03001_StOfAllBasic_Unaligned_Safe</srcid><srcstatus/><internalId>398</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_00005_Config_SystemDes</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a basic software entry of the ComXf module references a transformer which is
        part of a transformer chain that includes the E2EXf transformer (safety related), the
        de-/serialization through the basic software entry of the ComXf module shall
        be based on:
        - the Software Components PortPrototype,
        - the dataElement list defined by the respective SenderReceiverInterface,
        - the SenderReceiverToSignalGroupMapping,
        - and the ISignalToIPduMapping for the SystemSignalGroup
        from the system configuration.
      </description>
      <comment>
        Derived from SWS_ComXf_00005 for safety related de-/serialization of signal groups.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03020_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03030_NestedArrayOfStruct_Safe</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03040_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03050_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>334</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_00020_BitPosition_SystemDes</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The safety related COM Based Transformer shall place the serialized data element into the data
        buffer at the position: ComBitPosition - (8 * ’COM Data Offset’)
        where ComBitPosition is taken from the ISignalToIPduMapping of the system configuration
        and ’COM Data Offset’ is defined by [SWS_ComXf_00014]. (SRS_Xfrm_00201, SRS_Xfrm_00202)
      </description>
      <furtherinfo>
        Justifying rule: WRN.tsc.needscoverage.count violation.
        This swurs is covered by more than 10 EB swurs.
      </furtherinfo>
      <comment>
        Derived from SWS_ComXf_00020 for safety related signal groups.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03020_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03040_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03050_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03110_StOfAllBasic_Safe_64Bit</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03120_ArrayOfUint8_Safe</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03140_StructPartlyMapped_Safe</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_03150_StructPartlyMapped2_Safe</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_05001_PackingByteOrder_Safe</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_05002_PackingByteOrder_Opaque_Safe</srcid><srcstatus/><internalId>349</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_05102_UnPackingByteOrder_Opaque_Safe</srcid><srcstatus/><internalId>350</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>

    <specobject>
      <id>ComXf.EB.UnAlignedSignalGroupsTx_Safety</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       The safety related COM Based Transformer shall support unaligned signal groups for serialization.
       That is, the signal group can start or end at non-byte boundaries.
       If signals or a group signals of a different signal group are mapped to the
       remaining bits at the beginning or at the end of an unaligned signal group,
       then the remaining bits shall be handle as unused bits.(No initialization of
       latest value / initial value (ComSignalInitValue) of these bits)
       Unused bits / areas shall be initialized with the value specified
       in parameter UNUSED-BIT-PATTERN of the system configuration.
      </description>
      <comment>
        Derived from EB.UnAlignedSignalGroupsTx for safety related signal groups.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_IMP_03001_StOfAllBasic_Unaligned_Safe</srcid><srcstatus/><internalId>398</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_IMP_03002_NestedArrayOfStruct_Unaligned_Safe</srcid><srcstatus/><internalId>399</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>

    <specobject>
      <id>ComXf.EB.UnAlignedSignalGroupsRx_Safety</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       The safety related COM Based Transformer shall support unaligned signal groups for de-serialization.
       That is, the signal group can start or end at non-byte boundaries.
      </description>
      <verifycrit>No error or warning shall be issued when such a signal is configured.</verifycrit>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_IMP_03010_StOfAllBasic_Unaligned_Safe</srcid><srcstatus/><internalId>400</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_IMP_03011_NestedArrayOfStruct_Unaligned_Safe</srcid><srcstatus/><internalId>401</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>

    <specobject>
      <id>ComXf.EB.PackingByteOrder_Safety</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
       The safety related COM Based Transformer shall pack the signals according
       to the configured value in the PackingByteOrder parameter of the
       ISignalToIPduMapping container in the system model.
      </description>
      <comment>
        The safe ComXf shall use the BE or LE packing byte order for the signals.
        (See: OSEK Communication Specification 3.0.3, section 2.4.1 Bit and
        byte numbering in I-PDUs and messages)
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_CON_05001_PackingByteOrder_Safe</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_05002_PackingByteOrder_Opaque_Safe</srcid><srcstatus/><internalId>349</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_CON_05102_UnPackingByteOrder_Opaque_Safe</srcid><srcstatus/><internalId>350</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>

    <specobject>
      <id>ComXf.EB.TransformationTechnology.GeneratedCodeCheck</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        In case when the attributes protocol, version and  transformerClass of the
        TransformationTechnology  are not set to the required values no transformer function shall
        be generated for that transformer.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_10001_InvalidTransformationTechnology</srcid><srcstatus/><internalId>323</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>

    <specobject>
      <id>ComXf.EB.E2EXf_Cfg_h</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall generate file E2EXf_Cfg.h if no E2EXf module is configured in tresos
        Studio project. Within this file preprocessor symbol E2EXF_IN_USE shall be defined and its value
        shall be set to 'STD_OFF'.
      </description>
      <comment>
        E2EXf specific macros in E2E library shall be disabled if E2EXf is not in use in order to prevent
        compilation errors.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_COM_03001_DataType</srcid><srcstatus/><internalId>316</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>

</specobjects>
    <specobjects doctype="req">
    <!--
        Basically checks that are implemented shall have a requirement and be tested.

        Requirements which do not originate directly from the SWS (i.e. source: EB) shall have the ID
        structured in the following way:
        <Module>.<source>.<Module>_<Location>_<Type>_<Code>

        Module Name: ComXf
        Source: source for the required check: EB | ASR430 | ASR421 | ...
        Location: XDM | MCG
        Type: W | E (W for warning, E for error)
        Code: 5 digit number, same code as is used in the operation_status-....txt resource file
    -->

    <specobject>
      <id>ComXf.EB.ComXf_XDM_E_00001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If configured value of the XfrmSignalChoice parameter is different than
        XfrmISignalGroupRefChoice then TRUE
      </description>
      <!-- checktype, shortdesc and longdesc not supported yet by reqm2 schema
          <checktype>Error</checktype>
          <shortdesc>Invalid_XfrmSignalChoice_Value</shortdesc>
          <longdesc>The only allowed value of the XfrmSignalChoice parameter is XfrmISignalGroupRefChoice.</longdesc>
          <checkinstance type="xdm">
            <checkpositions>
              <checkposition>
                /ComXf/Xfrm/XfrmImplementationMapping/XfrmSignal/XfrmSignalChoice
              </checkposition>
            </checkpositions>
          </checkinstance>
      -->
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf_Extension.xdm_152</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_04001_OnlyXfrmISignalGroupRefChoice</srcid><srcstatus/><internalId>389</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00004</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if a corresponding mapping between ISignalGroup
        and ISignalIPdu was not found in the ISignalToIPduMappings in the system model.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03002_FAILED_TO_GET_MAPPING_FROM_ISIGNALGROUP_TO_ISIGNALIPDU</srcid><srcstatus/><internalId>371</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00005</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if a required property is missing for a container
        in the system model.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00005.1</srcid><srcstatus/><internalId>194</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00005.2</srcid><srcstatus/><internalId>195</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00005.3</srcid><srcstatus/><internalId>196</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00005.1</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the Length property is missing for the ISignal
        container in the system model.
      </description>
      <comment>
        This requirement is informational only. The validity of the non-optional parameter
        is checked by tresos Studio API during its getter invocation (i.e. getValidLength()).
      </comment>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00005.2</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the StartPosition property is missing for the
        ISignalToIPduMapping container in the system model.
      </description>
      <comment>
        This requirement is informational only. The validity of the non-optional parameter
        is checked by tresos Studio API during its getter invocation (i.e. getValidStartPosition()).
      </comment>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00005.3</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the PackingByteOrder property is missing for the
        ISignalToIPduMapping container in the system model.
      </description>
      <comment>
        This requirement is informational only. The validity of the non-optional parameter
        is checked by tresos Studio API during its getter invocation (i.e. getValidPackingByteOrder()).
      </comment>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00006</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the configured value of UnusedBitPattern
        parameter of the ISignalIPdu container is invalid.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00006.1</srcid><srcstatus/><internalId>198</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00006.2</srcid><srcstatus/><internalId>199</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00006.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the configured value of UnusedBitPattern
        parameter of the ISignalIPdu container is under the allowed threshold.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03006_INVALID_VALUE_OF_UNUSED_BIT_PATTERN_underMin</srcid><srcstatus/><internalId>375</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00006.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the configured value of UnusedBitPattern
        parameter of the ISignalIPdu container is above the allowed threshold.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03007_INVALID_VALUE_OF_UNUSED_BIT_PATTERN_aboveMax</srcid><srcstatus/><internalId>376</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00007</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The ComXf MCG shall issue a warning if the attributes protocol
        version and transformerClass of the TransformationTechnology are configured
        incorrectly.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.ComXf_MCG_W_00007.1</srcid><srcstatus/><internalId>201</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_W_00007.2</srcid><srcstatus/><internalId>202</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_W_00007.3</srcid><srcstatus/><internalId>203</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_W_00007.4</srcid><srcstatus/><internalId>205</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_W_00007.5</srcid><srcstatus/><internalId>206</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_W_00007.6</srcid><srcstatus/><internalId>207</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00007.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue a warning if the configured value of
        attribute protocol of the TransformationTechnology differs
        from 'COMBased'.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_GEN_02001_WrongProtocol</srcid><srcstatus/><internalId>365</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00007.2</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue a warning if the attribute protocol
        of the TransformationTechnology is missing.
      </description>
      <comment>
        This requirement is informational only. The validity of the non-optional parameter
        is checked by tresos Studio API during its getter invocation (i.e. getValidProtocol()).
      </comment>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00007.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The ComXf MCG shall issue a warning if the configured value of
        attribute version of the TransformationTechnology differs
        from '1.0.0'.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_COM_01001</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>TS_COMXF_GEN_02002_WrongVersion</srcid><srcstatus/><internalId>366</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00021</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue a warning if the configured value of
        attribute version of the TransformationTechnology is set to '1'.
      </description>
      <comment>
        We allow attribute version to be set to '1' because of backwards compatibility.
        The allowed value was changed from '1' to '1.0.0' in AUTOSAR release 4.3.1.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_02005_OldVersion</srcid><srcstatus/><internalId>369</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00007.4</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue a warning if the attribute version
        of the TransformationTechnology is missing.
      </description>
      <comment>
        This requirement is informational only. The validity of the non-optional parameter
        is checked by tresos Studio API during its getter invocation (i.e. getValidVersion()).
      </comment>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>
    
    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00007.5</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue a warning if the configured value of
        attribute transformerClass of the TransformationTechnology differs
        from 'SERIALIZER'.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_02003_WrongTransformerClass</srcid><srcstatus/><internalId>367</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00007.6</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue a warning if the attribute
        transformerClass of the TransformationTechnology is missing.
      </description>
      <comment>
        This requirement is informational only. The validity of the non-optional parameter
        is checked by tresos Studio API during its getter invocation (i.e. getValidTransformerClass()).
      </comment>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_MCG_E_00018</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if TransformationTechnology
        referenced by the XfrmTransformationTechnologyRef parameter does
        not exist in the system model.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_02004_MissingTransformationTechnology</srcid><srcstatus/><internalId>368</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>

    <specobject>
      <id>ComXf.EB.Xfrm_MCG_E_00005</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if Bswm referenced by
        the BswModuleEntryRef parameter does not exist in the system
        model.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03009_INVALID_BSWM_REF</srcid><srcstatus/><internalId>378</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00008</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue a warning if there are no valid SecondElements configured
        for the VariableAndParameterInterfaceMapping.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03008_SUBELEMENT_MAPPING_INCOMPLETE</srcid><srcstatus/><internalId>377</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>

    <!-- Bugfix of ASCCOMXF-442 -->
    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00009</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if a group signal is present
        in the SenderReceiverToSignalGroupMapping but not in the Com module
        configuration.
      </description>
      <comment>
        Safe ComXf shall be able to calculate correct buffer size
        from the Com module configuration.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03001_SENDER_RECEIVER_TO_SIGNAL_GROUP_MAPPING_AND_COM_CONFIG_INCONSISTENT</srcid><srcstatus/><internalId>370</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SYST.ISignalTriggeringReferencesISignalPort</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00010</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the signal properties could not be determined
        for a particular SystemSignal.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00010.1</srcid><srcstatus/><internalId>213</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00010.2</srcid><srcstatus/><internalId>214</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00010.3</srcid><srcstatus/><internalId>215</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00010.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the signal properties could not be determined
        for a particular SystemSignal which is configured as a RecordElement.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03003_SYSTEM_SIGNAL_PROPERTIES_NOT_FOUND_RecordElement</srcid><srcstatus/><internalId>372</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00010.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the signal properties could not be determined
        for a particular SystemSignal which is configured as an ArrayElement.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03004_SYSTEM_SIGNAL_PROPERTIES_NOT_FOUND_ArrayElement</srcid><srcstatus/><internalId>373</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00010.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the signal properties
        could not be determined for a particular SystemSignal which
        is mapped to a different pdu than the signal group to which it
        belongs.
      </description>
      <comment>
        ISignalGroup and its ISignals shall be mapped to the same
        ISignalIPdu.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03005_SYSTEM_SIGNAL_PROPERTIES_NOT_FOUND_SignalMappedToDifferentPdu</srcid><srcstatus/><internalId>374</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00011</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the ImplementationRecordElementRef
        of the SenderRecRecordElementMapping container in the system
        model is configured with an invalid value.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03010_INVALID_IMPLEMENTATION_RECORD_ELEMENT_REF</srcid><srcstatus/><internalId>379</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SYST.SenderRecRecordElementMapping</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00012</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the SenderRecArrayElementMapping
        is configured neither as composite type nor primitive type
        in the system model.
      </description>
      <comment>
        Both complex type mapping and SystemSignalRef are missing
        in the SenderRecArrayElementMapping.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03012_ARRAY_ELEMENT_NO_COMPOSITE_NOR_PRIMITIVE_TYPE</srcid><srcstatus/><internalId>381</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00013</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the SenderRecRecordElementMapping
        is configured neither as composite type nor primitive type
        in the system model.
      </description>
      <comment>
        Both complex type mapping and SystemSignalRef are missing
        in the SenderRecRecordElementMapping.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03011_RECORD_ELEMENT_NO_COMPOSITE_NOR_PRIMITIVE_TYPE</srcid><srcstatus/><internalId>380</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00014</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if the Index attributes of
        IndexedArrayElements that are configured in the SenderRecArrayTypeMapping
        are not zero-based and dense.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03013_ARRAY_INDICES_NOT_ZERO_BASED_AND_DENSE</srcid><srcstatus/><internalId>382</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00015</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue an error if a SystemSignal of a
        SystemSignalGroup is not referenced by an ISignal of the
        ISignalGroup which references the SystemSignalGroup.
      </description>
      <comment>
                SystemSignalGroup and ISignalGroup must both reference the same
                signals.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03014_SYSTEM_SIGNAL_GROUP_AND_I_SIGNAL_GROUP_CONFIG_INCONSISTENT</srcid><srcstatus/><internalId>383</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00016</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue a warning if an ISignalGroup is
        referenced by multiple ISignalToIPduMappings.
      </description>
      <comment>
        From constr_3514 and note of iSignalGroup attribute of ISignalToIPduMapping
        container, which states:
          "Each ISignal contained in the ISignalGroup shall be mapped into an IPdu
          by an own ISignalToIPduMapping. The references to the ISignal and to the
          ISignalGroup in an ISignalToIPduMapping are mutually exclusive."
        may be concluded that an ISignalGroup may be referenced at most
        by one ISignalToIPduMapping.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03015_ISIGNAL_GROUP_MAPPED_TO_MULTIPLE_ISIGNALIPDUS</srcid><srcstatus/><internalId>384</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.constr_3514</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00017</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue a warning if a transformer (de)serializes a signal group
        that is referenced by multiple SenderReceiverToSignalGroupMappings in the role of SignalGroupRef
        and the SenderReceiverToSignalGroupMappings reference different VariableDataPrototypes in the
        role of TargetDataPrototypeRef.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03016_MULTIPLE_SENDER_RECEIVER_TO_SIGNAL_GROUP_MAPPINGS_FOR_SINGLE_RECEIVER</srcid><srcstatus/><internalId>385</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00018</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The ComXf MCG shall issue an error if no SenderReceiverToSignalGroupMapping exists
        that references via ContextPortRef the PortPrototype that matches the mapped
        outermost PortPrototype of the context reference configured
        by XfrmVariableDataPrototypeInstanceRef.
      </description>
      <comment>
        This check is applicable only for multiple receivers use case since for single receiver the
        XDM configuration container XfrmVariableDataPrototypeInstanceRef is disabled.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03017_MISSING_SENDER_RECEIVER_TO_SIGNAL_GROUP_MAPPING_FOR_PORT</srcid><srcstatus/><internalId>386</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_W_00019</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf MCG shall issue a warning if a transformer deserializes a signal group
        that is referenced by multiple SenderReceiverToSignalGroupMappings in the role of SignalGroupRef
        and these SenderReceiverToSignalGroupMappings reference the same port in the role of ContextPortRef
        and a different VariableDataPrototype in the role of TargetDataPrototypeRef.
      </description>
      <comment>
        This check is applicable only for multiple receivers use case since filtering per port does not
        occur in single receiver use case.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03018_MULTIPLE_SENDER_RECEIVER_TO_SIGNAL_GROUP_MAPPINGS_FOR_DATA_TYPE</srcid><srcstatus/><internalId>387</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>

    <specobject>
      <id>ComXf.EB.ComXf_MCG_E_00020</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The ComXf MCG shall issue an error if no SenderReceiverToSignalGroupMapping exists
        that references via TargetDataPrototypeRef the VariableDataPrototype
        that matches the mapped outermost VariableDataPrototype of the instance reference
        configured by XfrmVariableDataPrototypeInstanceRef.
      </description>
      <comment>
        This check is applicable only for multiple receivers use case since for single receiver the
        XDM configuration container XfrmVariableDataPrototypeInstanceRef is disabled.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_COMXF_GEN_03019_MISSING_SENDER_RECEIVER_TO_SIGNAL_GROUP_MAPPING_FOR_DATA_TYPE</srcid><srcstatus/><internalId>388</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ComXf.top.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">


    <specobject>
      <id>ComXf.top.001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf module shall modularly structure static implementation files and data types.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00015</srcid><srcstatus/><internalId>16</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00034</srcid><srcstatus/><internalId>98</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00060</srcid><srcstatus/><internalId>99</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.StaticFiles</srcid><srcstatus/><internalId>171</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.GeneratedFiles</srcid><srcstatus/><internalId>172</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.IncludeFileStructure</srcid><srcstatus/><internalId>174</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>

    <specobject>
      <id>ComXf.top.002</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf module shall check input parameter for validity.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00004</srcid><srcstatus/><internalId>15</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00049</srcid><srcstatus/><internalId>63</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00108</srcid><srcstatus/><internalId>64</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00061</srcid><srcstatus/><internalId>97</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00070</srcid><srcstatus/><internalId>110</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00071</srcid><srcstatus/><internalId>111</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.SafetyDet</srcid><srcstatus/><internalId>178</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.SafetyPrecon</srcid><srcstatus/><internalId>179</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Safety_RangeChecks</srcid><srcstatus/><internalId>182</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Safety_RangeChecks_SerBehavior</srcid><srcstatus/><internalId>183</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>

    <specobject>
      <id>ComXf.top.003</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf module shall provide a mechanism to read the version number.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_Xfrm_00057</srcid><srcstatus/><internalId>109</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.PublishedInformation</srcid><srcstatus/><internalId>162</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>

    <specobject>
      <id>ComXf.top.004</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf module shall be able to serialize composite data types of fixed size
        (i.e. Signal Groups from COM) into linear arrays based on a fixed data
        mapping and vice versa.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00018</srcid><srcstatus/><internalId>8</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00019</srcid><srcstatus/><internalId>9</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00022</srcid><srcstatus/><internalId>10</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00023</srcid><srcstatus/><internalId>11</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00005</srcid><srcstatus/><internalId>13</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00003</srcid><srcstatus/><internalId>14</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00015</srcid><srcstatus/><internalId>16</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00016</srcid><srcstatus/><internalId>29</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00021</srcid><srcstatus/><internalId>30</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00036</srcid><srcstatus/><internalId>31</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00037</srcid><srcstatus/><internalId>32</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00014</srcid><srcstatus/><internalId>33</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00020</srcid><srcstatus/><internalId>34</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00008</srcid><srcstatus/><internalId>62</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00009</srcid><srcstatus/><internalId>65</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00048</srcid><srcstatus/><internalId>68</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00002</srcid><srcstatus/><internalId>74</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00003</srcid><srcstatus/><internalId>75</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00004</srcid><srcstatus/><internalId>76</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00005</srcid><srcstatus/><internalId>77</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00006</srcid><srcstatus/><internalId>78</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00007</srcid><srcstatus/><internalId>79</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00011</srcid><srcstatus/><internalId>80</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00012</srcid><srcstatus/><internalId>81</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00013</srcid><srcstatus/><internalId>82</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00014</srcid><srcstatus/><internalId>83</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00017</srcid><srcstatus/><internalId>84</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00018</srcid><srcstatus/><internalId>85</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00058</srcid><srcstatus/><internalId>107</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00059</srcid><srcstatus/><internalId>108</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.SafetySer</srcid><srcstatus/><internalId>176</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.SafetyDeser</srcid><srcstatus/><internalId>177</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.SafetyInit</srcid><srcstatus/><internalId>180</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.SafetyXfrmBufferLengthType</srcid><srcstatus/><internalId>181</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_00020_BitPosition_SystemDes</srcid><srcstatus/><internalId>185</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>

    <specobject>
      <id>ComXf.top.006</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf module shall (only) support sender-receiver communication.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00017</srcid><srcstatus/><internalId>6</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00032</srcid><srcstatus/><internalId>7</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00016</srcid><srcstatus/><internalId>29</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00021</srcid><srcstatus/><internalId>30</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>

    <specobject>
      <id>ComXf.top.010</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf module shall identify signal groups for (de-)serialization
        on system level by means of the system configuration based upon
        the AUTOSAR meta model.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00034</srcid><srcstatus/><internalId>60</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_ComXf_00025</srcid><srcstatus/><internalId>61</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00054</srcid><srcstatus/><internalId>66</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00055</srcid><srcstatus/><internalId>67</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00062</srcid><srcstatus/><internalId>100</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00037</srcid><srcstatus/><internalId>101</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00052</srcid><srcstatus/><internalId>102</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00056</srcid><srcstatus/><internalId>103</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00043</srcid><srcstatus/><internalId>104</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00107</srcid><srcstatus/><internalId>105</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00053</srcid><srcstatus/><internalId>106</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_CONSTR_09094</srcid><srcstatus/><internalId>115</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_CONSTR_09095</srcid><srcstatus/><internalId>116</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_CONSTR_09096</srcid><srcstatus/><internalId>117</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00106</srcid><srcstatus/><internalId>144</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_constr_09094</srcid><srcstatus/><internalId>146</internalId></linkedfrom><linkedfrom><srcid>ComXf.SYST.SenderRecRecordElementMapping</srcid><srcstatus/><internalId>158</internalId></linkedfrom><linkedfrom><srcid>ComXf.SYST.ISignalTriggeringReferencesISignalPort</srcid><srcstatus/><internalId>159</internalId></linkedfrom><linkedfrom><srcid>ComXf.constr_3514</srcid><srcstatus/><internalId>160</internalId></linkedfrom><linkedfrom><srcid>ComXf.TPS_SYST_02278</srcid><srcstatus/><internalId>161</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MissingSignalMappings</srcid><srcstatus/><internalId>169</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.transformerId</srcid><srcstatus/><internalId>170</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_00005_Config_SystemDes</srcid><srcstatus/><internalId>184</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_W_00017</srcid><srcstatus/><internalId>222</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00018</srcid><srcstatus/><internalId>223</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_W_00019</srcid><srcstatus/><internalId>224</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.ComXf_MCG_E_00020</srcid><srcstatus/><internalId>225</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>

    <specobject>
      <id>ComXf.top.011</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf module shall allow to parameterize module specific,
        ECU dependent configuration and store it in a defined XML format.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.ECUC_Xfrm_00013_Conf</srcid><srcstatus/><internalId>112</internalId></linkedfrom><linkedfrom><srcid>ComXf.ECUC_Xfrm_00016_Conf</srcid><srcstatus/><internalId>113</internalId></linkedfrom><linkedfrom><srcid>ComXf.ECUC_Xfrm_00019_Conf</srcid><srcstatus/><internalId>114</internalId></linkedfrom><linkedfrom><srcid>ComXf.ECUC_Xfrm_00015_Conf</srcid><srcstatus/><internalId>118</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_E_00001</srcid><srcstatus/><internalId>147</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_E_00002</srcid><srcstatus/><internalId>148</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_E_00003</srcid><srcstatus/><internalId>149</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_E_00004</srcid><srcstatus/><internalId>150</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_E_00005</srcid><srcstatus/><internalId>151</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_E_00006</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_E_00008</srcid><srcstatus/><internalId>154</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_E_00009</srcid><srcstatus/><internalId>155</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>

    <specobject>
      <id>ComXf.top.012</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf module shall implement error indication and error states
        to indicate malfunction to the RTE.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00028</srcid><srcstatus/><internalId>36</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00027</srcid><srcstatus/><internalId>69</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00051</srcid><srcstatus/><internalId>70</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00028</srcid><srcstatus/><internalId>71</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00029</srcid><srcstatus/><internalId>72</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00030</srcid><srcstatus/><internalId>73</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_00026</srcid><srcstatus/><internalId>86</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>

    <specobject>
      <id>ComXf.top.013</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf module shall support memory partitions.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.EB.MemPartitioning.RAMbyTransformerId</srcid><srcstatus/><internalId>119</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MemPartitioning.PartitionHoldingInitStatus</srcid><srcstatus/><internalId>120</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MemPartitioning.InitByPartitionId</srcid><srcstatus/><internalId>121</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MemPartitioning.DeInitByPartitionId</srcid><srcstatus/><internalId>122</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MemPartitioning.MemorySectionByPartitionId</srcid><srcstatus/><internalId>123</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MemPartitioning.XfrmOsApplicationRef</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MemPartitioning.UniquePartitionId</srcid><srcstatus/><internalId>127</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MemPartitioning.DefaultPartitionId</srcid><srcstatus/><internalId>128</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MemPartitioning.FileName</srcid><srcstatus/><internalId>129</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MemPartitioning.DefaultFileName</srcid><srcstatus/><internalId>130</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MemPartitioning.SafetyPartition</srcid><srcstatus/><internalId>145</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>

    <specobject>
      <id>ComXf.top.017</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ComXf module shall provide a MCG to generate configuration dependent
        code parts using the defined XML format as input.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00033</srcid><srcstatus/><internalId>59</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_E_00007</srcid><srcstatus/><internalId>153</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_E_00010</srcid><srcstatus/><internalId>156</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.Xfrm_XDM_E_00011</srcid><srcstatus/><internalId>157</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.GeneratedFiles</srcid><srcstatus/><internalId>172</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.MCG.UnitTests</srcid><srcstatus/><internalId>175</internalId></linkedfrom><linkedfrom><srcid>ComXf.EB.E2EXf_Cfg_h</srcid><srcstatus/><internalId>190</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

     <specobject>
       <id>ComXf.SWS_Xfrm_91001</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>2</version>
       <description>
       A transformer shall further use the types defined in the following table.
       ========|=============|=====================================
        Module | Header File | Imported Type
       ========|=============|=====================================
        Rte    |Rte.h        | Rte_Cs_TransactionHandleType
       --------|-------------|-------------------------------------
        Std    | Std_Types.h | Std_ExtractProtocolHeaderFieldsType
               | Std_Types.h | Std_MessageResultType
               | Std_Types.h | Std_MessageTypeType
               | Std_Types.h | Std_ReturnType
               | Std_Types.h | Std_TransformerForwardCode (draft)
               | Std_Types.h | Std_VersionInfoType
       --------|-------------|-------------------------------------
       (SRS_Xfrm_00002)
       </description>
       <comment/>
       <releases>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       <needscoverage>
        
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_Xfrm_91001.Rte_Cs_TransactionHandleType</srcid><srcstatus/><internalId>133</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_91001.Std_ExtractProtocolHeaderFieldsType</srcid><srcstatus/><internalId>134</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_91001.Std_MessageResultType</srcid><srcstatus/><internalId>135</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_91001.Std_MessageTypeType</srcid><srcstatus/><internalId>136</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_91001.Std_ReturnType</srcid><srcstatus/><internalId>137</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_91001.Std_TransformerForwardCode</srcid><srcstatus/><internalId>138</internalId></linkedfrom><linkedfrom><srcid>ComXf.SWS_Xfrm_91001.Std_VersionInfoType</srcid><srcstatus/><internalId>139</internalId></linkedfrom></coveredby></needscov>
        
       <containerCovstatus>covered</containerCovstatus></needscoverage>

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>

     <specobject>
       <id>ComXf.SWS_Xfrm_00036</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>2</version>
       <description>
        Service name:       &lt;Mip&gt;_&lt;transformerId&gt;
        Syntax:             uint8 &lt;Mip&gt;_&lt;transformerId&gt;(
                                        uint8 *buffer,
                                        uint32 *bufferLength
                                        &lt;paramtype&gt; dataElement
                                        )
        Service ID[hex]:    0x03
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant
        Parameters (in):    dataElement     Data element which shall be transformed
        Parameters
        (inout):            None
        Parameters (out):   buffer          Buffer allocated by the RTE, where the
                                            transformed data has to be stored by the
                                            transformer
                            bufferLength    Used length of the buffer
        Return value:       uint8           0x00 (E_OK): Transformation successful
                                            0x01 - 0xff: Specific errors
        Description:    This function is the interface of the first transformer in a
                        transformer chain of Sender/Receiver communication.

                        The length of the transformed data shall be calculated by the transformer
                        during runtime and returned in the OUT parameter bufferLength. It may be
                        smaller than the maximum buffer size used by the RTE for buffer allocation.
        Available via:  &lt;Mip&gt;.h
        (SRS_Xfrm_00002)
        where
          - paramtype is derived from type according to the parameter passing rules rules defined by
            the [5, SRS BSW General] (see [SRS_BSW_00484], [SRS_BSW_00485], and [SRS_BSW_00486]) and
            [2, SWS BSW General] (see [SWS_BSW_00186]).
          - type is data type of the data element after all data conversion activities of the RTE
          - Mip is the Module Implementation Prefix of the transformer as defined in [SWS_BSW_00102]
          - transformerId is the name pattern for the transformer specified in [SWS_Xfrm_00062].
          This function specified in [SWS_Xfrm_00036] exists on the sender side for each transformed
          Sender/Receiver communication which uses transformation.
       </description>
       <comment>Only applicable for serializing transformers.
       Incorporated Bugzilla RfC 68035 (Introduce rules defining which input parameters shall be
       passed per value and which ones per const reference),
       see https://www.autosar.org/bugzilla/show_bug.cgi?id=68035.</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       <needscoverage>
        
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00007</srcid><srcstatus/><internalId>43</internalId></linkedfrom></coveredby></needscov>
        
       <containerCovstatus>covered</containerCovstatus></needscoverage>

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>

     <specobject>
       <id>ComXf.SWS_Xfrm_00042</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>2</version>
       <description>
        Service name:           &lt;Mip&gt;_Inv_&lt;transformerId&gt;
        Syntax:                 uint8 &lt;Mip&gt;_Inv_&lt;transformerId&gt;(
                                                const uint8 *buffer,
                                                uint32 bufferLength
                                                &lt;type&gt; *dataElement
                                                )
        Service ID[hex]:        0x04
        Sync/Async:             Synchronous
        Reentrancy:             Reentrant
        Parameters (in):        buffer        Buffer allocated by the RTE, where the still
                                              serialized data are stored by the Rte. If
                                              executeDespiteDataUnavailability is set to true and
                                              the RTE cannot provide data as input to the
                                              transformer, it will hand over a NULL pointer to the
                                              transformer.
                                bufferLength  Used length of the buffer. If
                                              executeDespiteDataUnavailability is set to true and
                                              the RTE cannot provide data as input to the
                                              transformer, the length will be equal to 0.
        Parameters
        (inout):                None
        Parameters (out):       dataElement   Data element which is the result of the transformation
                                              and contains the deserialized data element
        Return value:           uint8         0x00 (E_OK): Transformation successful
                                              0x01 - 0xff: Specific errors
        Description:  This function is the interface of a first transformer in a transformer chain
                      of Sender/Receiver communication (this is the last executed transformer on the
                      receiving side!).
        Available via:  &lt;Mip&gt;.h
        (SRS_Xfrm_00002)

        where
          - type is data type of the data element before all data conversion activities of the RTE
          - Mip is the Module Implementation Prefix of the transformer as defined in
            [SWS_BSW_00102]
          - transformerId is the name pattern for the transformer specified in
            [SWS_Xfrm_00062].
       </description>
       <comment>Only applicable for serializing transformers</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       <needscoverage>
        
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ComXf.SWS_ComXf_00010</srcid><srcstatus/><internalId>48</internalId></linkedfrom></coveredby></needscov>
        
       <containerCovstatus>covered</containerCovstatus></needscoverage>

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00014_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        SWS Item                      [ECUC_Xfrm_00014]
        Module Name                   Xfrm
        Description                   No
        Post-Build Variant Support    false
        Supported Config Variants     VARIANT-LINK-TIME, VARIANT-POST-BUILD, VARIANT-PRE-COMPILE
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00012_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        SWS Item         [ECUC_Xfrm_00012]
        Container Name   XfrmGeneral
        Parent Container Xfrm
        Description      Contains the general configuration parameters of the module.
        Configuration Parameters
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00020_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        Name             XfrmInstanceId [ECUC_Xfrm_00020]
        Parent Container XfrmGeneral
        Description      Specifies the InstanceId of this module instance. If only one instance is
                         present it shall have the Id 0.
        Multiplicity     1
        Type             EcucBooleanParamDef
        Range            0 .. 255
        Default Value    no
        Post-Build Variant false
        Value
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency scope: local
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00001_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        SWS Item         [ECUC_Xfrm_00001]
        Container Name   XfrmImplementationMapping
        Parent Container Xfrm
        Description      For each transformer (TransformationTechnology) in a transformer
                         chain (DataTransformation) which is applied to an ISignal it is
                         necessary to specify the BswModuleEntry which implements it. This is
                         the container to hold these mappings.
        Configuration Parameters
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00022_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        Name         XfrmTransformerClassExtractProtocolHeaderFields [ECUC_Xfrm_00022]
        Parent       XfrmImplementationMapping
        Container
        Description  Defines the transformerClass of the TransformationTechnology
                     containing information in its protocol header that is required to
                     distinguish between requests vs. responses and normal vs. error
                     responses in C/S communication. Usually this shall be the
                     TransformationTechnology with transformerClass equal to "serializer".
                     Setting this parameter basically instructs the RTE to pass a pointer to
                     the Mip_ExtractProtocolHeaderFields() function of the respective
                     transformer as an additional argument to the called transformer
                     function. E.g., if the serializing transformer in the transformer chain is
                     SomeIpXf and this parameter is set to SERIALIZER, then
                     SomeIpXf_ExtractProtocolHeaderFields() will be passed as additional
                     argument.
        Multiplicity 0..1
        Type         EcucEnumerationParamDef
        Range       SAFETY      The Mip_ExtractProtocolHeaderFields
                                function of the safety transformer in the
                                chain shall be called.
                    SECURITY    The Mip_ExtractProtocolHeaderFields
                                function of the security transformer in
                                the chain shall be called.
                    SERIALIZER  The Mip_ExtractProtocolHeaderFields
                                function of the serializing transformer
                                in the chain shall be called
        Post-Build Variant false
        Multiplicity
        Post-Build Variant false
        Value
        Multiplicity        Pre-compile time X All Variants
        Configuration Class Link time        no
                            Post-build time  no
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency  scope: local
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00021_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        Name         XfrmCSTransactionHandleImplementationDataTypeRef [ECUC_Xfrm_00021]
        Parent       XfrmImplementationMapping
        Container
        Description  Reference to the ImplementationDataType with category STRUCTURE
                     which defines the type of the C/S transaction handle. Setting this
                     parameter basically instructs the RTE to pass a reference to a variable
                     of exactly this ImplementationDataType as an additional argument to
                     the called transformer function.
        Multiplicity 0..1
        Type         Foreign reference to IMPLEMENTATION-DATA-TYPE
        Post-Build Variant false
        Multiplicity
        Post-Build Variant false
        Value
        Multiplicity        Pre-compile time X All Variants
        Configuration Class Link time        no
                            Post-build time  no
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency  scope: local
       </description>
       <comment>Parameter was introduced in order to fix the typographical mistake in its original AUTOSAR name, see https://jira.autosar.org/browse/AR-112344 .
This requirement shall demand source coverage since the presence of the parameter can not be verified by the VSMD checker.</comment>
       <releases>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_265</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
        
        
       <containerCovstatus>covered</containerCovstatus></needscoverage>

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00005_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        Name         XfrmInvTransformerBswModuleEntryRef [ECUC_Xfrm_00005]
        Parent       XfrmImplementationMapping
        Container
        Description  Reference to the BswModuleEntry which implements the referenced
                     inverse transformer on the receiving/called side.
        Multiplicity 0..1
        Type         Foreign reference to BSW-MODULE-ENTRY
        Post-Build Variant false
        Multiplicity
        Post-Build Variant false
        Value
        Multiplicity        Pre-compile time X All Variants
        Configuration Class Link time        no
                            Post-build time  no
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency  scope: local
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00003_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        Name         XfrmTransformationTechnologyRef [ECUC_Xfrm_00003]
        Parent       XfrmImplementationMapping
        Container
        Description  Reference to the TransformationTechnology in the DataTransformation
                     of the system description for which the implementation
                     (BswModuleEntry) shall be mapped.
        Multiplicity 1
        Type         Foreign reference to TRANSFORMATION-TECHNOLOGY
        Post-Build Variant  false
        Value
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency  scope: local
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00018_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        Name         XfrmTransformerBswModuleEntryRef [ECUC_Xfrm_00018]
        Parent       XfrmImplementationMapping
        Container
        Description  Reference to the BswModuleEntry which implements the referenced
                     transformer on the sending/calling side.
        Multiplicity 0..1
        Type         Foreign reference to BSW-MODULE-ENTRY
        Post-Build Variant false
        Multiplicity
        Post-Build Variant false
        Value
        Multiplicity        Pre-compile time X All Variants
        Configuration Class Link time        no
                            Post-build time  no
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency  scope: local
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00011_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        Name         XfrmVariableDataPrototypeInstanceRef [ECUC_Xfrm_00011]
        Parent       XfrmImplementationMapping
        Container
        Description  Instance Reference to a VariableDataPrototype in case a dedicated
                     transformer BswModuleEntry is required per VariableDataPrototype
                     access.
        Multiplicity 0..1
        Type         Instance reference to VARIABLE-DATA-PROTOTYPE context:
                     SW-COMPONENT-PROTOTYPE PORT-PROTOTYPE
        Post-Build Variant false
        Multiplicity
        Post-Build Variant false
        Value
        Multiplicity        Pre-compile time X All Variants
        Configuration Class Link time        no
                            Post-build time  no
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency  scope: local
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00002_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        SWS Item       [ECUC_Xfrm_00002]
        Container Name XfrmSignal
        Description    Reference to the signal in the system description that transports the
                       transformed data.
        Configuration Parameters
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00006_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        SWS Item         [ECUC_Xfrm_00006]
        Container Name   XfrmSignalChoice
        Parent Container XfrmSignal
        Description      Choice whether an ISignal or an ISignalGroup shall be referenced.
        Configuration Parameters
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00009_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        SWS Item         [ECUC_Xfrm_00009]
        Container Name   XfrmISignalGroupRefChoice
        Parent Container XfrmSignalChoice
        Description      Reference to the ISignalGroup in the system description that transports
                         the transformed data.
        Configuration Parameters
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00010_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        Name         XfrmISignalGroupRef [ECUC_Xfrm_00010]
        Parent       XfrmISignalGroupRefChoice
        Container
        Description  Reference to the ISignalGroup in the system description that transports
                     the transformed data.
        Multiplicity 1
        Type         Foreign reference to I-SIGNAL-GROUP
        Post-Build Variant         false
        Value
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency  scope: local
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00007_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        SWS Item         [ECUC_Xfrm_00007]
        Container Name   XfrmISignalRefChoice
        Parent Container XfrmSignalChoice
        Description      Reference to the ISignal in the system description that transports the
                         transformed data.
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>

     <specobject>
       <id>ComXf.ECUC_Xfrm_00008_Conf</id>
       <status>approved</status>
       <source>AUTOSAR_SWS_TransformerGeneral.pdf</source>
       <version>1</version>
       <description>
        Name             XfrmISignalRef [ECUC_Xfrm_00008]
        Parent Container XfrmISignalRefChoice
        Description      Reference to the ISignal in the system description that transports the
                         transformed data.
        Multiplicity     1
        Type             Foreign reference to I-SIGNAL
        Post-Build Variant false
        Value
        Value Configuration Pre-compile time X All Variants
        Class               Link time        no
                            Post-build time  no
        Scope / Dependency  scope: local
       </description>
       <comment>This is a configuration parameter requirement without functional specification (checked by VSMD checker).</comment>
       <releases>
        <release>AUTOSAR 4.2.1</release>
        <release>AUTOSAR R22-11</release>
       </releases>
       
       

       
        

     <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.ComXf.ModuleInterlinkTypesHeaderFile</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>143</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>
    <specobject>
      <id>dev.ComXf.Reentrancy</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>165</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>
    <specobject>
      <id>dev.ComXf.BufferLength</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>180</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>
    <specobject>
      <id>dev.ComXf.UnsupportedExtendedProductionErrors</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>197</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.ECUC_Xfrm_00016_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>ComXf.ECUC_Xfrm_00015_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>
    <specobject>
      <id>dev.ComXf.OutputBufferHandling</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>222</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>
    <specobject>
      <id>dev.COM_COMXF.ASCCOM-610_SignalInvalidation</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>299</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>
    <specobject>
      <id>dev.COM.ASCCOM-775</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>320</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>
    <specobject>
      <id>dev.COM_COMXF.ASCCOM-1588_SmallRXIPdu</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>395</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>
    <specobject>
      <id>dev.COM_COMXF.ASCCOM-1724_SymbolicNameValueFile</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>436</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>
    <specobject>
      <id>dev.COM_COMXF.ASCCOM-1910_NoDynGroupSignal</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>457</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>
    <specobject>
      <id>dev.COM_COMXF.ZeroSizeSigTransfProp</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>475</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>
    <specobject>
      <id>dev.COM_COMXF.OverlappingComSignals</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>493</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>
    <specobject>
      <id>dev.COM_COMXF.ConfigurableCallbackCalloutFunctoinDeclarations</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>518</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>
    <specobject>
      <id>dev.ComXf.Postbuild</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>534</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>
    <specobject>
      <id>dev.BufferReservation</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>550</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>
    <specobject>
      <id>dev.ComXf.Xfrm.FirstToSecondDataTransformation</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>573</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>
    <specobject>
      <id>dev.ComXf.Xfrm.XfrmSignal</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>589</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_CONSTR_09096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>
  </specobjects>
    <specobjects doctype="dsn">
    <specobject>
      <id>ComXf.Design.PreCondition.E_OK</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/project/design/pdf/EBASCOMXF-253_Design_Specification-profiled.xml</sourcefile>
      <sourceline>18384</sourceline>
      <version>1</version>
      <description>
              &lt;para&gt;The macro &lt;literal moreinfo="none"&gt;E_OK&lt;/literal&gt; shall have the value 0.&lt;/para&gt;
              &lt;para&gt;
                  Rationale: That allows aggregation of errors with bitwise OR operations.
              &lt;/para&gt;
          </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComXf_Int.h_21</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>
    <specobject>
      <id>ComXf.Design.Com_ComXf_Write.E_SER_GENERIC_ERROR</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/doc/project/design/pdf/EBASCOMXF-253_Design_Specification-profiled.xml</sourcefile>
      <sourceline>18397</sourceline>
      <version>1</version>
      <description>
              &lt;para&gt; If Com_ComXf_Write returns &lt;literal moreinfo="none"&gt;COM_SERVICE_NOT_AVAILABLE&lt;/literal&gt; the value
                     shall be adapted to &lt;literal moreinfo="none"&gt;E_SER_GENERIC_ERROR&lt;/literal&gt;.&lt;/para&gt;
              &lt;para&gt;
                  Rationale: This behaviour is required because RfC 68623 (Insufficient specification
                  of autonomous error response) changed the value of &lt;literal moreinfo="none"&gt;E_SER_GENERIC_ERROR&lt;/literal&gt;
                  from 0x80 to 0x81. This results in that the value of &lt;literal moreinfo="none"&gt;COM_SERVICE_NOT_AVAILABLE&lt;/literal&gt;
                  can not longer be used as return value for the transformer.
              &lt;/para&gt;
          </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComXf_Int.h_43</srcid><srcstatus/><internalId>275</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/include/ComXf_Int.h_21</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/src/Autosar/include/ComXf_Int.h</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.Design.PreCondition.E_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComXf_Int.h_43</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/src/Autosar/include/ComXf_Int.h</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.Design.Com_ComXf_Write.E_SER_GENERIC_ERROR</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_33</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_121</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>121</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_201</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>201</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_205</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>205</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_209</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>209</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_213</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>213</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_265</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>265</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.ECUC_Xfrm_00021_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_348</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>348</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_378</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>378</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_474</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>474</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_constr_09094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_480</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>480</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_488</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>488</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_510</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>510</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_542</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>542</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm_546</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf.xdm</sourcefile>
      <sourceline>546</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf_Extension.xdm_152</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/build/cache/ACG-Transformers-ComXf-9.3.0_ComXf-2.0.1-B817701/plugins/ComXf_TS_TxDxM2I0R0/config/ComXf_Extension.xdm</sourcefile>
      <sourceline>152</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_XDM_E_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.BufferPropertiesTest.test_bufferPropertiesWithTheSameReferenceShallBeEqual</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/BufferPropertiesTest.java</sourcefile>
      <sourceline>25</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.BufferPropertiesTest.test_bufferPropertiesWithDifferentClassShallNotBeEqual</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/BufferPropertiesTest.java</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.BufferPropertiesTest.test_nonNullBufferPropertyComparedToNullObjectShallNotBeEqual</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/BufferPropertiesTest.java</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.BufferPropertiesTest.test_bufferPropertiesConstructedFromTheSameSignalPropertiesShallBeEqual</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/BufferPropertiesTest.java</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.BufferPropertiesTest.test_bufferPropertiesWithDifferentEndBitPositionShallNotBeEqual</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/BufferPropertiesTest.java</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.GeneratorPartitionHandlerTest.testIsSafePartitionShallReturnFalseForNonExistentPartition</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/GeneratorPartitionHandlerTest.java</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.GeneratorPartitionHandlerTest.testIsSafePartitionShallReturnFalseIfNoSafeTransformatonFunctionsAreInThePartition</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/GeneratorPartitionHandlerTest.java</sourcefile>
      <sourceline>49</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.GeneratorPartitionHandlerTest.testIsSafePartitionShallReturnTrueIfAtLeastOneSafeTransformationFunctionIsInThePartition</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/GeneratorPartitionHandlerTest.java</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testGetBitSizeShallReturnTheSameValueThatIsSetInSignalProperties</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/PrimitiveDataElementTest.java</sourcefile>
      <sourceline>23</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testGetOffsetShallReturnTheSameValueThatIsSetInSignalProperties</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/PrimitiveDataElementTest.java</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallThrowAnExceptionIfSignalOffsetHasAnInvalidValueButSignalSizeIsValid</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/PrimitiveDataElementTest.java</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallThrowAnExceptionIfSignalSizeHasAnInvalidValueButSignalOffsetIsValid</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/PrimitiveDataElementTest.java</sourcefile>
      <sourceline>80</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallNotThrowAnExceptionIfBothSignalSizeAndOffsetAreInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/PrimitiveDataElementTest.java</sourcefile>
      <sourceline>103</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallThrowAnExceptionIfSignalSizeIsInvalidButEndiannessNotNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/PrimitiveDataElementTest.java</sourcefile>
      <sourceline>123</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallThrowAnExceptionIfSignalSizeIsValidButEndiannessIsNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/PrimitiveDataElementTest.java</sourcefile>
      <sourceline>145</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.PrimitiveDataElementTest.testConstructorShallThrowAnExceptionIfPrimitiveTypeInputParameterIsNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/PrimitiveDataElementTest.java</sourcefile>
      <sourceline>167</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.RootDataElementTest.test01_Equals</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/RootDataElementTest.java</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.RootDataElementTest.test02_HashCode</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/RootDataElementTest.java</sourcefile>
      <sourceline>70</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.TransformationFunctionTest.testEquals</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/TransformationFunctionTest.java</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.TransformationFunctionTest.testHashCode</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/TransformationFunctionTest.java</sourcefile>
      <sourceline>65</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.TransformationFunctionTest.testCompareTo</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/TransformationFunctionTest.java</sourcefile>
      <sourceline>82</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.comxf.test.generator.intermediate.factory.DataTypeMappingTest.test_mapToOutermostDatatypeElement</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/junit/plugin.Test_ComXfExt.Autosar/Java/eb/tresos/comxf/test/generator/intermediate/factory/DataTypeMappingTest.java</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_COM_01001</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_01/source/application/ComXf_ComTest_01.c.m4</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  0) Test that the safe partition is generated in case the transformer chain contains the E2EXf
     module or in case the parameter XfrmIsSafetyTransformer is enabled and true. This is tested
     with the diff of the reference files ComXf_S_PartitionApi.c ComXf_S_PartitionApi.h and
     the permuted configuration as described within test method:
     Equivalence Class Partitioning: at configuration level.
  1) This test verifies that file E2EXf_Cfg.h is not generated by ComXf code generator
     if module E2EXf is configured in tresos Studio test project.
  2) Test that Service ComXf_Init() is supported with correct syntax (SWS_ComXf_00026)
  3) Test that Service ComXf_DeInit() is supported with correct syntax (SWS_ComXf_00027)
  4) Test that Service ComXf_GetVersionInfo() is supported (optional)
     with correct syntax (SWS_ComXf_00024, ComXf.EB.VERSION_INFO_API)
     and pre-compile time macro COMXF_VERSION_INFO_API is generated as described within
     test method: Equivalence Class Partitioning: at configuration level.
  5) Test that the COM Based Transformer provides a serializer transformer for the first
     reference in the list of ordered references transformer from a
     DataTransformation to a TransformationTechnology if the
     DataTransformation is referenced by an ISignalGroup in the role
     comBasedSignalGroupTransformation where the ISignalGroup references a
     SystemSignalGroup which is referenced by SenderReceiverToSignalGroupMapping (SWS_ComXf_00008)
     and
     - attribute protocol of the TransformationTechnology is set to COMBased, and
     - the attribute version of the TransformationTechnology is set to 1 (SWS_ComXf_00004).
  6) Test that the serializer transformer has the following syntax:
                 uint8 ComXf_&amp;lt;transformerId&amp;gt;(
                    uint8* buffer,
                    uint16* bufferLength,
                    const &amp;lt;type&amp;gt;* dataElement
                 )
     where type is data type of the data element and transformerId is name of the
     referenced BswModuleEntry of the Transformer Configuration (SWS_ComXf_00007).
     Note: The generation of this API is tested for following dataTypes:
           - Composite DataTypes
           - Array (fix size) DataTypes
  7) Test that the COM Based Transformer provides a de-serializer transformer for the first
     reference in the list of ordered references transformer from a
     DataTransformation to a TransformationTechnology if the
     DataTransformation is referenced by an ISignalGroup in the role
     comBasedSignalGroupTransformation where the ISignalGroup references a
     SystemSignalGroup which is referenced by SenderReceiverToSignalGroupMapping (SWS_ComXf_00011)
     and
     - attribute protocol of the TransformationTechnology is set to COMBased, and
     - the attribute version of the TransformationTechnology is set to 1 (SWS_ComXf_00004).
  8) Test that the de-serializer transformer has the following syntax:
                uint8 ComXf_Inv_&amp;lt;transformerId&amp;gt;(
                    const uint8* buffer,
                    uint16 bufferLength,
                    &amp;lt;type&amp;gt;* dataElement
                )
     where type is data type of the data element and transformerId is name of the
     referenced BswModuleEntry of the Transformer Configuration (SWS_ComXf_00010).
     Note: The generation of this API is tested for following dataTypes:
           - Composite DataTypes
           - Array (fix size) DataTypes
  9) Test that Det_ReportError is an optional API and pre-compile time macro
     COMXF_DEV_ERROR_DETECT is generated based on configuration parameter XfrmDevErrorDetect
     as described within test method: Equivalence Class Partitioning: at configuration level.
  10) This test verifies that the de-/serialization is based on the pack macros
     of the E2E library if the E2EXf is within the transformer
     chain (EB.SafetySer, EB.SafetyDeser).
  11) This test verifies that the safe de-/serialization compiles with parameter BufferLength
      of type uint16 and unit32 (ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32).
      The macro COMXF_XFRMBUFFERLENGTH_S_TYPE realizes the type through COMXF_XFRMBUFFERLENGTHTYPE_ISUINT32,
      please see test method: Equivalence Class Partitioning.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: At API level
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |
  XfrmDevErrorDetect                  | STD_OFF          | STD_ON         |
  XfrmVersionInfoApi                  | STD_OFF          | STD_ON         |
  XfrmIsSafetyTransformer             | disabled &amp; false | enabled &amp; true |
  Transformer-Chain-contains-E2EXf    | Yes              | No             |

  Equivalence Class Partitioning: At API level:

  Parameter / Permutation             | p0      | p1     |
  ---------------------------------------------------------
  BufferLenght parameter type of      | uint16  | uint32 |
  ComXf_StructOfAllBasicType_Safe     |

  Reference File Test:
  Both combinations of XfrmIsSafetyTransformer and Transformer-Chain-contains-E2EXf
  shall lead to the same generated safety related file ComXf_S_PartitionApi.c
  and ComXf_S_PartitionApi.h.

&lt;/para&gt;

Test Object: None.
Test Precondition: 
 Preconditions on Configuration:
  - XfrmIsSafetyTransformer parameter is permuted among TRUE, FALSE
  - The Transformer Chain is permuted to contain and not contain the E2EXf
  - COMXF_VERSION_INFO_API parameter is permuted among TRUE, FALSE
  - COMXF_DEV_ERROR_DETECT parameter is permuted among TRUE, FALSE
  - different SenderReceiverToSignalGroup mappings are configured for
    Composite and Array DataTypes for both sender and receiver
  - Module E2EXf is configured in tresos Studio test project

Test Execution: 
 00: VP(ComXf.EB.MemPartitioning.SafetyPartition):
     Include diff-files of ComXf_S_PartitionApi.c and ComXf_S_PartitionApi.h generated by diffcheck.
 01: VP(ComXf.EB.E2EXf_Cfg_h):
     With GNU Make test -f command verify that file E2EXf_Cfg.h was not generated.
 02: VP(ComXf.SWS_ComXf_00026):
     Successful translation of COMXf public APIs ComXf_Init()
 03: VP(ComXf.SWS_ComXf_00027):
     Successful translation of COMXf public APIs ComXf_DeInit()
 04: VP(ComXf.EB.VERSION_INFO_API):
     Macro COMXF_VERSION_INFO_API is correctly defined
 05: VP(ComXf.SWS_ComXf_00024,ComXf.EB.VERSION_INFO_API):
     Successful translation of optional API ComXf_GetVersionInfo()
 06: VP(ComXf.SWS_ComXf_00007,ComXf.SWS_ComXf_00008,ComXf.SWS_ComXf_00004):
     Successful translation of generated COM Based serializer APIs
 07: VP(ComXf.SWS_ComXf_00010,ComXf.SWS_ComXf_00011,ComXf.SWS_ComXf_00004):
     Successful translation of generated COM Based de-serializer APIs
 08: VP(ComXf.EB.DEV_ERROR_DETECT):
     Macro COMXF_DEV_ERROR_DETECT is correctly defined
 09: VP(EB.SafetySer, EB.SafetyDeser):
     De-/serialization is based on the pack macros of the E2E library
 10: VP(ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32):
     Safe de-/serialization compiles with parameter BufferLength
     of type uint16 and unit32.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.SafetyPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.E2EXf_Cfg_h</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.VERSION_INFO_API</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00007.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00007.3</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.DEV_ERROR_DETECT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetySer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetyDeser</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_COM_02001_NoMapping</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_02_NoMapping/source/application/ComXf_ComTest_02.c</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;

  1) Test that the COM Based Transformer does not generate APIs for
     XfrmImplementationMappings where the referenced XfrmISignalGroupRef is not
     mapped to a Port / DataElement in the System.
  2) Test that other XfrmImplementationMappings are generated correctly.

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Negative Test
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  XfrmImplementationMappings / XfrmISignalGroupRef           | mapped to a Port / DataElement |
  ----------------------------------------------------------------------------------------------
  ComXf_ArrayOfUint8FixSize2Type /                           | No                             |
  ISignalGroup_SenderToRecv1_ArrayOfUint8FixSize2Type
  ComXf_Inv_ArrayOfUint8FixSize2Type /                       | No                             |
  ISignalGroup_SenderExtToRecv_ArrayOfUint8FixSize2Type_Rx
  ComXf_SenderReceiverType /                                 | Yes                            |
  ISignalGroup_SenderToRecv1_SenderReceiverType
  ComXf_StructOfAllBasicType /                               | Yes                            |
  ISignalGroup_SenderToRecv1_StructOfAllBasicType
  ComXf_Inv_SenderReceiverType /                             | Yes                            |
  ISignalGroup_SenderExtToRecv_SenderReceiverType_Rx
  ComXf_Inv_StructOfAllBasicType /                           | Yes                            |
  ISignalGroup_SenderExtToRecv_StructOfAllBasicType_Rx

  Negative Test:

  XfrmImplementationMappings which are not mapped are declared as internal functions
  which would lead to an linker error in case of duplicate function definition
  via the generated XfrmImplementationMappings.

&lt;/para&gt;

Test Object: None.
Test Precondition: 
 Preconditions on Configuration:
  - SenderReceiverToSignalGroupMapping for some XfrmISignalGroupRef of an
    XfrmImplementationMappings does not exist

Test Execution: 
 01: Provide a function definition in this file for the XfrmImplementationMappings
     where generation is not expected
 02: Call all ComXf APIs which are expected to be generated
 03: VP(ComXf.EB.MissingSignalMappings):
     Successful translation of this file

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MissingSignalMappings</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_COM_03001_DataType</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_03_DataType/source/application/EbTest.c.m4</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the following generic services are supported for implementation-
  as well as application data types:
     - ComXf_transformerId
     - ComXf_Inv_transformerId

  This test verifies that the function ComXf_'transformerId' exists as specified by the
  conditions given by SWS_ComXf_00008.

  This test verifies that the function ComXf_Inv_'transformerId' exists as specified by the
  conditions given by SWS_ComXf_00011.

  This test verifies that Det_ReportError is an optional API.
  Please see test method: Equivalence Class Partitioning.

  This test verifies that file E2EXf_Cfg.h is generated by ComXf code generator and
  that within that file preprocessor symbol E2EXF_IN_USE is defined with value STD_OFF.

  This test verifies that the XfrmBufferLengthType parameter has no
  influence on the non safety related part of the ComXf module.
  XfrmBufferLengthType defines COMXF_XFRMBUFFERLENGTHTYPE_ISUINT32 which
  further defines the the type macro COMXF_XFRMBUFFERLENGTH_S_TYPE
  either with uint16 or uint32. In case of a safety related use case the
  parameter would change the behaviour of the ComXf BSW in order to
  handle the BufferLength uint32 parameter type (shall not be the case
  within this test case). Please see test method: Equivalence Class Partitioning.

  This Test verifies that the safe partition is NOT generated in case the transformer chain
  contains the E2EXf module but the the parameter XfrmIsSafetyTransformer is enabled and false.
  This is tested with the diff of the reference files ComXf_PartitionApi.c ComXf_PartitionApi.h and
  the permuted configuration as described within test method:
  Equivalence Class Partitioning: at configuration level and Reference File Test.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0                       | p1                     |
  ------------------------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16                   | UINT32                 |
  Data Types                          | IMPLEMENTATION-DATA-TYPE | APPLICATION_DATA_TYPES |
  XfrmDevErrorDetect                  | STD_OFF                  | STD_ON                 |
  XfrmVersionInfoApi                  | STD_OFF                  | STD_ON                 |
  XfrmIsSafetyTransformer             | disabled &amp; false         | enabled &amp; false        |
  Transformer-Chain-contains-E2EXf    | No                       | Yes                    |

  Reference File Test:
  Both combinations of XfrmIsSafetyTransformer and Transformer-Chain-contains-E2EXf
  shall lead to the same generated non safety related file ComXf_PartitionApi.c
  and ComXf_PartitionApi.h.

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  - different mappings are configured
  - XfrmIsSafetyTransformer parameter is permuted among enabled and disabled
  - The Transformer Chain is permuted to contain and not contain the E2EXf
  - Module E2EXf is not configured in tresos Studio test project

Test Execution: 
  01: VP: (EB.MemPartitioning.SafetyPartition):
          Include diff-files of ComXf_PartitionApi.c, ComXf_PartitionApi.h generated by diffcheck.
  02: VP: (ComXf.EB.E2EXf_Cfg_h):
          Include diff-file of E2EXf_Cfg.h generated by diffcheck.
  03: VP: Successful compilation of ComXf transformer function using configuration specified above.
  04: VP: (EB.XFRMBUFFERLENGTHTYPE_ISUINT32):
          XfrmBufferLengthType parameter has no influence on the non safety related part of the
          ComXf module.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>ComXf.SYST.SenderRecRecordElementMapping</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.SafetyPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.E2EXf_Cfg_h</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_COM_04001_MemoryPartitions</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_04_MemoryPartitions/source/application/ComXf_ComTest_04_MemoryPartitions.c</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that transformers are correctly generated and transformer functions are
  mapped to the configured memory partitions.

  The defined memory partitions with the assigned transformers are
  listed within test method: Equivalence Class Partitioning: at configuration level.

  This test also verifies that the name pattern transformerId is used for the APIs which belong to the
  BswModuleEntry referenced from a XfrmImplementationMapping by the XfrmTransformerBswModuleEntryRef
  or XfrmInvTransformerBswModuleEntryRef.(ComXf.EB.transformerId)
  
  This test also verifies that the APIs that satisfies the name pattern transformerId, implement its
  BswModuleEntry which has the same shortName and is referenced by XfmTransformationBswModuleEntryRef.
  (ComXf.SWS_Xfrm_00052)

  This test also verifies that the APIs that satisfies the name pattern transformerId, implement its
  BswModuleEntry which has the same shortName and is referenced by XfmInvTransformationBswModuleEntryRef.
  (ComXf.SWS_Xfrm_00053)
  
  This test also verifies that a memory partition file is generated as safe
  partition if at least on transformer is configured as safe transformer 
  (please see table in Equivalence Class Partitioning: at configuration level 
  testing method).
  
  This test also verifies that all non-safe transformers which are assigned to
  safe partition are generated as safe transformers.

  This test also indirectly covers the source requirements coverage for the XfrmOsApplicationRef parameter.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  XfrmImplementationMapping            | XfrmOsApplicationRef | generated files                          |
  --------------------------------------------------------------------------------------------------------
  ComXf_ArrayOfUint8FixSize2Type       | AsilBPartition       | ComXf_S_AsilBPartition_PartitionApi.c/.h |
  ComXf_StructOfAllBasicType           | AsilBPartition       | ComXf_S_AsilBPartition_PartitionApi.c/.h |
  ComXf_SenderReceiverType             | QMPartition          | ComXf_QMPartition_PartitionApi.c/.h      |
  ComXf_Inv_SenderReceiverType         | QMPartition          | ComXf_QMPartition_PartitionApi.c/.h      |
  ComXf_Inv_StructOfAllBasicType       | disabled (Default    | ComXf_PartitionApi.c/.h                  |
                                         Memory partition)
                                         
    XfrmImplementationMapping    | XfrmIsSafetyTransformer | E2EXf in Transf. chain |
  ---------------------------------------------------------------------------------------
  ComXf_ArrayOfUint8FixSize2Type | Enabled and true        | no: non-safe           |
  ComXf_StructOfAllBasicType     | Disabled and false      | no: non-safe           |
  ComXf_SenderReceiverType       | Disabled and false      | no: non-safe           |
  ComXf_Inv_SenderReceiverType   | Disabled and false      | no: non-safe           |
  ComXf_Inv_StructOfAllBasicType | Disabled and false      | no: non-safe           |

  Reference File Test:
  Ensures correct generation of the memory partitions and the basic software
  module description (ComXf_Bswmd.arxml).

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  - XfrmImplementationMapping configures following transformers and appropriate partitions as listed
    in test description.
  - Golden reference files for expected generated files are provided in the reference folder:
    ComXf_S_AsilBPartition_PartitionApi.c, ComXf_S_AsilBPartition_PartitionApi.h,
    ComXf_QMPartition_PartitionApi.c, ComXf_QMPartition_PartitionApi.h,
    ComXf_PartitionApi.c, ComXf_PartitionApi.h, ComXf_Api.h, ComXf_Bswmd.arxml

Test Execution: 
  01: ComXf MCG generates files
  02: Compare all files generated by the ComXf MCG with the golden reference files stated in the
      precondition and store the difference in file "filename".diff.
  03: VP (ComXf.EB.MemPartitioning.XfrmOsApplicationRef,
          ComXf.EB.MemPartitioning.UniquePartitionId, ComXf.EB.MemPartitioning.DefaultPartitionId,
          ComXf.EB.MemPartitioning.DefaultFileName,
          ComXf.EB.GeneratedFiles.SafeInfix,
          ComXf.EB.MemPartitioning.MemorySectionByPartitionId,
          ComXf.EB.transformerId, ComXf.SWS_Xfrm_00052,
          ComXf.SWS_Xfrm_00053):
      The generated files of execution step 02 and the reference files are identical.
  04: Call transformer functions
  05: VP: Successful compilation using configuration specified above.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.XfrmOsApplicationRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.UniquePartitionId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.DefaultPartitionId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.FileName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.DefaultFileName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.GeneratedFiles.SafeInfix</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.transformerId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_COM_05001_MultipleRec</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_05_MultipleRec/source/application/Test.c</sourcefile>
      <sourceline>39</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;

  This test verifies that for multiple receivers of a ISignalGroup:
  - inverse transformers are generated for multiple receivers of a ISignalGroup.
  - the XfrmVariableDataPrototypeInstanceRef refer to the instance of a
    VariableDataPrototype which belongs to a subclass of an AtomicSwComponentType.
    (ComXf.SWS_Xfrm_CONSTR_09095)

  - If XfrmVariableDataPrototypeInstanceRef is used for one transformer
    in a chain, it also has to be used for all other transformers in that chain.
    (ComXf.SWS_Xfrm_CONSTR_09094).

  - This test also verifies that the read signal calls of the receiving transformers
    that receive the same signal group are generated in the same order as configured
    in the SenderReceiverToSignalGroupMapping of a particular receiving port with
    which the transformer is associated by the means of XfrmVariableDataPrototypeInstanceRef.

  - This test also verifies that the data types used for the read signal calls of the
    receiving transformers that receive the same signal group are generated according to
    what is configured in the SenderReceiverToSignalGroupMapping of a particular receiving port
    with which the transformer is associated by the means of XfrmVariableDataPrototypeInstanceRef.

  - This test is a regression test for bug ASCCOMXF-639.

  - This test also verifies that the MCG can generate multiple receiver transformers with
    the following configuration of XfrmVariableDataPrototypeInstanceRef:
      - Instance reference to the VariableDataPrototype has configured the VariableDataPrototype that is associated
        with the interface of the innermost RPortPrototype of a composition (where the mapping of the VariableDataPrototypes
        is done on the basis of the matching shortName).
      - Instance reference to the VariableDataPrototype has configured the VariableDataPrototype that is associated
        with the innermost RPortPrototype of a composition (where the mapping is defined by the PortInterfaceMapping).
      - Context reference to the PortPrototype has configured the innermost RPortPrototype of a composition.



  Safe Partition (ComXf.EB.MemPartitioning.SafetyPartition):
  - This Test verifies that when the transformer chain contains a Safety module then the parameter
    &amp;lt;DISABLE-END-TO-END-CHECK&amp;gt; defines if the partition is generated Safe or NotSafe (p0, p1).
  - If the transformer chain doesn't contain a Safety module, then the partition is always
    generated NotSafe, regardless of the value of parameter &amp;lt;DISABLE-END-TO-END-CHECK&amp;gt; (p2).
  This is tested with the diff of the reference files and the permuted
  configuration as described within test methods:
  - Equivalence Class Partitioning: at configuration level
  - Reference File Test

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation          | p0    | p1      |p2       |
  --------------------------------------------------------------
  E2EXf in Transf. chain           | Yes   | Yes     | No      |
  &amp;lt;DISABLE-END-TO-END-CHECK&amp;gt; | false | true    | false   |
  Partition                        | Safe  | NotSafe | NotSafe |


  The table below represents the referenced configuration containers by
  SenderReceiverToSignalGroupMappings of each XfrmImplementationMapping
  that deserialize the SigGrp_Ecu1ToEcu2 SystemSignalGroup:


  XfrmImplementationMapping     | RPort   |      VariableDataPrototype        | ImplementationDataTypeElements
  -------------------------------------------------------------------------------------------------------------
  ComXf_Inv_Ecu2Receiver1_PortA | RPort_A | ComplexData_TestElement           | tt_u8var, tt_u16var, tt_u32var
  ComXf_Inv_Ecu2Receiver1_PortB | RPort_B | ComplexData_Reordered_TestElement | tt_u32var, tt_u16var, tt_u8var
  ComXf_Inv_Ecu2Receiver1_PortC | RPort_C | Another_ComplexData_TestElement   | eb_u8var, eb_u16var, eb_u32var
  ComXf_Inv_Ecu2Receiver2_PortD | RPort_D | ComplexData_TestElement           | tt_u8var, tt_u16var, tt_u32var
  ComXf_Inv_Ecu2Receiver3_PortE | RPort_E | SimpleStruct                      | eb_u8var, eb_u16var. eb_u32var
  ComXf_Inv_Ecu2Receiver3_PortF | RPort_F | SimpleStruct                      | eb_u8var, eb_u16var. eb_u32var

  The tables below show with which interfaces and data types the ports of the composition are
  configured:

  Outermost:
  port    |            SR interface              | VariableDataPrototype | has VariableAndParameterInterfaceMapping
  ------------------------------------------------------------------------------------------------------------------
  RPort_E | IF_SenderReceiver_SignalDegradation | SimpleStruct           |              NO
  RPort_F | IF_SenderReceiver_SignalDegradation | SimpleStruct           |             YES

  Innermost:
  port              |                   SR interface                | VariableDataPrototype
  ------------------------------------------------------------------------------------------
  RPort_Innermost_E | IF_SenderReceiver_SignalDegradation_Innermost | SimpleStruct
  RPort_Innermost_F | IF_SenderReceiver_SignalDegradation_Innermost | PartialSimpleStruct

  Reference File Test:
  Ensures correct generation of the memory partitions in relation to the
  configuration as the following:

   Parameter / Permutation | Safe                      | NotSafe                 |
  --------------------------------------------------------------------------------
  Partition                | ComXf_S_PartitionApi.c/.h | ComXf_PartitionApi.c/.h |

&lt;/para&gt;

Test Object: None.
Test Precondition: 
Pre-conditions on imported System / Software Component Description:
  The TopLevelComposition for multiple receivers is depicted by
  asc_ComXf\doc\project\design\test\SystemTopLevelComposition_MultipleReceivers.png

  - Communication via ComSignalGroup by transformer ComXf
  - Receiver specific profile information is set in TransformationComSpecProps
    as part of the queued ReceiverComSpec
  - Golden reference files for expected generated files are provided in the reference folders.
    Depending on the permutation different reference folders and files are used:
    ComXf_PartitionApi.c, ComXf_PartitionApi.h or ComXf_S_PartitionApi.c, ComXf_S_PartitionApi.h
  - The Transformer Chain is permuted to contain and not contain a Safety module
  - &amp;lt;DISABLE-END-TO-END-CHECK&amp;gt; parameter is permuted among TRUE, FALSE

Test Execution: 

  01: VP: (ComXf.EB.MemPartitioning.SafetyPartition)
      Include generated diff-files ComXf_S_PartitionApi.c, ComXf_S_PartitionApi.h or
      ComXf_PartitionApi.c, ComXf_PartitionApi.h
  02: VP (ComXf.SWS_Xfrm_CONSTR_09095):
      The generated files of execution step 01 and the reference files are identical.
  03: Call inverted transformer functions
  04: VP (ComXf.SWS_Xfrm_CONSTR_09095):
      Successful compilation of ComXf transformer using configuration specified above.


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_CONSTR_09094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_CONSTR_09095</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.SafetyPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_COM_06001_CompSwCmpTypeSimpleStruct</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_06_CompSwCmpTypeSimpleStruct/source/application/Test.c</sourcefile>
      <sourceline>34</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies the AUTOSAR concept of network representation through the
  de-/serialization based on ImplementationDataTypes. The concepts effects the
  transformer in a way that only the SwBaseType of the PortPrototypes on
  the RootSwCompositions (outermost port) of the communicating EcuInstances shall
  be used for de-/serialization. The PortPrototypes can also be typed by an
  ApplicationDataType that has a mapping to an ImplementationDataType.

  If the SwBaseType of the PortPrototype from the application software component
  (inner port) is different (type or elements) the RTE realizes the type conversion
  and/or the partial record type mapping after de-/serialization of the SwBaseType
  from the RootSwCompositions (outermost port). The mapping between the inner port
  and the outermost port is configured through the PortInterfaceMapping.

  The MCG checks if a PortInterfaceMapping for the PortPrototypes on
  the RootSwCompositions (outermost port) of the communicating EcuInstances are
  configured and uses the corresponding SwBaseType of the outermost port for generating
  the de-/serialization functions. This is verified by a valid test-configuration which
  produces a successful generation of the correct de-/serialization functions.
  This is ensured through the diffcheck of the diff-files via the reference file test.
  Please see testing method: Reference File Test.

  The test is permuted for different inner port types and typed DataTypes (Application/
  Implementation) -  see RFC 72754 or the Example - Serialization based on the
  ImplementationDataTypes within the System Template AUTOSAR CP Release 4.3.0:
  Please see testing method: Equivalence Class Partitioning: at configuration level.

  Please consider the required sub element mapping within the port interface mapping!

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

- p0: inner SwBaseType of the ApplicationSwComponent differs from the outer SwBaseType
      of the RootSwComposition:

      struct SimpleStruct{                          struct SmallSimpleStruct{
          float32   -----------------------------------&gt;   uin16
          uint8     -----------------------------------&gt;   uint8
      }                                                         }

      The SwBaseTypes are referenced/typed directly through ImplementationDataTypes.

- p1: inner SwBaseType of the ApplicationSwComponent differs from the outer SwBaseType
      of the RootSwComposition:
      
      struct PartialSimpleStruct{                   struct SmallSimpleStruct{
          float32   -----------------------------------&gt;   uin16
                                                           uint8
      }                                                         }

      The SwBaseTypes are referenced/typed indirectly through ApplicationDataTypes.

      Please note that for this use case no system signal exists for the uint8
      because a system signal reference is not present within the port interface mapping
      or the sub element mapping (usually the rec-record type mapping within the sender-receiver
      to signal group mapping is used for the system signal reference). The Com module
      requires this reference in order to get the referenced ISignal and through that
      the referenced signal to Pdu mapping. Since the reference is missing the uint8
      member will not be serialized. -&gt; only the uint16
      This behaviour is assumed because no specification specifies this use case.

- p2: inner SwBaseType of the ApplicationSwComponent is nested and differs from the outer SwBaseType
      of the RootSwComposition:

      struct SimpleStruct_nested{                          struct SmallSimpleStruct_nested{
               uin16     ---------------------------------------------------&gt;   float32
          struct SimpleStruct{                                   struct SmallSimpleStruct{
               float32   ---------------------------------------------------&gt;   uin16
               uint8     ---------------------------------------------------&gt;   uint8
                 }                                                         }
            }                                                          }

      The SwBaseTypes are referenced/typed directly through ImplementationDataTypes.

- p3: inner SwBaseType of the ApplicationSwComponent is nested and differs from the outer SwBaseType
      of the RootSwComposition:

      struct PartialSimpleStruct_nested{                          struct SmallSimpleStruct_nested{
               uin16   -----------------------------------------------------&gt;   float32
          struct PartialSimpleStruct{                                   struct SmallSimpleStruct{
               float32   ---------------------------------------------------&gt;   uin16
                                                                                uint8
                 }                                                         }
            }                                                          }

      The SwBaseTypes are referenced/typed indirectly through ApplicationDataTypes.

      Please note that for this use case no system signal exists for the uint8
      because a system signal reference is not present within the port interface mapping
      or the sub element mapping (usually the rec-record type mapping within the sender-receiver
      to signal group mapping is used for the system signal reference). The Com module
      requires this reference in order to get the referenced ISignal and through that
      the referenced signal to Pdu mapping. Since the reference is missing the uint8
      member of the SmallSimpleStruct will not be serialized. -&gt; only the uint16
      This behaviour is assumed because no specification specifies this use case.

- p4: inner SwBaseType of the ApplicationSwComponent is nested and differs from the outer SwBaseType
      of the RootSwComposition:

      struct SimpleStruct_nested_array{                  struct SmallSimpleStruct_nested_array{
               uint8 [2]     --------------------------------------&gt;   uint16 [2]
          struct SimpleStruct_array{                 struct SmallSimpleStruct_array{
               float32 [3]   --------------------------------------&gt;   uin16 [3]
               uint16   -------------------------------------------&gt;   float32
                 }                                                       }
            }                                           }

      The SwBaseTypes are referenced/typed directly through ImplementationDataTypes.

      Please note that the arrays are completely mapped to each other. The array index
      sub element mapping is not included within this test case. This use case needs to be
      clarified and tested.

  Reference File Test:
  Based on the combinations of the equivalence classes (system configuration), the generated ComXf
  de-/serialization functions differs. The correctness of those de-/serialization functions are verified
  via reference file test of ComXf_PartitionApi.c and ComXf_PartitionApi.h.

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Existence of a PortInterfaceMapping which is referenced within the corresponding SwConnector, provides
  the linkage between the inner SwComponentType and the outer RootSwCompositionType.

Test Execution: 
  01: Include generated diff-files ComXf_PartitionApi.c, ComXf_PartitionApi.h
  02: VP (ComXf.EB.OutermostImplementationDataType):
      The generated files of execution step 01 and the reference files are identical.
  03: Call transformer functions
  04: VP (ComXf.EB.OutermostImplementationDataType):
      Successful compilation of ComXf transformer using configuration specified above.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.OutermostImplementationDataType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_COM_07001_CompSwCmpTypeSimpleStruct_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_07_CompSwCmpTypeSimpleStruct_Safe/source/application/Test.c</sourcefile>
      <sourceline>34</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies the same test aspects as TS_COMXF_COM_06001_CompSwCmpTypeSimpleStruct
  but with the Safe ComXf. The Safe ComXf uses the un-pack macros from E2E libary
  for the de/-serialization.

  The test is permuted for different inner port types and typed DataTypes (Application/
  Implementation) -  see RFC 72754 or the Example - Serialization based on the
  ImplementationDataTypes within the System Template AUTOSAR CP Release 4.3.0:
  Please see testing method: Equivalence Class Partitioning: at configuration level.

  Please consider the required sub element mapping within the port interface mapping!
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

- p0: inner SwBaseType of the ApplicationSwComponent differs from the outer SwBaseType
      of the RootSwComposition:

      struct SimpleStruct{                          struct SmallSimpleStruct{
          float32   -----------------------------------&gt;   uin16
          uint8     -----------------------------------&gt;   uint8
      }                                                         }

      The SwBaseTypes are referenced/typed directly through ImplementationDataTypes.

- p1: inner SwBaseType of the ApplicationSwComponent differs from the outer SwBaseType
      of the RootSwComposition:
      
      struct PartialSimpleStruct{                   struct SmallSimpleStruct{
          float32   -----------------------------------&gt;   uin16
                                                           uint8
      }                                                         }

      The SwBaseTypes are referenced/typed indirectly through ApplicationDataTypes.

      Please note that for this use case no system signal exists for the uint8
      because a system signal reference is not present within the port interface mapping
      or the sub element mapping (usually the rec-record type mapping within the sender-receiver
      to signal group mapping is used for the system signal reference). Since the reference is
      missing but required the uint8 member will not be serialized. -&gt; only the uint16
      This behaviour is assumed because no specification specifies this use case.

- p2: inner SwBaseType of the ApplicationSwComponent is nested and differs from the outer SwBaseType
      of the RootSwComposition:

      struct SimpleStruct_nested{                          struct SmallSimpleStruct_nested{
               uin16     ---------------------------------------------------&gt;   float32
          struct SimpleStruct{                                   struct SmallSimpleStruct{
               float32   ---------------------------------------------------&gt;   uin16
               uint8     ---------------------------------------------------&gt;   uint8
                 }                                                         }
            }                                                          }

      The SwBaseTypes are referenced/typed directly through ImplementationDataTypes.

- p3: inner SwBaseType of the ApplicationSwComponent is nested and differs from the outer SwBaseType
      of the RootSwComposition:

      struct PartialSimpleStruct_nested{                          struct SmallSimpleStruct_nested{
               uin16   -----------------------------------------------------&gt;   float32
          struct PartialSimpleStruct{                                   struct SmallSimpleStruct{
               float32   ---------------------------------------------------&gt;   uin16
                                                                                uint8
                 }                                                         }
            }                                                          }

      The SwBaseTypes are referenced/typed indirectly through ApplicationDataTypes.

      Please note that for this use case no system signal exists for the uint8
      because a system signal reference is not present within the port interface mapping
      or the sub element mapping (usually the rec-record type mapping within the sender-receiver
      to signal group mapping is used for the system signal reference). Since the reference is
      missing but required the uint8 member of the SmallSimpleStruct will not be serialized.
      -&gt; only the uint16. This behaviour is assumed because no specification specifies this
      use case.

- p4: inner SwBaseType of the ApplicationSwComponent is nested and differs from the outer SwBaseType
      of the RootSwComposition:

      struct SimpleStruct_nested_array{                  struct SmallSimpleStruct_nested_array{
               uint8 [2]     --------------------------------------&gt;   uint16 [2]
          struct SimpleStruct_array{                 struct SmallSimpleStruct_array{
               float32 [3]   --------------------------------------&gt;   uin16 [3]
               uint16   -------------------------------------------&gt;   float32
                 }                                                       }
            }                                           }

      The SwBaseTypes are referenced/typed directly through ImplementationDataTypes.

      Please note that the arrays are completely mapped to each other. The array index
      sub element mapping is not included within this test case. This use case needs to be
      clarified and tested.

  Reference File Test:
  Based on the combinations of the equivalence classes (system configuration), the generated ComXf
  safety related de-/serialization functions differs. The correctness of those safety related
  de-/serialization functions are verified via reference file test of ComXf_S_PartitionApi.c
  and ComXf_S_PartitionApi.h.

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Existence of a PortInterfaceMapping which is referenced within the corresponding SwConnector, provides
  the linkage between the inner SwComponentType and the outer RootSwCompositionType.

Test Execution: 
  01: Include generated diff-files ComXf_PartitionApi.c, ComXf_PartitionApi.h
  02: VP (ComXf.EB.OutermostImplementationDataType):
      The generated files of execution step 01 and the reference files are identical.
  03: Call transformer functions
  04: VP (ComXf.EB.OutermostImplementationDataType):
      Successful compilation of ComXf transformer using configuration specified above.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.OutermostImplementationDataType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_COM_08001_ASCCOMXF442</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_08_ASCCOMXF442/source/application/EbTest.c.m4</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that only group signals are de-/serialized that are present in respective
  signal group of the Com Configuration. Please see test method: Equivalence Class Partitioning.

  This test is a regression test for bug ASCCOMXF-442.

  Generation is tested with QM and safety variant of ComXf. Also Implementation as well as
  Application data types are tested. Please see test method: Equivalence Class Partitioning.

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  In the following the SignalGroups for the transformers are listed as they are configured. Group
  signals in square brackets are not mapped in the respective SenderReceiverToSignalGroupMapping and
  are not present in Com Configuration. Hence, no (de-)serialization function (for QM ComXf)
  and no (un-)packing macro (for Safe ComXf) shall be generated. For Safe ComXf buffer size and
  group signal offsets shall be generated according to the SignalGroups as configured in Com:

  ComXf_StructOfAllBasicType:              |    ComXf_SenderReceiverType:
      struct {                             |        SignalGroup fully mapped
          boolean BTb;                     |
          uint8 BTu8;                      |
          uint16 BTu16;                    |
          uint32 BTu32;                    |
        [ sint8 BTs8; ]                    |
          sint16 BTs16;                    |
          sint32 BTs32;                    |
        [ float32 BTf32; ]                 |
        [ string BTString; ]               |
      }                                    |

  ComXf_Inv_StructOfAllBasicType:          |    ComXf_Inv_SenderReceiverType:
      struct {                             |    struct {
        [ boolean BTb; ]                   |      [ uint16 BTu16; ]
          uint8 BTu8;                      |        EbTest_Struct2OfArray2Type Array2[2];
          uint16 BTu16;                    |        uint32 BTu32;
          uint32 BTu32;                    |    }
          sint8 BTs8;                      |
        [ sint16 BTs16; ]                  |
          sint32 BTs32;                    |
          float32 BTf32;                   |
        [ string BTString; ]               |
      }                                    |

  Permutation | Safety/QM version of ComXf | used data type referenced as |
  -------------------------------------------------------------------------
  p0          | QM                         | IMPLEMENTATION-DATA-TYPE     |
  p1          | QM                         | APPLICATION-DATA-TYPE        |
  p2          | Safe                       | IMPLEMENTATION-DATA-TYPE     |
  p3          | Safe                       | APPLICATION-DATA-TYPE        |

  Reference File Test:
  Based on the combinations of the equivalence classes, the appropriated
  safety related and non safety related partition Api files shall be generated
  which is verified via a reference file test as the following:

   Parameter / Permutation   | Safe                      | QM                      |
  ----------------------------------------------------------------------------------
  Safety/QM version of ComXf | ComXf_S_PartitionApi.c/.h | ComXf_PartitionApi.c/.h |

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: VP: Include diff-files of ComXf\-::-/PM_SafetyFileInfix\-::-/_PartitionApi.c
          and ComXf\-::-/PM_SafetyFileInfix\-::-/_PartitionApi.h generated by diffcheck.
  02: VP: Successful compilation of ComXf transformer function using configuration specified above.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SYST.ISignalTriggeringReferencesISignalPort</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_COM_09001_DataType_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_09_DataType_Safe/source/application/EbTest.c</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the following generic services are supported for implementation data types
  as well as application data types for safety version of ComXf:
     - ComXf_transformerId
     - ComXf_Inv_transformerId
  Please see testing method Equivalence Class Partitioning: at configuration level.

  This test verifies that the function ComXf_'transformerId' exists as specified by the
  conditions given by SWS_ComXf_00008.

  This test verifies that the function ComXf_Inv_'transformerId' exists as specified by the
  conditions given by SWS_ComXf_00011.

  This test verifies that the safe version of ComXf is used in case the transformer chain
  contains the E2EXf module and the parameter XfrmIsSafetyTransformer is enabled/disabled and set to
  true. Please see testing method Equivalence Class Partitioning: at configuration level
  and Reference File Test.

  [ComXf.SWS_ComXf_00009]:
  This test is a regression test for ASCCOMXF-449 (ArrayOfUint8FixSize2Type could not be generated
  when application data types have been configured).

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0                       | p1                     |
  ------------------------------------------------------------------------------------------
  Data Types                          | IMPLEMENTATION-DATA-TYPE | APPLICATION_DATA_TYPES |
  XfrmIsSafetyTransformer             | disabled &amp; true          | enabled &amp; true         |
  Transformer-Chain-contains-E2EXf    | Yes                      | Yes                    |

  Reference File Test:
  Both combinations of XfrmIsSafetyTransformer and Transformer-Chain-contains-E2EXf
  shall lead to the same generated safety related file ComXf_S_PartitionApi.c
  and ComXf_S_PartitionApi.h.

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  - different mappings are configured

Test Execution: 
  01: VP: Include diff-files of ComXf_S_PartitionApi.c and ComXf_S_PartitionApi.h generated by
          diffcheck.
  02: VP: Successful compilation of ComXf transformer function using configuration specified above.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>ComXf.SYST.SenderRecRecordElementMapping</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.SafetyPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.GeneratedFiles.SafeInfix</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_COM_10001_InvalidTransformationTechnology</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_10_InvalidTransformationTechnology/source/application/EbTest.c</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that no transformer function is generated by the MCG
  for the transformer when the attribute version or protocol of the
  referenced TransformationTechnology is set to invalid value.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Reference File Tests
  - Equivalence Class Partitioning: at configuration level
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;
&lt;para&gt;
  Reference File Tests:

  Golden reference files for expected generated files are provided in the reference folder:
    - ComXf_PartitionApi.c,
    - ComXf_PartitionApi.h.
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

    transformerId                      |       referenced TransformationTechnology      |          fault             | is generated |
  -------------------------------------|------------------------------------------------|----------------------------|--------------|
  ComXf_Inv_WrongProtocol              | ComXfTransformationTechnology_WRONG_PROTOCOL   | wrong protocol attribute   |      NO      |
  ComXf_Inv_WrongVersion               | ComXfTransformationTechnology_WRONG_VERSION    | wrong version attribute    |      NO      |
  ComXf_Inv_TransformationTechnologyOK | ComXfTransformationTechnology                  | valid configuration        |      YES     |
  -------------------------------------|------------------------------------------------|----------------------------|--------------|

  The case when the TransformationTechnology is missing does not require testing if the
  transformer function is generated or not, because the MCG reports an error
  and the generation is aborted completely (i.e. no files are generated,
  covered by the Generic TransformationTechnology test).
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  - Schema validation of the system model, when running the importer, is disabled
  - Transformers which reference valid and invalid TransformationTechnologies
      are configured (see Equivalence Class Partitioning: at configuration
      level test strategy description)
  - Golden reference files are provided (see Reference File Tests test method in test description).

Test Execution: 
  01: VP: Include diff-files of reference files generated by diffcheck.
  02: VP: Successful compilation of ComXf transformer function using configuration specified above.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.TransformationTechnology.GeneratedCodeCheck</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_COM_01101</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_11_Com_FOCom/source/application/ComXf_ComTest_11_Com_FOCom.c</sourcefile>
      <sourceline>34</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that ComXf MCG generates compilable QM transformers for XfrmImplementationMappings
  that have parameters XfrmIsSafetyTransformer and XfrmOsApplicationRef disabled (assigned to the
  default partition) and which de-/serialize ComSignalGroups.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:


  Parameter / Permutation          |                                     p0 and p1                                                |
  ---------------------------------------------------------------------------------------------------------------------------------
  XfrmImplementationMapping        | ComXf_ArrayOfUint8FixSize2Type                          | ComXf_Inv_ArrayOfUint8FixSize2Type |
  XfrmOsApplicationRef             | disabled                                                | disabled                           |
  XfrmIsSafetyTransformer          | disabled &amp; false                                        | disabled &amp; false                   |
  Transformer-Chain-contains-E2EXf | No                                                      | No                                 |
  ComSignalGroup                   | GRISignalGroup_SenderToRecv1_ArrayOfUint8FixSize2Type_T | GRISignalGroup_SenderExtToRecv_ArrayOfUint8FixSize2Type_Rx_R |



  In permutation p2 these two transformers (XfrmImplementationMappings) are removed from the configuration and thus not generated by ComXf MCG.

  Reference File Test:
  Both transformers are generated as QM transformers in files ComXf_PartitionApi.c and ComXf_PartitionApi.h.

&lt;/para&gt;

Test Object: None.
Test Precondition: 
 Preconditions on Configuration:
  - All transformers have parameter XfrmIsSafetyTransformer disabled.
  - All transformers are assigned to the default memory partition (parameter XfrmOsApplicationRef is not
    configured).
  - Signal groups that are transformed are configured in Com module.

Test Execution: 
 00: VP(ComXf.EB.MemPartitioning.DefaultPartitionId):
     Include diff-files of ComXf_PartitionApi.c and ComXf_PartitionApi.h generated by diffcheck.
 01: VP(ComXf.SWS_ComXf_00007,ComXf.SWS_ComXf_00008,ComXf.SWS_ComXf_00004):
     Successful translation of generated COM Based serializer APIs
 02: VP(ComXf.SWS_ComXf_00010,ComXf.SWS_ComXf_00011,ComXf.SWS_ComXf_00004):
     Successful translation of generated COM Based de-serializer APIs

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.DefaultPartitionId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>
    <specobject>
      <id>TS_COMXF_COM_01102</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Compile/IN/ComXf_ComTest_11_Com_FOCom/source/application/ComXf_ComTest_11_Com_FOCom.c</sourcefile>
      <sourceline>136</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that ComXf MCG generates compilable safe transformers for XfrmImplementationMappings
  that have parameters XfrmIsSafetyTransformer disabled and parameter XfrmOsApplicationRef enabled
  and configured to 'AsilDPartition' and also which de-/serialize FOComSignalGroups.

  This test also verifies that ComXf MCG generates transformers that are configured as QM but
  de-/serialize FOComSignalGroups as safe (permutation p2).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation          |                                p0                                 |
  ------------------------------------------------------------------------------------------------------
  XfrmImplementationMapping        | ComXf_SenderReceiverType_Safe | ComXf_Inv_SenderReceiverType_Safe |
  XfrmOsApplicationRef             | AsilDPartition                | AsilDPartition                    |
  XfrmIsSafetyTransformer          | disabled &amp; false              | disabled &amp; false                  |
  Transformer-Chain-contains-E2EXf | Yes                           | Yes                               |
  FOComSignalGroup                 | FOComSignalGroup_Tx           | FOComSignalGroup_Rx               |



  Parameter / Permutation          |                                p2                                 |
  ------------------------------------------------------------------------------------------------------
  XfrmImplementationMapping        | ComXf_SenderReceiverType_Safe | ComXf_Inv_SenderReceiverType_Safe |
  XfrmOsApplicationRef             | AsilDPartition                | AsilDPartition                    |
  XfrmIsSafetyTransformer          | disabled &amp; false              | disabled &amp; false                  |
  Transformer-Chain-contains-E2EXf | No                            | No                                |
  FOComSignalGroup                 | FOComSignalGroup_Tx           | FOComSignalGroup_Rx               |



  In permutation p1 these two transformers (XfrmImplementationMappings) are removed from the configuration
  and thus not generated by ComXf MCG.

  Reference File Test:
  Both transformers are generated as safe transformers in files
  ComXf_S_AsilDPartition_PartitionApi.c and ComXf_S_AsilDPartition_PartitionApi.h.

&lt;/para&gt;

Test Object: None.
Test Precondition: 
 Preconditions on Configuration:
  - All transformers have parameter XfrmIsSafetyTransformer.
  - All transformers are assigned to memory partition 'AsilDPartition' via parameter XfrmOsApplicationRef.
  - Signal groups that are transformed are configured in FOCom module.

Test Execution: 
 00: VP(ComXf.EB.MemPartitioning.SafetyPartition):
     Include diff-files of ComXf_S_AsilDPartition_PartitionApi.c and ComXf_S_AsilDPartition_PartitionApi.h generated by diffcheck.
 01: VP(EB.SafetySer, EB.SafetyDeser):
     De-/serialization is based on the pack macros of the E2E library

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.MemPartitioning.SafetyPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetySer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetyDeser</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_CON_02001_Includes</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_02_General/source/application/ComXf_ConTest_02.c</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies the include structure of the ComXf module
  as described within the Reference File Test testing method.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Reference File Test:

  The ComXf module include structure is verified via reference files
  which provide the file inclusion of the corresponding ComXf module
  file as the following:

  ComXf module file    | reference file                      | includes                                           |
  ------------------------------------------------------------------------------------------------------------------
  ComXf.h              | includesOf_ComXf.h.txt              | ComXf_Api.h, ComXf_Api_Stc.h                       |
  ComXf_Api.h          | includesOf_ComXf_Api.h.txt          | ComXf_PartitionApi.h                               |
  ComXf_Api_Stc.h      | includesOf_ComXf_Api_Stc.h.txt      | ComXf_Cfg.h, ComXf_Version.h, ComXf_MemMap.h       |
  ComXf_Cfg.h          | includesOf_ComXf_Cfg.h.txt          | Std_Types.h                                        |
  ComXf.c              | includesOf_ComXf.c.txt              | ComXf_Int.h, ComXf_MemMap.h                        |
  ComXf_Int.h          | includesOf_ComXf_Int.h.txt          | TSAutosar.h, Com_ComXf.h, TransformerTypes.h,      |
                                                                      ComXf_Cfg.h, ComXf_Api_Stc.h, ComXf_Trace.h,|
                                                                      Det.h, ComXf_MemMap.h                       |
  ComXf_Trace.h        | includesOf_ComXf_Trace.h.txt        | contains no includes                               |
  ComXf_Version.h      | includesOf_ComXf_Version.h.txt      | contains no includes                               |
  ComXf_PartitionApi.c | includesOf_ComXf_PartitionApi.c.txt | ComXf_PartitionApi.h, ComXf_Int.h, ComXf_MemMap.h  |
  ComXf_PartitionApi.h | includesOf_ComXf_PartitionApi.h.txt | Std_Types.h, TransformerTypes.h, SchM_ComXfType.h, |
                                                                      ComXf_MemMap.h                              |
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  The folder "reference" contains the reference files as decribed within the
  test method: Reference File Test.

Test Execution: 

TS5 build process steps:
  00: Generate this test project with some configuration data
      for the ComXf module
  01: Extract the includes of all files stated in the test description
      into "filename".txt
  02: Compare the includes of the previous Step with the
      golden reference file includesOf_"filename".txt
      and store the difference in file includesOf_"filename".txt.diff.
  03: Include all comparison differences of Step 2
      (i.e. includesOf_"filename".h.txt.diff) within this file
  04: VP (ComXf.EB.IncludeFileStructure, ComXf.SWS_ComXf_00001)
      Execute this test case which always returns TS5ATL_RESULT_SUCCESS.
      Note:
        If there are any comparison differences, then
        the compilation process aborts with an error due to the
        inclusion of the diff result which then contains
        not compilable text.

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.IncludeFileStructure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_02002_Files</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_02_General/source/application/ComXf_ConTest_02.c</sourcefile>
      <sourceline>127</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the ComXf module is built of the static
  and generated files as described within the the Reference File
  Test testing method.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Reference File Test
&lt;/para&gt;
&lt;para&gt;
  Reference File Test:

  The ComXf module static and generated files existence is verified via reference files
  which provide the file names of the ComXf module as the following:

  reference file           | ComXf module files existence                           |
  ------------------------------------------------------------------------------------
  ComXf_HeaderFiles.txt    | ComXf.h, ComXf_Api_Stc.h, ComXf_Int.h, ComXf_Version.h |
  ComXf_SourceFiles.txt    | ComXf.c                                                |
  ComXf_GeneratedFiles.txt | ComXf_Api.h, ComXf_Cfg.h, ComXf_PartitionApi.h,        |
                                    ComXf_Trace.h, ComXf_PartitionApi.c             |

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  The folder "reference" contains the reference files as decribed within the
  test method: Reference File Test.

Test Execution: 

TS5 build process steps:
  00: Generate this test project with some configuration data
      for the ComXf module
  01: Search for all static header files existing in the
      installed Tresos plugin of ComXf
  02: Search for all static source files existing in the
      installed Tresos plugin of ComXf
  03: Search for all files generated by the ComXf module
  04: Compare the found files of the previous steps with the
      golden reference files listed in the preconditions
  05: Include all comparison differences within this file.
  06: VP (ComXf.EB.StaticFiles,ComXf.EB.GeneratedFiles)
      Execute this test case which always returns TS5ATL_RESULT_SUCCESS.
      Note:
        If there are any comparison differences, then
        the compilation process aborts with an error due to the
        inclusion of the diff result which then contains
        not compilable text.


Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.StaticFiles</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.GeneratedFiles</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_02003_DevelopmentErrorCodes</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_02_General/source/application/ComXf_ConTest_02.c</sourcefile>
      <sourceline>207</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
 Test the existence and correct definition of the error code macros
 as described within the Gray Box Testing testing method.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Gray Box Testing
&lt;/para&gt;
&lt;para&gt;
  Gray Box Testing:

  Error code macro      | Error code |
  ------------------------------------
  COMXF_E_UNINIT        | 0x01U      |
  COMXF_E_INIT_FAILED   | 0x02U      |
  COMXF_E_PARAM         | 0x03U      |
  COMXF_E_PARAM_POINTER | 0x04U      |

&lt;/para&gt;

Test Object: None.
Test Precondition: 
 Inclusion of ComXf_Api_Stc.h (indirectly included by ComXf.h ).

Test Execution: 
 01: VP(ComXf.SWS_ComXf_00028):
     COMXF_E_UNINIT has value 0x01U
 02: VP(ComXf.SWS_ComXf_00028):
     COMXF_E_INIT_FAILED has value 0x02U
 03: VP(ComXf.SWS_ComXf_00028):
     COMXF_E_PARAM has value 0x03U
 04: VP(ComXf.SWS_ComXf_00028):
     COMXF_E_PARAM_POINTER has value 0x04U

 Execute this test case which always returns TS5ATL_RESULT_SUCCESS.
 Note:
      If there are any value differences, then the compilation process
      aborts with an error due to the wrong value of the corresponding
      macro definition.

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_02004_SerializerErrorCodes</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_02_General/source/application/ComXf_ConTest_02.c</sourcefile>
      <sourceline>302</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test shall verify that error codes of serializer transformers are defined
  according to SWS_Xfrm_00031.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Gray Box Testing
&lt;/para&gt;
&lt;para&gt;
  Gray Box Testing:

  Error code macro              | Error code |
  --------------------------------------------
  E_OK                          | 0x00U      |
  E_NO_DATA                     | 0x01U      |
  E_SER_GENERIC_ERROR           | 0x81U      |
  E_SER_WRONG_PROTOCOL_VERSION  | 0x87U      |
  E_SER_WRONG_INTERFACE_VERSION | 0x88U      |
  E_SER_MALFORMED_MESSAGE       | 0x89U      |
  E_SER_WRONG_MESSAGE_TYPE      | 0x8aU      |

&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP: The macro E_OK is defined and set to 0x00.
  02: VP: The macro E_NO_DATA is defined and set to 0x01.
  03: VP: The macro E_SER_GENERIC_ERROR is defined and set to 0x81.
  04: VP: The macro E_SER_WRONG_PROTOCOL_VERSION is defined and set to 0x87.
  05: VP: The macro E_SER_WRONG_INTERFACE_VERSION is defined and set to 0x88.
  06: VP: The macro E_SER_MALFORMED_MESSAGE is defined and set to 0x89.
  07: VP: The macro E_SER_WRONG_MESSAGE_TYPE is defined and set to 0x8a.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00031</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_CON_03010_StOfAllBasic_Safe_64Bit</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_Functions.c</sourcefile>
      <sourceline>49</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that the serialization is based on the pack macros
     of the E2E library if the E2EXf is within the transformer chain (EB.SafetySer).
     This test verifies the serialization of a Composite Data Type into a linear
     byte array containing basic data types (SWS_ComXf_00009) as members of a structure
     (SWS_ComXf_00018, SWS_ComXf_00015).
     Please see testing method Equivalence Class Partitioning: at API level.
  2) Test that the serialization is based on the information provided by the
     Software Component Description (i.e. Software Components PortPrototype,
     specific dataElement of a dataElement list defined by the respective SenderReceiverInterface,
     the SenderReceiverToSignalGroupMapping, and the ISignalToIPduMapping for the SystemSignalGroup)
     (ComXf_00005_Config_SystemDes).
     Note: The related SenderReceiverInterface references an ImplementationDataType.
  3) Test that the COM Based Transformer handles each dataElement of
     the SenderReceiverInterface individually (SWS_ComXf_00016).
     Note: Here, the first dataElement of a dataElement list is tested.
  4) Test that the COM Based Transformer places the serialized data element into the data
     buffer at the position: BitPosition
  5) This test verifies the serialization behaviour (safety related) if the BufferLength parameter
     has the type uint16 (old behaviour) or uint32. The type change through the permutation of
     the test case as described within test method: Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  Verification aspect     |                                               |
  --------------------------------------------------------------------------
  Data Type serialization | Composite Data Type                           |
  basic data types used   | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members         sint32, float32, float64, uint64, sint64 and  |
                            uint8_n (string)                              |
  RetVal ComXf Api        | E_OK                                          |
  BufferLength            | EBTEST_BUFFERLENGTH_STOFALLBASIC              |
  Memory outside          | RefDataMemory                                 |
  serialized
  serialized signals      | RefData                                       |
  UnusedBitPattern        | 0                                             |
  UnAlignedOffset         | 0bits                                         |
  IPdu mapping of         | Consecutive                                   |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - ComXf module is initialized

Test Execution: 
  00: Initialize module
  01: Call BswEntry for structure holding considered basic data type
  02: Sanity Check:
      serializer function returns E_OK
  03: VP (ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32)
      the length of the array returned by the serializer function equals
      the serialized byte representation of the ComSignalGroup configured
      in the system configuration
  04: VP (ComXf.EB.ComXf_00020_BitPosition_SystemDes)
      Memory outside the serialized signals according to the configured BitPosition
      in the system configuration are not modified.
  05: VP: (SWS_ComXf_00015, SWS_ComXf_00018, ComXf_00005_Config_SystemDes, SWS_ComXf_00016,
           ComXf_00020_BitPosition_SystemDes, SWS_ComXf_00009,
           EB.SafetySer):
          The data types are serialized according to the system configuration

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.SafetySer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.boolean</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.sint8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.sint16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.sint32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.float32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint8_n</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.float64</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint64</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.sint64</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00005_Config_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00020_BitPosition_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03020_ArrayOfUint8_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_Functions.c</sourcefile>
      <sourceline>229</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that the serialization is based on the pack macros
     of the E2E library if the E2EXf is within the transformer chain (EB.SafetySer).
     This test verifies the serialization of a Fixed size Data Type (Array of a basic data type)
     into a linear byte array (SWS_ComXf_00009).
     Please see testing method Equivalence Class Partitioning: at API level.
  2) Test that the serialization is based on the information provided by the
     Software Component Description (i.e. Software Components PortPrototype,
     specific dataElement of a dataElement list defined by the respective SenderReceiverInterface,
     the SenderReceiverToSignalGroupMapping, and the ISignalToIPduMapping for the SystemSignalGroup)
     (ComXf_00005_Config_SystemDes).
     Note: The related SenderReceiverInterface references an ImplementationDataType.
  3) Test that the COM Based Transformer handles each dataElement of
     the SenderReceiverInterface individually (SWS_ComXf_00016).
     Note: Here, the second dataElement of a dataElement list is tested.
  4) Test that the COM Based Transformer places the serialized data element into the data
     buffer at the position: BitPosition
  5) Test that if the ComSignalGroup offset within the IPdu is not equal to 0
     (e.g. placed in the middle of the IPdu), then the ComXf correctly provides
     the serialized data from the first byte (SWS_ComXf_00014).
  6) This test verifies the serialization behaviour (safety related) if the BufferLength parameter
     has the type uint16 (old behaviour) or uint32. The type change through the permutation of
     the test case as described within test method: Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  Verification aspect     |                                                   |
  ------------------------------------------------------------------------------
  Data Type serialization | Fixed size Data Type (Array of a basic data type) |
  basic data types used   | uint8                                             |
  as elements
  RetVal ComXf Api        | E_OK                                              |
  BufferLength            | EBTEST_BUFFERLENGTH_ARRAYOFUINT8                  |
  Memory outside
  serialized signals      | RefDataMemory                                     |
  serialized data types   | RefDataUint8                                      |
  UnusedBitPattern        | 0                                                 |
  UnAlignedOffset         | 0bits                                             |
  IPdu mapping of         | Consecutive                                       |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Call serializer function of a one-dimensional array of fixed size
  02: Sanity Check:
      serializer function returns E_OK
  03: VP (ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32)
      the length of the array returned by the serializer function equals
      the serialized byte representation of the ComSignalGroup configured in
      the system configuration
  04: VP (ComXf.EB.ComXf_00020_BitPosition_SystemDes)
      Memory outside the serialized signals according to the configured BitPosition
      in the system configuration are not modified.
  05: VP (SWS_ComXf_00019, ComXf_00005_Config_SystemDes, SWS_ComXf_00014,
          SWS_ComXf_00009, EB.SafetySer):
          The data types are serialized according to Com configuration
          starting with the first byte (even if ComSignalGroup offset does not equal 0)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.SafetySer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00005_Config_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00020_BitPosition_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03030_NestedArrayOfStruct_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_Functions.c</sourcefile>
      <sourceline>372</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that the serialization is based on the pack macros
     of the E2E library if the E2EXf is within the transformer chain (EB.SafetySer).
     This test verifies the serialization of a Fixed size Data Type (Array of a Composite data type
     containing also Fixed size Data Types) into a linear byte array (SWS_ComXf_00009).
     Please see test method: Equivalence Class Partitioning: At API level.
  2) Test that the serialization is based on the information provided by the
     Software Component Description (i.e. Software Components PortPrototype,
     specific dataElement of a dataElement list defined by the respective SenderReceiverInterface,
     the SenderReceiverToSignalGroupMapping, and the ISignalToIPduMapping for the SystemSignalGroup)
     (ComXf_00005_Config_SystemDes).
     Note: The related SenderReceiverInterface references an ImplementationDataType.
  3) Test that the COM Based Transformer handles each dataElement of
     the SenderReceiverInterface individually (SWS_ComXf_00016).
     Note: Here, the third dataElement of a dataElement list is tested.
  4) Test that COM Based Transformer returns E_OK (successful operation assumed) (SWS_ComXf_00007).
  5) Test that if the ComSignalGroup offset within the IPdu is not equal to 0
     (e.g. placed in the middle of the IPdu), then the ComXf correctly provides
     the serialized data from the first byte (SWS_ComXf_00014) .
  6) Test that range checks are implemented and occur if the value of the data element
     member cannot be represented by the mapped group signal. In this case the error code
     E2E_RANGECHK_INVALID (0xFFU) is return (Safety_RangeChecks).
     Test that the serialization is still done correctly if E2E_RANGECHK_INVALID (0xFFU)
     is return (Safety_RangeChecks_SerBehavior).
     Please see test method: Equivalence Class Partitioning: At API level.
  7) This test verifies the serialization behaviour (safety related) if the BufferLength parameter
     has the type uint16 (old behaviour) or uint32. The type change through the permutation of
     the test case as described within test method: Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  Verification aspect     | serialized data types in range                   | serialized data types out of range               |
  -------------------------------------------------------------------------------------------------------------------------------
  serialized data types   | RefData_InRange                                  | RefData_OutOfRange                               |
  data type serialization | Fixed size Data Type (Array of a Composite       | Fixed size Data Type (Array of a Composite       |
                            data type containing also Fixed size Data Types)   data type containing also Fixed size Data Types)
  basic data types used   | uint16, uint32, Fixed size Array of struct,      | uint16, uint32, Fixed size Array of struct,      |
  as elements               Fixed size Array of sint16                         Fixed size Array of sint16                       |
  RetVal ComXf Api        | E_OK                                             | E2E_RANGECHK_INVALID                             |
  BufferLength            | EBTEST_BUFFERLENGTH_NESTEDARRAYOFSTRUCT          | EBTEST_BUFFERLENGTH_NESTEDARRAYOFSTRUCT          |
  UnusedBitPattern        | 0                                                | 0                                                |
  UnAlignedOffset         | 0bits                                            | 0bits                                            |
  IPdu mapping of         | Consecutive                                      | Consecutive                                      |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - Initialized ComXf module

Test Execution: 
  01: Call BswEntry for structure holding nested structures and basic data types
  02: VP (SWS_ComXf_00007):
      serializer function returns E_OK
  03: VP (ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32)
      the length of the array returned by the serializer function equals
      the serialized byte representation of the ComSignalGroup configured in
      the system configuration
  04: VP: (SWS_ComXf_00019, ComXf_00005_Config_SystemDes, EB.SafetySer,
           SWS_ComXf_00009, SWS_ComXf_00014):
          The data types are serialized according to system configuration
          starting with the first byte (even if ComSignalGroup offset does not equal 0)
  05: VP: (Safety_RangeChecks) Range check sets RetVal to E2E_RANGECHK_INVALID
  06: VP: (Safety_RangeChecks_SerBehavior) Buffer length is still correct
  07: VP: (Safety_RangeChecks_SerBehavior) Data types are serialized correct

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.SafetySer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00005_Config_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.Safety_RangeChecks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.Safety_RangeChecks_SerBehavior</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03040_StructPartlyMapped_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_Functions.c</sourcefile>
      <sourceline>568</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that that the bufferlength is correctly calculated by the Safe ComXf, and
     also the same way as the Com module, with the configuration which is described within
     the testing method: Equivalence Class Partitioning: at API level.

     A whole signal group is mapped in &amp;lt;I-SIGNAL-TO-I-PDU-MAPPING&amp;gt;, but not all group signals are
     mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt;. This means only the group signals which
     are mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt; will be serialized. Although only a
     part of the group signals are serialized the bufferlength has to be calculated based on all
     group signals, also the ones which are not being serialized.
     The &amp;lt;I-SIGNAL-I-PDU&amp;gt; is initialized with &amp;lt;UNUSED-BIT-PATTERN&amp;gt;0&amp;lt;/UNUSED-BIT-PATTERN&amp;gt;.
     This test also checks that the initialization is unaltered by the elements which shall
     not be serialized.

  2) This test verifies that the serialization is based on the pack macros
     of the E2E library if the E2EXf is within the transformer chain (EB.SafetySer).
     This test verifies the serialization of a Composite Data Type into a linear
     byte array containing basic data types as struct members as described within
     the testing method: Equivalence Class Partitioning: at API level.
  3) Test that the serialization is based on the information provided by the
     Software Component Description (i.e. Software Components PortPrototype,
     specific dataElement of a dataElement list defined by the respective SenderReceiverInterface,
     the SenderReceiverToSignalGroupMapping, and the ISignalToIPduMapping for the SystemSignalGroup)
     (ComXf_00005_Config_SystemDes).
     Note: The related SenderReceiverInterface references an ImplementationDataType.
  4) Test that the COM Based Transformer places the serialized data element into the data
     buffer at the position: BitPosition
  5) This test verifies the serialization behaviour (safety related) if the BufferLength parameter
     has the type uint16 (old behaviour) or uint32. The type change through the permutation of
     the test case as described within test method: Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  TS_COMXF_CON_03040_StructPartlyMapped_Safe mapping:

  struct EbTest_StructPartlyMapped      struct StructPartlyMapped_Safe
  {                                     {
    VAR(uint8, TYPEDEF) BTu8_A;           VAR(uint8, TYPEDEF) BTu8_A;
    VAR(uint8, TYPEDEF) BTu8_B;           VAR(uint8, TYPEDEF) BTu8_B;
    VAR(uint16, TYPEDEF) BTu16_C; ------- VAR(uint16, TYPEDEF) BTu16_C;
    VAR(uint16, TYPEDEF) BTu16_D; ------- VAR(uint16, TYPEDEF) BTu16_D;
  }                                     }

  TS_COMXF_CON_03050_StructPartlyMapped2_Safe mapping:

  struct EbTest_StructPartlyMapped      struct StructPartlyMapped_Safe
  {                                     {
    VAR(uint8, TYPEDEF) BTu8_A; --------- VAR(uint8, TYPEDEF) BTu8_A;
    VAR(uint8, TYPEDEF) BTu8_B;           VAR(uint8, TYPEDEF) BTu8_B;
    VAR(uint16, TYPEDEF) BTu16_C; ------- VAR(uint16, TYPEDEF) BTu16_C;
    VAR(uint16, TYPEDEF) BTu16_D;         VAR(uint16, TYPEDEF) BTu16_D;
  }                                     }

  Verification aspect         | TS_COMXF_CON_03040_StructPartlyMapped_Safe | TS_COMXF_CON_03050_StructPartlyMapped2_Safe |
  -------------------------------------------------------------------------------------------------------------------------
  mapped in SENDER-RECEIVER-  | BTu16_C, BTu16_D                           | BTu8_A, BTu16_C                             |
  TO-SIGNAL-GROUP-MAPPING
  Data Type serialization     | Composite Data Type                        | Composite Data Type                         |
  basic data types used       | uint16                                     | uint8, uint16                               |
  as elements
  RetVal ComXf Api            | E_OK                                       | E_OK                                        |
  BufferLength                | EBTEST_BUFFERLENGTH_STPARTLYMAPPED         | EBTEST_BUFFERLENGTH_STPARTLYMAPPED          |
  Memory outside              | RefDataMemory                              | RefDataMemory                               |
  serialized signals
  serialized data types       | RefData                                    | RefData                                     |
  I-SIGNAL-I-PDU              | UNUSED-BIT-PATTERN: 0                      | UNUSED-BIT-PATTERN: 255                     |
  initialized with
  UnusedBitPattern            | 0                                          | 0                                           |
  UnAlignedOffset             | 0bits                                      | 0bits                                       |
  IPdu mapping of             | Consecutive                                | Consecutive                                 |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Only two of the four group signals are mapped in SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - ComXf module is initialized

Test Execution: 
  00: Initialize module
  01: Call BswEntry for structure holding considered basic data type
  02: Sanity Check:
      serializer function returns E_OK
  03: VP (ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32, ComXf.SWS_ComXf_00021)
      The length of the array returned by the serializer function equals
      the two serialized group signals plus the two not serialized group signals.
  04: VP (ComXf.EB.ComXf_00020_BitPosition_SystemDes, ComXf.SWS_ComXf_00021)
      Memory outside the serialized signals according to the configured BitPosition
      in the system configuration are not modified.
  05: VP: (SWS_ComXf_00015, SWS_ComXf_00018, ComXf_00005_Config_SystemDes, SWS_ComXf_00016,
           ComXf_00020_BitPosition_SystemDes, SWS_ComXf_00009, EB.SafetySer,
           ComXf.SWS_ComXf_00021):
          The data elements are serialized according to the system configuration

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetySer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00005_Config_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00020_BitPosition_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03050_StructPartlyMapped2_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_Functions.c</sourcefile>
      <sourceline>760</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that that the bufferlength is correctly calculated by the Safe ComXf, and
     also the same way as the Com module, with the configuration which is described within
     the testing method: Equivalence Class Partitioning: at API level.

     A whole signal group is mapped in &amp;lt;I-SIGNAL-TO-I-PDU-MAPPING&amp;gt;, but not all group signals are
     mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt;. This means only the group signals which
     are mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt; will be serialized. Although only a
     part of the group signals are serialized the bufferlength has to be calculated based on all
     group signals, also the ones which are not being serialized.
     The &amp;lt;I-SIGNAL-I-PDU&amp;gt; is initialized with &amp;lt;UNUSED-BIT-PATTERN&amp;gt;255&amp;lt;/UNUSED-BIT-PATTERN&amp;gt;.
     This test also checks that the initialization is unaltered by the elements which shall
     not be serialized.

  2) This test verifies that the serialization is based on the pack macros
     of the E2E library if the E2EXf is within the transformer chain (EB.SafetySer).
     This test verifies the serialization of a Composite Data Type into a linear
     byte array containing basic data types as members of a structure as
     described within the testing method: Equivalence Class Partitioning: at API level.
  3) Test that the serialization is based on the information provided by the
     Software Component Description (i.e. Software Components PortPrototype,
     specific dataElement of a dataElement list defined by the respective SenderReceiverInterface,
     the SenderReceiverToSignalGroupMapping, and the ISignalToIPduMapping for the SystemSignalGroup)
     (ComXf_00005_Config_SystemDes).
     Note: The related SenderReceiverInterface references an ImplementationDataType.
  4) Test that the COM Based Transformer places the serialized data element into the data
     buffer at the position: BitPosition
  5) This test verifies the serialization behaviour (safety related) if the BufferLength parameter
     has the type uint16 (old behaviour) or uint32. The type change through the permutation of
     the test case as described within test method: Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  TS_COMXF_CON_03040_StructPartlyMapped_Safe mapping:

  struct EbTest_StructPartlyMapped      struct StructPartlyMapped_Safe
  {                                     {
    VAR(uint8, TYPEDEF) BTu8_A;           VAR(uint8, TYPEDEF) BTu8_A;
    VAR(uint8, TYPEDEF) BTu8_B;           VAR(uint8, TYPEDEF) BTu8_B;
    VAR(uint16, TYPEDEF) BTu16_C; ------- VAR(uint16, TYPEDEF) BTu16_C;
    VAR(uint16, TYPEDEF) BTu16_D; ------- VAR(uint16, TYPEDEF) BTu16_D;
  }                                     }

  TS_COMXF_CON_03050_StructPartlyMapped2_Safe mapping:

  struct EbTest_StructPartlyMapped      struct StructPartlyMapped_Safe
  {                                     {
    VAR(uint8, TYPEDEF) BTu8_A; --------- VAR(uint8, TYPEDEF) BTu8_A;
    VAR(uint8, TYPEDEF) BTu8_B;           VAR(uint8, TYPEDEF) BTu8_B;
    VAR(uint16, TYPEDEF) BTu16_C; ------- VAR(uint16, TYPEDEF) BTu16_C;
    VAR(uint16, TYPEDEF) BTu16_D;         VAR(uint16, TYPEDEF) BTu16_D;
  }                                     }

  Verification aspect         | TS_COMXF_CON_03040_StructPartlyMapped_Safe | TS_COMXF_CON_03050_StructPartlyMapped2_Safe |
  -------------------------------------------------------------------------------------------------------------------------
  mapped in SENDER-RECEIVER-  | BTu16_C, BTu16_D                           | BTu8_A, BTu16_C                             |
  TO-SIGNAL-GROUP-MAPPING
  Data Type serialization     | Composite Data Type                        | Composite Data Type                         |
  basic data types used       | uint16                                     | uint8, uint16                               |
  as elements
  RetVal ComXf Api            | E_OK                                       | E_OK                                        |
  BufferLength                | EBTEST_BUFFERLENGTH_STPARTLYMAPPED         | EBTEST_BUFFERLENGTH_STPARTLYMAPPED          |
  Memory outside              | RefDataMemory                              | RefDataMemory                               |
  serialized signals
  serialized data types       | RefData                                    | RefData                                     |
  I-SIGNAL-I-PDU              | UNUSED-BIT-PATTERN: 0                      | UNUSED-BIT-PATTERN: 255                     |
  initialized with
  UnusedBitPattern            | 0                                          | 0                                           |
  UnAlignedOffset             | 0bits                                      | 0bits                                       |
  IPdu mapping of             | Consecutive                                | Consecutive                                 |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Only two of the four group signals are mapped in SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - ComXf module is initialized

Test Execution: 
  00: Initialize module
  01: Call BswEntry for structure holding considered basic data type
  02: Sanity Check:
      serializer function returns E_OK
  03: VP (ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32, ComXf.SWS_ComXf_00021)
      The length of the array returned by the serializer function equals
      the two serialized group signals plus the two not serialized group signals.
  04: VP (ComXf.EB.ComXf_00020_BitPosition_SystemDes, ComXf.SWS_ComXf_00021)
      Memory outside the serialized signals according to the configured BitPosition
      in the system configuration are not modified.
  05: VP: (SWS_ComXf_00015, SWS_ComXf_00018, ComXf_00005_Config_SystemDes, SWS_ComXf_00016,
           ComXf_00020_BitPosition_SystemDes, SWS_ComXf_00009, EB.SafetySer,
           ComXf.SWS_ComXf_00021):
          The data elements are serialized according to the system configuration

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetySer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00005_Config_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00020_BitPosition_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03060_InputParamSer</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_Functions.c</sourcefile>
      <sourceline>952</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies the correct behavior in case of invalid input data
     (buffer, bufferLength or dataElement is NULL) for the
     safety related serializer function.
     The correct behavior is:
     * the return value shall be E_SER_GENERIC_ERROR (0x81U) (SWS_ComXf_00007.2)
     * the output parameter values shall not change
     Please see testing method: Equivalence Class Partitioning: at API level.
  2) This test verifies that no development error is called (EB.SafetyDet).
  3) This test verifies the correct behavior in case of invalid input data
     (buffer, bufferLength or dataElement is NULL) for the
     safety related serializer function if the BufferLength parameter
     has the type uint16 (old behaviour) or uint32.
     The type changes through the permutation of the test case as described
     within testing method: Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at API level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Negative Tests / Fault-injection: at API level:

  ComXf API service               |  Det report cause                             | Det ErrorId reported | RetVal              |
  -------------------------------------------------------------------------------------------------------------------------------
  ComXf_StructOfAllBasicType_Safe | NullPtr call with 1st argument (buffer)       | no Det report        | E_SER_GENERIC_ERROR |
  ComXf_StructOfAllBasicType_Safe | NullPtr call with 2nd argument (bufferLength) | no Det report        | E_SER_GENERIC_ERROR |
  ComXf_StructOfAllBasicType_Safe | NullPtr call with 3rd argument (dataElement)  | no Det report        | E_SER_GENERIC_ERROR |

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled

Test Execution: 
/---Test Sequence 1---/
  01: Call BswEntry with buffer equals NULL_PTR
  02: VP: serializer function returns E_SER_GENERIC_ERROR (0x81U)
  03: Sanity Check:
       the length of the buffer do not change
/---Test Sequence 2---/
  04: Call BswEntries with bufferLength equals NULL_PTR
  05: VP: serializer function returns E_SER_GENERIC_ERROR (0x81U)
  06: Sanity Check:
       the buffer do not change
/---Test Sequence 3---/
  07: Call BswEntries with dataElement equals NULL_PTR
  08: VP: serializer function returns E_SER_GENERIC_ERROR (0x81U)
  09: Sanity Check:
       the buffer and the bufferLength do not change
/------/
  10: VP: No Det was called

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetyPrecon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetyDet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetyXfrmBufferLengthType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03070_Safe_Init</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_Functions.c</sourcefile>
      <sourceline>1113</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies the correct initialization behavior for the
     safety related serializer function which is realized
     via the E2E_COMXF_S_TXPREPAREBUFFER macro.
  2) This test verifies the correct initialization behavior for the
     safety related serializer function which is realized
     via the E2E_COMXF_S_TXPREPAREBUFFER macro if the BufferLength parameter
     has the type uint16 (old behaviour) or uint32.
     The type changes through the permutation of the test case as described
     within testing method Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Gray box testing
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Gray box testing:

  E2E_COMXF_S_TXPREPAREBUFFER is used as an internal call within an safe ComXf API which
  initializes a forwarded buffer without any precondition checks (done
  within safe ComXf API). However, this test case verifies the correct initialization of the
  forwarded buffer and the correct setting of the output parameter bufferLength_output.

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled

Test Execution: 
000: ensure buffer initialize with dedicated invalid value
010: change init value and initialize ref test buffer
020: initialize test buffer via E2E_COMXF_S_TXPREPAREBUFFER
030: VP output bufferLength param set correctly
040: VP test buffer set correctly

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.SafetyInit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetyXfrmBufferLengthType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03080_Serialize_StructOfOneElement_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_Functions.c</sourcefile>
      <sourceline>1214</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
This test verifies that ComXf can serialize a data element of structure type with only one member data element.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  Verification aspect     |                                               |
  --------------------------------------------------------------------------
  Data Type serialization | Composite Data Type                           |
  basic data type used    | uint8                                         |
  as struct member
  RetVal ComXf Api        | E_OK                                          |
  BufferLength            | EBTEST_BUFFERLENGTH_STRUCT_OF_ONE_ELEMENT     |
  Memory outside          | RefDataMemory                                 |
  serialized
  serialized signals      | RefData                                       |
  UnusedBitPattern        | 0                                             |
  UnAlignedOffset         | 0bits                                         |
  IPdu mapping of         | Consecutive                                   |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - ComXf module is initialized

Test Execution: 
  00: Initialize module
  01: Call BswEntry for structure holding considered basic data type
  02: Sanity Check:
      serializer function returns E_OK
  03: VP (ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32)
      the length of the array returned by the serializer function equals
      the serialized byte representation of the ComSignalGroup configured
      in the system configuration
  04: VP: (SWS_ComXf_00018):
          The data types are serialized according to the system configuration

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_CON_03110_StOfAllBasic_Safe_64Bit</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_InvFunctions.c</sourcefile>
      <sourceline>60</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that the de-serialization is based on the unpack macros
     of the E2E library if the E2EXf is within the transformer chain (EB.SafetyDeser).
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to a structure of all basic data types
     as part of a Composite Data Type
     of Sender/Receiver communication using the ComBased de-serialization
     (SWS_ComXf_00012, SWS_ComXf_00018).
     Please see testing method: Equivalence Class Partitioning: at API level.
  2) Test that the COM Based Transformer takes the
     buffer at the position ComBitPosition to for the de-serialization of the data element.
  3) This test verifies the de-serialization behaviour (safety related) if the BufferLength parameter
     has the type uint16 (old behaviour) or uint32. The type change through the permutation of
     the test case as described within test method:
     Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  Verification aspect        |                                               |
  ----------------------------------------------------------------------------
  Data Type de-serialization | Composite Data Type                           |
  basic data types used      | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members            sint32, float32, float64, uint64, sint64 and  |
                               uint8_n (string)                              |
  RetVal ComXf Api           | E_OK                                          |
  de-serialized signals      | members of DesStOfAllBasic                    |
  UnusedBitPattern           | 0                                             |
  UnAlignedOffset            | 0bits                                         |
  IPdu mapping of            | Consecutive                                   |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Call deserializer function of a serialized structure holding all basic data types
  02: VP: (SWS_ComXf_00018, ComXf_00020_BitPosition_SystemDes, EB.SafetyDeser,
           SWS_ComXf_00012, EB.XFRMBUFFERLENGTHTYPE_ISUINT32)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.SafetyDeser</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00020_BitPosition_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03120_ArrayOfUint8_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_InvFunctions.c</sourcefile>
      <sourceline>194</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that the de-serialization is based on the unpack macros
     of the E2E library if the E2EXf is within the transformer chain (EB.SafetyDeser).
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to an array of fixed length of a
     basic data type of Sender/Receiver communication using the ComBased deserialization
     (SWS_ComXf_00012, SWS_ComXf_00019).
     Please see testing method: Equivalence Class Partitioning: at API level.
  2) Test that the safety related COM Based Transformer takes the
     buffer at the position BitPosition for the de-serialization of the data element
     where the BitPosition is taken from the system configuration
     (ComXf_00020_BitPosition_SystemDes).
  3) Test that if the ComSignalGroup offset within the IPdu is not equal to 0
     (e.g. placed in the middle of the IPdu), then the ComXf correctly de-serializes
     the data from the first byte (SWS_ComXf_00014).
  4) This test verifies the de-serialization behaviour (safety related) if the BufferLength parameter
     has the type uint16 (old behaviour) or uint32. The type change through the permutation of
     the test case as described within testing method:
     Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  Verification aspect         |                                                   |
  ---------------------------------------------------------------------------------
  Data Type de-serialization  | Fixed size Data Type (Array of a basic data type) |
  basic data types used       | uint8                                             |
  as elements
  RetVal ComXf Api            | E_OK                                              |
  de-serialized data types    | RefDataUint8                                      |
  UnusedBitPattern            | 0                                                 |
  UnAlignedOffset             | 0bits                                             |
  IPdu mapping of             | Consecutive                                       |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Call deserializer function of a serialized array of fixed size of a basic data type
  02: VP: (SWS_ComXf_00019, SWS_ComXf_00020, SWS_ComXf_00012, EB.XFRMBUFFERLENGTHTYPE_ISUINT32)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.SafetyDeser</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00020_BitPosition_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03130_NestedArrayOfStruct_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_InvFunctions.c</sourcefile>
      <sourceline>313</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that the de-serialization is based on the unpack macros
     of the E2E library if the E2EXf is within the transformer chain (EB.SafetyDeser).
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to an array of structured data type
     holding a nested array of structured data type (and so on) of Sender/Receiver communication
     using the ComBased deserialization (SWS_ComXf_00012, SWS_ComXf_00019).
     Please see testing method: Equivalence Class Partitioning: at API level.
  2) Test that COM Based Transformer returns E_OK (successful operation assumed) (SWS_ComXf_00010).
  3) Test that if the ComSignalGroup offset within the IPdu is not equal to 0
     (e.g. placed in the middle of the IPdu), then the ComXf correctly de-serializes
     the data from the first byte (SWS_ComXf_00014).
  4) This test verifies the de-serialization behaviour (safety related) if the BufferLength parameter
     has the type uint16 (old behaviour) or uint32. The type change through the permutation of
     the test case as described within testing method:
     Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  Verification aspect        |                                                  |
  --------------------------------------------------------------------------------
  Data Type de-serialization | Fixed size Data Type (Array of a Composite       |
                               data type containing also Fixed size Data Types)
  basic data types used      | uint16, uint32, Fixed size Array of struct,      |
  as elements                  Fixed size Array of sint16
  RetVal ComXf Api           | E_OK                                             |
  de-serialized data types   | DesNestedArrayOfStructFixSize element members    |
  UnusedBitPattern           | 0                                                |
  UnAlignedOffset            | 0bits                                            |
  IPdu mapping of            | Consecutive                                      |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Call deserializer function of a serialized array of structure holding nested array of
      structure (and so on)
  02: VP (SWS_ComXf_00010)
      deserializer function returns E_OK
  03: VP: (SWS_ComXf_00019, SWS_ComXf_00012, SWS_ComXf_00014, EB.SafetyDeser,
           EB.XFRMBUFFERLENGTHTYPE_ISUINT32)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.SafetyDeser</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03140_StructPartlyMapped_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_InvFunctions.c</sourcefile>
      <sourceline>452</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that that the deserialization is done correctly by the Safe ComXf, and
     also the same way as the Com module, with the following configuration which is described within
     the testing method: Equivalence Class Partitioning: at API level.

     A whole signal group is mapped in &amp;lt;I-SIGNAL-TO-I-PDU-MAPPING&amp;gt;, but not all group signals are
     mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt;. This means only the group signals which
     are mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt; shall be serialized/deserialized.
     The not serialized/deserialized elements shall not alter the output of the deserializer.

  2) This test verifies that the de-serialization is based on the unpack macros
     of the E2E library if the E2EXf is within the transformer chain (EB.SafetyDeser).
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to a structure of four elements as part of a Composite Data
     Type of Sender/Receiver communication using the ComBased de-serialization
     (SWS_ComXf_00012, SWS_ComXf_00018) as described within
     the testing method: Equivalence Class Partitioning: at API level.
  3) Test that the COM Based Transformer takes the
     buffer at the position ComBitPosition to for the de-serialization of the data element.
  4) This test verifies the de-serialization behaviour (safety related) if the BufferLength
     parameter has the type uint16 (old behaviour) or uint32. The type change through the
     permutation of the test case as described within test method:
     Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  TS_COMXF_CON_03140_StructPartlyMapped_Safe mapping:

  struct EbTest_StructPartlyMapped      struct StructPartlyMapped_Safe
  {                                     {
    VAR(uint8, TYPEDEF) BTu8_A;           VAR(uint8, TYPEDEF) BTu8_A;
    VAR(uint8, TYPEDEF) BTu8_B;           VAR(uint8, TYPEDEF) BTu8_B;
    VAR(uint16, TYPEDEF) BTu16_C; ------- VAR(uint16, TYPEDEF) BTu16_C;
    VAR(uint16, TYPEDEF) BTu16_D; ------- VAR(uint16, TYPEDEF) BTu16_D;
  }                                     }

  TS_COMXF_CON_03150_StructPartlyMapped2_Safe mapping:

  struct EbTest_StructPartlyMapped      struct StructPartlyMapped_Safe
  {                                     {
    VAR(uint8, TYPEDEF) BTu8_A; --------- VAR(uint8, TYPEDEF) BTu8_A;
    VAR(uint8, TYPEDEF) BTu8_B;           VAR(uint8, TYPEDEF) BTu8_B;
    VAR(uint16, TYPEDEF) BTu16_C; ------- VAR(uint16, TYPEDEF) BTu16_C;
    VAR(uint16, TYPEDEF) BTu16_D;         VAR(uint16, TYPEDEF) BTu16_D;
  }                                     }

  Verification aspect /
  Permutation test-case       | TS_COMXF_CON_03140_StructPartlyMapped_Safe | TS_COMXF_CON_03150_StructPartlyMapped2_Safe |
  -------------------------------------------------------------------------------------------------------------------------
  mapped in SENDER-RECEIVER-  | BTu16_C, BTu16_D                           | BTu8_A, BTu16_C                             |
  TO-SIGNAL-GROUP-MAPPING
  Data Type de-serialization  | Composite Data Type                        | Composite Data Type                         |
  basic data types used       | uint16                                     | uint8, uint16                               |
  as elements
  RetVal ComXf Api            | E_OK                                       | E_OK                                        |
  de-serialized data types    | DesStPartlyMapped element members          | DesStPartlyMapped element members           |
  UnusedBitPattern            | 0                                          | 0                                           |
  UnAlignedOffset             | 0bits                                      | 0bits                                       |
  IPdu mapping of             | Consecutive                                | Consecutive                                 |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Call deserializer function of a serialized structure holding two uint8 and two uint16
      data types
  02: VP: (ComXf.SWS_ComXf_00021)
          The group signals which are not inside SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING were
          not serialized and they did not change the matching structure elements.
  03: VP: (SWS_ComXf_00018, ComXf_00020_BitPosition_SystemDes, EB.SafetyDeser,
           SWS_ComXf_00012, EB.XFRMBUFFERLENGTHTYPE_ISUINT32, ComXf.SWS_ComXf_00021)
          The deserialized array holds only the serialized values

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetyDeser</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00020_BitPosition_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03150_StructPartlyMapped2_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_InvFunctions.c</sourcefile>
      <sourceline>612</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that that the deserialization is done correctly by the Safe ComXf, and
     also the same way as the Com module, with the following configuration which is described within
     the testing method: Equivalence Class Partitioning: at API level.

     A whole signal group is mapped in &amp;lt;I-SIGNAL-TO-I-PDU-MAPPING&amp;gt;, but not all group signals are
     mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt;. This means only the group signals which
     are mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt; shall be serialized/deserialized.
     The not serialized/deserialized elements shall not alter the output of the deserializer.

     The other two elements are not being serialized or deserialized.
  2) This test verifies that the de-serialization is based on the unpack macros
     of the E2E library if the E2EXf is within the transformer chain (EB.SafetyDeser).
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to a structure of four elements as part of a Composite Data
     Type of Sender/Receiver communication using the ComBased de-serialization
     (SWS_ComXf_00012, SWS_ComXf_00018) as described within
     the testing method: Equivalence Class Partitioning: at API level.
  3) Test that the COM Based Transformer takes the
     buffer at the position ComBitPosition to for the de-serialization of the data element.
  4) This test verifies the de-serialization behaviour (safety related) if the BufferLength
     parameter has the type uint16 (old behaviour) or uint32. The type change through the
     permutation of the test case as described within test method:
     Equivalence Class Partitioning: at configuration level.
     Please notice that this test case has currently no boundary test stimuli
     (i.e. BufferLength is uint16 and signal group is 65535 byte large).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  TS_COMXF_CON_03140_StructPartlyMapped_Safe mapping:

  struct EbTest_StructPartlyMapped      struct StructPartlyMapped_Safe
  {                                     {
    VAR(uint8, TYPEDEF) BTu8_A;           VAR(uint8, TYPEDEF) BTu8_A;
    VAR(uint8, TYPEDEF) BTu8_B;           VAR(uint8, TYPEDEF) BTu8_B;
    VAR(uint16, TYPEDEF) BTu16_C; ------- VAR(uint16, TYPEDEF) BTu16_C;
    VAR(uint16, TYPEDEF) BTu16_D; ------- VAR(uint16, TYPEDEF) BTu16_D;
  }                                     }

  TS_COMXF_CON_03150_StructPartlyMapped2_Safe mapping:

  struct EbTest_StructPartlyMapped      struct StructPartlyMapped_Safe
  {                                     {
    VAR(uint8, TYPEDEF) BTu8_A; --------- VAR(uint8, TYPEDEF) BTu8_A;
    VAR(uint8, TYPEDEF) BTu8_B;           VAR(uint8, TYPEDEF) BTu8_B;
    VAR(uint16, TYPEDEF) BTu16_C; ------- VAR(uint16, TYPEDEF) BTu16_C;
    VAR(uint16, TYPEDEF) BTu16_D;         VAR(uint16, TYPEDEF) BTu16_D;
  }                                     }

  Verification aspect /
  Permutation test-case       | TS_COMXF_CON_03140_StructPartlyMapped_Safe | TS_COMXF_CON_03150_StructPartlyMapped2_Safe |
  -------------------------------------------------------------------------------------------------------------------------
  mapped in SENDER-RECEIVER-  | BTu16_C, BTu16_D                           | BTu8_A, BTu16_C                             |
  TO-SIGNAL-GROUP-MAPPING
  Data Type de-serialization  | Composite Data Type                        | Composite Data Type                         |
  basic data types used       | uint16                                     | uint8, uint16                               |
  as elements
  RetVal ComXf Api            | E_OK                                       | E_OK                                        |
  de-serialized data types    | DesStPartlyMapped element members          | DesStPartlyMapped element members           |
  UnusedBitPattern            | 0                                          | 0                                           |
  UnAlignedOffset             | 0bits                                      | 0bits                                       |
  IPdu mapping of             | Consecutive                                | Consecutive                                 |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Call deserializer function of a serialized structure holding all basic data types
  02: VP: (ComXf.SWS_ComXf_00021)
          The group signals which are not inside &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt; were
          not serialized and they did not change the matching structure elements.
  03: VP: (SWS_ComXf_00018, ComXf_00020_BitPosition_SystemDes, EB.SafetyDeser,
           SWS_ComXf_00012, EB.XFRMBUFFERLENGTHTYPE_ISUINT32, ComXf.SWS_ComXf_00021)
          The deserialized array holds only the serialized values

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetyDeser</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.ComXf_00020_BitPosition_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03160_DesLargeArray_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_InvFunctions.c</sourcefile>
      <sourceline>772</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Test that the deserialization transformer is able to accept
  larger array representations and ignore dataElements appended at the end
  of a previously known parameter list.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: At API level
&lt;/para&gt;
&lt;para&gt;

  Equivalence Class Partitioning: At API level:

  Verification aspect        |                                               |
  ----------------------------------------------------------------------------
  Data Type de-serialization | Composite Data Type                           |
  basic data types used      | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members            sint32, float32, float64, uint64, sint64 and  |
                               uint8_n (string)                              |
  RetVal ComXf Api           | E_OK                                          |
  BufferLength               | 2*EBTEST_TEST_BUFFER_SIZE                     |
  de-serialized signals      | members of DesStOfAllBasic                    |
  UnusedBitPattern           | 0                                             |
  UnAlignedOffset            | 0bits                                         |
  IPdu mapping of            | Consecutive                                   |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Call deserializer function of a serialized structure holding all basic data types
      but with a larger array representation
  02: VP (SWS_ComXf_00013)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03170_InputParamDeser</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_InvFunctions.c</sourcefile>
      <sourceline>888</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies the correct behavior in case of invalid input data
     (buffer, bufferLength or dataElement is NULL) for the
     safety related deserializer function:
     * the return value shall be E_SER_GENERIC_ERROR (0x81U) (SWS_ComXf_00010.2)
     * the output parameter values shall not change
  2) This test verifies that no development error is called (EB.SafetyDet).
  3) This test verifies the correct behavior in case of no data is available
    (RfC 69896 - buffer equals NULL_PTR and bufferLength equals 0U) for the
    safety related deserializer function:
    * the return value shall be E_NO_DATA (0x01U) (SWS_ComXf_00035)
    * the output parameter values shall not change
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at API level
&lt;/para&gt;
&lt;para&gt;
  Negative Tests / Fault-injection: at API level:

  ComXf API services
  (except GetVersionInfo)             | Error cause                                    | Det ErrorId reported  | RetVal              |
  -------------------------------------------------------------------------------------------------------------------------------------
  ComXf_Inv_StructOfAllBasicType_Safe | NullPtr call with 1st argument (buffer)        | no Det reported       | E_SER_GENERIC_ERROR |
  ComXf_Inv_StructOfAllBasicType_Safe | buffer length smaller than the expected length | no Det reported       | E_SER_GENERIC_ERROR |
  ComXf_Inv_StructOfAllBasicType_Safe | NullPtr call with 3rd argument (dataElement)   | no Det reported       | E_SER_GENERIC_ERROR |
  ComXf_Inv_StructOfAllBasicType_Safe | NullPtr call with 1rd argument (buffer) and    | no Det reported       | E_NO_DATA           |
                                        bufferLength set to 0U

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled

Test Execution: 
/---Test Sequence 1---/
  01: Call BswEntry with buffer equals NULL_PTR
  02: VP: deserializer function returns E_SER_GENERIC_ERROR (0x81U)
  03: Sanity Check:
       the length of the buffer and the value of the data element did not change
/---Test Sequence 2---/
  04: Call BswEntry with buffer length smaller than the expected lenght
  05: VP: serializer function returns E_SER_GENERIC_ERROR (0x81U)
  06: Sanity Check:
       the buffer did not change
/---Test Sequence 3---/
  07: Call BswEntry with dataElement equals NULL_PTR
  08: VP: serializer function returns E_SER_GENERIC_ERROR (0x81U)
  09: Sanity Check:
       the buffer and the buffer length did not change
/---Test Sequence 4---/
  10: Call BswEntry with buffer equals NULL_PTR and bufferLength equals 0U
  11: VP: serializer function returns E_NO_DATA (0x01U)
  12: Sanity Check:
       the buffer did not change
/------/
  13: VP: No Det was called

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.SafetyDet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_03180_Deserialize_StructOfOneElement_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_03_SR_Functions_Safe_64Bit/source/application/ComXf_ConTest_03_SR_InvFunctions.c</sourcefile>
      <sourceline>1086</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that the de-serialization is based on the unpack macros
     of the E2E library if the E2EXf is within the transformer chain (EB.SafetyDeser).
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to a structure of one data element
     as part of a Composite Data Type
     of Sender/Receiver communication using the ComBased de-serialization
     (SWS_ComXf_00018).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  Parameter / Permutation             | p0               | p1             |
  --------------------------------------------------------------------------
  XfrmBufferLengthType                | UINT16           | UINT32         |

  Equivalence Class Partitioning: at API level:

  Verification aspect        |                                               |
  ----------------------------------------------------------------------------
  Data Type de-serialization | Composite Data Type                           |
  basic data types used      | uint8                                         |
  as struct members                                                          |
  RetVal ComXf Api           | E_OK                                          |
  de-serialized signal       | members of DesStOfOneElement                  |
  UnusedBitPattern           | 0                                             |
  UnAlignedOffset            | 0bits                                         |
  IPdu mapping of            | Consecutive                                   |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Call deserializer function of a serialized structure holding one data element.
  02: VP: (SWS_ComXf_00018, EB.XFRMBUFFERLENGTHTYPE_ISUINT32)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_CON_04010_StOfAllBasic_64Bit</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_04_SR_Functions_64Bit/source/application/ComXf_ConTest_04_SR_Functions.c</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies the serialization of a Composite Data Type into a linear
     byte array containing basic data types (SWS_ComXf_00009) as members of a structure
     (SWS_ComXf_00018, SWS_ComXf_00015). Please see testing method Equivalence
     Class Partitioning: at API level.
  2) Test that the COM Based Transformer handles each dataElement of
     the SenderReceiverInterface individually (SWS_ComXf_00016).
     Note: Here, the first dataElement of a dataElement list is tested.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;

  Equivalence Class Partitioning: at API level:

  Verification aspect     |                                               |
  --------------------------------------------------------------------------
  Data Type serialization | Composite Data Type                           |
  basic data types used   | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members         sint32, float32, float64, uint64, sint64 and  |
                            uint8_n (string)                              |
  RetVal ComXf Api        | E_OK                                          |
  BufferLength            | EBTEST_BUFFERLENGTH_STOFALLBASIC              |
  Memory outside          | RefDataMemory                                 |
  serialized
  serialized signals      | RefData                                       |
  UnusedBitPattern        | 0                                             |
  UnAlignedOffset         | 0bits                                         |
  IPdu mapping of         | Consecutive                                   |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - ComXf module is initialized

Test Execution: 
  00: Initialize module
  01: Call BswEntry for structure holding considered basic data type
  02: Sanity Check:
      serializer function returns E_OK
  03: VP
      the length of the array returned by the serializer function equals
      the serialized byte representation of the ComSignalGroup configured
      in the system configuration
  04: VP
      Memory outside the serialized signals according to the configured BitPosition
      in the system configuration are not modified.
  05: VP: (SWS_ComXf_00015, SWS_ComXf_00018, SWS_ComXf_00016,SWS_ComXf_00009):
          The data types are serialized according to the system configuration

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.boolean</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.sint8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.sint16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.sint32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.float32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint8_n</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.float64</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint64</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.sint64</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_CON_04110_StOfAllBasic_64Bit</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_04_SR_Functions_64Bit/source/application/ComXf_ConTest_04_SR_InvFunctions.c</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to a structure of all basic data types
     as part of a Composite Data Type
     of Sender/Receiver communication using the ComBased de-serialization
     (SWS_ComXf_00012, SWS_ComXf_00018).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;

  Equivalence Class Partitioning: at API level:

  Verification aspect        |                                               |
  ----------------------------------------------------------------------------
  Data Type de-serialization | Composite Data Type                           |
  basic data types used      | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members            sint32, float32, float64, uint64, sint64 and  |
                               uint8_n (string)                              |
  RetVal ComXf Api           | E_OK                                          |
  de-serialized signals      | members of DesStOfAllBasic                    |
  UnusedBitPattern           | 0                                             |
  UnAlignedOffset            | 0bits                                         |
  IPdu mapping of            | Consecutive                                   |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Call deserializer function of a serialized structure holding all basic data types
  02: VP: (SWS_ComXf_00018, SWS_ComXf_00012, EB.XFRMBUFFERLENGTHTYPE_ISUINT32)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_CON_05001_PackingByteOrder_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_05_PackingByteOrder_Safe/source/application/ComXf_ConTest_05_PackingByteOrder_Safe.c</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the signals are packed accordingly to the configured
  PackingByteOrder in the ISignalToIPduMapping when the safety
  Com transformer is configured.

  This test is a regression test for bug ASCCOMXF-347.

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  ShortName of ISignal      |     PackingByteOrder        |
  --------------------------------------------------------|
  ISignal_a_BTb_Safe        | MOST-SIGNIFICANT-BYTE-LAST  |
  ISignal_a_BTu8_Safe       | MOST-SIGNIFICANT-BYTE-LAST  |
  ISignal_a_BTu16_Safe      | MOST-SIGNIFICANT-BYTE-FIRST |
  ISignal_a_BTu32_Safe      | MOST-SIGNIFICANT-BYTE-FIRST |
  ISignal_a_BTs8_Safe       | MOST-SIGNIFICANT-BYTE-LAST  |
  ISignal_a_BTs16_Safe      | MOST-SIGNIFICANT-BYTE-LAST  |
  ISignal_a_BTs32_Safe      | MOST-SIGNIFICANT-BYTE-LAST  |
  ISignal_a_BTString_Safe   | MOST-SIGNIFICANT-BYTE-LAST  |
  ISignal_a_BTf32_Safe      | MOST-SIGNIFICANT-BYTE-LAST  |
  ISignal_a_BTf64_Safe      | MOST-SIGNIFICANT-BYTE-LAST  |
  ISignal_a_BTu64_Safe      | MOST-SIGNIFICANT-BYTE-FIRST |
  ISignal_a_BTs64_Safe      | MOST-SIGNIFICANT-BYTE-LAST  |

&lt;/para&gt;

Test Object: ISignalToIPduMapping.PackingByteOrder
Test Precondition: 
  Configuration Pre-conditions:
  - ComXf is configured as safety transformer

Test Execution: 
  00: Initialize module
  01: Call BswEntry for structure holding considered basic data type
  02: Sanity Check:
      serializer function returns E_OK
  03: VP (ASCCOMXF-347, ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32)
      the length of the array returned by the serializer function equals
      the serialized byte representation of the ComSignalGroup configured
      in the system configuration. In case of not fixed bug the generated buffer
      size is incorrect.
  04: VP (ComXf.EB.ComXf_00020_BitPosition_SystemDes)
      Memory outside the serialized signals according to the configured BitPosition
      in the system configuration are not modified.
  05: VP: ( SWS_Xfrm_00002, ComXf.EB.PackingByteOrder_Safety):
          The group signals are packed according to the system configuration.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_00020_BitPosition_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.PackingByteOrder_Safety</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_05002_PackingByteOrder_Opaque_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_05_PackingByteOrder_Safe/source/application/ComXf_ConTest_05_PackingByteOrder_Safe.c</sourcefile>
      <sourceline>173</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the signals are packed accordingly to the configured
  PackingByteOrder in the ISignalToIPduMapping when the safety
  Com transformer is configured.

  This test is a regression test for bug ASCCOMXF-628.

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  ISignalGroup: ISignalGroup_SenderToRecv1_StructOfOpaqueType_Safe

  ShortName of ISignal                |     PackingByteOrder        |
  ------------------------------------------------------------------|
  ISignal_b_ArrayOfUint8FixSize2_Safe | OPAQUE                      |
  ISignal_b_BTu32_Safe                | MOST-SIGNIFICANT-BYTE-LAST  |
  ISignal_b_ArrayOfUint8FixSize9_Safe | OPAQUE                      |

&lt;/para&gt;

Test Object: ISignalToIPduMapping.PackingByteOrder
Test Precondition: 
  Configuration Pre-conditions:
  - ComXf is configured as safety transformer
  - packingByteOrder within the ISignalToIPduMapping of the
  last group ISignal is configured to Opaque

Test Execution: 
  00: Initialize module
  01: Call BswEntry for structure holding considered basic data type
  02: Sanity Check:
      serializer function returns E_OK
  03: VP (ASCCOMXF-347, ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32)
      the length of the array returned by the serializer function equals
      the serialized byte representation of the ComSignalGroup configured
      in the system configuration. In case of not fixed bug the generated buffer
      size is incorrect.
  04: VP (ComXf.EB.ComXf_00020_BitPosition_SystemDes)
      Memory outside the serialized signals according to the configured BitPosition
      in the system configuration are not modified.
  05: VP: ( SWS_Xfrm_00002, ComXf.EB.PackingByteOrder_Safety):
          The group signals are packed according to the system configuration.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_00020_BitPosition_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.PackingByteOrder_Safety</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_05102_UnPackingByteOrder_Opaque_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Conformance/IN/ComXf_ConTest_05_PackingByteOrder_Safe/source/application/ComXf_ConTest_05_PackingByteOrder_Safe.c</sourcefile>
      <sourceline>288</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the signals are unpacked accordingly to the configured
  PackingByteOrder in the ISignalToIPduMapping when the safety
  Com transformer is configured.

  This test is a regression test for bug ASCCOMXF-628.

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at configuration level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at configuration level:

  ISignalGroup: ISignalGroup_SenderToRecv1_StructOfOpaqueType_Safe_Rx

  ShortName of ISignal                |     PackingByteOrder        |
  ------------------------------------------------------------------|
  ISignal_b_ArrayOfUint8FixSize2_Safe | OPAQUE                      |
  ISignal_b_BTu32_Safe                | MOST-SIGNIFICANT-BYTE-LAST  |
  ISignal_b_ArrayOfUint8FixSize9_Safe | OPAQUE                      |

&lt;/para&gt;

Test Object: ISignalToIPduMapping.PackingByteOrder
Test Precondition: 
  Configuration Pre-conditions:
  - ComXf is configured as safety transformer
  - packingByteOrder within the ISignalToIPduMapping of the
  last group ISignal is configured to Opaque

Test Execution: 
  00: Initialize module
  01: Call BswEntry for structure holding opaque types
  02: Sanity Check:
      serializer function returns E_OK
  03: Call Inv BswEntry for structure holding opaque types
  04: VP Inv BswEntry returns E_OK
  05: VP: ( SWS_Xfrm_00002,PackingByteOrder_Safety,ComXf_00020_BitPosition_SystemDes):
          The group signals are unpacked according to the system configuration.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_00020_BitPosition_SystemDes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.XFRMBUFFERLENGTHTYPE_ISUINT32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.PackingByteOrder_Safety</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_GEN_01001_WrongTransformerBswmRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when the short name of the 
    XfrmImplementationMapping is not identical with the short name of the referenced 
    XfrmTransformerBswModuleEntryRef.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: XfrmImplementationMapping is identical with the short name of the referenced
                            XfrmTransformerBswModuleEntryRef.
    * An invalid ComXf config: XfrmImplementationMapping is not identical with the short name of the referenced
                              XfrmTransformerBswModuleEntryRef.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01002_WrongInvTransformerBswmRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>60</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when the short name of the 
    XfrmImplementationMapping is not identical with the short name of the referenced 
    XfrmInvTransformerBswModuleEntryRef.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: XfrmImplementationMapping is identical with the short name of the referenced
                            XfrmInvTransformerBswModuleEntryRef.
    * An invalid ComXf config: XfrmImplementationMapping is not identical with the short name of the referenced
                              XfrmInvTransformerBswModuleEntryRef.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01003_NoEnabledBswmRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>93</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when neither 
    XfrmTransformerBswModuleEntryRef nor XfrmInvTransformerBswModuleEntryRef parameter is enabled.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: XfrmImplementationMapping with enabled and correctly configured
                            XfrmTransformerBswModuleEntryRef.
    * An invalid ComXf config: XfrmImplementationMapping with disabled XfrmTransformerBswModuleEntryRef 
                               and XfrmInvTransformerBswModuleEntryRef parameters.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01004_WrongSerializerPrefix</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>125</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when name of the 
    XfrmImplementationMapping which has enabled XfrmTransformerBswModuleEntryRef does not start 
    with the ComXf_ prefix.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: Name of the XfrmImplementationMapping starts with the ComXf_ prefix and 
                             XfrmTransformerBswModuleEntryRef is enabled.
    * An invalid ComXf config: Name of the XfrmImplementationMapping does not start with the 
                               required prefix and XfrmTransformerBswModuleEntryRef is enabled.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01005_WrongDeserializerPrefix</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>158</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when name of the 
    XfrmImplementationMapping which has enabled XfrmTransformerBswModuleEntryRef does not start 
    with the ComXf_Inv_ prefix.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: Name of the XfrmImplementationMapping starts with the ComXf_Inv_ prefix and 
                             XfrmInvTransformerBswModuleEntryRef is enabled.
    * An invalid ComXf config: Name of the XfrmImplementationMapping does not start with the 
                               required prefix and XfrmInvTransformerBswModuleEntryRef is enabled.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01006_WrongDeserializerInfix</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>191</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when name of the 
    XfrmImplementationMapping which has enabled XfrmTransformerBswModuleEntryRef does not  
    contain the _Inv_ prefix after the module name prefix.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: Name of the XfrmImplementationMapping contains the _Inv_ infix and 
                             XfrmInvTransformerBswModuleEntryRef is enabled.
    * An invalid ComXf config: Name of the XfrmImplementationMapping does not contain the 
                               required infix and XfrmInvTransformerBswModuleEntryRef is enabled.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01007_WrongContainerName</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>224</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when name of the 
    XfrmImplementationMapping is not a valid C identifier.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: Configured name of the XfrmImplementationMapping is a valid C identifier.
    * An invalid ComXf config: Configured name of the XfrmImplementationMapping is not a valid C identifier.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01008_SameISignalGroupRefForMultipleSerializers</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>254</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when multiple XfrmImplementationMappings 
    of serializing transformers reference the same ISignalGroup
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: XfrmISignalGroupRef of different XfrmImplementationMappings reference a different ISignalGroup.
    * An invalid ComXf config: XfrmISignalGroupRef of different XfrmImplementationMappings reference the same ISignalGroup.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01009_WrongSwComponentPrototypeRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>284</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when the first reference 
    of the XfrmVariableDataPrototypeInstanceRef does not reference a valid SwComponentPrototype.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: The first reference of the XfrmVariableDataPrototypeInstanceRef 
      refers to a valid SwComponentPrototype.
    * An invalid ComXf config: The first reference of the XfrmVariableDataPrototypeInstanceRef 
      refers to a non-SwComponentPrototype element.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01010_WrongPortPrototypeRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>316</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when the second reference 
    of the XfrmVariableDataPrototypeInstanceRef does not reference a valid PortPrototype.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: The second reference of the XfrmVariableDataPrototypeInstanceRef 
      refers to a valid PortPrototype.
    * An invalid ComXf config: The second reference of the XfrmVariableDataPrototypeInstanceRef 
      refers to a non-PortPrototype element.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01011_WrongDataElementRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>348</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when the 
    XfrmVariableDataPrototypeInstanceRef refers to an invalid dataElement.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: The XfrmVariableDataPrototypeInstanceRef refers to a valid dataElement.
    * An invalid ComXf config: The XfrmVariableDataPrototypeInstanceRef refers to a non-dataElement.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01012_WrongXfrmBufferLengthType</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>378</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when transformer modules 
    are configured with a different XfrmBufferLengthType value.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf and SomeIpXf (stub) config: The configured value of XfrmBufferLengthType in 
                                                 both transformer modules is UINT16.
    * An invalid ComXf config: The configured value of XfrmBufferLengthType in the ComXf module is 
                               different than the configured value of XfrmBufferLengthType in the 
                               SomeIpXf (stub) module.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01013_IdenticalXfrmVariableDataPrototypeInstanceRefUsedByTwoInvTransformers</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>411</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when different transformer modules 
    have configured a XfrmImplementationMapping with identical SwComponentPrototype, PortPrototype 
    and VariableDataPrototype references.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: The ComXf configuration does not have configured two XfrmImplementationMappings 
                             which use identical references for SwComponentPrototype, PortPrototype 
                             and VariableDataPrototype.
    * An invalid ComXf config: The ComXf configuration has configured two XfrmImplementationMappings 
                               which use identical references for SwComponentPrototype, PortPrototype 
                               and VariableDataPrototype.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_E_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_01014_TwoTransformersWithSameSignalGroupRefButNoXfrmVariableDataPrototypeInstanceRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_01_XfrmXdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>446</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when different transformer modules 
    have configured a XfrmImplementationMapping that reference the same ISignalGroup but one of them 
    does not have configured the XfrmVariableDataPrototypeInstanceRef
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: The ComXf has configured multiple XfrmImplementationMappings which reference 
                             the same ISignalGroup and all mappings have configured VariableDataPrototype.
    * An invalid ComXf config: The ComXf has configured multiple XfrmImplementationMappings which reference 
                               the same ISignalGroup but one mapping does not have configured VariableDataPrototype.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_XDM_constr_09094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_GEN_02001_WrongProtocol</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_02_TransformationTechnologyChecks/source/application/testspec.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the MCG shows a warning when the parameter Protocol of the 
  TransformationTechnology in the system description is set to an incorrect value.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: TransformationTechnology.Protocol
Test Precondition: 
  * A valid system configuration: The parameter PROTOCOL of TRANSFORMATION-TECHNOLOGY is valid.
  * An invalid system configuration: The parameter PROTOCOL of TRANSFORMATION-TECHNOLOGY is set to
                                     an invalid value.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the warning message related to parameter in
          TRANSFORMATION-TECHNOLOGY.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00007.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_02002_WrongVersion</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_02_TransformationTechnologyChecks/source/application/testspec.h</sourcefile>
      <sourceline>59</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the MCG shows a warning when the parameter Version of the 
  TransformationTechnology in the system description is set to an incorrect value.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: TransformationTechnology.Version
Test Precondition: 
  * A valid system configuration: The parameter VERSION of TRANSFORMATION-TECHNOLOGY is valid.
  * An invalid system configuration: The parameter VERSION of TRANSFORMATION-TECHNOLOGY is set to an
                                     invalid value.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the warning message related to parameter in
          TRANSFORMATION-TECHNOLOGY.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00007.3</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_02003_WrongTransformerClass</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_02_TransformationTechnologyChecks/source/application/testspec.h</sourcefile>
      <sourceline>91</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the MCG shows a warning when the parameter TransformerClass of the 
  TransformationTechnology in the system description is set to an incorrect value.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: TransformationTechnology.TransformerClass
Test Precondition: 
  * A valid system configuration: The parameter TREANSFORMER-CLASS of TRANSFORMATION-TECHNOLOGY is valid.
  * An invalid system configuration: The parameter TREANSFORMER-CLASS of TRANSFORMATION-TECHNOLOGY is set to an
                                     invalid value.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the warning message related to parameter in
          TRANSFORMATION-TECHNOLOGY.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00007.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_02004_MissingTransformationTechnology</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_02_TransformationTechnologyChecks/source/application/testspec.h</sourcefile>
      <sourceline>123</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the MCG shows an error when the container TransformationTechnology in the
  system description is missing.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: TransformationTechnology
Test Precondition: 
  * A valid system configuration: The container TRANSFORMATION-TECHNOLOGY is present.
  * An invalid system configuration: The container TRANSFORMATION-TECHNOLOGY is missing.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the error message related to missing TRANSFORMATION-TECHNOLOGY.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_MCG_E_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_02005_OldVersion</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_02_TransformationTechnologyChecks/source/application/testspec.h</sourcefile>
      <sourceline>153</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the MCG reports a warning when the parameter Version of the 
  TransformationTechnology in the system description is set to '1'.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: TransformationTechnology.Version
Test Precondition: 
  * A valid system configuration: The parameter VERSION of TRANSFORMATION-TECHNOLOGY is valid.
  * An invalid system configuration: The parameter VERSION of TRANSFORMATION-TECHNOLOGY is set to '1'.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the warning message related to parameter version in
          TRANSFORMATION-TECHNOLOGY.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_GEN_03001_SENDER_RECEIVER_TO_SIGNAL_GROUP_MAPPING_AND_COM_CONFIG_INCONSISTENT</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test verifies that a generator error is raised for the case when a group signal is present
    in the SenderReceiverToSignalGroupMapping but not in the Com configuration.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An invalid Com config: GroupSignal ISignal_a_BTString_T in the GRISignalGroup_SenderToRecv1_StructOfAllBasicType_T
                              SignalGroup is present in the SenderReceiverToSignalGroupMapping but NOT in the Com
                              configuration.

Test Execution: 
    VP: ComXf generator shall issue an error which lists all group signals that are present in the
    SignalGroup in the SenderReceiverToSignalGroupMapping but were not found in the corresponding
    SignalGroup in the Com configuration. (See: runTest.cfg)

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03002_FAILED_TO_GET_MAPPING_FROM_ISIGNALGROUP_TO_ISIGNALIPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>59</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test verifies that a generator error is raised for the case when a mapping between an ISignalGroup
    and an ISignalIPdu is missing.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An invalid system model: Mapping between ISignalGroup and ISignalIPdu is missing in
      the ISignalToIPduMappings.

Test Execution: 
    VP: ComXf generator shall issue an error which explicitly states for which signal group a signal
        to pdu mapping can not be found. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03003_SYSTEM_SIGNAL_PROPERTIES_NOT_FOUND_RecordElement</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>89</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test verifies that a generator error is raised for the case when a SystemSignal is configured
    as a RecordElement and the signal properties can not determined.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An invalid ComXf module configuration: XfrmISignalGroupRef references an ISignalGroup in which one
                                             of the ISignals is configured as a RecordElement.
    * An invalid Com module configuration: ISignalToIPduMapping for the ISignal, that is configured as a
                                           RecordElement, from the referenced ISignalGroup is missing.

Test Execution: 
    VP: ComXf generator shall issue an error which explicitly states for which SystemSignal
        the signal properties could not be determined. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00010.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03004_SYSTEM_SIGNAL_PROPERTIES_NOT_FOUND_ArrayElement</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>121</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test verifies that a generator error is raised for the case when a SystemSignal is configured
    as an ArrayElement and the signal properties could not be determined.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An invalid ComXf module configuration: XfrmISignalGroupRef references an ISignalGroup in which one
                                             of the ISignals is configured as an ArrayElement.
    * An invalid Com module configuration: ISignalToIPduMapping for the ISignal, that is configured as an
                                           ArrayElement, from the referenced ISignalGroup is missing.

Test Execution: 
    VP: ComXf generator shall issue an error which explicitly states for which SystemSignal
        the signal properties could not be determined. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00010.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03005_SYSTEM_SIGNAL_PROPERTIES_NOT_FOUND_SignalMappedToDifferentPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>153</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test verifies that a generator error is raised for the case when a signal
    is mapped to a different pdu than the signal group to which it belongs.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An invalid system model configuration: ISignal of an ISignalGroup is
                                             mapped to a different ISignalIPdu
                                             than the ISignalGroup.

Test Execution: 
    VP: ComXf generator shall issue an error which explicitly states the name of
        the effected SystemSignal. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00010.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03006_INVALID_VALUE_OF_UNUSED_BIT_PATTERN_underMin</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>184</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test verifies that a generator error is raised for the case when a value under the allowed
    threshold is configured for the UnusedBitPattern parameter of the ISignalIPdu.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An invalid system model: Value of the UnusedBitPattern for the configured ISignalIPdu is set to less
                               than the allowed minimum value.

Test Execution: 
    VP: ComXf generator shall issue an error which explicitly states for which ISignalIPdu
        the UnusedBitPattern parameter is configured incorrectly. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00006.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03007_INVALID_VALUE_OF_UNUSED_BIT_PATTERN_aboveMax</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>214</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test verifies that a generator error is raised for the case when a value above the allowed
    threshold is configured for the UnusedBitPattern parameter of the ISignalIPdu.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An invalid system model: Value of the UnusedBitPattern for the configured ISignalIPdu is set to more
                               than the allowed maximum value.

Test Execution: 
    VP: ComXf generator shall issue an error which explicitly states for which ISignalIPdu
        the UnusedBitPattern parameter is configured incorrectly. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00006.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03008_SUBELEMENT_MAPPING_INCOMPLETE</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>244</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
        This test verifies that the generator raises a warning for the case when there is no valid
        SecondElements configured for the VariableAndParameterInterfaceMapping.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An invalid system model: a system model with inner to outer port mapping configuration where no
                               SecondElements are configured for the used VariableAndParameterInterfaceMapping.

Test Execution: 
    VP: ComXf generator shall issue a warning which explicitly states for which VariableAndParameterInterfaceMapping
        the SecondElements are configured incorrectly. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03009_INVALID_BSWM_REF</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>274</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that a generator error is raised for the case when the
  Bswm referenced by the XfrmTransformerBswModuleEntryRef or
  XfrmInvTransformerBswModuleEntryRef parameter of the XfrmImplementationMapping
  does not exist in the system model.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  * A valid ComXf config: The referenced Bswm exists in the system model.
  * An invalid ComXf config: The referenced Bswm does not exist in the system model.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces an error message related to missing Bswm in
          the system model (see runTest.cfg).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.Xfrm_MCG_E_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03010_INVALID_IMPLEMENTATION_RECORD_ELEMENT_REF</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>309</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that a generator error is raised for the case when the
  ImplementationRecordElementRef of the SenderRecRecordElementMapping container
  in the system model has configured and invalid reference.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: SenderRecRecordElementMapping.ImplementationRecordElementRef
Test Precondition: 
  * A valid system model: The element referenced by the ImplementationRecordElementRef
                          exists in the system model.
  * An invalid system model: The element referenced by the ImplementationRecordElementRef
                             does not exist in the system model.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces an error message mentioning the invalid
          reference for the ImplementationRecordElementRef element (see runTest.cfg).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03011_RECORD_ELEMENT_NO_COMPOSITE_NOR_PRIMITIVE_TYPE</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>345</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that a generator error is raised for the case when neither of
  SystemSignalRef nor complex type mapping of the SenderRecRecordElementMapping
  container in the system model is present.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: SenderRecRecordElementMapping
Test Precondition: 
  * A valid system model: The SystemSignalRef attribute of the SenderRecRecordElementMapping
                          container exists in the system model.
  * An invalid system model: The SystemSignalRef attribute of the SenderRecRecordElementMapping
                             container does not exist and neither a complex
                             type is referenced.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces an error message mentioning the missing
          attributes of the SenderRecRecordElementMapping element (see runTest.cfg).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03012_ARRAY_ELEMENT_NO_COMPOSITE_NOR_PRIMITIVE_TYPE</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>382</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that a generator error is raised for the case when neither of
  SystemSignalRef nor complex type mapping of the SenderRecArrayElementMapping
  container in the system model is present.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: SenderRecArrayElementMapping
Test Precondition: 
  * A valid system model: The SystemSignalRef attribute of the SenderRecArrayElementMapping
                          container exists in the system model.
  * An invalid system model: The SystemSignalRef attribute of the SenderRecArrayElementMapping
                             container does not exist and neither a complex
                             type is referenced.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces an error message mentioning the missing
          attributes of the SenderRecArrayElementMapping element (see runTest.cfg).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03013_ARRAY_INDICES_NOT_ZERO_BASED_AND_DENSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>419</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that a generator error is raised for the case when array
  indices of IndexedArrayElements of SenderRecArrayTypeMapping are not zero-based
  and dense.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: SenderRecArrayElementMapping.IndexedArrayElement.Index
Test Precondition: 
  * A valid system model: The configured Index attributes of IndexedArrayElements in
                          SenderRecArrayElementMapping are zero-based and dense.
  * An invalid system model: The configured Index attributes of IndexedArrayElements in
                             SenderRecArrayElementMapping are not zero-based and dense.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces an error message stating that the indices
          are not zero based and dense (see runTest.cfg).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03014_SYSTEM_SIGNAL_GROUP_AND_I_SIGNAL_GROUP_CONFIG_INCONSISTENT</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>455</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that a generator error is raised for the case when
  SystemSignalGroup and ISignalGroup, after all references of every ISignal to
  SystemSignal are resolved, do not contain the same SystemSignals.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: SystemSignalGroup
Test Precondition: 
  * A valid system model: The SystemSignalGroup references the same SystemSignals
                          than the ISignalGroup which references this
                          SystemSignalGroup.
  * An invalid system model: The SystemSignalGroup references less SystemSignals
                             than the ISignalGroup which references this
                             SystemSignalGroup.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces an error message stating that the configuration
          of signal groups is inconsistent (see runTest.cfg).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03015_ISIGNAL_GROUP_MAPPED_TO_MULTIPLE_ISIGNALIPDUS</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>493</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that a generator warning is raised if an ISignalGroup is
  referenced by multiple ISignalToIPduMappings.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: ISignalToIPduMapping
Test Precondition: 
  * A valid system model: ISignalGroup is referenced by exactly one
                          ISignalToIPduMapping.
  * An invalid system model: ISignalGroup is referenced by multiple
                             ISignalToIPduMappings.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces a warning message stating that the particular
          ISignalGroup is referenced by multiple ISignalToIPduMappings
          (see runTest.cfg).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03016_MULTIPLE_SENDER_RECEIVER_TO_SIGNAL_GROUP_MAPPINGS_FOR_SINGLE_RECEIVER</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>529</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that a generator warning is raised if a single transformer
  deserializes a signal group that is referenced by multiple
  SenderReceiverToSignalGroupMappings the role of SignalGroupRef and the
  mappings reference different VariableDataPrototypes in the role of
  TargetDataPrototypeRef.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: SenderReceiverToSignalGroupMapping
Test Precondition: 
  * A valid system model: Exactly one SenderReceiverToSignalGroupMapping is associated with the
                          deseralized signal group.
  * An invalid system model: Multiple SenderReceiverToSignalGroupMapping are associated with the
                             deseralized signal group but the mappings reference different
                             VariableDataPrototypes in the role of TargetDataPrototypeRef.


Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces a warning message stating that the particular
          SystemSignalGroup is referenced by multiple SenderReceiverToSignalGroupMappings
          where those mappings refer to different VariableDataPrototypes.
          (see runTest.cfg).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03017_MISSING_SENDER_RECEIVER_TO_SIGNAL_GROUP_MAPPING_FOR_PORT</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>571</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that a generator error is raised if one of multiple receivers
  does not reference a port in XfrmVariableDataPrototypeInstanceRef that maps
  to the same outermost port as the port referenced in SenderReceiverToSignalGroupMapping
  in the role of ContextPortRef.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: SenderReceiverToSignalGroupMapping
Test Precondition: 
  * A valid system model: Port configured in XfrmVariableDataPrototypeInstanceRef
                          maps to the same outermost port as configured in SenderReceiverToSignalGroupMapping.
  * An invalid system model: Port configured in XfrmVariableDataPrototypeInstanceRef does not map
                             to the same outermost port as the one configured in the SenderReceiverToSignalGroupMapping.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces an error message stating that no matching
          SenderReceiverToSignalGroupMapping for the configured port in
          XfrmVariableDataPrototypeInstanceRef could be found (see runTest.cfg).

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00018</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03018_MULTIPLE_SENDER_RECEIVER_TO_SIGNAL_GROUP_MAPPINGS_FOR_DATA_TYPE</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>609</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that a generator warning is raised if one of multiple receivers deserializes
  a signal group that is referenced by multiple SenderReceiverToSignalGroupMappings whereas the
  mappings reference the same port but a different VariableDataPrototype.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: SenderReceiverToSignalGroupMapping
Test Precondition: 
  * A valid system model: Single SenderReceiverToSignalGroupMapping of multiple receivers refers
                          to a particular port and signal group.
  * An invalid system model: Two SenderReceiverToSignalGroupMappings of multiple receivers
                             refer to the same port and signal group but to a different VariableDataPrototype.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces a warning message stating that the particular
          XfrmImplementationMapping (SystemSignalGroup) and different
          VariableDataPrototypes (see runTest.cfg).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_W_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>
    <specobject>
      <id>TS_COMXF_GEN_03019_MISSING_SENDER_RECEIVER_TO_SIGNAL_GROUP_MAPPING_FOR_DATA_TYPE</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_03_MCG_Checks/source/application/testspec.h</sourcefile>
      <sourceline>646</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that a generator error is raised if no SenderReceiverToSignalGroupMapping
  that references the same VariableDataPrototype that is configured in XfrmVariableDataPrototypeInstanceRef
  was found.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: SenderReceiverToSignalGroupMapping
Test Precondition: 
  * A valid system model: SenderReceiverToSignalGroupMapping references the same VariableDataPrototype
                          that is configured in XfrmVariableDataPrototypeInstanceRef.
  * An invalid system model: SenderReceiverToSignalGroupMapping references a different VariableDataPrototype
                             that is configured in XfrmVariableDataPrototypeInstanceRef.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces an error message stating that the
          no SenderReceiverToSignalGroupMapping for a deserilizer and its configured
          VariableDataPrototype was found (see runTest.cfg).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_MCG_E_00020</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_GEN_04001_OnlyXfrmISignalGroupRefChoice</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Generic/IN/ComXf_GenTest_04_XdmChecks/source/application/testspec.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the XDM provides an error message in case when the XfrmSignalChoice 
    is not configured as XfrmISignalGroupRefChoice.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at configuration level
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * An valid ComXf config: XfrmSignalChoice in a XfrmImplementationMapping is configured with 
                             XfrmISignalGroupRefChoice value.
    * An invalid ComXf config: XfrmSignalChoice in a XfrmImplementationMapping is configured with 
                               XfrmISignalRefChoice value.

Test Execution: 
  01: Generate with a valid configuration.
  02: VP: The generator exits without errors.
  03: Generate with an erroneous configuration.
  04: VP: The generator produces the desired error message. (See: runTest.cfg)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.ComXf_XDM_E_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_IMP_01001_StOfAllBasic_Unaligned</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_01_UnalignedSigG/source/application/Test.c</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
     This test verifies the serialization of a Composite Data Type into a linear
     byte array containing all basic data types as members of a structure where
      - individual group signals are placed unaligned (not at byte boundaries), and
      - unused bits at last byte are allocated by different GroupSignal of a 
        different SignalGroup.(ComXf.EB.UnAlignedSignalGroupsTx)
      - there are unused bits between two group signals which are set according to the
        UnusedBitPattern configuration of the Com module.(ComXf.EB.NonConsecutiveMappingTx)

     Sanity test that if the unused bits of the last byte of the serialized byte-array
     of the signal group overlaps with a group signal of a different signal group,
     then the initial value of the group signal of this different signal group is taken
     for the affected bits.

     Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case   | p3                                            | p4                                            |
  ---------------------------------------------------------------------------------------------------------------------------
  Data Type serialization | Composite Data Type                           | Composite Data Type                           |
  basic data types used   | boolean, uint8, uint16, uint32, sint8, sint16 | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members         sint32, float32 and uint8_n (string)          | sint32, float32 and uint8_n (string)          |
  RetVal ComXf Api        | E_OK                                          | E_OK                                          |
  BufferLength            | EBTEST_BUFFERLENGTH_STOFALLBASIC              | EBTEST_BUFFERLENGTH_STOFALLBASIC              |
  Memory outside          | RefDataMemory                                 | RefDataMemory                                 |
  serialized signals
  serialized signals      | RefData                                       | RefData                                       |
  UnusedBitPattern        | 0                                             | 255                                           |
  UnAlignedOffset         | 3bits                                         | 3bits                                         |
  IPdu mapping of         | Non Consecutive                               | Non Consecutive                               |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  - signal group configuration contains un-aligned group signals
    (especially first and last group signal), see also pdu layout below
  - unused bits of first bytes are not allocated by any other signal group / group signal
  - unused bits of last byte are allocated by a group signal of a different signal group
    having some initial value different to UnusedBitPattern configured
  - there exist at least two group signals with unused bits in between
  Runtime Pre-conditions:
  - ComXf module is initialized
  
  Pdu layout:
    group signal      bitpos  bitlength
            |             |      |
    ISignal_a_BTb         3      1
    ISignal_a_BTu8       11      8
    ISignal_a_BTu16      19     16
    ISignal_a_BTu32      35     32
    ISignal_a_BTs8       67      8
    ISignal_a_BTs16      75     16
    ISignal_a_BTs32      91     32
    ISignal_a_BTString  120     64
    ISignal_a_BTf32     187     32

Test Execution: 

  00: Initialize ComXf module

Repeat following steps for different 8-bit patterns in range "Pattern"=[0x00,0xFE]:
  01: Prepare buffer with some pattern where unused bits or bits group signal from consecutive
      signal group of first / last byte are set with pattern "Pattern"
  02: Call BswEntry for structure holding considered basic data types
  03: VP (ComXf.EB.UnAlignedSignalGroupsTx, ComXf.EB.NonConsecutiveMappingTx)
      The data types are serialized according to Com configuration, that is:
      - unused bits are correctly overwritten with configured UnusedBitPattern value
      - bits allocated to some different signal group signal, but part of actual
        signal group under test are set to the initial value of this different signal
        group signal


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.UnAlignedSignalGroupsTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.NonConsecutiveMappingTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>
    <specobject>
      <id>TS_COMXF_IMP_01002_NestedArrayOfStruct_Unaligned</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_01_UnalignedSigG/source/application/Test.c</sourcefile>
      <sourceline>253</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
     This test verifies the serialization of a Fixed size Data Type (Array of a Composite data type
     containing also Fixed size Data Types) into a linear byte array where
     - individual group signals are placed unaligned (not at byte boundaries), and
     - unused bits at first byte are allocated by different GroupSignal of a different SignalGroup,
       and (ComXf.EB.UnAlignedSignalGroupsTx)

     This test also verifies that the data types are serialized according to Com configuration, that
     is:
      - unused bits are correctly overwritten with configured UnusedBitPattern value
      - bits allocated to some different signal group signal, but part of actual
        signal group under test are set to the initial value of this different signal
        group signal. (ComXf.EB.NonConsecutiveMappingTx)

     Sanity test that if the unused bits of the first byte of the serialized byte-array
     of the signal group overlaps with a group signal of a different signal group,
     then the initial value of the group signal of this different signal group is taken
     for the affected bits.

     Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case   | p3                                               | p4                                               |
  -------------------------------------------------------------------------------------------------------------------------------
  Data Type serialization | Fixed size Data Type (Array of a Composite       | Fixed size Data Type (Array of a Composite       |
                            data type containing also Fixed size Data Types)   data type containing also Fixed size Data Types)
  basic data types used   | uint16, uint32, Fixed size Array of struct,      | uint16, uint32, Fixed size Array of struct,      |
  as elements               Fixed size Array of sint16                         Fixed size Array of sint16                       |
  RetVal ComXf Api        | E_OK                                             | E_OK                                             |
  BufferLength            | EBTEST_BUFFERLENGTH_NESTEDARRAYOFSTRUCT          | EBTEST_BUFFERLENGTH_NESTEDARRAYOFSTRUCT          |
  Memory outside          | RefDataMemory                                    | RefDataMemory                                    |
  serialized signals
  serialized signals      | RefData                                          | RefData                                          |
  UnusedBitPattern        | 0                                                | 255                                              |
  UnAlignedOffset         | 3bits                                            | 3bits                                            |
  IPdu mapping of         | Non Consecutive                                  | Non Consecutive                                  |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  - signal group configuration contains un-aligned group signals
    (especially first and last group signal), all have an offset of 3 bits, see also pdu layout
    below
  - unused bits of first bytes are not allocated by any other signal group / group signal
  - unused bits of last byte are allocated by a group signal of a different signal group
    having some initial value different to UnusedBitPattern configured
  - there exist at least two group signals with unused bits in between
  Runtime Pre-conditions:
  - Initialized ComXf module

  Pdu layout:
    group signal                   bitpos   bitlength
            |                         |      |
ISignal_a_0_BTu16                    219     8
ISignal_a_0_Array2_0_BTu16           227     8
ISignal_a_0_Array2_0_Array3_0_s16    235    16
ISignal_a_0_Array2_0_Array3_1_s16    251    16
ISignal_a_0_Array2_0_BTu32           267    32
ISignal_a_0_Array2_1_BTu16           299    16
ISignal_a_0_Array2_1_Array3_0_s16    315    16
ISignal_a_0_Array2_1_Array3_1_s16    331    16
ISignal_a_0_Array2_1_BTu32           347    24
ISignal_a_0_BTu32                    371    16


Test Execution: 

  00: Initialize ComXf module

Repeat following steps for different 8-bit patterns in range "Pattern"=[0x00,0xFE]:
  01: Prepare buffer with some pattern where unused bits or bits group signal from consecutive
      signal group of first / last byte are set with pattern "Pattern"
  02: Call BswEntry for structure holding considered nested array of structure
  03: VP (ComXf.EB.UnAlignedSignalGroupsTx, ComXf.EB.NonConsecutiveMappingTx)
      The data types are serialized according to Com configuration, that is:
      - unused bits are correctly overwritten with configured UnusedBitPattern value
      - bits allocated to some different signal group signal, but part of actual
        signal group under test are set to the initial value of this different signal
        group signal


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.UnAlignedSignalGroupsTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.NonConsecutiveMappingTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>
    <specobject>
      <id>TS_COMXF_IMP_01010_StOfAllBasic_Unaligned</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_01_UnalignedSigG/source/application/Test.c</sourcefile>
      <sourceline>423</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to a structure of all basic data types
     as part of a Composite Data Type
     of Sender/Receiver communication using the ComBased de-serialization where
     - individual group signals are placed unaligned (not at byte boundaries), and
     - unused bits at last byte are allocated by different GroupSignal of a different SignalGroup.
     - there are unused bits between two group signals

     Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case      | p3                                            | p4                                            |
  -----------------------------------------------------------------------------------------------------------------------------
  Data Type de-serialization | Composite Data Type                           | Composite Data Type                           |
  basic data types used      | boolean, uint8, uint16, uint32, sint8, sint16 | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members            sint32, float32 and uint8_n (string)          | sint32, float32 and uint8_n (string)          |
  RetVal ComXf Api           | E_OK                                          | E_OK                                          |
  de-serialized signals      | members of DesStOfAllBasic                    | members of DesStOfAllBasic                    |
  UnusedBitPattern           | 0                                             | 255                                           |
  UnAlignedOffset            | 3bits                                         | 3bits                                         |
  IPdu mapping of            | Non Consecutive                               | Non Consecutive                               |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - Initialized ComXf module

Test Execution: 
  01: Call deserializer function of a serialized structure holding all basic data types
  02: VP(ComXf.EB.UnAlignedSignalGroupsRx,ComXf.EB.NonConsecutiveMappingRx)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.UnAlignedSignalGroupsRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.NonConsecutiveMappingRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>
    <specobject>
      <id>TS_COMXF_IMP_01011_NestedArrayOfStruct_Unaligned</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_01_UnalignedSigG/source/application/Test.c</sourcefile>
      <sourceline>532</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to an array of structured data type
     holding a nested array of structured data type (and so on) of Sender/Receiver communication
     using the ComBased deserialization where
     - individual group signals are placed unaligned (not at byte boundaries), and
     - unused bits at last byte are allocated by different GroupSignal of a different SignalGroup.

     Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case      | p3                                               | p4                                               |
  ----------------------------------------------------------------------------------------------------------------------------------
  Data Type de-serialization | Fixed size Data Type (Array of a Composite       | Fixed size Data Type (Array of a Composite       |
                               data type containing also Fixed size Data Types)   data type containing also Fixed size Data Types)
  basic data types used      | uint16, uint32, Fixed size Array of struct,      | uint16, uint32, Fixed size Array of struct,      |
  as elements                  Fixed size Array of sint16                         Fixed size Array of sint16                       |
  RetVal ComXf Api           | E_OK                                             | E_OK                                             |
  de-serialized data types   | DesNestedArrayOfStructFixSize element members    | DesNestedArrayOfStructFixSize element members    |
  UnusedBitPattern           | 0                                                | 255                                              |
  UnAlignedOffset            | 3bits                                            | 3bits                                            |
  IPdu mapping of            | Non Consecutive                                  | Non Consecutive                                  |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - Initialized ComXf module

Test Execution: 
  01: Call deserializer function of a serialized array of structure holding nested array of
      structure (and so on)
  02: VP(ComXf.EB.UnAlignedSignalGroupsRx)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.UnAlignedSignalGroupsRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_IMP_02001_StOfAllBasic_Unaligned</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_02_PartialMapping/source/application/Test.c</sourcefile>
      <sourceline>45</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
     This test verifies the serialization of a Composite Data Type into a linear
     byte array containing all basic data types as members of a structure where
      - one data element member / Com Group Signal is not mapped
     Test that the Com initial value is taken for this group signal.

     A whole signal group is mapped in &amp;lt;I-SIGNAL-TO-I-PDU-MAPPING&amp;gt;, but not all group signals are
     mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt;. This means only the group signals which
     are mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt; will be serialized. Although only a
     part of the group signals are serialized the bufferlength has to be calculated based on all
     group signals, also the ones which are not being serialized.

     Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case   | p3                                            | p4                                            |
  ---------------------------------------------------------------------------------------------------------------------------
  Data Type serialization | Composite Data Type                           | Composite Data Type                           |
  basic data types used   | boolean, uint8, uint16, uint32, sint8, sint16 | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members         sint32, float32 and uint8_n (string)          | sint32, float32 and uint8_n (string)          |
  RetVal ComXf Api        | E_OK                                          | E_OK                                          |
  BufferLength            | EBTEST_BUFFERLENGTH_STOFALLBASIC              | EBTEST_BUFFERLENGTH_STOFALLBASIC              |
  serialized signals      | RefData                                       | RefData                                       |
  UnusedBitPattern        | 0                                             | 255                                           |
  UnAlignedOffset         | 0bits                                         | 0bits                                         |
  IPdu mapping of         | Consecutive                                   | Consecutive                                   |
  GroupSignals
  PartialSignalMapping    | STD_ON                                        | STD_ON                                        |

  TS_COMXF_IMP_02001_StOfAllBasic_Unaligned group signal mapping:

  struct EbTest_StructOfAllBasicType           struct EbTest_StructOfAllBasicType
  {                                            {
    VAR(boolean, TYPEDEF) BTb; ----------------- VAR(boolean, TYPEDEF) BTb;
    VAR(uint8, TYPEDEF) BTu8; ------------------ VAR(uint8, TYPEDEF) BTu8;
    VAR(uint16, TYPEDEF) BTu16; ---------------- VAR(uint16, TYPEDEF) BTu16;
    VAR(uint32, TYPEDEF) BTu32; ---------------- VAR(uint32, TYPEDEF) BTu32;
    VAR(sint8, TYPEDEF) BTs8; ------------------ VAR(sint8, TYPEDEF) BTs8;
    VAR(sint16, TYPEDEF) BTs16; ---------------- VAR(sint16, TYPEDEF) BTs16;
    VAR(sint32, TYPEDEF) BTs32;                  VAR(sint32, TYPEDEF) BTs32;
    VAR(float32, TYPEDEF) BTf32; --------------- VAR(float32, TYPEDEF) BTf32;
    VAR(string, TYPEDEF) BTString; ------------- VAR(string, TYPEDEF) BTString;
  }                                            }

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  - one group signal is not mapped to a DataElement Member at Tx side,
    initial value of related ComSignal is set to 0x0abcdef0 (180150000)
  Runtime Pre-conditions:
  - ComXf module is initialized

Test Execution: 

  00: Initialize ComXf module
  01: Call BswEntry for structure holding some values for considered basic data type
  02: VP (ComXf.EB.PartialSignalMappingTx)
      The data types are serialized according to Com configuration, that is:
      - unused bits are correctly overwritten with configured UnusedBitPattern value
      - bits allocated to some different signal group signal, but part of actual
        signal group under test are set to the initial value of this different signal
        group signal


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.PartialSignalMappingTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>
    <specobject>
      <id>TS_COMXF_IMP_02002_NestedArrayOfStruct_Unaligned</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_02_PartialMapping/source/application/Test.c</sourcefile>
      <sourceline>181</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
     This test verifies the serialization of a Fixed size Data Type (Array of a Composite data type
     containing also Fixed size Data Types) into a linear byte array where
      - one data element member / Com Group Signal is not mapped
     Test that the Com initial value is taken for this group signal.

     A whole signal group is mapped in &amp;lt;I-SIGNAL-TO-I-PDU-MAPPING&amp;gt;, but not all group signals are
     mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt;. This means only the group signals which
     are mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt; will be serialized. Although only a
     part of the group signals are serialized the bufferlength has to be calculated based on all
     group signals, also the ones which are not being serialized.

     Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case   | p3                                               | p4                                               |
  -------------------------------------------------------------------------------------------------------------------------------
  Data Type serialization | Fixed size Data Type (Array of a Composite       | Fixed size Data Type (Array of a Composite       |
                            data type containing also Fixed size Data Types)   data type containing also Fixed size Data Types)
  basic data types used   | uint16, uint32, Fixed size Array of struct,      | uint16, uint32, Fixed size Array of struct,      |
  as elements               Fixed size Array of sint16                         Fixed size Array of sint16                       |
  RetVal ComXf Api        | E_OK                                             | E_OK                                             |
  BufferLength            | EBTEST_BUFFERLENGTH_NESTEDARRAYOFSTRUCT          | EBTEST_BUFFERLENGTH_NESTEDARRAYOFSTRUCT          |
  serialized signals      | RefData                                          | RefData                                          |
  UnusedBitPattern        | 0                                                | 255                                              |
  UnAlignedOffset         | 0bits                                            | 0bits                                            |
  IPdu mapping of         | Consecutive                                      | Consecutive                                      |
  GroupSignals
  PartialSignalMapping    | STD_ON                                           | STD_ON                                           |

  TS_COMXF_IMP_02002_NestedArrayOfStruct_Unaligned group signal mapping:

  struct EbTest_Struct1OfArray1Type                       struct EbTest_Struct1OfArray1Type
  {                                                       {
    VAR(uint16, TYPEDEF) BTu16; --------------------------- VAR(uint16, TYPEDEF) BTu16;
    VAR(EbTest_Struct2OfArray2Type, TYPEDEF) Array2[2]; --- VAR(EbTest_Struct2OfArray2Type, TYPEDEF) Array2[2];
    VAR(uint32, TYPEDEF) BTu32;                             VAR(uint32, TYPEDEF) BTu32;
  }                                                       }

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  - one group signal is not mapped to a DataElement Member at Tx side: BTu32
    initial value of related ComSignal is set to 0xabcd (43981)
  Runtime Pre-conditions:
  - Initialized ComXf module

Test Execution: 

  00: Initialize ComXf module
  01: Call BswEntry for structure holding some values for considered nested array of struct
  02: VP (ComXf.EB.PartialSignalMappingTx)
      The data types are serialized according to Com configuration, that is:
      - unused bits are correctly overwritten with configured UnusedBitPattern value
      - bits allocated to some different signal group signal, but part of actual
        signal group under test are set to the initial value of this different signal
        group signal


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.PartialSignalMappingTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>
    <specobject>
      <id>TS_COMXF_IMP_02010_StOfAllBasic_Unaligned</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_02_PartialMapping/source/application/Test.c</sourcefile>
      <sourceline>306</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to a structure of all basic data types
     as part of a Composite Data Type
     of Sender/Receiver communication using the ComBased de-serialization where
      - one data element member / Com Group Signal is not mapped
     Sanity test that this not mapped Data Element member is not written at all.

     A whole signal group is mapped in &amp;lt;I-SIGNAL-TO-I-PDU-MAPPING&amp;gt;, but not all group signals are
     mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt;. This means only the group signals which
     are mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt; will be de-serialized.

     Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case      | p3                                            | p4                                            |
  ----------------------------------------------------------------------------------------------------------------------------
  Data Type de-serialization | Composite Data Type                           | Composite Data Type                           |
  basic data types used      | boolean, uint8, uint16, uint32, sint8, sint16 | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members            sint32, float32 and uint8_n (string)          | sint32, float32 and uint8_n (string)          |
  RetVal ComXf Api           | E_OK                                          | E_OK                                          |
  de-serialized signals      | DesStOfAllBasic                               | DesStOfAllBasic                               |
  IPdu mapping of            | Consecutive                                   | Consecutive                                   |
  GroupSignals
  PartialSignalMapping       | STD_ON                                        | STD_ON                                        |

  TS_COMXF_IMP_02010_StOfAllBasic_Unaligned group signal mapping:

  struct EbTest_StructOfAllBasicType           struct EbTest_StructOfAllBasicType
  {                                            {
    VAR(boolean, TYPEDEF) BTb; ----------------- VAR(boolean, TYPEDEF) BTb;
    VAR(uint8, TYPEDEF) BTu8; ------------------ VAR(uint8, TYPEDEF) BTu8;
    VAR(uint16, TYPEDEF) BTu16; ---------------- VAR(uint16, TYPEDEF) BTu16;
    VAR(uint32, TYPEDEF) BTu32; ---------------- VAR(uint32, TYPEDEF) BTu32;
    VAR(sint8, TYPEDEF) BTs8; ------------------ VAR(sint8, TYPEDEF) BTs8;
    VAR(sint16, TYPEDEF) BTs16; ---------------- VAR(sint16, TYPEDEF) BTs16;
    VAR(sint32, TYPEDEF) BTs32;                  VAR(sint32, TYPEDEF) BTs32;
    VAR(float32, TYPEDEF) BTf32; --------------- VAR(float32, TYPEDEF) BTf32;
    VAR(string, TYPEDEF) BTString; ------------- VAR(string, TYPEDEF) BTString;
  }                                            }

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  - one group signal member is not mapped to a DataElement Member at Rx side: BTs32
    initial value of related ComSignal is set to 0xabcdef0 (180150000)
  Runtime Pre-conditions:
  - Initialized ComXf module

Test Execution: 
  01: Call deserializer function of a serialized structure holding all basic data types
  02: Sanity Check:
        The deserialized array holds the original values (except not mapped member)
  03: VP(ComXf.EB.PartialSignalMappingRx)
        The not mapped Data Element member is not affected

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.PartialSignalMappingRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>
    <specobject>
      <id>TS_COMXF_IMP_02011_NestedArrayOfStruct_Unaligned</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_02_PartialMapping/source/application/Test.c</sourcefile>
      <sourceline>439</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to an array of structured data type
     holding a nested array of structured data type (and so on) of Sender/Receiver communication
     using the ComBased deserialization where
      - one data element member / Com Group Signal is not mapped
     Sanity test that this not mapped Data Element member is not written at all.

     A whole signal group is mapped in &amp;lt;I-SIGNAL-TO-I-PDU-MAPPING&amp;gt;, but not all group signals are
     mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt;. This means only the group signals which
     are mapped in &amp;lt;SENDER-RECEIVER-TO-SIGNAL-GROUP-MAPPING&amp;gt; will be de-serialized.

     Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case      | p3                                               | p4                                               |
  -----------------------------------------------------------------------------------------------------------------------------------
  Data Type de-serialization | Fixed size Data Type (Array of a Composite       | Fixed size Data Type (Array of a Composite       |
                               data type containing also Fixed size Data Types)   data type containing also Fixed size Data Types)
  basic data types used      | uint16, uint32, Fixed size Array of struct,      | uint16, uint32, Fixed size Array of struct,      |
  as elements                  Fixed size Array of sint16                         Fixed size Array of sint16                       |
  RetVal ComXf Api           | E_OK                                             | E_OK                                             |
  de-serialized signals      | DesNestedArrayOfStructFixSize                    | DesNestedArrayOfStructFixSize                    |
  IPdu mapping of            | Consecutive                                      | Consecutive                                      |
  GroupSignals
  PartialSignalMapping       | STD_ON                                           | STD_ON                                           |

  TS_COMXF_IMP_02011_NestedArrayOfStruct_Unaligned group signal mapping:

  struct EbTest_Struct1OfArray1Type                       struct EbTest_Struct1OfArray1Type
  {                                                       {
    VAR(uint16, TYPEDEF) BTu16; --------------------------- VAR(uint16, TYPEDEF) BTu16;
    VAR(EbTest_Struct2OfArray2Type, TYPEDEF) Array2[2]; --- VAR(EbTest_Struct2OfArray2Type, TYPEDEF) Array2[2];
    VAR(uint32, TYPEDEF) BTu32;                             VAR(uint32, TYPEDEF) BTu32;
  }                                                       }

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  - one group signal member is not mapped to a DataElement Member at Rx side: BTu32
    initial value of related ComSignal is set to 0xabcd (43981)
  Runtime Pre-conditions:
  - Initialized ComXf module

Test Execution: 
  01: Call deserializer function of a serialized nested array of structure holding all 
      basic data types
  02: Sanity Check:
        The deserialized array holds the original values (except not mapped member)
  03: VP(ComXf.EB.PartialSignalMappingRx)
        The not mapped Data Element member is not affected

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.PartialSignalMappingRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_IMP_03001_StOfAllBasic_Unaligned_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_03_UnalignedSigG_Safe/source/application/Test.c.m4</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
   1)  This test verifies the serialization of a Composite Data Type into a linear
       byte array containing all basic data types as members of a structure where
        - individual group signals are placed unaligned (not at byte boundaries), and
        - there are unused bits between two group signals which are set according to the
          UnusedBitPattern configuration of the ISignal to PDU mapping.
   2)  This test verifies that range checks are implemented and occur if the value of
       the data element member cannot be represented by an unaligned mapped group signal.
       In this case the error code E2E_RANGECHK_INVALID (0xFFU) is returned (Safety_RangeChecks).
       Test that the serialization is still done correctly if E2E_RANGECHK_INVALID (0xFFU)
       is returned (Safety_RangeChecks_SerBehavior).

   Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case     | p3                                            | p4                                            |
  ---------------------------------------------------------------------------------------------------------------------------
  Data Type serialization   | Composite Data Type                           | Composite Data Type                           |
  basic data types used     | boolean, uint8, uint16, uint32, sint8, sint16 | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members           sint32, float32 and uint8_n (string)          | sint32, float32 and uint8_n (string)          |
  RetVal ComXf Api          | E_OK, E2E_RANGECHK_INVALID                    | E_OK, E2E_RANGECHK_INVALID                    |
  BufferLength              | EBTEST_BUFFERLENGTH_STOFALLBASIC_RED          | EBTEST_BUFFERLENGTH_STOFALLBASIC_RED          |
  Memory outside            | RefDataMemory                                 | RefDataMemory                                 |
  serialized signals
  valid serialized signals  | RefData_InRange                               | RefData_InRange                               |
  invalid serialized signals| RefData_OutOfRange                            | RefData_OutOfRange                            |
  UnusedBitPattern          | 0                                             | 255                                           |
  UnAlignedOffset           | 3bits                                         | 3bits                                         |
  IPdu mapping of           | Non Consecutive                               | Non Consecutive                               |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - signal group configuration contains un-aligned group signals
    (especially first and last group signal), see also pdu layout below
  - unused bits of first bytes are not allocated by any other signal group / group signal
  - unused bits of last byte are allocated by a group signal
  - there exist at least two group signals with unused bits in between

  Pdu layout:
    group signal      bitpos  bitlength
            |             |      |
    ISignal_a_BTb         3      1
    ISignal_a_BTu8       11      8
    ISignal_a_BTu16      19     16
    ISignal_a_BTu32      35     32
    ISignal_a_BTs8       67      8
    ISignal_a_BTs16      75     16
    ISignal_a_BTs32      91     32
    ISignal_a_BTString  120     64
    ISignal_a_BTf32     187     32
    ISignal_a_BTf64     224     64
    ISignal_a_BTu64     288     40
    ISignal_a_BTs64     352     40

Test Execution: 

  00: Initialize ComXf module

Repeat following steps for different 8-bit patterns in range "Pattern"=[0x00,0xFE]:
  01: Prepare buffer with some pattern where unused bits or bits group signal from consecutive
      signal group of first / last byte are set with pattern "Pattern"
  02: Call BswEntry for structure holding considered basic data types
  03: VP (ComXf.EB.UnAlignedSignalGroupsTx_Safety)
      The data types are serialized according to Com configuration, that is:
      - unused bits are correctly overwritten with configured UnusedBitPattern value
  04: Reset buffer to initial values and the DataPtr with out of range struct
  05: Call BswEntry for structure holding considered basic data types
  06: VP: (Safety_RangeChecks) Range check sets RetVal to E2E_RANGECHK_INVALID
          (Safety_RangeChecks_SerBehavior) Buffer length is still correct
  07: VP: (Safety_RangeChecks_SerBehavior) Data types are serialized correctly

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.UnAlignedSignalGroupsTx_Safety</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.Safety_RangeChecks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>ComXf.EB.Safety_RangeChecks_SerBehavior</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>
    <specobject>
      <id>TS_COMXF_IMP_03002_NestedArrayOfStruct_Unaligned_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_03_UnalignedSigG_Safe/source/application/Test.c.m4</sourcefile>
      <sourceline>301</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
     This test verifies the serialization of a Fixed size Data Type (Array of a Composite data type
     containing also Fixed size Data Types) into a linear byte array where
     individual group signals are placed unaligned (not at byte boundaries)

     This test also verifies that the data types are serialized correctly and
     unused bits are correctly overwritten with configured UnusedBitPattern value.

     Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case   | p3                                               | p4                                               |
  -------------------------------------------------------------------------------------------------------------------------------
  Data Type serialization | Fixed size Data Type (Array of a Composite       | Fixed size Data Type (Array of a Composite       |
                            data type containing also Fixed size Data Types)   data type containing also Fixed size Data Types)
  basic data types used   | uint16, uint32, Fixed size Array of struct,      | uint16, uint32, Fixed size Array of struct,      |
  as elements               Fixed size Array of sint16                         Fixed size Array of sint16                       |
  RetVal ComXf Api        | E_OK                                             | E_OK                                             |
  BufferLength            | EBTEST_BUFFERLENGTH_NESTEDARRAYOFSTRUCT          | EBTEST_BUFFERLENGTH_NESTEDARRAYOFSTRUCT          |
  Memory outside          | RefDataMemory                                    | RefDataMemory                                    |
  serialized signals
  serialized signals      | RefData                                          | RefData                                          |
  UnusedBitPattern        | 0                                                | 255                                              |
  UnAlignedOffset         | 3bits                                            | 3bits                                            |
  IPdu mapping of         | Non Consecutive                                  | Non Consecutive                                  |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - signal group configuration contains un-aligned group signals
    (especially first and last group signal), all have an offset of 3 bits, see also pdu layout
    below
  - unused bits of first bytes are not allocated by any other signal group / group signal
  - there exist at least two group signals with unused bits in between

  Pdu layout:
    group signal                   bitpos   bitlength
            |                         |      |
ISignal_a_0_BTu16                    419     8
ISignal_a_0_Array2_0_BTu16           427     8
ISignal_a_0_Array2_0_Array3_0_s16    435    16
ISignal_a_0_Array2_0_Array3_1_s16    451    16
ISignal_a_0_Array2_0_BTu32           467    32
ISignal_a_0_Array2_1_BTu16           499    16
ISignal_a_0_Array2_1_Array3_0_s16    515    16
ISignal_a_0_Array2_1_Array3_1_s16    531    16
ISignal_a_0_Array2_1_BTu32           547    24
ISignal_a_0_BTu32                    571    16


Test Execution: 

  00: Initialize ComXf module

Repeat following steps for different 8-bit patterns in range "Pattern"=[0x00,0xFE]:
  01: Prepare buffer with some pattern where unused bits or bits group signal from consecutive
      signal group of first / last byte are set with pattern "Pattern"
  02: Call BswEntry for structure holding considered nested array of structure
  03: VP (ComXf.EB.UnAlignedSignalGroupsTx_Safety)
      The data types are serialized according to Com configuration, that is:
      - unused bits are correctly overwritten with configured UnusedBitPattern value


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.UnAlignedSignalGroupsTx_Safety</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>
    <specobject>
      <id>TS_COMXF_IMP_03010_StOfAllBasic_Unaligned_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_03_UnalignedSigG_Safe/source/application/Test.c.m4</sourcefile>
      <sourceline>452</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to a structure of all basic data types
     as part of a Composite Data Type
     of Sender/Receiver communication using the ComBased de-serialization where
     - individual group signals are placed unaligned (not at byte boundaries), and
     - unused bits between two group signals

     Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case      | p3                                            | p4                                            |
  -----------------------------------------------------------------------------------------------------------------------------
  Data Type de-serialization | Composite Data Type                           | Composite Data Type                           |
  basic data types used      | boolean, uint8, uint16, uint32, sint8, sint16 | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members            sint32, float32 and uint8_n (string)          | sint32, float32 and uint8_n (string)          |
  RetVal ComXf Api           | E_OK                                          | E_OK                                          |
  de-serialized signals      | members of DesStOfAllBasic                    | members of DesStOfAllBasic                    |
  UnusedBitPattern           | 0                                             | 255                                           |
  UnAlignedOffset            | 3bits                                         | 3bits                                         |
  IPdu mapping of            | Non Consecutive                               | Non Consecutive                               |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Call deserializer function of a serialized structure holding all basic data types
  02: VP(ComXf.EB.UnAlignedSignalGroupsRx_Safety)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.UnAlignedSignalGroupsRx_Safety</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>
    <specobject>
      <id>TS_COMXF_IMP_03011_NestedArrayOfStruct_Unaligned_Safe</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Implementation/IN/ComXf_ImpTest_03_UnalignedSigG_Safe/source/application/Test.c.m4</sourcefile>
      <sourceline>559</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
     This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to an array of structured data type
     holding a nested array of structured data type (and so on) of Sender/Receiver communication
     using the ComBased deserialization where
     - individual group signals are placed unaligned (not at byte boundaries), and
     - unused bits between two group signals

    Please see testing method: Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: at API level
&lt;/para&gt;
&lt;para&gt;
  Equivalence Class Partitioning: at API level:

  Verification aspect /
  Permutation test-case      | p3                                               | p4                                               |
  ----------------------------------------------------------------------------------------------------------------------------------
  Data Type de-serialization | Fixed size Data Type (Array of a Composite       | Fixed size Data Type (Array of a Composite       |
                               data type containing also Fixed size Data Types)   data type containing also Fixed size Data Types)
  basic data types used      | uint16, uint32, Fixed size Array of struct,      | uint16, uint32, Fixed size Array of struct,      |
  as elements                  Fixed size Array of sint16                         Fixed size Array of sint16                       |
  RetVal ComXf Api           | E_OK                                             | E_OK                                             |
  de-serialized data types   | DesNestedArrayOfStructFixSize element members    | DesNestedArrayOfStructFixSize element members    |
  UnusedBitPattern           | 0                                                | 255                                              |
  UnAlignedOffset            | 3bits                                            | 3bits                                            |
  IPdu mapping of            | Non Consecutive                                  | Non Consecutive                                  |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Call deserializer function of a serialized array of structure holding nested array of
      structure (and so on)
  02: VP(ComXf.EB.UnAlignedSignalGroupsRx_Safety)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.UnAlignedSignalGroupsRx_Safety</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_CON_01001_ComXfConfigType</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_Functions.c</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Test that the Com Based transformer declares type ComXf_ConfigType.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Gray Box Testing
&lt;/para&gt;
&lt;para&gt;
  Gray Box Testing:
   ComXf_ConfigType defined within check ComXf_Api_Stc.h.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - ComXf module is not initialized

Test Execution: 
  00: VP: A variable of type ComXf_ConfigType can be defined

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01002_ComXfInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_Functions.c</sourcefile>
      <sourceline>93</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Test that a call to ComXf_Init() correctly initializes the
  non safety related Com Based transformer.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Gray Box Testing
  - Negative Tests / Fault-injection: at API level
&lt;/para&gt;
&lt;para&gt;
  Gray Box Testing / Negative Tests:
  - Det_ReportError call check of ComXf Api after ComXf_Init
  - Com function Com_ComXf_GetStatus call check
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - ComXf module is not initialized

Test Execution: 
  01: Call ComXf_Init() with NULL_PTR
  02: Call ComXf serialization API
  03: VP (ComXf.SWS_ComXf_00026)
      No DET is called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01004_ComXfGetVersionInfo</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_Functions.c</sourcefile>
      <sourceline>170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Test that a call to ComXf_GetVersionInfo() returns the correct common published information.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Gray Box Testing
&lt;/para&gt;
&lt;para&gt;
  Gray Box Testing:

   VersionInfo member | valid value | test macro                    |
  -------------------------------------------------------------------
  vendorID            | 1U          | TS_VENDOR_ID_EB               |
  moduleID            | 175U        | EBTEST_COMXF_MODULE_ID        |
  sw_major_version    | 1U          | EBTEST_COMXF_SW_MAJOR_VERSION |
  sw_minor_version    | 0U          | EBTEST_COMXF_SW_MINOR_VERSION |
  sw_patch_version    | 30U         | EBTEST_COMXF_SW_PATCH_VERSION |

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  - Parameter XfrmVersionInfoApi is enabled

Test Execution: 
  00: Call ComXf_GetVersionInfo() with valid pointer
  01: VP: Correct common published information is returned

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01005_PublishedInformation</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_Functions.c</sourcefile>
      <sourceline>231</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test shall check the correct definition of the common published information
  provided in the module header file.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Gray Box Testing
&lt;/para&gt;
&lt;para&gt;
   Gray Box Testing:

   common published information macros | valid value | test macro                               |
  -----------------------------------------------------------------------------------------------
  COMXF_VENDOR_ID                      | 1U          | EBTEST_COMXF_VENDOR_ID                   |
  COMXF_MODULE_ID                      | 175U        | EBTEST_COMXF_MODULE_ID                   |
  COMXF_AR_RELEASE_MAJOR_VERSION       | 4U          | EBTEST_COMXF_AR_RELEASE_MAJOR_VERSION    |
  COMXF_AR_RELEASE_MINOR_VERSION       | 2U          | EBTEST_COMXF_AR_RELEASE_MINOR_VERSION    |
  COMXF_AR_RELEASE_REVISION_VERSION    | 1U          | EBTEST_COMXF_AR_RELEASE_REVISION_VERSION |
  COMXF_SW_MAJOR_VERSION               | 1U          | EBTEST_COMXF_SW_MAJOR_VERSION            |
  COMXF_SW_MINOR_VERSION               | 0U          | EBTEST_COMXF_SW_MINOR_VERSION            |
  COMXF_SW_PATCH_VERSION               | XXU         | EBTEST_COMXF_SW_PATCH_VERSION            |
  COMXF_INSTANCE_ID                    | 0x00U       | EBTEST_COMXF_INSTANCE_ID                 |

&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP (ComXf.EB.PublishedInformation):
      COMXF_VENDOR_ID shall be defined with the
      value globally provided by the tooling environment
  02: VP (ComXf.EB.PublishedInformation):
      COMXF_MODULE_ID shall be defined with 175U
  03: VP (ComXf.EB.PublishedInformation):
      COMXF_AR_RELEASE_MAJOR_VERSION shall be defined
      with the value specified in config.mk
  04: VP (ComXf.EB.PublishedInformation):
      COMXF_AR_RELEASE_MINOR_VERSION shall be defined
      with the value specified in config.mk
  05: VP (ComXf.EB.PublishedInformation):
      COMXF_AR_RELEASE_REVISION_VERSION shall be defined
      with the value specified in config.mk
  06: VP (ComXf.EB.PublishedInformation):
      COMXF_SW_MAJOR_VERSION shall be defined
      with the value specified in config.mk
  07: VP (ComXf.EB.PublishedInformation):
      COMXF_SW_MINOR_VERSION shall be defined
      with the value specified in config.mk
  08: VP (ComXf.EB.PublishedInformation):
      COMXF_SW_PATCH_VERSION shall be defined
      with the value specified in config.mk
  09: VP (ComXf.EB.PublishedInformation):
      COMXF_INSTANCE_ID shall be defined with 0U

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.EB.PublishedInformation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01010_StOfAllBasic</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_Functions.c</sourcefile>
      <sourceline>357</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies the serialization of a Composite Data Type into a linear
     byte array containing basic data types (SWS_ComXf_00009) as members of a
     structure (SWS_ComXf_00018, SWS_ComXf_00015) as described within
     the testing method Equivalence Class Partitioning: at API level.
     Note: float64 is not supported yet.

  2) Test that the serialization is based on the Ecu configuration of the
     COM module and the information provided by the
     Software Component Description (i.e. Software Components PortPrototype,
     specific dataElement of a dataElement list defined by the respective SenderReceiverInterface,
     the SenderReceiverToSignalGroupMapping, and the ISignalToIPduMapping for the SystemSignalGroup)
     (SWS_ComXf_00005, SWS_ComXf_00031).
     Note: The related SenderReceiverInterface references an ImplementationDataType.
  3) Test that the COM Based Transformer handles each dataElement of
     the SenderReceiverInterface individually (SWS_ComXf_00016).
     Note: Here, the first dataElement of a dataElement list is tested.
  4) Test that the COM Based Transformer places the serialized data element into the data
     buffer at the position: ComBitPosition
     where ComBitPosition is taken from the ComGroupSignal definition in COM (SWS_ComXf_00020).
     Note: Here, the SignalGroupOffset equals 0.
           No further transformers are configured with headerLength!=0
           Further transformers are configured with headerLength!=0 which is ignored by ComXf
           (see documented deviation dev.ComXf.AdditionalTransformersNoHeader).

  5) Test that the COM Based Transformer handles each dataElement of the SenderReceiverInterface
     like defined for the COM module when the COM API Com_SendSignal is called for a shadow
     signal (SWS_ComXf_00021). Please see test method: Equivalence Class Partitioning: At API level.

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: At API level
&lt;/para&gt;
&lt;para&gt;

  Equivalence Class Partitioning: At API level:

  This test-case is permuted as follows:
     ComXf_ConTest_01_SR_Functions .................ComXf is executed based on COM APIs Com_Send/ReceiveSignal for
                                                    retrieving (de-)serialized data.
     ComXf_ConTest_01_SR_Functions_ComComXfMock ... ComXf is executed as intended.

  Verification aspect /
  Permutation test-case   | ComXf_ConTest_01_SR_Functions                 | ComXf_ConTest_01_SR_Functions_ComComXfMock    |
  --------------------------------------------------------------------------------------------------------------------------
  Data Type serialization | Composite Data Type                           | Composite Data Type                           |
  basic data types used   | boolean, uint8, uint16, uint32, sint8, sint16 | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members         sint32, float32 and uint8_n (string)            sint32, float32 and uint8_n (string)          |
  RetVal ComXf Api        | E_OK                                          | E_OK                                          |
  BufferLength            | EBTEST_BUFFERLENGTH_STOFALLBASIC              | EBTEST_BUFFERLENGTH_STOFALLBASIC              |
  Memory outside          | RefDataMemory                                 | RefDataMemory                                 |
  serialized
  serialized signals      | RefData                                       | RefData                                       |
  group signal ids passed | Not verified                                  | Verified                                      |
  to Com-ComXf extension
  UnusedBitPattern        | 0                                             | 0                                             |
  UnAlignedOffset         | 0bits                                         | 0bits                                         |
  IPdu mapping of         | Consecutive                                   | Consecutive                                   |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - ComXf module is initialized

Test Execution: 
  00: Initialize module
  01: Call BswEntry for structure holding considered basic data type
  02: Sanity Check:
      serializer function returns E_OK
  03: Sanity Check:
      the length of the array returned by the serializer function equals
      the serialized byte representation of the ComSignalGroup configured in COM
  04: VP (ComXf.SWS_ComXf_00020)
      Memory outside the serialized signals according to the configured ComBitPosition
      in COM configuration are not modified.
  05: p0: VP (SWS_ComXf_00015, SWS_ComXf_00018, SWS_ComXf_00005, SWS_ComXf_00016, SWS_ComXf_00031):
      p1: VP (SWS_ComXf_00021, SWS_ComXf_00009):
          The data types are serialized according to Com configuration

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.boolean</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.sint8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.sint16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.sint32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.float32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00015.uint8_n</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01020_ArrayOfUint8</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_Functions.c</sourcefile>
      <sourceline>567</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies the serialization of a Fixed size Data Type (Array of a basic data type)
     into a linear byte array (SWS_ComXf_00009).
     Please see test method: Equivalence Class Partitioning: At API level.
  2) Test that the serialization is based on the Ecu configuration of the
     COM module and the information provided by the
     Software Component Description (i.e. Software Components PortPrototype,
     specific dataElement of a dataElement list defined by the respective SenderReceiverInterface,
     the SenderReceiverToSignalGroupMapping, and the ISignalToIPduMapping for the SystemSignalGroup)
     (SWS_ComXf_00005, SWS_ComXf_00031).
     Note: The related SenderReceiverInterface references an ImplementationDataType.
  3) Test that the COM Based Transformer handles each dataElement of
     the SenderReceiverInterface individually (SWS_ComXf_00016).
     Note: Here, the second dataElement of a dataElement list is tested.
  4) Test that the COM Based Transformer places the serialized data element into the data
     buffer at the position: ComBitPosition
     where ComBitPosition is taken from the ComGroupSignal definition in COM (SWS_ComXf_00020).
     Note: Here, the SignalGroupOffset != 0.
           Further transformers are configured with headerLength!=0 which is ignored by ComXf
           (see documented deviation dev.ComXf.AdditionalTransformersNoHeader).

  5) Test that the COM Based Transformer handles each dataElement of the SenderReceiverInterface
     like defined for the COM module when the COM API Com_SendSignal is called for a shadow
     signal (SWS_ComXf_00021). Please see test method: Equivalence Class Partitioning: At API level.

  6) Test that if the ComSignalGroup offset within the IPdu is not equal to 0
     (e.g. placed in the middle of the IPdu), then the ComXf correctly provides
     the serialized data from the first byte (SWS_ComXf_00014).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: At API level
&lt;/para&gt;
&lt;para&gt;

  Equivalence Class Partitioning: At API level:

  This test-case is permuted as follows:
     ComXf_ConTest_01_SR_Functions .................ComXf is executed based on COM APIs Com_Send/ReceiveSignal for
                                                    retrieving (de-)serialized data.
     ComXf_ConTest_01_SR_Functions_ComComXfMock ... ComXf is executed as intended.

  Verification aspect /
  Permutation test-case   | ComXf_ConTest_01_SR_Functions                     | ComXf_ConTest_01_SR_Functions_ComComXfMock        |
  ----------------------  ---------------------------------------------------------------------------------------------------------
  Data Type serialization | Fixed size Data Type (Array of a basic data type) | Fixed size Data Type (Array of a basic data type) |
  basic data types used   | uint8                                             | uint8                                             |
  as elements
  RetVal ComXf Api        | E_OK                                              | E_OK                                              |
  BufferLength            | EBTEST_BUFFERLENGTH_ARRAYOFUINT8                  | EBTEST_BUFFERLENGTH_ARRAYOFUINT8                  |
  Memory outside
  serialized signals      | RefDataMemory                                     | RefDataMemory                                     |
  serialized data types   | RefDataUint8                                      | RefDataUint8                                      |
  group signal ids passed | Not verified                                      | Verified                                          |
  to Com-ComXf extension
  UnusedBitPattern        | 0                                                 | 0                                                 |
  UnAlignedOffset         | 0bits                                             | 0bits                                             |
  IPdu mapping of         | Consecutive                                       | Consecutive                                       |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - Initialized ComXf module

Test Execution: 
  01: Call serializer function of a one-dimensional array of fixed size
  02: Sanity Check:
      serializer function returns E_OK
  03: Sanity Check:
      the length of the array returned by the serializer function equals
      the serialized byte representation of the ComSignalGroup configured in COM
  04: VP (ComXf.SWS_ComXf_00020)
      Memory outside the serialized signals according to the configured ComBitPosition
      in COM configuration are not modified.
  05: p0: VP (SWS_ComXf_00019, SWS_ComXf_00005, SWS_ComXf_00014, SWS_ComXf_00031):
      p1: VP (SWS_ComXf_00021, SWS_ComXf_00009, SWS_ComXf_00014):
          The data types are serialized according to Com configuration
          starting with the first byte (even if ComSignalGroup offset does not equal 0)

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01030_NestedArrayOfStruct</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_Functions.c</sourcefile>
      <sourceline>741</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies the serialization of a Fixed size Data Type (Array of a Composite data type
     containing also Fixed size Data Types) into a linear byte array (SWS_ComXf_00009).
     Please see test method: Equivalence Class Partitioning: At API level.
  2) Test that the serialization is based on the Ecu configuration of the
     COM module and the information provided by the
     Software Component Description (i.e. Software Components PortPrototype,
     specific dataElement of a dataElement list defined by the respective SenderReceiverInterface,
     the SenderReceiverToSignalGroupMapping, and the ISignalToIPduMapping for the SystemSignalGroup)
     (SWS_ComXf_00005, SWS_ComXf_00031).
     Note: The related SenderReceiverInterface references an ImplementationDataType.
  3) Test that the COM Based Transformer handles each dataElement of
     the SenderReceiverInterface individually (SWS_ComXf_00016).
     Note: Here, the third dataElement of a dataElement list is tested.

  4) Test that COM Based Transformer returns E_OK (successful operation assumed) (SWS_ComXf_00007).

  5) Test that the COM Based Transformer handles each dataElement of the SenderReceiverInterface
     like defined for the COM module when the COM API Com_SendSignal is called for a shadow
     signal (SWS_ComXf_00021). Please see test method: Equivalence Class Partitioning: At API level.

  6) Test that if the ComSignalGroup offset within the IPdu is not equal to 0
     (e.g. placed in the middle of the IPdu), then the ComXf correctly provides
     the serialized data from the first byte (SWS_ComXf_00014).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: At API level
&lt;/para&gt;
&lt;para&gt;

  Equivalence Class Partitioning: At API level:

  This test-case is permuted as follows:
     ComXf_ConTest_01_SR_Functions .................ComXf is executed based on COM APIs Com_Send/ReceiveSignal for
                                                    retrieving (de-)serialized data.
     ComXf_ConTest_01_SR_Functions_ComComXfMock ... ComXf is executed as intended.

  Verification aspect /
  Permutation test-case   | ComXf_ConTest_01_SR_Functions                    | ComXf_ConTest_01_SR_Functions_ComComXfMock       |
  --------------------------------------------------------------------------------------------------------------------------------
  Data Type serialization | Fixed size Data Type (Array of a Composite       | Fixed size Data Type (Array of a Composite       |
                            data type containing also Fixed size Data Types)   data type containing also Fixed size Data Types)
  basic data types used   | uint16, uint32, Fixed size Array of struct,      | uint16, uint32, Fixed size Array of struct,      |
  as elements               Fixed size Array of sint16                         Fixed size Array of sint16
  RetVal ComXf Api        | E_OK                                             | E_OK                                             |
  BufferLength            | EBTEST_BUFFERLENGTH_NESTEDARRAYOFSTRUCT          | EBTEST_BUFFERLENGTH_NESTEDARRAYOFSTRUCT          |
  Memory outside
  serialized signals      | RefDataMemory                                    | RefDataMemory                                    |
  serialized data types   | RefData                                          | RefData                                          |
  group signal ids passed | Not verified                                     | Verified                                         |
  to Com-ComXf extension
  UnusedBitPattern        | 0                                                | 0                                                |
  UnAlignedOffset         | 0bits                                            | 0bits                                            |
  IPdu mapping of         | Consecutive                                      | Consecutive                                      |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - Initialized ComXf module

Test Execution: 
  01: Call BswEntry for structure holding nested structures and basic data types
  02: VP (SWS_ComXf_00007):
      serializer function returns E_OK
  03: Sanity Check:
      the length of the array returned by the serializer function equals
      the serialized byte representation of the ComSignalGroup configured in COM
  04: VP (ComXf.SWS_ComXf_00020)
      Memory outside the serialized signals according to the configured ComBitPosition
      in COM configuration is not modified.
  05: p0: (SWS_ComXf_00019, SWS_ComXf_00005, SWS_ComXf_00014, SWS_ComXf_00031):
      p1: VP (SWS_ComXf_00021, SWS_ComXf_00009, SWS_ComXf_00014):
          The data types are serialized according to Com configuration
          starting with the first byte (even if ComSignalGroup offset does not equal 0)

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_COMXF_CON_01110_StOfAllBasic</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_InvFunctions.c</sourcefile>
      <sourceline>82</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to a structure of all basic data types
     as part of a Composite Data Type of Sender/Receiver communication using
     the ComBased de-serialization (SWS_ComXf_00012, SWS_ComXf_00018).
     Please see test method: Equivalence Class Partitioning: At API level.
     Note: float64 is not supported yet.

  2) Test that the COM Based Transformer takes the
     buffer at the position ComBitPosition to for the de-serialization of the data element
     where ComBitPosition is taken from the ComGroupSignal definition in COM (SWS_ComXf_00020).
     Note: Here, the SignalGroupOffset equals 0.
           Further transformers are configured with headerLength!=0 which is ignored by ComXf
           (see documented deviation dev.ComXf.AdditionalTransformersNoHeader).

  3) Test that the COM Based Transformer handles each dataElement of the SenderReceiverInterface
     like defined for the COM module when the COM API Com_ReceiveSignal is called for a shadow
     signal (SWS_ComXf_00021).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: At API level
&lt;/para&gt;
&lt;para&gt;

  Equivalence Class Partitioning: At API level:

  This test-case is permuted as follows:
     ComXf_ConTest_01_SR_Functions .................ComXf is executed based on COM APIs Com_Send/ReceiveSignal for
                                                    retrieving (de-)serialized data.
     ComXf_ConTest_01_SR_Functions_ComComXfMock ... ComXf is executed as intended.

  Verification aspect /
  Permutation test-case      | ComXf_ConTest_01_SR_Functions                 | ComXf_ConTest_01_SR_Functions_ComComXfMock    |
  -----------------------------------------------------------------------------------------------------------------------------
  Data Type de-serialization | Composite Data Type                           | Composite Data Type                           |
  basic data types used      | boolean, uint8, uint16, uint32, sint8, sint16 | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members            sint32, float32 and uint8_n (string)            sint32, float32 and uint8_n (string)          |
  RetVal ComXf Api           | E_OK                                          | E_OK                                          |
  de-serialized signals      | members of DesStOfAllBasic                    | members of DesStOfAllBasic                    |
  group signal ids passed    | Not verified                                  | Verified                                      |
  to Com-ComXf extension
  UnusedBitPattern           | 0                                             | 0                                             |
  UnAlignedOffset            | 0bits                                         | 0bits                                         |
  IPdu mapping of            | Consecutive                                   | Consecutive                                   |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - Initialized ComXf module

Test Execution: 
  01: Call deserializer function of a serialized structure holding all basic data types
  02: p0: VP (SWS_ComXf_00018, SWS_ComXf_00020)
      p1: VP (SWS_ComXf_00021, SWS_ComXf_00012)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01120_ArrayOfUint8</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_InvFunctions.c</sourcefile>
      <sourceline>241</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to an array of fixed length of a
     basic data type of Sender/Receiver communication using the ComBased deserialization
     (SWS_ComXf_00012, SWS_ComXf_00019).
     Please see test method: Equivalence Class Partitioning: At API level.

  2) Test that the COM Based Transformer takes the
     buffer at the position ComBitPosition to for the de-serialization of the data element
     where ComBitPosition is taken from the ComGroupSignal definition in COM (SWS_ComXf_00020).
     Note: Here, the SignalGroupOffset != 0.
           Further transformers are configured with headerLength!=0 which is ignored by ComXf
           (see documented deviation dev.ComXf.AdditionalTransformersNoHeader).

  3) Test that the COM Based Transformer handles each dataElement of the SenderReceiverInterface
     like defined for the COM module when the COM API Com_ReceiveSignal is called for a shadow
     signal (SWS_ComXf_00021).

  4) Test that if the ComSignalGroup offset within the IPdu is not equal to 0
     (e.g. placed in the middle of the IPdu), then the ComXf correctly de-serializes
     the data from the first byte (SWS_ComXf_00014).

&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: At API level
&lt;/para&gt;
&lt;para&gt;

  Equivalence Class Partitioning: At API level:

  This test-case is permuted as follows:
     ComXf_ConTest_01_SR_Functions .................ComXf is executed based on COM APIs Com_Send/ReceiveSignal for
                                                    retrieving (de-)serialized data.
     ComXf_ConTest_01_SR_Functions_ComComXfMock ... ComXf is executed as intended.

  Verification aspect /
  Permutation test-case      | ComXf_ConTest_01_SR_Functions                     | ComXf_ConTest_01_SR_Functions_ComComXfMock        |
  ------------------------------------------------------------------------------------------------------------------------------------
  Data Type de-serialization | Fixed size Data Type (Array of a basic data type) | Fixed size Data Type (Array of a basic data type) |
  basic data types used      | uint8                                             | uint8                                             |
  as elements
  RetVal ComXf Api           | E_OK                                              | E_OK                                              |
  de-serialized data types   | RefDataUint8                                      | RefDataUint8                                      |
  group signal ids passed    | Not verified                                      | Verified                                          |
  to Com-ComXf extension
  UnusedBitPattern           | 0                                                 | 0                                                 |
  UnAlignedOffset            | 0bits                                             | 0bits                                             |
  IPdu mapping of            | Consecutive                                       | Consecutive                                       |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - Initialized ComXf module

Test Execution: 
  01: Call deserializer function of a serialized array of fixed size of a basic data type
  02: p0: VP (SWS_ComXf_00019, SWS_ComXf_00020,SWS_ComXf_00014)
      p1: VP (SWS_ComXf_00021, SWS_ComXf_00012,SWS_ComXf_00014)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01130_NestedArrayOfStruct</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_InvFunctions.c</sourcefile>
      <sourceline>390</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) This test verifies that the function ComXf_Inv_'transformerId'
     deserializes a linear byte array to an array of structured data type
     holding a nested array of structured data type (and so on) of Sender/Receiver communication
     using the ComBased deserialization (SWS_ComXf_00012, SWS_ComXf_00019).
     Please see test method: Equivalence Class Partitioning: At API level.

  2) Test that COM Based Transformer returns E_OK (successful operation assumed) (SWS_ComXf_00010).

  3) Test that the COM Based Transformer handles each dataElement of the SenderReceiverInterface
     like defined for the COM module when the COM API Com_ReceiveSignal is called for a shadow
     signal (SWS_ComXf_00021).

  4) Test that if the ComSignalGroup offset within the IPdu is not equal to 0
     (e.g. placed in the middle of the IPdu), then the ComXf correctly de-serializes
     the data from the first byte (SWS_ComXf_00014).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: At API level
&lt;/para&gt;
&lt;para&gt;

  Equivalence Class Partitioning: At API level:

  This test-case is permuted as follows:
     ComXf_ConTest_01_SR_Functions .................ComXf is executed based on COM APIs Com_Send/ReceiveSignal for
                                                    retrieving (de-)serialized data.
     ComXf_ConTest_01_SR_Functions_ComComXfMock ... ComXf is executed as intended.

  Verification aspect /
  Permutation test-case         | ComXf_ConTest_01_SR_Functions                    | ComXf_ConTest_01_SR_Functions_ComComXfMock       |
  -------------------------------------------------------------------------------------------------------------------------------------
  Data Type de-serialization    | Fixed size Data Type (Array of a Composite       | Fixed size Data Type (Array of a Composite       |
                                  data type containing also Fixed size Data Types)   data type containing also Fixed size Data Types)
  basic data types used         | uint16, uint32, Fixed size Array of struct,      | uint16, uint32, Fixed size Array of struct,      |
  as elements                     Fixed size Array of sint16                         Fixed size Array of sint16
  RetVal ComXf Api              | E_OK                                             | E_OK                                             |
  de-serialized data types      | DesNestedArrayOfStructFixSize element members    | DesNestedArrayOfStructFixSize element members    |
  group signal ids passed       | Not verified                                     | Verified                                         |
  to Com-ComXf extension
  UnusedBitPattern              | 0                                                | 0                                                |
  UnAlignedOffset               | 0bits                                            | 0bits                                            |
  IPdu mapping of               | Consecutive                                      | Consecutive                                      |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - Initialized ComXf module

Test Execution: 
  01: Call deserializer function of a serialized array of structure holding nested array of
      structure (and so on)
  02: VP (SWS_ComXf_00010)
      deserializer function returns E_OK
  03: p0: VP (SWS_ComXf_00019,SWS_ComXf_00014)
      p1: VP (SWS_ComXf_00021, SWS_ComXf_00012,SWS_ComXf_00014)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01140_DesLargeArray</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_InvFunctions.c</sourcefile>
      <sourceline>564</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Test that the deserialization transformer is able to accept
  larger array representations and ignore dataElements appended at the end
  of a previously known parameter list.
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Equivalence Class Partitioning: At API level
&lt;/para&gt;
&lt;para&gt;

  Equivalence Class Partitioning: At API level:

  This test-case is permuted as follows:
     ComXf_ConTest_01_SR_Functions .................ComXf is executed based on COM APIs Com_Send/ReceiveSignal for
                                                    retrieving (de-)serialized data.
     ComXf_ConTest_01_SR_Functions_ComComXfMock ... ComXf is executed as intended.

  Verification aspect /
  Permutation test-case      | ComXf_ConTest_01_SR_Functions                 | ComXf_ConTest_01_SR_Functions_ComComXfMock    |
  ----------------------------------------------------------------------------------------------------------------------------
  Data Type de-serialization | Composite Data Type                           | Composite Data Type                           |
  basic data types used      | boolean, uint8, uint16, uint32, sint8, sint16 | boolean, uint8, uint16, uint32, sint8, sint16 |
  as struct members            sint32, float32 and uint8_n (string)            sint32, float32 and uint8_n (string)          |
  RetVal ComXf Api           | E_OK                                          | E_OK                                          |
  BufferLength               | 2*EBTEST_TEST_BUFFER_SIZE                     | 2*EBTEST_TEST_BUFFER_SIZE                     |
  de-serialized signals      | members of DesStOfAllBasic                    | members of DesStOfAllBasic                    |
  group signal ids passed    | Not verified                                  | Not verified                                  |
  to Com-ComXf extension
  UnusedBitPattern           | 0                                             | 0                                             |
  UnAlignedOffset            | 0bits                                         | 0bits                                         |
  IPdu mapping of            | Consecutive                                   | Consecutive                                   |
  GroupSignals

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - ComXf module is initialized

Test Execution: 
  01: Call deserializer function of a serialized structure holding all basic data types
      but with a larger array representation
  02: VP (SWS_ComXf_00013)
        The deserialized array holds the original values

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01150_Err_Det_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_InvFunctions.c</sourcefile>
      <sourceline>675</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1)  Test that the development error COMXF_E_UNINIT has value 0x01.
  2)  Test that the development error COMXF_E_UNINIT is reported
      for all ComXf API services(except GetVersionInfo), if the service is called
      before the related Com Extension for ComXf is not initialized.
  2a) Test that the serializer transformer returns the error code E_SER_GENERIC_ERROR
      in this case (SWS_ComXf_00007).
  2b) Test that the de-serializer transformer returns the error code E_SER_GENERIC_ERROR
      in this case (SWS_ComXf_00010).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at API level
  - Gray Box Testing
&lt;/para&gt;
&lt;para&gt;
  Negative Tests / Fault-injection: at API level:

    This test-case is permuted as follows:
     ComXf_ConTest_01_SR_Functions .................ComXf is executed based on COM APIs Com_Send/ReceiveSignal for
                                                    retrieving (de-)serialized data.
     ComXf_ConTest_01_SR_Functions_ComComXfMock ... ComXf is executed as intended.

  Test case is only executed for ComXf_ConTest_01_SR_Functions_ComComXfMock!

  ComXf API services               Det ErrorId reported
  (except GetVersionInfo)        | before Com_Init call | RetVal              |
  ------------------------------------------------------------------------------
  ComXf_Init                     | COMXF_E_UNINIT       | no RetVal           |
  ComXf_StructOfAllBasicType     | COMXF_E_UNINIT       | E_SER_GENERIC_ERROR |
  ComXf_Inv_StructOfAllBasicType | COMXF_E_UNINIT       | E_SER_GENERIC_ERROR |
  ComXf_DeInit                   | no Det reported      | no RetVal           |

  ComXf API services
  (except GetVersionInfo)        | Det ApiId reported                  | Det ModuleId reported         |
  ------------------------------------------------------------------------------------------------------
  ComXf_Init                     | COMXF_SID_INIT                      | EBTEST_COMXF_MODULE_ID (175U) |
  ComXf_StructOfAllBasicType     | EBTEST_COMXF_SID_SR_TRANSFORMER     | EBTEST_COMXF_MODULE_ID (175U) |
  ComXf_Inv_StructOfAllBasicType | EBTEST_COMXF_SID_SR_INV_TRANSFORMER | EBTEST_COMXF_MODULE_ID (175U) |
  ComXf_DeInit                   | -                                   | -                             |

  Gray Box Testing:

  Verifies that COMXF_E_UNINIT has value 0x01 via EBTEST_COMXF_E_UNINIT

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  This is the first executed test-case (no ComXf initialization before)

  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled to ensure ECUC_Xfrm_00013_Conf in general.
  - Parameter XfrmVersionInfoApi is enabled to ensure ECUC_Xfrm_00019_Conf in general.
  Runtime Pre-Conditions:
  - ComXf and Com module were not initialized yet (Com_ComXf_GetStatus() returns COM_COMXF_UNINIT)

Test Execution: 

Repeat following steps two times:
  01: Call ComXf_GetVersionInfo()
  02: VP (SWS_ComXf_00028.E_UNINIT):
      No DET is called

"black box test:"
  10: Prepare Com API Com_ComXf_GetStatus() to return a value different COM_COMXF_INIT
      (ComXf itself is un-initialized)
  11: Call ComXf_Init()
  12: VP (SWS_ComXf_00028.E_UNINIT):
      DET is called once with:
      - ErrorId = COMXF_E_UNINIT
      - ApiId = 1 (COMXF_SID_INIT)
      - ModuleId = 175
  13: Prepare Com API Com_ComXf_GetStatus() to return ComXf status COM_COMXF_INIT
  14: Call ComXf_Init()
  15: Sanity Check: No DET is called
  16: Prepare Com API Com_ComXf_GetStatus() to return a value different COM_COMXF_INIT
      (ComXf itself is initialized)
  17: Call some serializer API with valid arguments
  18: VP (SWS_ComXf_00028.E_UNINIT,SWS_ComXf_00007.2):
      ComXf API returns E_SER_GENERIC_ERROR and DET is called once with:
      - ErrorId = COMXF_E_UNINIT
      - ApiId = 3
      - ModuleId = 175
  19: Call some de-serializer API with valid arguments
  20: VP (SWS_ComXf_00028.E_UNINIT,SWS_ComXf_00010.2):
      ComXf API returns E_SER_GENERIC_ERROR and DET is called once with:
      - ErrorId = COMXF_E_UNINIT
      - ApiId = 4
      - ModuleId = 175
  21: Call ComXf_DeInit()
  22: Sanity Check: No DET is called


Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00028.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>ComXf.ECUC_Xfrm_00013_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>ComXf.ECUC_Xfrm_00019_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01152_Err_Det_Param</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_InvFunctions.c</sourcefile>
      <sourceline>884</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) Test that the development error COMXF_E_PARAM has value 0x03.
  2) Test that the development error COMXF_E_PARAM is reported
     for all ComXf API services, if the service is called
     with wrong parameters (no null pointer).
  3) Test that the serializer transformer returns the error code E_SER_GENERIC_ERROR
     in this case (SWS_ComXf_00007).
  4) Test that the de-serializer transformer returns the error code E_SER_GENERIC_ERROR
     in this case (SWS_ComXf_00010).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at API level
  - Gray Box Testing
&lt;/para&gt;
&lt;para&gt;
  Negative Tests / Fault-injection: at API level:

    This test-case is permuted as follows:
     ComXf_ConTest_01_SR_Functions .................ComXf is executed based on COM APIs Com_Send/ReceiveSignal for
                                                    retrieving (de-)serialized data.
     ComXf_ConTest_01_SR_Functions_ComComXfMock ... ComXf is executed as intended.

  Test case is only executed for ComXf_ConTest_01_SR_Functions_ComComXfMock!

  ComXf API services
  (except GetVersionInfo)        | Det report cause       | Det ErrorId reported | RetVal              |
  -------------------------------------------------------------------------------------------------------
  ComXf_Inv_StructOfAllBasicType | BufferLength too small | COMXF_E_PARAM        | E_SER_GENERIC_ERROR |
  ComXf_Inv_StructOfAllBasicType | invalid GroupSignal ID | COMXF_E_PARAM        | E_SER_GENERIC_ERROR |
  ComXf_StructOfAllBasicType     | invalid GroupSignal ID | COMXF_E_PARAM        | E_SER_GENERIC_ERROR |

  ComXf API services
  (except GetVersionInfo)        | Det ApiId                           | Det ModuleId                  |
  -------------------------------------------------------------------------------------------------------
  ComXf_StructOfAllBasicType     | EBTEST_COMXF_SID_SR_TRANSFORMER     | EBTEST_COMXF_MODULE_ID (175U) |
  ComXf_Inv_StructOfAllBasicType | EBTEST_COMXF_SID_SR_INV_TRANSFORMER | EBTEST_COMXF_MODULE_ID (175U) |

  Gray Box Testing:

  Verifies that COMXF_E_PARAM has value 0x03 via EBTEST_COMXF_E_PARAM
  COMXF_E_PARAM is only reported at de-serializer in case received BufferLength is too small
  COMXF_E_PARAM is also reported in case one of following internal sanity checks do fail:
    - Call of Com Extension API for ComXf Com_ComXf_Write() with some GroupSignal ID
      that does not match with a generated expected Signal Group ID (check done via
      call to Com_ComXf_GetTxSGId())
    - Call of Com Extension API for ComXf Com_ComXf_Read() with some GroupSignal ID
      that does not match with a generated expected Signal Group ID (check done via
      call to Com_ComXf_GetRxSGId())

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - ComXf module is initialized

Test Execution: 

  01: Call some ComXf de-serializer API with BufferLength 1 byte smaller than expected
  02: VP (SWS_ComXf_00028.E_PARAM,SWS_ComXf_00010.2):
      ComXf API returns E_SER_GENERIC_ERROR and DET is called once with:
      - ErrorId = COMXF_E_PARAM which equals 3
      - ApiId = 4 (COMXF_SID_SR_INV_TRANSFORMER)
      - ModuleId = 175

  11: Prepare Com Extension API Com_ComXf_GetRxSGId() for ComXf to return some invalid SignalGroupID
  12: Call some ComXf de-serializer API with valid arguments
  13: VP (SWS_ComXf_00028.E_PARAM,SWS_ComXf_00010.2):
      ComXf API returns E_SER_GENERIC_ERROR and DET is called once with:
      - ErrorId = COMXF_E_PARAM
      - ApiId = 4 (COMXF_SID_SR_INV_TRANSFORMER)
      - ModuleId = 175

  21: Prepare Com Extension API Com_ComXf_GetTxSGId() for ComXf to return some invalid SignalGroupID
  22: Call some ComXf serializer API with valid arguments
  23: VP (SWS_ComXf_00028.E_PARAM,SWS_ComXf_00007.2):
      ComXf API returns E_SER_GENERIC_ERROR and DET is called once with:
      - ErrorId = COMXF_E_PARAM
      - ApiId = 3 (COMXF_SID_SR_TRANSFORMER)
      - ModuleId = 175


Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00028.E_PARAM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>
    <specobject>
      <id>TS_COMXF_CON_01153_Err_Det_Pointer</id>
      <status>approved</status>
      <source>EB test case specification (asc_ComXf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_ComXf/test/ts5/Include/ComXf_Test_Config/ComXf_Config_ConTest_01_SR_Functions/source/application/ComXf_ConTest_01_SR_InvFunctions.c</sourcefile>
      <sourceline>1061</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  1) Test that the development error COMXF_E_PARAM_POINTER has value 0x04 (SWS_ComXf_00028.E_PARAM_POINTER).
  2) Test that the development error COMXF_E_PARAM_POINTER is reported
     for all ComXf API services, if the service is called
     with an invalid (null) pointer (SWS_ComXf_00028.E_PARAM_POINTER).
     Note: This does not apply for the ComXf_Init() API
  3) Test that the serializer transformer returns the error code E_SER_GENERIC_ERROR
     in this case (SWS_ComXf_00007).
  4) Test that the de-serializer transformer returns the error code E_SER_GENERIC_ERROR
     in this case (SWS_ComXf_00010).
  5) Test that the transformer does not change the output buffer when the input data
     is a NULL_PTR (SWS_Xfrm_00108).
  6) Test that the de-serializer transformer returns the error code E_NO_DATA
     and does not change the output data when the input buffer is NULL_PTR and
     the bufferLength is 0 (SWS_ComXf_00035).
&lt;/para&gt;
&lt;para&gt;
  The testing method used:
  - Negative Tests / Fault-injection: at API level
  - Gray Box Testing
&lt;/para&gt;
&lt;para&gt;
  Negative Tests / Fault-injection: at API level:

  ComXf API services
  (except GetVersionInfo)        | Det report cause                              | Det ErrorId reported  | RetVal              |
  -------------------------------------------------------------------------------------------------------------------------------
  ComXf_GetVersionInfo           | NullPtr call                                  | COMXF_E_PARAM_POINTER | no RetVal           |
  ComXf_StructOfAllBasicType     | NullPtr call with 1st argument (buffer)       | COMXF_E_PARAM_POINTER | E_SER_GENERIC_ERROR |
  ComXf_StructOfAllBasicType     | NullPtr call with 2nd argument (bufferLength) | COMXF_E_PARAM_POINTER | E_SER_GENERIC_ERROR |
  ComXf_StructOfAllBasicType     | NullPtr call with 3rd argument (dataElement)  | COMXF_E_PARAM_POINTER | E_SER_GENERIC_ERROR |
  ComXf_Inv_StructOfAllBasicType | NullPtr call with 1st argument (buffer)       | COMXF_E_PARAM_POINTER | E_SER_GENERIC_ERROR |
  ComXf_Inv_StructOfAllBasicType | NullPtr call with 3rd argument (dataElement)  | COMXF_E_PARAM_POINTER | E_SER_GENERIC_ERROR |
  ComXf_Inv_StructOfAllBasicType | NullPtr call with 1rd argument (buffer) and   | no Det Report         | E_NO_DATA           |
                                   bufferLength set to 0U

  ComXf API services
  (except GetVersionInfo)        | Det ApiId                           | Det ModuleId                  |
  -------------------------------------------------------------------------------------------------------
  ComXf_GetVersionInfo           | COMXF_SID_GETVERSIONINFO            | EBTEST_COMXF_MODULE_ID (175U) |
  ComXf_StructOfAllBasicType     | EBTEST_COMXF_SID_SR_TRANSFORMER     | EBTEST_COMXF_MODULE_ID (175U) |
  ComXf_Inv_StructOfAllBasicType | EBTEST_COMXF_SID_SR_INV_TRANSFORMER | EBTEST_COMXF_MODULE_ID (175U) |

  Gray Box Testing:

  Verifies that COMXF_E_PARAM_POINTER has value 0x04 via EBTEST_COMXF_E_PARAM_POINTER

&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Configuration Pre-conditions:
  - Parameter XfrmDevErrorDetect is enabled
  Runtime Pre-conditions:
  - ComXf module is initialized

Test Execution: 

  01: Call ComXf_GetVersionInfo() with a NullPtr
  02: VP (SWS_ComXf_00028.E_PARAM_POINTER):
      DET is called once with:
      - ErrorId = COMXF_E_PARAM_POINTER which equals 4
      - ApiId = 0 (COMXF_SID_GETVERSIONINFO)
      - ModuleId = 175

  03: Call some ComXf serializer API with 1st argument (buffer) equal to NullPtr
  04: VP (SWS_ComXf_00028.E_PARAM_POINTER,SWS_ComXf_00007.2):
      ComXf API returns E_SER_GENERIC_ERROR and DET is called once with:
      - ErrorId = COMXF_E_PARAM_POINTER
      - ApiId = 3
      - ModuleId = 175

  05: Call some ComXf serializer API with 2nd argument (bufferLength) equal to NullPtr
  06: VP (SWS_ComXf_00028.E_PARAM_POINTER,SWS_ComXf_00007.2, SWS_Xfrm_00108):
      ComXf API returns E_SER_GENERIC_ERROR and DET is called once with:
      - ErrorId = COMXF_E_PARAM_POINTER
      - ApiId = 3
      - ModuleId = 175

  07: Call some ComXf serializer API with 3rd argument (dataElement) equal to NullPtr
  08: VP (SWS_ComXf_00028.E_PARAM_POINTER,SWS_ComXf_00007.2, SWS_Xfrm_00108):
      ComXf API returns E_SER_GENERIC_ERROR and DET is called once with:
      - ErrorId = COMXF_E_PARAM_POINTER
      - ApiId = 3
      - ModuleId = 175

  09: Call some ComXf de-serializer API with 1st argument (buffer) equal to NullPtr
  10: VP (SWS_ComXf_00028.E_PARAM_POINTER,SWS_ComXf_00010.2, SWS_Xfrm_00108):
      ComXf API returns E_SER_GENERIC_ERROR and DET is called once with:
      - ErrorId = COMXF_E_PARAM_POINTER
      - ApiId = 4
      - ModuleId = 175

  11: Call some ComXf de-serializer API with 3rd argument (dataElement) equal to NullPtr
  12: VP (SWS_ComXf_00028.E_PARAM_POINTER,SWS_ComXf_00010.2):
      ComXf API returns E_SER_GENERIC_ERROR and DET is called once with:
      - ErrorId = COMXF_E_PARAM_POINTER
      - ApiId = 4
      - ModuleId = 175

  13: Call some ComXf de-serializer API with input buffer equal to NullPtr and
      bufferLength to 0.
  14: VP (SWS_ComXf_00035):
      ComXf API returns E_NO_DATA, no DET is called and the
      output buffer did not change.


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00028.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00007.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_Xfrm_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>ComXf.SWS_ComXf_00010.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
