<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_Atomics_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/build/reqm/ReqM2_Native/asc_Atomics_requirements_Atomics.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/build/reqm/ReqM2_Native/asc_Atomics_requirements_Atomics_top-level.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/build/reqm/ReqM2_Native/asc_Atomics_requirements_Atomics_top-level_customizability.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 21:35:20 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_Atomics_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/build/reqm/ReqM2_Native/asc_Atomics_requirements_Atomics.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/build/reqm/ReqM2_Native/asc_Atomics_requirements_Atomics_top-level.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/build/reqm/ReqM2_Native/asc_Atomics_requirements_Atomics_top-level_customizability.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/2018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>feavc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swpad</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swts</regex>
      <regex>pdoc</regex>       <!-- since 10/2018: introduced for updated tracing model-->
      <regex>dev</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swadvc</regex>     <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swuvc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/2020: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>
      <regex>doc</regex>

      <!-- legacy items -->
      <regex>req</regex>        <!-- deprecated 10/2017: old swrs type -->
      <regex>dsn</regex>        <!-- deprecated 10/2017: old swdd -->
      <regex>src</regex>        <!-- deprecated 10/2017: old impl type -->
      <regex>tcs</regex>        <!-- deprecated 10/2017: replaced by swintts and swuts -->
      <regex>dsn_arch</regex>   <!-- deprecated 10/2017: old swad type -->
      <regex>man</regex>
      <regex>tso</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='req') and (../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.rejected</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.count</name>
      <description>Requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.req.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='req') or (../@doctype='swrs')) and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='swdd') or (../@doctype='dsn')) and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.doctypes</name>
      <description>Requirements can be covered only by req, dsn_arch, dev, lim, dsn, src, tcs, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req')]</applyto>
          <condition>(./needscoverage/needsobj="req" or ./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swad, dev, lim, swurs, swdd, src, swuts, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.doctypes</name>
      <description>Design elements can only be covered by dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn')]</applyto>
          <condition>(./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.src.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='src')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="tsc" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes") )</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="dsn_arch" or ./fulfilledby/ffbObj/ffbType="dsn_arch" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>



    <rule>
      <name>ERR.dsn_arch.needscoverage.doctypes</name>
      <description>Architectural design objects can only be covered by dsn_arch, dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn_arch')]</applyto>
          <condition>(./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, req, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
         </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
  </rules>
    <oreqmRules>
          <rule>
            <name>WRN.tsc.needscoverage.count</name>
            <description>Violated if there are more than 10 tsc specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='tcs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='tsc'])) &gt; 10]/furtherinfo</applyto>
                    <regex>tsc.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.req.needscoverage.count</name>
            <description>Violated if there are more than 10 req specobjects covering one specobject and no appropriate information is provided in furtherinfo, refinement on req to req are excluded. Refinements of requirements Req to Req and Req to Fea are excluded from this rule since this is tracing on the same level. The justification in furtherinfo must contain the rule name.</description>
           <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(../@doctype != 'req') and (../@doctype != 'fea') and ((count(./needscoverage/needscov[needsobj='req']/coveredby/linkedfrom)) &gt; 10)]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='req'])) &gt; 10]/furtherinfo</applyto>
                    <regex>req.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
     </rule>

        <rule>
            <name>WRN.src.needscoverage.count</name>
            <description>Violated if there are more than 10 src specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='src']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn_arch.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn_arch specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn_arch']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn_arch'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn_arch.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="req">
    <specobject>
      <id>Atomics.Fence</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>2</version>
      <description>
        There shall be a function
        <function>FUNC(void, ATOMICS_CODE) Atomics_ThreadFence(void)</function>
        which imposes a total ordering on read and
        write memory accesses issued by the calling thread. This function shall
        also prohibit compiler optimiations of similar kind.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_55</srcid><srcstatus/><internalId>25</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_Fence</srcid><srcstatus/><internalId>48</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_Fence</srcid><srcstatus/><internalId>61</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_Fence</srcid><srcstatus/><internalId>82</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_Fence</srcid><srcstatus/><internalId>95</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_Fence</srcid><srcstatus/><internalId>108</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_Fence</srcid><srcstatus/><internalId>121</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_Fence</srcid><srcstatus/><internalId>134</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_Fence</srcid><srcstatus/><internalId>154</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_Fence</srcid><srcstatus/><internalId>166</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <specobject>
      <id>Atomics.Init</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>2</version>
      <description>
        There shall be a function
        <function>FUNC(void, ATOMICS_CODE) Atomics_Init(
          volatile P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object,
          VAR(Atomic_value_t, AUTOMATIC) initValue)</function>
        to initialize an atomic object <code>object</code> at runtime and a macro
        <function>ATOMICS_OBJECT_INITIALIZER(initValue)</function>
        to achieve the same at compile-time. In both cases the initial value
        is given by <code>initValue</code>.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Atomics.h_80</srcid><srcstatus/><internalId>22</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Atomics.c_62</srcid><srcstatus/><internalId>26</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_Init</srcid><srcstatus/><internalId>49</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_Init</srcid><srcstatus/><internalId>62</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_Init</srcid><srcstatus/><internalId>83</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_Init</srcid><srcstatus/><internalId>96</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_Init</srcid><srcstatus/><internalId>109</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_Init</srcid><srcstatus/><internalId>122</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_Init</srcid><srcstatus/><internalId>135</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>Atomics.Load</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be a function
        <function>FUNC(Atomic_value_t, ATOMICS_CODE) Atomics_Load(
          volatile P2CONST(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object)</function>
        which loads the current value from <code>object</code> atomically.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_93</srcid><srcstatus/><internalId>28</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_Load</srcid><srcstatus/><internalId>51</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_Load</srcid><srcstatus/><internalId>64</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_Load</srcid><srcstatus/><internalId>85</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_Load</srcid><srcstatus/><internalId>98</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_Load</srcid><srcstatus/><internalId>111</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_Load</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_Load</srcid><srcstatus/><internalId>137</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_Load</srcid><srcstatus/><internalId>156</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_Load</srcid><srcstatus/><internalId>168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

    <specobject>
      <id>Atomics.Store</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be a function
        <function>FUNC(void, ATOMICS_CODE) Atomics_Store(
          volatile P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object,
          VAR(Atomic_value_t, AUTOMATIC) newValue)</function>
        which stores <code>newValue</code> into <code>object</code> atomically.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_73</srcid><srcstatus/><internalId>27</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_Store</srcid><srcstatus/><internalId>50</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_Store</srcid><srcstatus/><internalId>63</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_Store</srcid><srcstatus/><internalId>84</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_Store</srcid><srcstatus/><internalId>97</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_Store</srcid><srcstatus/><internalId>110</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_Store</srcid><srcstatus/><internalId>123</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_Store</srcid><srcstatus/><internalId>136</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_Store</srcid><srcstatus/><internalId>155</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_Store</srcid><srcstatus/><internalId>167</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

    <specobject>
      <id>Atomics.Exchange</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>2</version>
      <description>
        There shall be a function
        <function>FUNC(Atomic_value_t, ATOMICS_CODE) Atomics_Exchange(
          volatile P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object,
          VAR(Atomic_value_t, AUTOMATIC) newValue)</function>
        which stores <code>newValue</code> into <code>object</code> and
        returns its current value atomically.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_115</srcid><srcstatus/><internalId>29</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_Exchange</srcid><srcstatus/><internalId>52</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_Exchange</srcid><srcstatus/><internalId>65</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_Exchange</srcid><srcstatus/><internalId>86</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_Exchange</srcid><srcstatus/><internalId>99</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_Exchange</srcid><srcstatus/><internalId>112</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_Exchange</srcid><srcstatus/><internalId>125</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_Exchange</srcid><srcstatus/><internalId>138</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_Exchange</srcid><srcstatus/><internalId>157</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_Exchange</srcid><srcstatus/><internalId>169</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>Atomics.CompareExchange</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>2</version>
      <description>
        There shall be a function
        <function>FUNC(boolean, ATOMICS_CODE) Atomics_CompareExchange(
          volatile P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object,
          P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) expected,
          VAR(Atomic_value_t, AUTOMATIC) newValue)</function>
        which stores <code>newValue</code> in <code>object</code>,
        but only if <code>object</code> is equal to <code>expected</code>.
        The outcome of the comparison shall be returned, and <code>expected</code>
        shall be updated with the value <code>object</code> had before the
        exchange.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_139</srcid><srcstatus/><internalId>30</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_CompareExchange</srcid><srcstatus/><internalId>53</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_CompareExchange</srcid><srcstatus/><internalId>66</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_CompareExchange</srcid><srcstatus/><internalId>87</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_CompareExchange</srcid><srcstatus/><internalId>100</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_CompareExchange</srcid><srcstatus/><internalId>113</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_CompareExchange</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_CompareExchange</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_CompareExchange</srcid><srcstatus/><internalId>158</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_CompareExchange</srcid><srcstatus/><internalId>170</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

    <specobject>
      <id>Atomics.ArithmeticOps.Add</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be a function
        <function>FUNC(Atomic_value_t, ATOMICS_CODE) Atomics_FetchAdd(
          volatile P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object,
          VAR(Atomic_value_t, AUTOMATIC) operand)</function>
        which adds <code>operand</code> to <code>object</code> atomically
        and returns the value before the addition.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_172</srcid><srcstatus/><internalId>31</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_Add</srcid><srcstatus/><internalId>54</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_FetchAdd</srcid><srcstatus/><internalId>67</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_Add</srcid><srcstatus/><internalId>88</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_Add</srcid><srcstatus/><internalId>101</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_Add</srcid><srcstatus/><internalId>114</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_Add</srcid><srcstatus/><internalId>127</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_Add</srcid><srcstatus/><internalId>140</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_FetchAdd</srcid><srcstatus/><internalId>159</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_FetchAdd</srcid><srcstatus/><internalId>171</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

    <specobject>
      <id>Atomics.ArithmeticOps.Sub</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be a function
        <function>FUNC(Atomic_value_t, ATOMICS_CODE) Atomics_FetchSub(
          volatile P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object,
          VAR(Atomic_value_t, AUTOMATIC) operand)</function>
        which subtracts <code>operand</code> from <code>object</code> atomically
        and returns the value before the subtraction.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_196</srcid><srcstatus/><internalId>32</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_Sub</srcid><srcstatus/><internalId>55</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_FetchSub</srcid><srcstatus/><internalId>68</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_Sub</srcid><srcstatus/><internalId>89</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_Sub</srcid><srcstatus/><internalId>102</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_Sub</srcid><srcstatus/><internalId>115</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_Sub</srcid><srcstatus/><internalId>128</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_Sub</srcid><srcstatus/><internalId>141</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_FetchSub</srcid><srcstatus/><internalId>160</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_FetchSub</srcid><srcstatus/><internalId>172</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>

    <specobject>
      <id>Atomics.BoolOps.Or</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be a function
        <function>FUNC(Atomic_value_t, ATOMICS_CODE) Atomics_FetchOr(
          volatile P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object,
          VAR(Atomic_value_t, AUTOMATIC) operand)</function>
        which stores the boolean OR of <code>operand</code> and <code>object</code>
        into <code>object</code> atomically and returns its value before
        the operation.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_220</srcid><srcstatus/><internalId>33</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_Or</srcid><srcstatus/><internalId>56</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_FetchOr</srcid><srcstatus/><internalId>69</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_Or</srcid><srcstatus/><internalId>90</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_Or</srcid><srcstatus/><internalId>103</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_Or</srcid><srcstatus/><internalId>116</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_Or</srcid><srcstatus/><internalId>129</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_Or</srcid><srcstatus/><internalId>142</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_FetchOr</srcid><srcstatus/><internalId>161</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_FetchOr</srcid><srcstatus/><internalId>173</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>

    <specobject>
      <id>Atomics.BoolOps.And</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be a function
        <function>FUNC(Atomic_value_t, ATOMICS_CODE) Atomics_FetchAnd(
          volatile P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object,
          VAR(Atomic_value_t, AUTOMATIC) operand)</function>
        which stores the boolean AND of <code>operand</code> and <code>object</code>
        into <code>object</code> atomically and returns its value before
        the operation.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_244</srcid><srcstatus/><internalId>34</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_And</srcid><srcstatus/><internalId>57</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_FetchAnd</srcid><srcstatus/><internalId>70</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_And</srcid><srcstatus/><internalId>91</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_And</srcid><srcstatus/><internalId>104</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_And</srcid><srcstatus/><internalId>117</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_And</srcid><srcstatus/><internalId>130</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_And</srcid><srcstatus/><internalId>143</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_FetchAnd</srcid><srcstatus/><internalId>162</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_FetchAnd</srcid><srcstatus/><internalId>174</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>

    <specobject>
      <id>Atomics.BoolOps.Xor</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be a function
        <function>FUNC(Atomic_value_t, ATOMICS_CODE) Atomics_FetchXor(
          volatile P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object,
          VAR(Atomic_value_t, AUTOMATIC) operand)</function>
        which stores the boolean XOR of <code>operand</code> and <code>object</code>
        into <code>object</code> atomically and returns its value before
        the operation.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_268</srcid><srcstatus/><internalId>35</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_Xor</srcid><srcstatus/><internalId>58</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_FetchXor</srcid><srcstatus/><internalId>71</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_Xor</srcid><srcstatus/><internalId>92</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_Xor</srcid><srcstatus/><internalId>105</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_Xor</srcid><srcstatus/><internalId>118</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_Xor</srcid><srcstatus/><internalId>131</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_Xor</srcid><srcstatus/><internalId>144</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_FetchXor</srcid><srcstatus/><internalId>163</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_FetchXor</srcid><srcstatus/><internalId>175</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>

    <specobject>
      <id>Atomics.FlagOps.TestAndSet</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be a function
        <function>FUNC(boolean, ATOMICS_CODE) Atomics_TestAndSetFlag(
          volatile P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object,
          VAR(Atomic_value_t, AUTOMATIC) flagSelectionMask)</function>
        which atomically sets the bit selected by <code>flagSelectionMask</code>
        in <code>object</code> and returns its state before the operation.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_292</srcid><srcstatus/><internalId>36</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_TestAndSetFlag</srcid><srcstatus/><internalId>59</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_TestAndSetFlag</srcid><srcstatus/><internalId>72</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_TestAndSetFlag</srcid><srcstatus/><internalId>93</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_TestAndSetFlag</srcid><srcstatus/><internalId>106</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_TestAndSetFlag</srcid><srcstatus/><internalId>119</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_TestAndSetFlag</srcid><srcstatus/><internalId>132</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_TestAndSetFlag</srcid><srcstatus/><internalId>145</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_TestAndSetFlag</srcid><srcstatus/><internalId>164</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_TestAndSetFlag</srcid><srcstatus/><internalId>176</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>

    <specobject>
      <id>Atomics.FlagOps.Clear</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be a function
        <function>FUNC(void, ATOMICS_CODE) Atomics_ClearFlag(
          volatile P2VAR(Atomic_t, AUTOMATIC, ATOMICS_APPL_DATA) object,
          VAR(Atomic_value_t, AUTOMATIC) flagSelectionMask)</function>
        which atomically clears the bit selected by <code>flagSelectionMask</code>
        in <code>object</code>.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics.c_317</srcid><srcstatus/><internalId>37</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAPI_ClearFlag</srcid><srcstatus/><internalId>60</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirection_ClearFlag</srcid><srcstatus/><internalId>73</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPI_ClearFlag</srcid><srcstatus/><internalId>94</internalId></linkedfrom><linkedfrom><srcid>AtomicsGenericAPICustomTypes_ClearFlag</srcid><srcstatus/><internalId>107</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPI_ClearFlag</srcid><srcstatus/><internalId>120</internalId></linkedfrom><linkedfrom><srcid>AtomicsMultiCoreAPISpinlockFailure_ClearFlag</srcid><srcstatus/><internalId>133</internalId></linkedfrom><linkedfrom><srcid>AtomicsSingleCoreAPI_ClearFlag</srcid><srcstatus/><internalId>146</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValT_ClearFlag</srcid><srcstatus/><internalId>165</internalId></linkedfrom><linkedfrom><srcid>AtomicsWoOsAtmValTWoFetchFuncs_ClearFlag</srcid><srcstatus/><internalId>177</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Atomicity</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Atomics.Consistency</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>

    <specobject>
      <id>Atomics.TS.BitSet</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be functions
        <function>FUNC(void, ATOMICS_CODE) TS_AtomicSetBit_X(
          volatile P2VAR(uintX, AUTOMATIC, ATOMICS_APPL_DATA) addr,
          VAR(uint32, AUTOMATIC) bitIdx)</function>
        which atomically sets the bit at zero-based index <code>bitIdx</code>
        in <code>object</code>. The letter <code>X</code> is either 8, 16, 32,
        or 64. <code>object</code> must be naturally aligned.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics_TSPlatforms.c_90</srcid><srcstatus/><internalId>38</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Atomics_TSPlatforms.c_110</srcid><srcstatus/><internalId>40</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Atomics_TSPlatforms.c_130</srcid><srcstatus/><internalId>42</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Atomics_TSPlatforms.c_151</srcid><srcstatus/><internalId>44</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAutoCoreOSRedirectionTS_SetBit8</srcid><srcstatus/><internalId>76</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirectionTS_SetBit16</srcid><srcstatus/><internalId>78</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirectionTS_SetBit32</srcid><srcstatus/><internalId>80</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSBitSetClear_8</srcid><srcstatus/><internalId>147</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSBitSetClear_16</srcid><srcstatus/><internalId>148</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSBitSetClear_32</srcid><srcstatus/><internalId>149</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSBitSetClear_64</srcid><srcstatus/><internalId>150</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>

    <specobject>
      <id>Atomics.TS.BitClear</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be functions
        <function>FUNC(void, ATOMICS_CODE) TS_AtomicClearBit_X(
          volatile P2VAR(uintX, AUTOMATIC, ATOMICS_APPL_DATA) addr,
          VAR(uint32, AUTOMATIC) bitIdx)</function>
        which atomically clears the bit at zero-based index <code>bitIdx</code>
        in <code>object</code>. The letter <code>X</code> is either 8, 16, 32,
        or 64. <code>object</code> must be naturally aligned.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics_TSPlatforms.c_100</srcid><srcstatus/><internalId>39</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Atomics_TSPlatforms.c_120</srcid><srcstatus/><internalId>41</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Atomics_TSPlatforms.c_140</srcid><srcstatus/><internalId>43</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Atomics_TSPlatforms.c_161</srcid><srcstatus/><internalId>45</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAutoCoreOSRedirectionTS_ClearBit8</srcid><srcstatus/><internalId>77</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirectionTS_ClearBit16</srcid><srcstatus/><internalId>79</internalId></linkedfrom><linkedfrom><srcid>AtomicsAutoCoreOSRedirectionTS_ClearBit32</srcid><srcstatus/><internalId>81</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSBitSetClear_8</srcid><srcstatus/><internalId>147</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSBitSetClear_16</srcid><srcstatus/><internalId>148</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSBitSetClear_32</srcid><srcstatus/><internalId>149</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSBitSetClear_64</srcid><srcstatus/><internalId>150</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>Atomics.InterruptTransparency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>

    <specobject>
      <id>Atomics.TS.InterruptControl.Disable</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be a function
        <function>FUNC(TS_IntStatusType, ATOMICS_CODE) TS_IntDisable(void)</function>
        which disables all interrupts and returns a token to reflect their
        previous activation state.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics_TSPlatforms.c_172</srcid><srcstatus/><internalId>46</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAutoCoreOSRedirectionTS_IntDisable</srcid><srcstatus/><internalId>74</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSInterruptControl</srcid><srcstatus/><internalId>151</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSInterruptControl1</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSInterruptControl2</srcid><srcstatus/><internalId>153</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>

    <specobject>
      <id>Atomics.TS.InterruptControl.Restore</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        There shall be a function
        <function>FUNC(void, ATOMICS_CODE) TS_IntRestore(
          VAR(TS_IntStatusType, AUTOMATIC) intStatus)</function>
        which restores the activation state <code>intStatus</code> of all interrupts.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Atomics_TSPlatforms.c_180</srcid><srcstatus/><internalId>47</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AtomicsAutoCoreOSRedirectionTS_IntRestore</srcid><srcstatus/><internalId>75</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSInterruptControl</srcid><srcstatus/><internalId>151</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSInterruptControl1</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>AtomicsTSInterruptControl2</srcid><srcstatus/><internalId>153</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>
  </specobjects>
    <specobjects doctype="req">
		<specobject>
			<id>Atomics.Atomicity</id>
			<status>approved</status>
			<source>Elektrobit Automotive GmbH</source>
			<version>2</version>
			<description>
				The atomic functions shall guarantee atomic read-modify-write operations.
			</description>
			<needscoverage>
				<needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Atomics.Fence</srcid><srcstatus/><internalId>0</internalId></linkedfrom><linkedfrom><srcid>Atomics.Init</srcid><srcstatus/><internalId>1</internalId></linkedfrom><linkedfrom><srcid>Atomics.Load</srcid><srcstatus/><internalId>2</internalId></linkedfrom><linkedfrom><srcid>Atomics.Store</srcid><srcstatus/><internalId>3</internalId></linkedfrom><linkedfrom><srcid>Atomics.Exchange</srcid><srcstatus/><internalId>4</internalId></linkedfrom><linkedfrom><srcid>Atomics.CompareExchange</srcid><srcstatus/><internalId>5</internalId></linkedfrom><linkedfrom><srcid>Atomics.ArithmeticOps.Add</srcid><srcstatus/><internalId>6</internalId></linkedfrom><linkedfrom><srcid>Atomics.ArithmeticOps.Sub</srcid><srcstatus/><internalId>7</internalId></linkedfrom><linkedfrom><srcid>Atomics.BoolOps.Or</srcid><srcstatus/><internalId>8</internalId></linkedfrom><linkedfrom><srcid>Atomics.BoolOps.And</srcid><srcstatus/><internalId>9</internalId></linkedfrom><linkedfrom><srcid>Atomics.BoolOps.Xor</srcid><srcstatus/><internalId>10</internalId></linkedfrom><linkedfrom><srcid>Atomics.FlagOps.TestAndSet</srcid><srcstatus/><internalId>11</internalId></linkedfrom><linkedfrom><srcid>Atomics.FlagOps.Clear</srcid><srcstatus/><internalId>12</internalId></linkedfrom></coveredby></needscov>
			<containerCovstatus>covered</containerCovstatus></needscoverage>
		<violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>
		<specobject>
			<id>Atomics.Consistency</id>
			<status>approved</status>
			<source>Elektrobit Automotive GmbH</source>
			<version>2</version>
			<description>
				The atomic functions shall guarantee sequentially consistent memory accesses.
			</description>
			<needscoverage>
				<needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Atomics.Fence</srcid><srcstatus/><internalId>0</internalId></linkedfrom><linkedfrom><srcid>Atomics.Init</srcid><srcstatus/><internalId>1</internalId></linkedfrom><linkedfrom><srcid>Atomics.Load</srcid><srcstatus/><internalId>2</internalId></linkedfrom><linkedfrom><srcid>Atomics.Store</srcid><srcstatus/><internalId>3</internalId></linkedfrom><linkedfrom><srcid>Atomics.Exchange</srcid><srcstatus/><internalId>4</internalId></linkedfrom><linkedfrom><srcid>Atomics.CompareExchange</srcid><srcstatus/><internalId>5</internalId></linkedfrom><linkedfrom><srcid>Atomics.ArithmeticOps.Add</srcid><srcstatus/><internalId>6</internalId></linkedfrom><linkedfrom><srcid>Atomics.ArithmeticOps.Sub</srcid><srcstatus/><internalId>7</internalId></linkedfrom><linkedfrom><srcid>Atomics.BoolOps.Or</srcid><srcstatus/><internalId>8</internalId></linkedfrom><linkedfrom><srcid>Atomics.BoolOps.And</srcid><srcstatus/><internalId>9</internalId></linkedfrom><linkedfrom><srcid>Atomics.BoolOps.Xor</srcid><srcstatus/><internalId>10</internalId></linkedfrom><linkedfrom><srcid>Atomics.FlagOps.TestAndSet</srcid><srcstatus/><internalId>11</internalId></linkedfrom><linkedfrom><srcid>Atomics.FlagOps.Clear</srcid><srcstatus/><internalId>12</internalId></linkedfrom></coveredby></needscov>
			<containerCovstatus>covered</containerCovstatus></needscoverage>
		<violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
		<specobject>
			<id>Atomics.TS</id>
			<status>approved</status>
			<source>Elektrobit Automotive GmbH</source>
			<version>2</version>
			<description>
				There shall be functions for the backward compatibility with asc_Platforms and asc_Base.
			</description>
			<comment>
				The modules asc_Platforms and asc_Base once offered functions to atomically set and clear
				bits in 8-, 16-, and 32-bit objects and to disable/enable interrupts.
			</comment>
			<needscoverage>
				<needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Atomics.TS.BitSet</srcid><srcstatus/><internalId>13</internalId></linkedfrom><linkedfrom><srcid>Atomics.TS.BitClear</srcid><srcstatus/><internalId>14</internalId></linkedfrom><linkedfrom><srcid>Atomics.TS.InterruptControl.Disable</srcid><srcstatus/><internalId>15</internalId></linkedfrom><linkedfrom><srcid>Atomics.TS.InterruptControl.Restore</srcid><srcstatus/><internalId>16</internalId></linkedfrom></coveredby></needscov>
			<containerCovstatus>covered</containerCovstatus></needscoverage>
		<violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
		<specobject>
			<id>Atomics.InterruptTransparency</id>
			<status>approved</status>
			<source>Elektrobit Automotive GmbH</source>
			<version>1</version>
			<description>
				The atomic functions shall not alter the current activation state of
				interrupts. This means, if interrupts are disabled (enabled) in
				hardware and an atomic function is called, they shall stay disabled
				(enabled) after the atomic function returns.
			</description>
			<needscoverage>
				<needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Atomics.Fence</srcid><srcstatus/><internalId>0</internalId></linkedfrom><linkedfrom><srcid>Atomics.Init</srcid><srcstatus/><internalId>1</internalId></linkedfrom><linkedfrom><srcid>Atomics.Load</srcid><srcstatus/><internalId>2</internalId></linkedfrom><linkedfrom><srcid>Atomics.Store</srcid><srcstatus/><internalId>3</internalId></linkedfrom><linkedfrom><srcid>Atomics.Exchange</srcid><srcstatus/><internalId>4</internalId></linkedfrom><linkedfrom><srcid>Atomics.CompareExchange</srcid><srcstatus/><internalId>5</internalId></linkedfrom><linkedfrom><srcid>Atomics.ArithmeticOps.Add</srcid><srcstatus/><internalId>6</internalId></linkedfrom><linkedfrom><srcid>Atomics.ArithmeticOps.Sub</srcid><srcstatus/><internalId>7</internalId></linkedfrom><linkedfrom><srcid>Atomics.BoolOps.Or</srcid><srcstatus/><internalId>8</internalId></linkedfrom><linkedfrom><srcid>Atomics.BoolOps.And</srcid><srcstatus/><internalId>9</internalId></linkedfrom><linkedfrom><srcid>Atomics.BoolOps.Xor</srcid><srcstatus/><internalId>10</internalId></linkedfrom><linkedfrom><srcid>Atomics.FlagOps.TestAndSet</srcid><srcstatus/><internalId>11</internalId></linkedfrom><linkedfrom><srcid>Atomics.FlagOps.Clear</srcid><srcstatus/><internalId>12</internalId></linkedfrom><linkedfrom><srcid>Atomics.TS.BitSet</srcid><srcstatus/><internalId>13</internalId></linkedfrom><linkedfrom><srcid>Atomics.TS.BitClear</srcid><srcstatus/><internalId>14</internalId></linkedfrom></coveredby></needscov>
			<containerCovstatus>covered</containerCovstatus></needscoverage>
		<violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
	</specobjects>
    <specobjects doctype="req">
        <specobject>
            <id>Atomics.Customizability</id>
            <status>approved</status>
            <source>Elektrobit Automotive GmbH</source>
            <version>1</version>
            <description>
                An end user shall be able to customize the generic implementation of the
                atomic functions.
            </description>
            <needscoverage>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Atomics_user_functions_customizations.h_16</srcid><srcstatus/><internalId>23</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Atomics_user_types_customizations.h_16</srcid><srcstatus/><internalId>24</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>
    </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/include/Atomics.h_80</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/include/Atomics.h</sourcefile>
      <sourceline>80</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Init</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/include/Atomics_user_functions_customizations.h_16</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/include/Atomics_user_functions_customizations.h</sourcefile>
      <sourceline>16</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Customizability</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/include/Atomics_user_types_customizations.h_16</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/include/Atomics_user_types_customizations.h</sourcefile>
      <sourceline>16</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Customizability</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/Atomics.c_55</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>55</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Fence</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_62</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>62</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Init</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_73</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Store</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_93</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>93</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Load</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_115</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>115</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Exchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_139</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>139</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.CompareExchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_172</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>172</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Add</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_196</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>196</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Sub</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_220</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>220</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Or</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_244</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>244</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.And</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_268</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>268</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Xor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_292</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>292</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.TestAndSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics.c_317</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics.c</sourcefile>
      <sourceline>317</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.Clear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/Atomics_TSPlatforms.c_90</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics_TSPlatforms.c</sourcefile>
      <sourceline>90</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics_TSPlatforms.c_100</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics_TSPlatforms.c</sourcefile>
      <sourceline>100</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitClear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics_TSPlatforms.c_110</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics_TSPlatforms.c</sourcefile>
      <sourceline>110</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics_TSPlatforms.c_120</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics_TSPlatforms.c</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitClear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics_TSPlatforms.c_130</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics_TSPlatforms.c</sourcefile>
      <sourceline>130</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics_TSPlatforms.c_140</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics_TSPlatforms.c</sourcefile>
      <sourceline>140</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitClear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics_TSPlatforms.c_151</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics_TSPlatforms.c</sourcefile>
      <sourceline>151</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics_TSPlatforms.c_161</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics_TSPlatforms.c</sourcefile>
      <sourceline>161</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitClear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics_TSPlatforms.c_172</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics_TSPlatforms.c</sourcefile>
      <sourceline>172</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.InterruptControl.Disable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Atomics_TSPlatforms.c_180</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/src/Autosar/src/Atomics_TSPlatforms.c</sourcefile>
      <sourceline>180</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.InterruptControl.Restore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>AtomicsAPI_Fence</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ThreadFence().
  
Test Object: 
    Atomics_ThreadFence()
  
Test Precondition: 
  
Test Execution: 
    Call the Atomics_ThreadFence().
  
Test Input: 
  
Test Output: 
    There is no measurable output.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Fence</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_Init</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>66</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Init() and ATOMICS_OBJECT_INITIALIZER().
  
Test Object: 
    Atomics_Init()
  
Test Precondition: 
  
Test Execution: 
    Use ATOMICS_OBJECT_INITIALIZER and Atomics_Init() to initialize two
    different atomic objects with the same initial value. Check afterwards,
    that both objects contain the expected initial value.
  
Test Input: 
  
Test Output: 
    The initialized atomic objects shall be identical and shall contain the
    given initial value.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Init</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_Store</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Store().
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Store() to store an abitrary value in an atomic object.
  
Test Input: 
    A value and an atomic object, into which that value shall be stored.
  
Test Output: 
    The value is stored into the atomic object.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Store</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_Load</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Load().
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Load() to load the value of an atomic object.
  
Test Input: 
    An atomic object, whose value shall be loaded.
  
Test Output: 
    The value stored in the given atomic object is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Load</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_Exchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>221</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Exchange().
  
Test Object: 
    Atomics_Exchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Exchange() to exchange an arbitrary value with the current one
    of an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be exchanged.
  
Test Output: 
    The value stored in the given atomic object is returned and the given
    value is stored in that atomic object.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Exchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_CompareExchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_CompareExchange().
  
Test Object: 
    Atomics_CompareExchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_CompareExchange() two times to exchange an arbitrary value
    with the current one of an atomic object. The first time, the expected value
    shall be different from the current value of the atomic object. The second
    time, it shall be the same.
  
Test Input: 
    An atomic object and a value, which shall be exchanged, but only if the
    atomic object is equal to another atomic object.
  
Test Output: 
    The value stored in the given atomic object is returned and the given
    value is stored in that atomic object. The exchange happens only if
    the comparison succeeds. If it fails, the current value of the atomic
    object is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.CompareExchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_Add</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>342</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAdd().
  
Test Object: 
    Atomics_FetchAdd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAdd() to add an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be added.
  
Test Output: 
    The value is added to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Add</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_Sub</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>393</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchSub().
  
Test Object: 
    Atomics_FetchSub()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchSub() to subtract an arbitrary value from an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be subtracted.
  
Test Output: 
    The value is subtracted from the atomic object and its previous value is
    returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Sub</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_Or</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>445</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchOr().
  
Test Object: 
    Atomics_FetchOr()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchOr() to OR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ORed.
  
Test Output: 
    The value is ORed to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Or</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_And</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>496</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAnd().
  
Test Object: 
    Atomics_FetchAnd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAnd() to AND an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ANDed.
  
Test Output: 
    The value is ANDed to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.And</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_Xor</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>547</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchXor().
  
Test Object: 
    Atomics_FetchXor()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchXor() to XOR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be XORed.
  
Test Output: 
    The value is XORed to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Xor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_TestAndSetFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>598</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_TestAndSetFlag().
  
Test Object: 
    Atomics_TestAndSetFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_TestAndSetFlag() two times to set an arbitrary bit in an
    atomic object. The first time, the selected bit in the atomic object shall
    be cleared; the second time, it shall be set already.
  
Test Input: 
    An atomic object and a flag-selection mask.
  
Test Output: 
    The selected flag is set in the atomic object and the flag's previous state
    is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.TestAndSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>
    <specobject>
      <id>AtomicsAPI_ClearFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAPI/source/application/allTests.c</sourcefile>
      <sourceline>658</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ClearFlag().
  
Test Object: 
    Atomics_ClearFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ClearFlag() two times to clear an arbitrary bit in an atomic
    object. The first time, the selected bit shall be set. The second time, the
    selected bit shall be cleared already.
  
Test Input: 
    An atomic object and a flag-selection mask.
  
Test Output: 
    The selected flag is cleared in the atomic object. When the selected flag
    is already cleared, the value of the atomic object does not change.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.Clear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_Fence</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>12</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_ThreadFence
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ThreadFence() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicThreadFence() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Fence</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_Init</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>67</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_Init
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Init() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicInit() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Init</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_Store</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>124</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_Store
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Store() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicStore() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Store</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_Load</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>181</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_Load
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Load() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicLoad() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Load</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_Exchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>240</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_Exchange
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Exchange() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicExchange() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Exchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_CompareExchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>299</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_CompareExchange
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_CompareExchange() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicCompareExchange() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.CompareExchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_FetchAdd</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>359</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_FetchAdd
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAdd() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchAdd() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Add</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_FetchSub</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>418</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_FetchSub
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchSub() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchSub() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Sub</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_FetchOr</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>477</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_FetchOr
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchOr() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchOr() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Or</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_FetchAnd</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>536</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_FetchAnd
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAnd() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchAnd() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.And</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_FetchXor</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>595</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_FetchXor
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchXor() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchXor() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Xor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_TestAndSetFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>654</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_TestAndSetFlag
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_TestAndSetFlag() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicTestAndSetFlag() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.TestAndSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirection_ClearFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>713</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation
    provided by EB tresos AutoCore OS is used instead of the generic
    implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: Atomics_ClearFlag
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ClearFlag() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicClearFlag() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.Clear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirectionTS_IntDisable</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>770</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation of
    TS_Atomic*() functions provided by EB tresos AutoCore OS is used instead
    of the generic implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: TS_IntDisable
  
Test Precondition: 
  
Test Execution: 
    Call the API function TS_IntDisable() and check that the corresponding OS
    stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_UserAtomicTSIntDisable() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.InterruptControl.Disable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirectionTS_IntRestore</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>828</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation of
    TS_Atomic*() functions provided by EB tresos AutoCore OS is used instead
    of the generic implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: TS_IntRestore
  
Test Precondition: 
  
Test Execution: 
    Call the API function TS_IntRestore() and check that the corresponding OS
    stub function is called with the correct parameters.
  
Test Input: 
  
Test Output: 
    Only the function OS_UserAtomicTSIntEnable() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.InterruptControl.Restore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirectionTS_SetBit8</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>883</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation of
    TS_Atomic*() functions provided by EB tresos AutoCore OS is used instead
    of the generic implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: TS_AtomicSetBit_8
  
Test Precondition: 
  
Test Execution: 
    Call TS_AtomicSetBit_8() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicTSSetBit_8() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirectionTS_ClearBit8</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>942</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation of
    TS_Atomic*() functions provided by EB tresos AutoCore OS is used instead
    of the generic implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: TS_AtomicClearBit_8
  
Test Precondition: 
  
Test Execution: 
    Call TS_AtomicClearBit_8() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicTSClearBit_8() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitClear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirectionTS_SetBit16</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>1001</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation of
    TS_Atomic*() functions provided by EB tresos AutoCore OS is used instead
    of the generic implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: TS_AtomicSetBit_16
  
Test Precondition: 
  
Test Execution: 
    Call TS_AtomicSetBit_16() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicTSSetBit_16() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirectionTS_ClearBit16</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>1060</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation of
    TS_Atomic*() functions provided by EB tresos AutoCore OS is used instead
    of the generic implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: TS_AtomicClearBit_16
  
Test Precondition: 
  
Test Execution: 
    Call TS_AtomicClearBit_16() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicTSClearBit_16() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitClear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirectionTS_SetBit32</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>1119</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation of
    TS_Atomic*() functions provided by EB tresos AutoCore OS is used instead
    of the generic implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: TS_AtomicSetBit_32
  
Test Precondition: 
  
Test Execution: 
    Call TS_AtomicSetBit_32() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicTSSetBit_32() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>
    <specobject>
      <id>AtomicsAutoCoreOSRedirectionTS_ClearBit32</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsAutoCoreOSRedirection/source/application/allTests.c</sourcefile>
      <sourceline>1178</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the redirection controlled by the macro ATOMICS_USE_GENERIC_IMPL.
    If this macro is not defined or zero, the specialized implementation of
    TS_Atomic*() functions provided by EB tresos AutoCore OS is used instead
    of the generic implementation provided by the Atomics module.
    Note, the case ATOMICS_USE_GENERIC_IMPL=1 is tested in all other test
    sequences.
  
Test Object: 
    The API redirection controlled by ATOMICS_USE_GENERIC_IMPL: TS_AtomicClearBit_32
  
Test Precondition: 
  
Test Execution: 
    Call TS_AtomicClearBit_32() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicTSClearBit_32() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitClear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>AtomicsGenericAPI_Fence</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ThreadFence().
  
Test Object: 
    Atomics_ThreadFence()
  
Test Precondition: 
  
Test Execution: 
    Call the Atomics_ThreadFence().
  
Test Input: 
  
Test Output: 
    There is no measurable output.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Fence</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_Init</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>66</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Init() and ATOMICS_OBJECT_INITIALIZER().
  
Test Object: 
    Atomics_Init()
  
Test Precondition: 
  
Test Execution: 
    Use ATOMICS_OBJECT_INITIALIZER and Atomics_Init() to initialize two
    different atomic objects with the same initial value. Check afterwards,
    that both objects contain the expected initial value.
  
Test Input: 
  
Test Output: 
    The initialized atomic objects shall be identical and shall contain the
    given initial value.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Init</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_Store</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Store().
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Store() to store an abitrary value in an atomic object.
  
Test Input: 
    A value and an atomic object, into which that value shall be stored.
  
Test Output: 
    The value is stored into the atomic object.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Store</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_Load</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Load().
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Load() to load the value of an atomic object.
  
Test Input: 
    An atomic object, whose value shall be loaded.
  
Test Output: 
    The value stored in the given atomic object is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Load</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_Exchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>221</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Exchange().
  
Test Object: 
    Atomics_Exchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Exchange() to exchange an arbitrary value with the current one
    of an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be exchanged.
  
Test Output: 
    The value stored in the given atomic object is returned and the given
    value is stored in that atomic object.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Exchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_CompareExchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_CompareExchange().
  
Test Object: 
    Atomics_CompareExchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_CompareExchange() two times to exchange an arbitrary value
    with the current one of an atomic object. The first time, the expected value
    shall be different from the current value of the atomic object. The second
    time, it shall be the same.
  
Test Input: 
    An atomic object and a value, which shall be exchanged, but only if the
    atomic object is equal to another atomic object.
  
Test Output: 
    The value stored in the given atomic object is returned and the given
    value is stored in that atomic object. The exchange happens only if
    the comparison succeeds. If it fails, the current value of the atomic
    object is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.CompareExchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_Add</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>342</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAdd().
  
Test Object: 
    Atomics_FetchAdd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAdd() to add an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be added.
  
Test Output: 
    The value is added to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Add</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_Sub</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>393</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchSub().
  
Test Object: 
    Atomics_FetchSub()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchSub() to subtract an arbitrary value from an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be subtracted.
  
Test Output: 
    The value is subtracted from the atomic object and its previous value is
    returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Sub</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_Or</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>445</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchOr().
  
Test Object: 
    Atomics_FetchOr()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchOr() to OR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ORed.
  
Test Output: 
    The value is ORed to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Or</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_And</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>496</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAnd().
  
Test Object: 
    Atomics_FetchAnd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAnd() to AND an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ANDed.
  
Test Output: 
    The value is ANDed to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.And</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_Xor</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>547</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchXor().
  
Test Object: 
    Atomics_FetchXor()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchXor() to XOR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be XORed.
  
Test Output: 
    The value is XORed to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Xor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_TestAndSetFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>598</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_TestAndSetFlag().
  
Test Object: 
    Atomics_TestAndSetFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_TestAndSetFlag() two times to set an arbitrary bit in an
    atomic object. The first time, the selected bit in the atomic object shall
    be cleared; the second time, it shall be set already.
  
Test Input: 
    An atomic object and a flag-selection mask.
  
Test Output: 
    The selected flag is set in the atomic object and the flag's previous state
    is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.TestAndSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPI_ClearFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPI/source/application/allTests.c</sourcefile>
      <sourceline>658</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ClearFlag().
  
Test Object: 
    Atomics_ClearFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ClearFlag() two times to clear an arbitrary bit in an atomic
    object. The first time, the selected bit shall be set. The second time, the
    selected bit shall be cleared already.
  
Test Input: 
    An atomic object and a flag-selection mask.
  
Test Output: 
    The selected flag is cleared in the atomic object. When the selected flag
    is already cleared, the value of the atomic object does not change.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.Clear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>AtomicsGenericAPICustomTypes_Fence</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ThreadFence() with custom atomic types.
  
Test Object: 
    Atomics_ThreadFence()
  
Test Precondition: 
  
Test Execution: 
    Call the Atomics_ThreadFence().
  
Test Input: 
    Customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T. To work with these custom types, the macros
    ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    There is no measurable output.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Fence</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_Init</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>70</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Init() and ATOMICS_OBJECT_INITIALIZER()
    with custom atomic types.
  
Test Object: 
    Atomics_Init()
  
Test Precondition: 
  
Test Execution: 
    Use ATOMICS_OBJECT_INITIALIZER and Atomics_Init() to initialize two
    different atomic objects with the same initial value. Check afterwards,
    that both objects contain the expected initial value.
  
Test Input: 
    Customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T. To work with these custom types, the macros
    ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The initialized atomic objects shall be identical and shall contain the
    given initial value.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Init</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_Store</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>137</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Store() with custom atomic types.
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Store() to store an abitrary value in an atomic object.
  
Test Input: 
    A value and an atomic object, into which that value shall be stored.
    Furthermore, customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T are required. To work with these custom types,
    the macros ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The value is stored into the atomic object.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Store</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_Load</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>191</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Load() with custom atomic types.
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Load() to load the value of an atomic object.
  
Test Input: 
    An atomic object, whose value shall be loaded.
    Furthermore, customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T are required. To work with these custom types,
    the macros ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The value stored in the given atomic object is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Load</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_Exchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>246</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Exchange() with custom atomic types.
  
Test Object: 
    Atomics_Exchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Exchange() to exchange an arbitrary value with the current one
    of an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be exchanged.
    Furthermore, customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T are required. To work with these custom types,
    the macros ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The value stored in the given atomic object is returned and the given
    value is stored in that atomic object.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Exchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_CompareExchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>304</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_CompareExchange() with custom atomic types.
  
Test Object: 
    Atomics_CompareExchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_CompareExchange() two times to exchange an arbitrary value
    with the current one of an atomic object. The first time, the expected value
    shall be different from the current value of the atomic object. The second
    time, it shall be the same.
  
Test Input: 
    An atomic object and a value, which shall be exchanged, but only if the
    atomic object is equal to another atomic object.
    Furthermore, customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T are required. To work with these custom types,
    the macros ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The value stored in the given atomic object is returned and the given
    value is stored in that atomic object. The exchange happens only if
    the comparison succeeds. If it fails, the current value of the atomic
    object is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.CompareExchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_Add</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>375</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAdd() with custom atomic types.
  
Test Object: 
    Atomics_FetchAdd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAdd() to add an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be added.
    Furthermore, customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T are required. To work with these custom types,
    the macros ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The value is added to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Add</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_Sub</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>430</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchSub() with custom atomic types.
  
Test Object: 
    Atomics_FetchSub()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchSub() to subtract an arbitrary value from an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be subtracted.
    Furthermore, customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T are required. To work with these custom types,
    the macros ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The value is subtracted from the atomic object and its previous value is
    returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Sub</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_Or</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>486</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchOr() with custom atomic types.
  
Test Object: 
    Atomics_FetchOr()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchOr() to OR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ORed.
    Furthermore, customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T are required. To work with these custom types,
    the macros ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The value is ORed to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Or</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_And</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>541</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAnd() with custom atomic types.
  
Test Object: 
    Atomics_FetchAnd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAnd() to AND an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ANDed.
    Furthermore, customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T are required. To work with these custom types,
    the macros ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The value is ANDed to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.And</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_Xor</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>596</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchXor() with custom atomic types.
  
Test Object: 
    Atomics_FetchXor()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchXor() to XOR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be XORed.
    Furthermore, customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T are required. To work with these custom types,
    the macros ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The value is XORed to the atomic object and its previous value is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Xor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_TestAndSetFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>651</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_TestAndSetFlag() with custom atomic types.
  
Test Object: 
    Atomics_TestAndSetFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_TestAndSetFlag() two times to set an arbitrary bit in an
    atomic object. The first time, the selected bit in the atomic object shall
    be cleared; the second time, it shall be set already.
  
Test Input: 
    An atomic object and a flag-selection mask.
    Furthermore, customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T are required. To work with these custom types,
    the macros ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The selected flag is set in the atomic object and the flag's previous state
    is returned.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.TestAndSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>
    <specobject>
      <id>AtomicsGenericAPICustomTypes_ClearFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsGenericAPICustomTypes/source/application/allTests.c</sourcefile>
      <sourceline>715</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ClearFlag() with custom atomic types.
  
Test Object: 
    Atomics_ClearFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ClearFlag() two times to clear an arbitrary bit in an atomic
    object. The first time, the selected bit shall be set. The second time, the
    selected bit shall be cleared already.
  
Test Input: 
    An atomic object and a flag-selection mask.
    Furthermore, customized atomic types via the macros ATOMICS_USER_ATOMIC_VALUE_T
    and ATOMICS_USER_ATOMIC_T are required. To work with these custom types,
    the macros ATOMICS_USER_OBJECT_INITIALIZER, ATOMICS_USER_OBJECT_INIT,
    ATOMICS_USER_GET_VALUE, and ATOMICS_USER_SET_VALUE are adapted accordingly.
  
Test Output: 
    The selected flag is cleared in the atomic object. When the selected flag
    is already cleared, the value of the atomic object does not change.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.Clear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>AtomicsMultiCoreAPI_Fence</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ThreadFence().
  
Test Object: 
    Atomics_ThreadFence()
  
Test Precondition: 
  
Test Execution: 
    Call the Atomics_ThreadFence().
  
Test Input: 
  
Test Output: 
    There is no output, because this function must be implemented by the
    customer and hence, contains essentially no effective code by default.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Fence</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_Init</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>67</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Init() and ATOMICS_OBJECT_INITIALIZER().
  
Test Object: 
    Atomics_Init()
  
Test Precondition: 
  
Test Execution: 
    Use ATOMICS_OBJECT_INITIALIZER and Atomics_Init() to initialize two
    different atomic objects with the same initial value. Check afterwards,
    that both objects contain the expected initial value.
  
Test Input: 
  
Test Output: 
    The initialized atomic objects shall be identical and shall contain the
    given initial value.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Init</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_Store</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>122</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Store().
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Store() to store an abitrary value in an atomic object.
  
Test Input: 
    A value and an atomic object, into which that value shall be stored.
  
Test Output: 
    The value is stored into the atomic object. All interrupts must be
    disabled during this access and a spinlock must be acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Store</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_Load</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>177</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Load().
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Load() to load the value of an atomic object.
  
Test Input: 
    An atomic object, whose value shall be loaded.
  
Test Output: 
    The value stored in the given atomic object is returned.
    All interrupts must be disabled during this access and
    a spinlock must be acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Load</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_Exchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>235</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Exchange().
  
Test Object: 
    Atomics_Exchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Exchange() to exchange an arbitrary value with the current one
    of an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be exchanged.
  
Test Output: 
    The value stored in the given atomic object is returned and the given
    value is stored in that atomic object.
    All interrupts must be disabled during this access
    and a spinlock must be acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Exchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_CompareExchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>295</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_CompareExchange().
  
Test Object: 
    Atomics_CompareExchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_CompareExchange() two times to exchange an arbitrary value
    with the current one of an atomic object. The first time, the expected value
    shall be different from the current value of the atomic object. The second
    time, it shall be the same.
  
Test Input: 
    An atomic object and a value, which shall be exchanged, but only if the
    atomic object is equal to another atomic object.
  
Test Output: 
    The value stored in the given atomic object is returned and the given
    value is stored in that atomic object. The exchange happens only if
    the comparison succeeds. If it fails, the current value of the atomic
    object is returned.
    All interrupts must be disabled during this access
    and a spinlock must be acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.CompareExchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_Add</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>371</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAdd().
  
Test Object: 
    Atomics_FetchAdd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAdd() to add an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be added.
  
Test Output: 
    The value is added to the atomic object and its previous value is returned.
    All interrupts must be disabled during this access
    and a spinlock must be acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Add</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_Sub</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>429</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchSub().
  
Test Object: 
    Atomics_FetchSub()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchSub() to subtract an arbitrary value from an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be subtracted.
  
Test Output: 
    The value is subtracted from the atomic object and its previous value is
    returned.
    All interrupts must be disabled during this access
    and a spinlock must be acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Sub</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_Or</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>488</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchOr().
  
Test Object: 
    Atomics_FetchOr()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchOr() to OR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ORed.
  
Test Output: 
    The value is ORed to the atomic object and its previous value is returned.
    All interrupts must be disabled during this access
    and a spinlock must be acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Or</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_And</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>546</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAnd().
  
Test Object: 
    Atomics_FetchAnd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAnd() to AND an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ANDed.
  
Test Output: 
    The value is ANDed to the atomic object and its previous value is returned.
    All interrupts must be disabled during this access
    and a spinlock must be acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.And</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_Xor</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>604</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchXor().
  
Test Object: 
    Atomics_FetchXor()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchXor() to XOR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be XORed.
  
Test Output: 
    The value is XORed to the atomic object and its previous value is returned.
    All interrupts must be disabled during this access
    and a spinlock must be acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Xor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_TestAndSetFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>662</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_TestAndSetFlag().
  
Test Object: 
    Atomics_TestAndSetFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_TestAndSetFlag() two times to set an arbitrary bit in an
    atomic object. The first time, the selected bit in the atomic object shall
    be cleared; the second time, it shall be set already.
  
Test Input: 
    An atomic object and a flag-selection mask.
  
Test Output: 
    The selected flag is set in the atomic object and the flag's previous state
    is returned.
    All interrupts must be disabled during this access
    and a spinlock must be acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.TestAndSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPI_ClearFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>731</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ClearFlag().
  
Test Object: 
    Atomics_ClearFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ClearFlag() two times to clear an arbitrary bit in an atomic
    object. The first time, the selected bit shall be set. The second time, the
    selected bit shall be cleared already.
  
Test Input: 
    An atomic object and a flag-selection mask.
  
Test Output: 
    The selected flag is cleared in the atomic object. When the selected flag
    is already cleared, the value of the atomic object does not change.
    All interrupts must be disabled during this access
    and a spinlock must be acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.Clear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_Fence</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ThreadFence() in case the locking of atomic
    objects always fails.
  
Test Object: 
    Atomics_ThreadFence()
  
Test Precondition: 
  
Test Execution: 
    Call the Atomics_ThreadFence().
  
Test Input: 
  
Test Output: 
    There is no output, because this function must be implemented by the
    customer and hence, contains essentially no effective code by default.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Fence</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_Init</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>69</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Init() and ATOMICS_OBJECT_INITIALIZER()
    in case the locking of atomic objects always fails.
  
Test Object: 
    Atomics_Init()
  
Test Precondition: 
  
Test Execution: 
    Use ATOMICS_OBJECT_INITIALIZER and Atomics_Init() to initialize two
    different atomic objects with the same initial value. Check afterwards,
    that both objects contain the expected initial value.
  
Test Input: 
  
Test Output: 
    The initialized atomic objects shall be identical and shall contain the
    given initial value.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Init</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_Store</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>125</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Store() in case the locking of atomic objects
    always fails.
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Store() to store an arbitrary value in an atomic object.
  
Test Input: 
    A value and an atomic object, into which that value shall be stored.
  
Test Output: 
    The value of the atomic object must be unchanged. No spinlock was acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Store</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_Load</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>180</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Load() in case the locking of atomic objects
    always fails.
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Load() to load the value of an atomic object.
  
Test Input: 
    An atomic object, whose value shall be loaded.
  
Test Output: 
    The value 0 is returned. No spinlock was acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Load</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_Exchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>237</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Exchange() in case the locking of atomic
    objects always fails.
  
Test Object: 
    Atomics_Exchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Exchange() to exchange an arbitrary value with the current one
    of an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be exchanged.
  
Test Output: 
    The value 0 is returned and the atomic object is unchanged.
    No spinlock was acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Exchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_CompareExchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>296</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_CompareExchange() in case the locking of
    atomic objects always fails.
  
Test Object: 
    Atomics_CompareExchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_CompareExchange() to exchange a value, that is different from
    the current value in the atomic object. The expected value is equal to the
    current value of the atomic object, so that the exchange is not prohibited.
  
Test Input: 
    An atomic object and a value, which shall be exchanged, but only if the
    atomic object is equal to another atomic object.
  
Test Output: 
    The atomic object is not changed. The compare-exchange operation always
    indicates failure. No spinlock is acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.CompareExchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_Add</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>359</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAdd() in case the locking of
    atomic objects always fails.
  
Test Object: 
    Atomics_FetchAdd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAdd() to add an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be added.
  
Test Output: 
    The value 0 is returned. The atomic object is not changed. No spinlock is
    acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Add</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_Sub</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>417</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchSub() in case the locking of
    atomic objects always fails.
  
Test Object: 
    Atomics_FetchSub()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchSub() to subtract an arbitrary value from an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be subtracted.
  
Test Output: 
    The value 0 is returned. The atomic object is not changed. No spinlock is
    acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Sub</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_Or</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>475</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchOr() in case the locking of
    atomic objects always fails.
  
Test Object: 
    Atomics_FetchOr()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchOr() to OR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ORed.
  
Test Output: 
    The value 0 is returned. The atomic object is not changed. No spinlock is
    acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Or</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_And</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>533</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAnd() in case the locking of
    atomic objects always fails.
  
Test Object: 
    Atomics_FetchAnd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAnd() to AND an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ANDed.
  
Test Output: 
    The value 0 is returned. The atomic object is not changed. No spinlock is
    acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.And</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_Xor</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>591</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchXor() in case the locking of
    atomic objects always fails.
  
Test Object: 
    Atomics_FetchXor()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchXor() to XOR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be XORed.
  
Test Output: 
    The value 0 is returned. The atomic object is not changed. No spinlock is
    acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Xor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_TestAndSetFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>649</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_TestAndSetFlag() in case the locking of
    atomic objects always fails.
  
Test Object: 
    Atomics_TestAndSetFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_TestAndSetFlag() to set a bit in an atomic object,
    which is not already set.
  
Test Input: 
    An atomic object and a flag-selection mask.
  
Test Output: 
    The value 0 is returned. The atomic object is not changed. No spinlock is
    acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.TestAndSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>
    <specobject>
      <id>AtomicsMultiCoreAPISpinlockFailure_ClearFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsMultiCoreAPISpinlockFailure/source/application/allTests.c</sourcefile>
      <sourceline>708</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ClearFlag() in case the locking of
    atomic objects always fails.
  
Test Object: 
    Atomics_ClearFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ClearFlag() to clear a bit in an atomic object. The selected
    bit shall be set.
  
Test Input: 
    An atomic object and a flag-selection mask.
  
Test Output: 
    The atomic object is not changed. No spinlock is acquired.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.Clear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>AtomicsSingleCoreAPI_Fence</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ThreadFence().
  
Test Object: 
    Atomics_ThreadFence()
  
Test Precondition: 
  
Test Execution: 
    Call the Atomics_ThreadFence().
  
Test Input: 
  
Test Output: 
    There is no output, because this function must be implemented by the
    customer and hence, contains essentially no effective code by default.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Fence</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_Init</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>67</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Init() and ATOMICS_OBJECT_INITIALIZER().
  
Test Object: 
    Atomics_Init()
  
Test Precondition: 
  
Test Execution: 
    Use ATOMICS_OBJECT_INITIALIZER and Atomics_Init() to initialize two
    different atomic objects with the same initial value. Check afterwards,
    that both objects contain the expected initial value.
  
Test Input: 
  
Test Output: 
    The initialized atomic objects shall be identical and shall contain the
    given initial value.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Init</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_Store</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>122</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Store().
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Store() to store an abitrary value in an atomic object.
  
Test Input: 
    A value and an atomic object, into which that value shall be stored.
  
Test Output: 
    The value is stored into the atomic object. All interrupts must be
    disabled during this access.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Store</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_Load</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>178</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Load().
  
Test Object: 
    Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Load() to load the value of an atomic object.
  
Test Input: 
    An atomic object, whose value shall be loaded.
  
Test Output: 
    The value stored in the given atomic object is returned.
    All interrupts must be disabled during this access.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Load</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_Exchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>236</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_Exchange().
  
Test Object: 
    Atomics_Exchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Exchange() to exchange an arbitrary value with the current one
    of an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be exchanged.
  
Test Output: 
    The value stored in the given atomic object is returned and the given
    value is stored in that atomic object.
    All interrupts must be disabled during this access.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Exchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_CompareExchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>296</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_CompareExchange().
  
Test Object: 
    Atomics_CompareExchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_CompareExchange() two times to exchange an arbitrary value
    with the current one of an atomic object. The first time, the expected value
    shall be different from the current value of the atomic object. The second
    time, it shall be the same.
  
Test Input: 
    An atomic object and a value, which shall be exchanged, but only if the
    atomic object is equal to another atomic object.
  
Test Output: 
    The value stored in the given atomic object is returned and the given
    value is stored in that atomic object. The exchange happens only if
    the comparison succeeds. If it fails, the current value of the atomic
    object is returned.
    All interrupts must be disabled during this access.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.CompareExchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_Add</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>371</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAdd().
  
Test Object: 
    Atomics_FetchAdd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAdd() to add an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be added.
  
Test Output: 
    The value is added to the atomic object and its previous value is returned.
    All interrupts must be disabled during this access.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Add</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_Sub</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>428</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchSub().
  
Test Object: 
    Atomics_FetchSub()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchSub() to subtract an arbitrary value from an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be subtracted.
  
Test Output: 
    The value is subtracted from the atomic object and its previous value is
    returned.
    All interrupts must be disabled during this access.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Sub</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_Or</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>486</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchOr().
  
Test Object: 
    Atomics_FetchOr()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchOr() to OR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ORed.
  
Test Output: 
    The value is ORed to the atomic object and its previous value is returned.
    All interrupts must be disabled during this access.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Or</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_And</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>543</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchAnd().
  
Test Object: 
    Atomics_FetchAnd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAnd() to AND an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be ANDed.
  
Test Output: 
    The value is ANDed to the atomic object and its previous value is returned.
    All interrupts must be disabled during this access.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.And</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_Xor</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>600</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_FetchXor().
  
Test Object: 
    Atomics_FetchXor()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchXor() to XOR an arbitrary value to an atomic object.
  
Test Input: 
    An atomic object and a value, which shall be XORed.
  
Test Output: 
    The value is XORed to the atomic object and its previous value is returned.
    All interrupts must be disabled during this access.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Xor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_TestAndSetFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>657</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_TestAndSetFlag().
  
Test Object: 
    Atomics_TestAndSetFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_TestAndSetFlag() two times to set an arbitrary bit in an
    atomic object. The first time, the selected bit in the atomic object shall
    be cleared; the second time, it shall be set already.
  
Test Input: 
    An atomic object and a flag-selection mask.
  
Test Output: 
    The selected flag is set in the atomic object and the flag's previous state
    is returned.
    All interrupts must be disabled during this access.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.TestAndSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>
    <specobject>
      <id>AtomicsSingleCoreAPI_ClearFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsSingleCoreAPI/source/application/allTests.c</sourcefile>
      <sourceline>725</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of Atomics_ClearFlag().
  
Test Object: 
    Atomics_ClearFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ClearFlag() two times to clear an arbitrary bit in an atomic
    object. The first time, the selected bit shall be set. The second time, the
    selected bit shall be cleared already.
  
Test Input: 
    An atomic object and a flag-selection mask.
  
Test Output: 
    The selected flag is cleared in the atomic object. When the selected flag
    is already cleared, the value of the atomic object does not change.
    All interrupts must be disabled during this access.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.Clear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>AtomicsTSBitSetClear_8</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsTSBitSetClear/source/application/allTests.c.m4</sourcefile>
      <sourceline>87</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of
    - TS_AtomicSetBit_8() and TS_AtomicClearBit_8(),
    - TS_AtomicSetBit() and TS_AtomicClearBit()
  
Test Object: 
    TS_AtomicSetBit_8(), TS_AtomicClearBit_8(),
    TS_AtomicSetBit(), TS_AtomicClearBit()
  
Test Precondition: 
  
Test Execution: 
  
Test Input: 
  
Test Output: 
    The set operation sets the bit denoted by its bit-index argument.
    The clear operations clears the bit denoted by its bit-index argument.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>Atomics.TS.BitClear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>
    <specobject>
      <id>AtomicsTSBitSetClear_16</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsTSBitSetClear/source/application/allTests.c.m4</sourcefile>
      <sourceline>141</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of
    - TS_AtomicSetBit_16() and TS_AtomicClearBit_16(),
    - TS_AtomicSetBit() and TS_AtomicClearBit()
  
Test Object: 
    TS_AtomicSetBit_16(), TS_AtomicClearBit_16(),
    TS_AtomicSetBit(), TS_AtomicClearBit()
  
Test Precondition: 
  
Test Execution: 
  
Test Input: 
  
Test Output: 
    The set operation sets the bit denoted by its bit-index argument.
    The clear operations clears the bit denoted by its bit-index argument.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>Atomics.TS.BitClear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>
    <specobject>
      <id>AtomicsTSBitSetClear_32</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsTSBitSetClear/source/application/allTests.c.m4</sourcefile>
      <sourceline>195</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of
    - TS_AtomicSetBit_32() and TS_AtomicClearBit_32(),
    - TS_AtomicSetBit() and TS_AtomicClearBit()
  
Test Object: 
    TS_AtomicSetBit_32(), TS_AtomicClearBit_32(),
    TS_AtomicSetBit(), TS_AtomicClearBit()
  
Test Precondition: 
  
Test Execution: 
  
Test Input: 
  
Test Output: 
    The set operation sets the bit denoted by its bit-index argument.
    The clear operations clears the bit denoted by its bit-index argument.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>Atomics.TS.BitClear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>
    <specobject>
      <id>AtomicsTSBitSetClear_64</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsTSBitSetClear/source/application/allTests.c.m4</sourcefile>
      <sourceline>249</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of
    - TS_AtomicSetBit_64() and TS_AtomicClearBit_64(),
    - TS_AtomicSetBit() and TS_AtomicClearBit()
  
Test Object: 
    TS_AtomicSetBit_64(), TS_AtomicClearBit_64(),
    TS_AtomicSetBit(), TS_AtomicClearBit()
  
Test Precondition: 
  
Test Execution: 
  
Test Input: 
  
Test Output: 
    The set operation sets the bit denoted by its bit-index argument.
    The clear operations clears the bit denoted by its bit-index argument.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.BitSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>Atomics.TS.BitClear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>AtomicsTSInterruptControl</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsTSInterruptControl/source/application/allTests.c.m4</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of TS_IntDisable() and TS_IntRestore().
  
Test Object: 
    TS_IntDisable(), TS_IntRestore()
  
Test Precondition: 
  
Test Execution: 
  
Test Input: 
  
Test Output: 
    All interrupts must be suspended, when TS_IntDisable() is called.
    All interrupts must be resumed again, when TS_IntRestore() is called.
    No other function to control interrupts shall be called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.InterruptControl.Disable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>Atomics.TS.InterruptControl.Restore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>
    <specobject>
      <id>AtomicsTSInterruptControl1</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsTSInterruptControl/source/application/allTests.c.m4</sourcefile>
      <sourceline>98</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of TS_IntDisable() and TS_IntRestore().
  
Test Object: 
    TS_IntDisable(), TS_IntRestore()
  
Test Precondition: 
  
Test Execution: 
  
Test Input: 
  
Test Output: 
    All interrupts must be suspended, when TS_IntDisable() is called.
    All interrupts must be resumed again, when TS_IntRestore() is called.
    No other function to control interrupts shall be called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.InterruptControl.Disable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>Atomics.TS.InterruptControl.Restore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>
    <specobject>
      <id>AtomicsTSInterruptControl2</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsTSInterruptControl/source/application/allTests.c.m4</sourcefile>
      <sourceline>160</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the behavior of TS_IntDisable() and TS_IntRestore().
  
Test Object: 
    TS_IntDisable(), TS_IntRestore()
  
Test Precondition: 
  
Test Execution: 
  
Test Input: 
  
Test Output: 
    All interrupts must be suspended, when TS_IntDisable() is called.
    All interrupts must be resumed again, when TS_IntRestore() is called.
    No other function to control interrupts shall be called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.TS.InterruptControl.Disable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>Atomics.TS.InterruptControl.Restore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>AtomicsWoOsAtmValT_Fence</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>12</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_ThreadFence()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ThreadFence() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicThreadFence() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Fence</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValT_Store</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Store() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicStore() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Store</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValT_Load</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>118</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_Load()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Load() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicLoad() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Load</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValT_Exchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_Exchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Exchange() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicExchange() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Exchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValT_CompareExchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>230</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_CompareExchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_CompareExchange() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicCompareExchange() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.CompareExchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValT_FetchAdd</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>287</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_FetchAdd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAdd() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchAdd() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Add</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValT_FetchSub</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>343</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_FetchSub()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchSub() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchSub() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Sub</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValT_FetchOr</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>399</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_FetchOr()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchOr() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchOr() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Or</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValT_FetchAnd</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>455</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_FetchAnd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAnd() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchAnd() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.And</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValT_FetchXor</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>511</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_FetchXor()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchXor() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchXor() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Xor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValT_TestAndSetFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>567</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_TestAndSetFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_TestAndSetFlag() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicTestAndSetFlag() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.TestAndSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValT_ClearFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValT/source/application/allTests.c</sourcefile>
      <sourceline>623</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide os_atomic_value_t, but does provide
    OS_AtomicFetch&lt;OP&gt;() functions.
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_ClearFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ClearFlag() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicClearFlag() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.Clear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_Fence</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>12</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_ThreadFence()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ThreadFence() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicThreadFence() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Fence</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_Store</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>65</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_Store()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Store() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicStore() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Store</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_Load</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>119</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_Load()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Load() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicLoad() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Load</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_Exchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>175</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_Exchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_Exchange() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicExchange() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.Exchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_CompareExchange</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>231</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_CompareExchange()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_CompareExchange() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicCompareExchange() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.CompareExchange</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_FetchAdd</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>288</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_FetchAdd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAdd() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchAdd() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Add</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_FetchSub</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>344</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_FetchSub()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchSub() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchSub() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.ArithmeticOps.Sub</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_FetchOr</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>400</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_FetchOr()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchOr() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchOr() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Or</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_FetchAnd</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>456</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_FetchAnd()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchAnd() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchAnd() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.And</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_FetchXor</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>512</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_FetchXor()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_FetchXor() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicFetchXor() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.BoolOps.Xor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_TestAndSetFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>568</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_TestAndSetFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_TestAndSetFlag() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicTestAndSetFlag() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.TestAndSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>
    <specobject>
      <id>AtomicsWoOsAtmValTWoFetchFuncs_ClearFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_Atomics)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Atomics/test/ts5/Conformance/IN/AtomicsWoOsAtmValTWoFetchFuncs/source/application/allTests.c</sourcefile>
      <sourceline>624</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  
Test Description: 
    Tests the OS compatibility shim for EB tresos AutoCore OS. The selected
    OS version doesn't provide the type os_atomic_value_t and the functions
    OS_AtomicFetch&lt;OP&gt;().
  
Test Object: 
    EB tresos AutoCore OS compatibility shim: Atomics_ClearFlag()
  
Test Precondition: 
  
Test Execution: 
    Call Atomics_ClearFlag() and check that the corresponding
    OS stub function is called.
  
Test Input: 
  
Test Output: 
    Only the function OS_AtomicClearFlag() must have been called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Atomics.FlagOps.Clear</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
