<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_SD_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_public_modulereference_integration_req.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_AUTOSAR_SWS_Sd_4_1_3.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_AUTOSAR_SWS_Sd_4_2_1.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_AUTOSAR_SWS_Sd_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_AUTOSAR_SWS_Sd_RefinedRequirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_AUTOSAR_SWS_ServiceDiscovery_R23-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_Sd_EBExtensions.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_Sd_EB_Refinements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/common_req/Sd_DbgInst_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/common_req/Sd_PduLengthType_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/common_req/Sd_VerifyStub_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 20:45:15 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_SD_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_public_modulereference_integration_req.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_AUTOSAR_SWS_Sd_4_1_3.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_AUTOSAR_SWS_Sd_4_2_1.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_AUTOSAR_SWS_Sd_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_AUTOSAR_SWS_Sd_RefinedRequirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_AUTOSAR_SWS_ServiceDiscovery_R23-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_Sd_EBExtensions.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_Native/asc_SD_requirements_Sd_EB_Refinements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/common_req/Sd_DbgInst_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/common_req/Sd_PduLengthType_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/common_req/Sd_VerifyStub_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/1018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>swpad</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swts</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/1010: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>

      <!-- legacy items -->
      <regex>dev</regex>
      <regex>man</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>
    <!-- The Ruleset for RMP4.0 is currently identical to the previous rule set. This rule is
        intoduce to show that the right file is uses. It will be removed when the RMP4.0 rule set is
    reworked -->
    <rule>
      <name>INFO.Rule set RMP4.0</name>
      <description>This rules indicates that RMP4.0 rule set is used.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.general.doctypes</name>
      <description>The used doctype is not part of the tracing model</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobjects/@doctype</applyto>
          <condition>((. != 'creq') or (. != 'fea') or (. != 'swpad') or (. != 'swts') or (. != 'swrs') or (. !='swad') or (. != 'swintts') or (.!= 'swdd') or (. != 'swurs') or (. != 'swmts') or (. != 'swuts') or (. != 'impl') or (. != 'dev') or (. != 'man') or (. != 'lim'))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected.coverage</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.count</name>
      <description>Unit requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swrs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swurs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.doctypes</name>
      <description>Requirements can be covered only by swurs, swad, dev, lim, swdd, impl, swuts, swmts, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs')]</applyto>
          <condition>(./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swurs, swad, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swuts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swmts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swintts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.impl.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='impl')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes"))</condition>
        </conditioncheck>
      </conditionchecks>
          </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

  </rules>
    <oreqmRules>

        <rule>
            <name>WRN.swts.needscoverage.count</name>
            <description>Violated if there are more than 10 swts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.man.needscoverage.count</name>
            <description>Violated if there are more than 10 man specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>man.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swintts.needscoverage.count</name>
            <description>Violated if there are more than 10 swintts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swintts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swmts.needscoverage.count</name>
            <description>Violated if there are more than 10 swmts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swmts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swuts.needscoverage.count</name>
            <description>Violated if there are more than 10 swuts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swuts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swpad.needscoverage.count</name>
            <description>Violated if there are more than 10 swpad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swpad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.needscoverage.count</name>
            <description>Violated if there are more than 10 swrs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.needscoverage.count</name>
            <description>Violated if there are more than 10 swad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.needscoverage.count</name>
            <description>Violated if there are more than 10 swurs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.needscoverage.count</name>
            <description>Violated if there are more than 10 swdd specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.impl.needscoverage.count</name>
            <description>Violated if there are more than 10 impl specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>impl.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swrs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.fulfilledby.count</name>
            <description>Violated if there are more than 10 swad specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swurs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.fulfilledby.count</name>
            <description>Violated if there are more than 10 swdd specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="lim">
    <specobject>
      <id>Sd.EB.IntReq.EB_INTREQ_Sd_0001</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must assure that the following functions do not interrupt each other or themself:
        <ul>
          <li>Sd_MainFunction</li>
          <li>Sd_RxIndication</li>
          <li>Sd_LocalIpAddrAssignmentChg</li>
          <li>Sd_StartRandom</li>
          <li>Sd_DisableAcl</li>
        </ul>
      </description>
      <rationale>
       This limitation reduces code size and execution time.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <specobject>
      <id>Sd.EB.IntReq.EB_INTREQ_Sd_0002</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must assure that the following functions do not interrupt each other or themself:
        <ul>
          <li>Sd_ServerServiceSetState</li>
          <li>Sd_ClientServiceSetState</li>
          <li>Sd_ConsumedEventGroupSetState</li>
        </ul>
      </description>
      <rationale>
       This limitation reduces code size and execution time.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>Sd.EB.IntReq.EB_INTREQ_Sd_0003</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must ensure that the functions:
        <ul>
          <li>Sd_MainFunction</li>
          <li>Sd_RxIndication</li>
          <li>Sd_LocalIpAddrAssignmentChg</li>
        </ul>
        have the same or higher task priority than the functions:
        <ul>
          <li>Sd_ServerServiceSetState</li>
          <li>Sd_ClientServiceSetState</li>
          <li>Sd_ConsumedEventGroupSetState</li>
        </ul>
         to eliminate preemption.
      </description>
      <rationale>
        This limitation reduces code size and execution time by eliminating the need for extensive
        use of exclusive areas.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

    <specobject>
      <id>Sd.EB.IntReq.EB_INTREQ_Sd_0004</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        <function>Sd_Init()</function> shall not preempt or be preempted by other module
        functions.
        Exception: Functions which have to be scheduled (like module main functions) are allowed to
        preempt the initialization if they explicitly check against the initialization flag.
      </description>
      <rationale>
        Calling functions of an uninitialized module leads to undefined module behavior.
        Continuing an interrupted module function after re-initialization can lead to undefined
        module behavior.
        Module functions have DET checks to indicate if the function is called while the module is
        uninitialized. The integrator has to solve such incidents before disabling DET.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

    <specobject>
      <id>Sd.EB.IntReq.EB_INTREQ_Sd_0005</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must assure that all Client services using the same SocketConnection are provided on the same endpoint.
      </description>
      <rationale>
       The RemoteAddress of a socket connection will be overwritten if an OfferService entry is received
       for different Services that use the same Socket connection.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>Sd.EB.IntReq.EB_INTREQ_Sd_0006</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must assure that TCP connections use the same endpoint after hard resets
        of the SD client as before the reset if the TTL of a service is set to infinity.
      </description>
      <rationale>
        If the underlying data channel of a TCP connection with TTL set to infinity uses a new port
        after hard reset, there is no possibility to ever get that connection closed again and
        therefore it will block the SD indefinitely.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>Sd.ASR41.SWS_SD_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        Values for production code Event Ids are assigned externally by the configuration of
        the Dem. They are published in the file Dem_IntErrId.h and included via Dem.h.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Sd_Cfg.h.m4_31</srcid><srcstatus/><internalId>686</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_36</srcid><srcstatus/><internalId>724</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Int.h_85</srcid><srcstatus/><internalId>811</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.DEM_reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00111</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        Production errors shall be reported to Diagnostic Event Manager.
      </description>
      <furtherinfo>
           WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Out_Of_Resources_OFFER</srcid><srcstatus/><internalId>1339</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Out_Of_Resources_SUBSCRIBE_UDP</srcid><srcstatus/><internalId>1340</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Out_Of_Resources_SUBSCRIBE_TCP</srcid><srcstatus/><internalId>1341</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Receive_Subscribe_Nack</srcid><srcstatus/><internalId>1342</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_01</srcid><srcstatus/><internalId>1343</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_02</srcid><srcstatus/><internalId>1344</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_03</srcid><srcstatus/><internalId>1345</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_STOP_OFFER</srcid><srcstatus/><internalId>1346</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Unicast_STOP_OFFER</srcid><srcstatus/><internalId>1347</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_STOP_SUBSCRIBE</srcid><srcstatus/><internalId>1348</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_SUBSCRIBE_ACK</srcid><srcstatus/><internalId>1349</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00112</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        All type definitions of variables which shall be debugged, shall be accessible by the
        header file Sd.h.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.DebugAndTrace</srcid><srcstatus/><internalId>661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00113</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        Each variable that shall be accessible by AUTOSAR Debugging, shall be defined as
        global variable.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.DebugAndTrace</srcid><srcstatus/><internalId>661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00114</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        The declaration of variables in the header file shall be such, that it is possible to
        calculate the size of the variables by C-"sizeof"
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.DebugAndTrace</srcid><srcstatus/><internalId>661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00115</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        Variables available for debugging shall be described in the respective Basic Software
        Module Description.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.DebugAndTrace</srcid><srcstatus/><internalId>661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00116</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        The states of Sd state machine shall be available for debugging.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.DebugAndTrace</srcid><srcstatus/><internalId>661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00137</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        In the variant VARIANT-PRE-COMPILE all parameters below that are marked as pre-compile 
        configurable with "VARIANT-PRE-COMPILE" shall be configurable in a pre-compile manner, for 
        example as #defines. The module is most likely to be as source code delivered.
      </description>
      <comment>
        This requirement is informational only
      </comment>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00138</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        The variant VARIANT-LINK-TIME shall include all configuration options of the variant VARIANT-
        PRE-COMPILE. Additionally all parameters that are marked as link-time configurable with "
        VARIANT-LINK-TIME" shall be configurable at link time for example by linking a special 
        configured parameter object file. The module is most likely to be as source code delivered.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ImplementationConfigVariant</srcid><srcstatus/><internalId>659</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00139</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        The variant VARIANT-POST-BUILD shall include all configuration options of the variant VARIANT-
        LINK-TIME. Additionally all parameters that are marked as post-build configurable with "VARIANT-
        POST-BUILD" shall be configurable post build for example by flashing configuration data. The 
        module is most likely to be as source code delivered.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ImplementationConfigVariant</srcid><srcstatus/><internalId>659</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00362</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        When the Initial Wait Phase is entered, the API SoAd_EnableRouting() shall be
        called with SdClientServiceActivationRef for this Client Service Instance.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3622</srcid><srcstatus/><internalId>800</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.EB.ClientService.ConsumedMethodRouting</srcid><srcstatus/><internalId>1010</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00481</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        The Service Discovery module shall minimize the amount of messages sent by
        combining multiple entries within one message whenever it is possible and not in
        conflict to the configuration.
        Note:
        This can be achieved for example by checking the status of all Service Instances and
        Eventgroups cyclically and afterwards assembling the Service Discovery Messages.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Sd_MainFunction</srcid><srcstatus/><internalId>920</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RxIndication.Seq</srcid><srcstatus/><internalId>1116</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00569</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        Remote address of a socket connection has been set. (e.g. by SoAd or Sd)
        No subscription for this socket connection exists any more (i.e. all routing groups are 
        disabled.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2489</srcid><srcstatus/><internalId>775</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2504</srcid><srcstatus/><internalId>776</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2610</srcid><srcstatus/><internalId>778</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2625</srcid><srcstatus/><internalId>779</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_1711</srcid><srcstatus/><internalId>851</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_1789</srcid><srcstatus/><internalId>855</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_1796</srcid><srcstatus/><internalId>856</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_2001</srcid><srcstatus/><internalId>860</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_2082</srcid><srcstatus/><internalId>861</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_2</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_3</srcid><srcstatus/><internalId>1577</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0001.Server.ServiceRelocation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>907</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
    <specobject>
      <id>Sd.ASR41.SWS_SD_00603</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_1_3.xml</source>
      <version>1</version>
      <description>
        When the Down Phase is entered (coming from states other than init), the API SoAd_CloseSoCon() 
        shall be called for all Socket Connections associated with this Client Service Instance.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_2307</srcid><srcstatus/><internalId>862</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>Sd.ASR42.ECUC_SD_00098</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_2_1.xml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceAutoRequire
        Parameter Type: Boolean
        Parent Containers: SdClientService,
        Description: If existing and set to true, this Service will be set to "required" on start.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Changed requirement ID from ECUC_SoAd_00098 to ECUC_SD_00098
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
    <specobject>
      <id>Sd.ASR42.ECUC_SD_00108</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_2_1.xml</source>
      <version>1</version>
      <description>
        Name: SdConsumedEventGroupAutoRequire
        Parameter Type: Boolean
        Parent Containers: SdConsumedEventGroup,
        Description: If existing and set to true, this EventGroup will be set to "required" on start.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Changed requirement ID from ECUC_SoAd_00108 to ECUC_SD_00108
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>
    <specobject>
      <id>Sd.ASR42.SWS_SD_00132</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_2_1.xml</source>
      <version>1</version>
      <description>
        If development error detection is enabled and the Service Discovery module has  not
        been initialized using Sd_Init(), the Sd_MainFunction function shall raise the
        development error code SD_E_NOT_INITIALIZED  and the Sd_MainFunction
        function shall return E_NOT_OK
      </description>
      <releases>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.EB.ASCCCB1403</srcid><srcstatus/><internalId>591</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
    <specobject>
      <id>Sd.ASR42.SWS_SD_00374</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_4_2_1.xml</source>
      <version>1</version>
      <description>
        When the Down Phase  is entered coming from Repetition Phase,
        SoAd_DisableSpecificRouting() shall be called for all Socket Connections
        referenced by this Client Service Instance.
      </description>
      <comment>
        This requirement is not applicable.
        This requirement is unclear and will be removed with RfC 73062.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>
    <specobject>
      <id>Sd.ASR42.SWS_SD_00705</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_4_2_1.xml</source>
      <version>1</version>
      <description>
        Every wildcard socket connection shall be reset to wildcard if the following conditions apply:
        Remote address of the socket connection has been set by SD.
        No Client Service and Eventgroup Subscription for this Socket Connection is used anymore.
      </description>
      <releases>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3762</srcid><srcstatus/><internalId>805</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_MAIN_1</srcid><srcstatus/><internalId>1440</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_INITIALWAIT_1</srcid><srcstatus/><internalId>1442</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0002.Client.ServiceRelocation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>908</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>Sd.ECUC_SD_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdGeneral
        Container Type: Container
        Description: This container lists the general configuration parameters for the Service
        Discovery module.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdConfig
        Container Type: Container
        Sub-Containers: SdCapabilityRecordMatchCallout SdInstance SdServiceGroup
        Description: This container contains the configuration parameters and sub containers of the
        AUTOSAR Service Discovery module.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerService
        Container Type: Sub-Container
        Parent Containers: SdInstance,
        Sub-Containers: SdEventHandler SdProvidedMethods SdServerCapabilityRecord
        Description: This container specifies all parameters used by Server services.
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientService
        Container Type: Sub-Container
        Parent Containers: SdInstance,
        Sub-Containers: SdBlacklistedVersions SdClientCapabilityRecord SdConsumedEventGroup
        SdConsumedMethods
        Description: This container specifies all parameters used by Client services.
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdDevErrorDetect
        Parameter Type: Boolean
        Parent Containers: SdGeneral,
        Description: Switches the development error detection and notification on or off.
        Introduction: * true: detection and notification is enabled. * false: detection and
        notification is disabled.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdVersionInfoApi
        Parameter Type: Boolean
        Parent Containers: SdGeneral,
        Description: Enables and disables the version info API.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdMainFunctionCycleTime
        Parameter Type: FloatValue
        Parent Containers: SdGeneral,
        Description: This parameter defines the cycle time in seconds of the periodic calling of Sd
        main function.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: OPEN)
        Min-Value: 0 (Type: OPEN)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.MainFunctionCycleTime</srcid><srcstatus/><internalId>668</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceId
        Parameter Type: Integer
        Parent Containers: SdServerService,
        Description: Id to identify the service. This is unique for the service interface.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65534 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceInstanceId
        Parameter Type: Integer
        Parent Containers: SdServerService,
        Description: Configuration parameter to specify Instance Id of the Service implemented by the
        Server Service.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65534 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00476</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00303</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdInstanceHostname
        Parameter Type: StringParameter
        Parent Containers: SdInstance,
        Description: Configuration parameter to specify the Hostname.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        String Param Def Condition: Default Value: , Max-Length: , Min-Length: , Regular-Expression:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceId
        Parameter Type: Integer
        Parent Containers: SdClientService,
        Description: Id to identify the service. This is unique for the service interface.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65534 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00476</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceInstanceId
        Parameter Type: Integer
        Parent Containers: SdClientService,
        Description: Configuration parameter to specify Instance Id of the service as used in SD
        entries.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65534 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00476</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00303</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdInstanceUnicastRxPdu
        Container Type: Sub-Container
        Parent Containers: SdInstance,
        Description: This container specifies the received PDU.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdRxPduId
        Parameter Type: Integer
        Parent Containers: SdInstanceMulticastRxPdu,
        Description: ID of the PDU that will be received via the API Sd_SoAdIfRxIndication(
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00029</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdRxPduRef
        Parameter Type: Reference
        Parent Containers: SdInstanceMulticastRxPdu,
        Description: Reference to the "global" Pdu structure to allow harmonization of handle IDs in
        the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdInstanceTxPdu
        Container Type: Sub-Container
        Parent Containers: SdInstance,
        Description: This container specifies the transmitted PDU.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00032</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerCapabilityRecord
        Container Type: Sub-Container
        Parent Containers: SdServerService,
        Description: Sd uses capability records to store arbitrary name/value pairs conveying
        additional information about the named service.
        Introduction: The following use cases are supported: 1) Key present, with no value (e.g. "
        passreq" -- password required for this service) 2) Key present, with empty value (e.g. "PlugIns=
        server supports plugins, but none are presently installed) 3) Key present, with non-empty value
        e.g. "PlugIns=JPEG,MPEG2,MPEG4"
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00033</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerCapabilityRecordKey
        Parameter Type: StringParameter
        Parent Containers: SdServerCapabilityRecord,
        Description: Defines a CapabilityRecord key.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        String Param Def Condition: Default Value: , Max-Length: , Min-Length: , Regular-Expression:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00034</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerCapabilityRecordValue
        Parameter Type: StringParameter
        Parent Containers: SdServerCapabilityRecord,
        Description: Defines the corresponding CapabilityRecord value.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        String Param Def Condition: Default Value: , Max-Length: , Min-Length: , Regular-Expression:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerTimer
        Container Type: Sub-Container
        Parent Containers: SdInstance,
        Description: This container specifies all timers used by the Service Discovery module for
        Server Services.
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientTimerRequestResponseMaxDelay
        Parameter Type: FloatValue
        Parent Containers: SdClientTimer,
        Description: Maximum allowable response delay to entries received by multicast in seconds. This
        parameter is mandatory for ConsumedEventGroups.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerTimerTTL
        Parameter Type: Integer
        Parent Containers: SdServerTimer,
        Description: Time to live for offer service.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 16777215 (Type:
        Min-Value: 1 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00038</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerTimerInitialOfferDelayMin
        Parameter Type: FloatValue
        Parent Containers: SdServerTimer,
        Description: Min value in [s] to delay randomly the first offer. This parameter is mandatory
        for ServerService.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerTimerInitialOfferDelayMax
        Parameter Type: FloatValue
        Parent Containers: SdServerTimer,
        Description: Max value in [s] to delay randomly the first offer. This parameter is mandatory
        for ServerService.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00040</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerTimerInitialOfferRepetitionsMax
        Parameter Type: Integer
        Parent Containers: SdServerTimer,
        Description: Configure the maximum amount of offer repetition. This parameter is mandatory for
        ServerService.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 10 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientTimer
        Container Type: Sub-Container
        Parent Containers: SdInstance,
        Description: This container specifies all timers used by the Service Discovery module for
        Client Services.
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00044</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientTimerInitialFindDelayMin
        Parameter Type: FloatValue
        Parent Containers: SdClientTimer,
        Description: Min value in [s] to delay randomly the transmission of a find message. This
        parameter is mandatory for ClientService.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00046</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientTimerInitialFindRepetitionsMax
        Parameter Type: Integer
        Parent Containers: SdClientTimer,
        Description: Configuration for the maximum number of find repetitions. This parameter is
        mandatory for ClientService.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 10 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00055</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdEventHandler
        Container Type: Sub-Container
        Parent Containers: SdServerService,
        Sub-Containers: SdEventHandlerMulticast SdEventHandlerTcp SdEventHandlerUdp
        Description: Container Element for representing an EventGroup as part of the Service Instance.
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00056</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdConsumedEventGroup
        Container Type: Sub-Container
        Parent Containers: SdClientService,
        Description: A Service may have event groups which can be consumed. A service consumer has to
        subscribe to the corresponding event-group. After the subscription the event consumer takes the
        role of a server and the event provider that of a client.
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdConsumedEventGroupId
        Parameter Type: Integer
        Parent Containers: SdConsumedEventGroup,
        Description: The Eventgroup Id of this eventGroup as a unique identifier of the eventgroup in
        this service. This identifier is used for EventGroup entries as well.
        Introduction: Please note, that the Eventgroup ID 0x0000 is reserved.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65534 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00476</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00061</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdEventHandlerEventGroupId
        Parameter Type: Integer
        Parent Containers: SdEventHandler,
        Description: The EventGroup Id of this EventGroup as a unique identifier of the EventGroup in
        this service. This identifier is used for EventGroup entries as well.
        Introduction: Please note, that the Eventgroup ID 0x0000 is reserved.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65534 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00063</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientTimerInitialFindDelayMax
        Parameter Type: FloatValue
        Parent Containers: SdClientTimer,
        Description: Max value in [s] to delay randomly the transmission of a find message. This
        parameter is mandatory for ClientService.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00064</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientTimerRequestResponseMinDelay
        Parameter Type: FloatValue
        Parent Containers: SdClientTimer,
        Description: Minimum allowable response delay to the find message in seconds. This parameter is
        mandatory for ConsumedEventGroups.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00068</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceMajorVersion
        Parameter Type: Integer
        Parent Containers: SdServerService,
        Description: Major version number of the Service as used in SD Entries.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 254 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00069</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceMinorVersion
        Parameter Type: Integer
        Parent Containers: SdServerService,
        Description: Minor version number of the Service as used e.g. in Offer Service entries.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 4294967294 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00070</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceMajorVersion
        Parameter Type: Integer
        Parent Containers: SdClientService,
        Description: Major version number of the Service as used in the SD entries.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 254 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00476</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00071</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceMinorVersion
        Parameter Type: Integer
        Parent Containers: SdClientService,
        Description: Minor version number of the Service as used in the SD Service Entries. If
        configured to 0xffffffff (any), SD will accept all Minor Versions.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 4294967295 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00072</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientCapabilityRecord
        Container Type: Sub-Container
        Parent Containers: SdClientService,
        Description: Sd uses capability records to store arbitrary name/value pairs conveying
        additional information about the named service.
        Introduction: The following use cases are supported: 1) Key present, with no value (e.g. "
        passreq" -- password required for this service) 2) Key present, with empty value (e.g. "PlugIns=
        server supports plugins, but none are presently installed) 3) Key present, with non-empty value
        e.g. "PlugIns=JPEG,MPEG2,MPEG4"
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00073</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceCapabilityRecordKey
        Parameter Type: StringParameter
        Parent Containers: SdClientCapabilityRecord,
        Description: Defines a CapabilityRecord key.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        String Param Def Condition: Default Value: , Max-Length: , Min-Length: , Regular-Expression:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00074</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceCapabilityRecordValue
        Parameter Type: StringParameter
        Parent Containers: SdClientCapabilityRecord,
        Description: Defines the corresponding CapabilityRecord value.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        String Param Def Condition: Default Value: , Max-Length: , Min-Length: , Regular-Expression:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00075</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientTimerTTL
        Parameter Type: Integer
        Parent Containers: SdClientTimer,
        Description: Time to live for find and subscribe messages.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 16777215 (Type:
        Min-Value: 1 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00076</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerTimerOfferCyclicDelay
        Parameter Type: FloatValue
        Parent Containers: SdServerTimer,
        Description: Interval between cyclic offers in the main phase. This parameter is mandatory for
        ServerService.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00079</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceHandleId
        Parameter Type: Integer
        Parent Containers: SdClientService,
        Description: The HandleId by which the BswM can identify this Client Service Instance.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00081</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdInstanceMulticastRxPdu
        Container Type: Sub-Container
        Parent Containers: SdInstance,
        Description: This container specifies the received PDU.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00082</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdRxPduId
        Parameter Type: Integer
        Parent Containers: SdInstanceUnicastRxPdu,
        Description: ID of the PDU that will be received via the API Sd_SoAdIfRxIndication(
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00083</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdRxPduRef
        Parameter Type: Reference
        Parent Containers: SdInstanceUnicastRxPdu,
        Description: Reference to the "global" Pdu structure to allow harmonization of handle IDs in
        the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00084</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdInstance
        Container Type: Sub-Container
        Parent Containers: SdConfig,
        Sub-Containers: SdClientService SdClientTimer SdInstanceDemEventParameterRefs
        SdInstanceMulticastRxPdu SdInstanceTxPdu SdInstanceUnicastRxPdu SdServerService SdServerTimer
        Description: This container represents an instance of the SD; i.e. the SD configuration for a
        certain link.
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00086</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceTimerRef
        Parameter Type: Reference
        Parent Containers: SdServerService,
        Description: The reference of the SdServerTimer container for this service.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Sd/SdConfig/SdInstance/SdServerTimer
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00087</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdProvidedMethods
        Container Type: Sub-Container
        Parent Containers: SdServerService,
        Description: Container element for representing the needed elements of the data path for the
        methods provided by the service.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00088</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceTcpRef
        Parameter Type: Reference
        Parent Containers: SdServerService,
        Description: Reference to SoAdSocketConnectionGroup used for methods.
        Introduction: This is used to access the local IP address and port for building the endpoint
        option for offers of this service.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00089</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceUdpRef
        Parameter Type: Reference
        Parent Containers: SdServerService,
        Description: Reference to SoAdSocketConnectionGroup used for methods.
        Introduction: This is used to access the local IP address and port for building the endpoint
        option for offers of this service.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00090</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceActivationRef
        Parameter Type: Reference
        Parent Containers: SdProvidedMethods,
        Description: Reference to a SoAdRoutingGroup to activated and deactivate the data path for
        methods of the service.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00092</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdEventHandlerUdp
        Container Type: Sub-Container
        Parent Containers: SdEventHandler,
        Description: The subcontainer including the Routing Groups for Activation and Trigger Transmit
        for Events sent over UDP.
        Introduction: The activation ref (or triggering ref if no activation ref exists) is also being
        used for identification of the related socket connections in order to set the remote address of
        the client or find the related client by iterating the SdEventHandlerUdp elements (remote
        address statically configured or automatically set by method call before subscription)
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00093</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdEventHandlerTcp
        Container Type: Sub-Container
        Parent Containers: SdEventHandler,
        Description: The subcontainer including the Routing Groups for Activation and Trigger Transmit
        for Events sent over TCP.
        Introduction: The activation ref (or triggering ref if no activation ref exists) is also being
        used for identification of the related socket connections in order to find the related client
        by iterating the SdEventHandlerTcp elements (remote address statically configured or
        automatically set by opening TCP connection before subscription)
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00094</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdEventHandlerMulticast
        Container Type: Sub-Container
        Parent Containers: SdEventHandler,
        Description: The subcontainer including the Routing Group for Activation of Events sent over
        Multicast.
        Introduction: The activation ref is also being used for identification of the related Socket
        Connection in order to find the Multicast Address used in the Multicast Option referenced by
        the Subscribe EventGroup Ack entry.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00095</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdEventTriggeringRef
        Parameter Type: Reference
        Parent Containers: SdEventHandlerTcp, SdEventHandlerUdp,
        Description: Reference to a SoAdRoutingGroup that is used for triggered transmit. Triggering is
        needed to sent out initial events on the server side after a client got subscribed.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00096</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdEventActivationRef
        Parameter Type: Reference
        Parent Containers: SdEventHandlerMulticast, SdEventHandlerTcp, SdEventHandlerUdp,
        Description: Reference to a SoAdRoutingGroup for activation of the data path for a subscribed
        client (start sending events after subscribe). This is usually equal to the
        SdEventActivationRef referenced by SdEventHandlerUdp
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00097</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdEventHandlerMulticastThreshold
        Parameter Type: Integer
        Parent Containers: SdEventHandler,
        Description: Specifies the number of subscribed clients that trigger the Server to change the
        transmission of events to Multicast.
        Introduction: If configured to 0 only unicast will be used. If configured to 1 the first client
        will be already served by multicast. If configured to 2 the first client will be served with
        unicast and as soon as the second client arrives both will be served by multicast. This does
        not influence the handling of initial events, which are served using unicast only.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00099</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdConsumedMethods
        Container Type: Sub-Container
        Parent Containers: SdClientService,
        Description: Container element for representing the data path for accessing the server methods.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00100</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceTcpRef
        Parameter Type: Reference
        Parent Containers: SdClientService,
        Description: Reference to the SoAdSocketConnection representing the data path (TCP) for
        communication with methods.
        Introduction: This element is also used to set the remote address of the server and to open the
        TCP connection.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00101</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceUdpRef
        Parameter Type: Reference
        Parent Containers: SdClientService,
        Description: Reference to the SoAdSocketConnection representing the data path (UDP) for
        communication with methods.
        Introduction: This element is also used to set the remote address of the server.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00102</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceActivationRef
        Parameter Type: Reference
        Parent Containers: SdConsumedMethods,
        Description: Reference to a SoAdRoutingGroupRef to activate/deactivate the data path for the
        methods.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00103</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceTimerRef
        Parameter Type: Reference
        Parent Containers: SdClientService,
        Description: The reference of the SdClientTimer container for this service.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Sd/SdConfig/SdInstance/SdClientTimer
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00104</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdConsumedEventGroupUdpActivationRef
        Parameter Type: Reference
        Parent Containers: SdConsumedEventGroup,
        Description: The reference of the Routing Group for activation of the data path for receiving
        UDP events.
        Introduction: This element is also being used for getting the IP address and port number for
        building the UDP endpoint option for the Subscribe EventGroup entry. If no UDP methods are used
        in the service, this element is also being used for setting the remote address (UDP Endpoint
        option referenced by the Offer Service entry). If multiple EventGroups of the same Service
        Instance are subscribed the UDP Socket Connection will be shared and must be set only once.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00105</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdConsumedEventGroupTcpActivationRef
        Parameter Type: Reference
        Parent Containers: SdConsumedEventGroup,
        Description: The reference of the Routing Group for activation of the data path for receiving
        TCP events.
        Introduction: This element is also being used for getting the IP address and port number for
        building the TCP endpoint option for the Subscribe EventGroup entry. If no TCP methods are used
        in the service, this element is also being used for setting the remote address (TCP Endpoint
        option referenced by the Offer Service entry) and opening the TCP connection to the server
        before sending the Subscribe EventGroup entry. If multiple EventGroups of the same Service
        Instance are subscribed the TCP connection will be shared and must be opened only once.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00107</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdConsumedEventGroupTimerRef
        Parameter Type: Reference
        Parent Containers: SdConsumedEventGroup,
        Description: The reference of the SdClientTimer container for this eventGroup.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Sd/SdConfig/SdInstance/SdClientTimer
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00109</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdTxPduRef
        Parameter Type: Reference
        Parent Containers: SdInstanceTxPdu,
        Description: Reference to the "global" Pdu structure to allow harmonization of handle IDs in
        the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00110</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceHandleId
        Parameter Type: Integer
        Parent Containers: SdServerService,
        Description: The HandleId by which the BswM can identify this Server Service Instance.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00112</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdEventHandlerHandleId
        Parameter Type: Integer
        Parent Containers: SdEventHandler,
        Description: The HandleId by which the BswM can identify this EventGroup.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00113</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdEventHandlerTimerRef
        Parameter Type: Reference
        Parent Containers: SdEventHandler,
        Description: The reference of the SdServerTimer container for this EventGroup.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Sd/SdConfig/SdInstance/SdServerTimer
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00114</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerTimerRequestResponseMaxDelay
        Parameter Type: FloatValue
        Parent Containers: SdServerTimer,
        Description: Maximum allowable response delay to entries received by multicast in seconds.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00115</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerTimerRequestResponseMinDelay
        Parameter Type: FloatValue
        Parent Containers: SdServerTimer,
        Description: Minimum allowable response delay to entries received by multicast in seconds.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00116</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdConsumedEventGroupHandleId
        Parameter Type: Integer
        Parent Containers: SdConsumedEventGroup,
        Description: The HandleId by which the BswM can identify this EventGroup.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The code file structure shall not be defined within this specification completely. At this
        point it shall be pointed out that the code-file structure shall include the following files
        named:
        Sd_Lcfg.c - for link time configurable parameters and
        Sd_PBcfg.c - for post build time configurable parameters.
        These files shall contain all link time and post-build time configurable parameters.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ImplementationConfigVariant</srcid><srcstatus/><internalId>659</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The module shall include the Dem.h file. By this inclusion, the APIs to report errors as well
        as the required Event Id symbols are included.
      </description>
      <comment>
        only trace inclusion of Dem.h
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Sd_Cfg.h.m4_30</srcid><srcstatus/><internalId>685</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_35</srcid><srcstatus/><internalId>723</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Int.h_84</srcid><srcstatus/><internalId>810</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.DEM_reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery shall implement a main function, which shall be called cyclically
        according to configuration parameter SdMainFunctionCycleTime.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Sd_MainFunction</srcid><srcstatus/><internalId>920</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module shall store the ServiceModeRequest, which is provided via the BswM
        by calling the following APIs:
        Sd_ServerServiceSetState() and Sd_ClientServiceSetState(), respectively, If the SdServerService
        and SdClientSerivce, respectively, is NOT referencing a SdServiceGroup
        Sd_ServiceGroupStart and SdServiceGroupStop, if the SdServerService and SdClientService,
        respectively is referencing a SdServiceGroup
        Sd_ConsumedEventGroupSetState(), if dedicated SdEventGroupS are requested by a SdClientService.
        Note: This API call is allowed independ of a reference to a SdServiceGroup of a SdClientService)
        Sd_EventHandlerSetState() does currently not exist, since this state is directly deduced from
        the state of a Server Service by the Service Discovery.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.SetState.001</srcid><srcstatus/><internalId>1022</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.SetState.002</srcid><srcstatus/><internalId>1023</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.ConsumedEventGroupSetState.001</srcid><srcstatus/><internalId>1024</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SetState.001</srcid><srcstatus/><internalId>1088</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SetState.002</srcid><srcstatus/><internalId>1089</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00007</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The following CurrentStates shall be available for reporting to BswM module via
        BswM_Sd_ClientServiceCurrentState(), BswM_Sd_ConsumedEventGroupCurrentState(), and
        BswM_Sd_EventHandlerCurrentState() respectively: - SD_CLIENT_SERVICE_DOWN -
        SD_CLIENT_SERVICE_AVAILABLE - SD_CONSUMED_EVENTGROUP_DOWN - SD_CONSUMED_EVENTGROUP_AVAILABLE -
        SD_EVENT_HANDLER_RELEASED - SD_EVENT_HANDLER_REQUESTED
      </description>
      <comment>
        This requirement is informational only
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every configured Server Service Instance shall have an ECU wide, unique SdServerServiceHandleId.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.EB.Config.HandleId</srcid><srcstatus/><internalId>1198</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00013</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every Service Discovery Configuration Instance (see configuration container SdInstance) shall
        have at least one TxPdu ID, one RxPdu ID for Unicast, and one RxPdu ID for Multicast (see
        configuration parameter SdInstanceTxPdu, SdInstanceUnicastRxPdu, and SdInstanceMulticastRxPdu
        respectively)
      </description>
      <comment>
        This requirement is informational only. It is verified by VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00017</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        For different links, separate Service Discovery instance containers shall be configured.
      </description>
      <comment>
        This requirement is informational only. It is not a requirement on the Sd module
      but has to be considered by the integrator.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00019</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module shall store the status of all statically configured Service
        Instances and Eventgroups separately.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Data.ServiceStates</srcid><srcstatus/><internalId>919</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        After initialization of the Service Discovery module by the call of the API Sd_Init(), all
        configured Server Service Instances shall have the state "SD_SERVER_SERVICE_DOWN", unless a
        Server Service Instance has SdServerServiceAutoAvailable set to true, then the state shall be
        set to "SD_SERVER_SERVICE_AVAILABLE"
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.ServerService.API.Sd_ServerService_init</srcid><srcstatus/><internalId>1042</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_InitState</srcid><srcstatus/><internalId>1525</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        After initialization of the Service Discovery module by calling of the API Sd_Init(), all
        configured Client Service Instances shall have the state "SD_CLIENT_SERVICE_RELEASED", unless a
        Client Service Instance has SdClientServiceAutoRequired set to true, then the state shall be
        set to "SD_CLIENT_SERVICE_REQUESTED"
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.ClientService.API.Sd_ClientService_init</srcid><srcstatus/><internalId>928</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_InitState</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00024</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module shall be able to enable/disable routing groups within the SoAd
        module using the APIs SoAd_EnableRouting(), SoAd_DisableRouting(), SoAd_EnableSpecificRouting(
        and SoAd_DisableSpecificRouting() for Server- and Client Service Instances.
      </description>
      <comment>
        This requirement is informational only. It is not a requirement on the Sd module
        but has to be considered by the integrator.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00026</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module shall be able to reference RoutingGroup(s) per Service Instance/
        Eventgroup. See the following configuration parameters:
        SdClientServiceActivationRef (in SdConsumedMethods)
        SdConsumedEventGroupMulticastActivationRef
        SdConsumedEventGroupTcpActivationRef
        SdConsumedEventGroupUdpActivationRef
        SdServerServiceActivationRef (in SdProvidedMethods)
        SdEventActivationRef (in SdEventHandlerMulticast)
        SdEventActivationRef (in SdEventHandlerTcp)
        SdEventTriggeringRef (in SdEventHandlerTcp)
        SdEventActivationRef (in SdEventHandlerUdp)
        SdEventTriggeringRef (in SdEventHandlerUdp)
      </description>
      <comment>
        This requirement is informational only.
        This requirement is fulfilled by the configuration specification in chapter 10.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00029</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module shall only call SoAd_IfTransmit() if an IP address is assigned; i.
        e.: Sd_LocalIpAddrAssignmentChg() has been called with the current state
        TCPIP_IPADDR_STATE_ASSIGNED.
      </description>
      <comment>
        This requirement is informational only
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        All Service Discovery messages shall follow the Service Discovery Message layout shown in
        Figure 3.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery message format shall contain the following fields in the following order:
        Request ID (Client ID / Session ID) [32 Bit]
        Protocol Version [8 bit]
        Interface Version [8 Bit]
        Message Type [8 bit]
        Return Code [8 bit]
        Flags [8 bit]
        Reserved [24 bit]
        Length of Entries Array [32 bit]
        Entries Array (length in bytes defined by the "Length of Entries Array"
        Length of Options Array [32 bit]
        Option Array (length in bytes defined by the "Length of Options Array"
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00032</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Request ID field shall consist of a Client ID field [16 bits] and a Session ID field [16
        bits]
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.RequestID</srcid><srcstatus/><internalId>1188</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00033</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Client ID shall be set statically to 0x0000.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.MessageError.ClientID</srcid><srcstatus/><internalId>1119</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.flushBuffer.RequestID</srcid><srcstatus/><internalId>1188</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorClientId</srcid><srcstatus/><internalId>1660</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00034</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        After initialization of the Service Discovery Module, the Session ID for messages sent by the
        local ECU shall be 0x0001.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.RequestID</srcid><srcstatus/><internalId>1188</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageSessionId_0</srcid><srcstatus/><internalId>1713</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Session ID shall be incremented and stored separately for multicast and every single
        unicast communication partner every time SoAd_IfTransmit() is called.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.RequestID</srcid><srcstatus/><internalId>1188</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageSessionId_0</srcid><srcstatus/><internalId>1713</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every time, the Session ID wraps around, the Session ID shall restart with the value 0x0001.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.RequestID</srcid><srcstatus/><internalId>1188</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageSessionId_0</srcid><srcstatus/><internalId>1713</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If not defined otherwise, all fields in the Service Discovery messages shall be in Network Byte
        Order (i.e. Big Endian Byte Order)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.Message.ByteOrder</srcid><srcstatus/><internalId>1117</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.ByteOrder</srcid><srcstatus/><internalId>1158</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module sends Service Discovery messages (Offer, StopOffer, Find,..) using
        the SoAd_IfTransmit() API carrying the referenced TxPdu (see configuration parameter
        SdInstanceTxPdu)
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_Sd_Client_Service_IP_Address_Not_Assigned</srcid><srcstatus/><internalId>1310</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Client_Service</srcid><srcstatus/><internalId>1313</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_Sd_Client_Service_RemoteAddr_Two_Remote_IP_Addr</srcid><srcstatus/><internalId>1322</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_Sd_Client_Service_WrongProtocol</srcid><srcstatus/><internalId>1323</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_Sd_Client_Service_Multicast_Udp_Tcp</srcid><srcstatus/><internalId>1324</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_Sd_Client_Service_Multicast_WrongDomain</srcid><srcstatus/><internalId>1325</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_Sd_Client_Service_one_entry_two_options</srcid><srcstatus/><internalId>1326</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_Client_Service_TCP_SoCon_ONLINE_OFFLINE_ONLINE</srcid><srcstatus/><internalId>1329</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_ConsumedEventGroup_Multicast_Only_UDP_Ref</srcid><srcstatus/><internalId>1337</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_ConsumedEventGroup_Multicast_Only_No_UDP_Ref</srcid><srcstatus/><internalId>1338</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_REBOOT</srcid><srcstatus/><internalId>1361</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_1</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_2</srcid><srcstatus/><internalId>1682</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_1</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_2</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_1</srcid><srcstatus/><internalId>1695</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_1</srcid><srcstatus/><internalId>1697</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_3</srcid><srcstatus/><internalId>1699</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_1</srcid><srcstatus/><internalId>1701</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_0</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_1</srcid><srcstatus/><internalId>1704</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_2</srcid><srcstatus/><internalId>1705</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_3</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_4</srcid><srcstatus/><internalId>1707</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_0</srcid><srcstatus/><internalId>1708</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionKey_0</srcid><srcstatus/><internalId>1710</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00040</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module receives Service Discovery messages via the API
        Sd_SoAdIfRxIndication() and the configuration items SdInstanceUnicastRxPdu and
        SdInstanceMulticastRxPdu. The remote address must be saved in the call context of the
        Sd_RxIndication.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Receive.API.Sd_RxIndication</srcid><srcstatus/><internalId>1115</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00107</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type of error | Related error code | Error value
        SD has not been initialized | SD_E_UNINITSd.SD_E_UNINIT | 0x01
        Null pointer has been passed as an argument | SD_E_PARAM_POINTERSd.SD_E_PARAM_POINTER | 0x02
        Invalid mode request | SD_E_INV_MODESd.SD_E_INV_MODE | 0x03
        Invalid Id | SD_E_INV_IDSd.SD_E_INV_ID | 0x04
        Initialization failed | SD_E_INIT_FAILEDSd.SD_E_INIT_FAILED | 0x05
      </description>
      <comment>
        This requirement is informational only
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00108</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The detection of development errors shall be configurable (ON / OFF) at pre-compile time. The
        switch SdDevErrorDetect (see chapter 9) shall activate or deactivate the detection of all
        development errors.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Sd_Cfg.h.m4_46</srcid><srcstatus/><internalId>687</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_NoInit</srcid><srcstatus/><internalId>1289</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_NoInit</srcid><srcstatus/><internalId>1290</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_NoInit</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_NoInit</srcid><srcstatus/><internalId>1292</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_NoInit</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Init_NullPtr</srcid><srcstatus/><internalId>1294</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_GetVersionInfo_NullPtr</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_NullPtr</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_InvRxPduId</srcid><srcstatus/><internalId>1297</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_InvMode</srcid><srcstatus/><internalId>1298</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_InvHandleId</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_InvMode</srcid><srcstatus/><internalId>1300</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_InvHandleId</srcid><srcstatus/><internalId>1301</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_InvMode</srcid><srcstatus/><internalId>1302</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_InvHandleId</srcid><srcstatus/><internalId>1303</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_InvState</srcid><srcstatus/><internalId>1304</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_InvSoConId</srcid><srcstatus/><internalId>1305</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00109</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the SdDevErrorDetect switch is enabled API parameter checking is enabled.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_NoInit</srcid><srcstatus/><internalId>1289</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_NoInit</srcid><srcstatus/><internalId>1290</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_NoInit</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_NoInit</srcid><srcstatus/><internalId>1292</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_NoInit</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Init_NullPtr</srcid><srcstatus/><internalId>1294</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_GetVersionInfo_NullPtr</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_NullPtr</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_InvRxPduId</srcid><srcstatus/><internalId>1297</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_InvMode</srcid><srcstatus/><internalId>1298</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_InvHandleId</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_InvMode</srcid><srcstatus/><internalId>1300</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_InvHandleId</srcid><srcstatus/><internalId>1301</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_InvMode</srcid><srcstatus/><internalId>1302</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_InvHandleId</srcid><srcstatus/><internalId>1303</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_InvState</srcid><srcstatus/><internalId>1304</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_InvSoConId</srcid><srcstatus/><internalId>1305</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00110</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Detected development errors shall be reported to the Det_ReportError service of the Default
        Error Tracer (DET) if the pre-processor switch SdDevErrorDetect is set (see chapter 10)
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_NoInit</srcid><srcstatus/><internalId>1289</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_NoInit</srcid><srcstatus/><internalId>1290</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_NoInit</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_NoInit</srcid><srcstatus/><internalId>1292</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_NoInit</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Init_NullPtr</srcid><srcstatus/><internalId>1294</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_GetVersionInfo_NullPtr</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_NullPtr</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_InvRxPduId</srcid><srcstatus/><internalId>1297</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_InvMode</srcid><srcstatus/><internalId>1298</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_InvHandleId</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_InvMode</srcid><srcstatus/><internalId>1300</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_InvHandleId</srcid><srcstatus/><internalId>1301</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_InvMode</srcid><srcstatus/><internalId>1302</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_InvHandleId</srcid><srcstatus/><internalId>1303</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_InvState</srcid><srcstatus/><internalId>1304</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_InvSoConId</srcid><srcstatus/><internalId>1305</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00117</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Module | Header File | Imported Type
        ComStack_Types | ComStack_Types.h | PduIdType
        ComStack_Types.h | PduInfoType
        ComStack_Types.h | PduLengthType
        Dem | Rte_Dem_Type.h | Dem_EventIdType
        Rte_Dem_Type.h | Dem_EventStatusType
        SoAd | SoAd.h | SoAd_RoutingGroupIdType
        SoAd.h | SoAd_SoConIdType
        SoAd.h | SoAd_SoConModeType
        Std | Std_Types.h | Std_ReturnType
        Std_Types.h | Std_VersionInfoType
        TcpIp | TcpIp.h | TcpIp_DomainType
        TcpIp.h | TcpIp_IpAddrAssignmentType
        TcpIp.h | TcpIp_IpAddrStateType
        TcpIp.h | TcpIp_SockAddrType
      </description>
      <comment>
        This requirement is informational only. Which types are required is specified by the SWS.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00118</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | Sd_ServerServiceSetStateType
        Kind | Enumeration
        Range | SD_SERVER_SERVICE_DOWN | 0x00
        SD_SERVER_SERVICE_AVAILABLE | 0x01
        Description | This type defines the Server states that are reported to the SD using the
        expected API Sd_ServerServiceSetState.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd_Types.h_56</srcid><srcstatus/><internalId>701</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00119</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | Sd_Init
        Syntax
        void Sd_Init (const Sd_ConfigType* ConfigPtr)
        Service ID [hex] | 0x01
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | ConfigPtr | Pointer to a selected configuration structure.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Initializes the Service Discovery.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd.h_318</srcid><srcstatus/><internalId>693</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00120</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Sd_Init function shall initialize the state machines for all Service Instances according to
        SWS_SD_00020 and SWS_SD_00021.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_288</srcid><srcstatus/><internalId>712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00121</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Sd_Init function shall internally store the configuration data address to enable subsequent
        API calls to access the configuration data.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_239</srcid><srcstatus/><internalId>710</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00122</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Sd_Init function shall remember internally the successful initialization for other API
        functions to check for proper module initialization.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_NoInit</srcid><srcstatus/><internalId>1289</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_NoInit</srcid><srcstatus/><internalId>1290</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_NoInit</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_NoInit</srcid><srcstatus/><internalId>1292</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_NoInit</srcid><srcstatus/><internalId>1293</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00124</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | Sd_GetVersionInfo
        Syntax
        void Sd_GetVersionInfo (Std_VersionInfoType* versioninfo)
        Service ID [hex] | 0x02
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | None
        Parameters (inout) | None
        Parameters (out) | versioninfo | Pointer to where to store the version information of this
        module.
        Return value | None
        Description | Returns the version information of this module.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_GetVersionInfo</srcid><srcstatus/><internalId>1306</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00125</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Sd_GetVersionInfo function shall return the version information of this module. The version
        information includes: - Module Id - Vendor Id - Vendor specific version numbers
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_GetVersionInfo</srcid><srcstatus/><internalId>1306</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00126</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of Sd_GetVersionInfo: This function shall be pre compile time configurable On/Off
        by the configuration parameter: SdVersionInfoApi
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Sd_Cfg.h.m4_119</srcid><srcstatus/><internalId>691</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_137</srcid><srcstatus/><internalId>708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00129</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | Sd_RxIndication
        Syntax
        void Sd_RxIndication (PduIdType RxPduId, const PduInfoType* PduInfoPtr)
        Service ID [hex] | 0x42
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | RxPduId | ID of the received PDU.
        PduInfoPtr | Contains the length (SduLength) of the received PDU, a pointer to a buffer (
        SduDataPtr) containing the PDU, and the MetaData related to this PDU.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Indication of a received PDU from a lower layer communication interface module.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Receive.API.Sd_RxIndication</srcid><srcstatus/><internalId>1115</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00130</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | Sd_MainFunction
        Syntax
        void Sd_MainFunction (void)
        Service ID [hex] | 0x06
        Description
        Available via | SchM_Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.API.Sd_MainFunction</srcid><srcstatus/><internalId>914</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00131</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Sd_MainFunction shall update all counters, timers, states and phases and prozess the Rx and
        Tx data path.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Sd_MainFunction</srcid><srcstatus/><internalId>920</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00133</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        API Function | Header File | Description
        Dem_SetEventStatus | Dem.h | Called by SW-Cs or BSW modules to report monitor status
        information to the Dem. BSW modules calling Dem_SetEventStatus can safely ignore the return
        value. This API will be available only if ({Dem/DemConfigSet/DemEventParameter/
        DemEventReportingType} == STANDARD_REPORTING)
        SoAd_DisableSpecificRouting | SoAd.h | Disables routing of a group of PDUs in the SoAd related
        to the RoutingGroup specified by parameter id only on the socket connection identified by
        SoConId.
        SoAd_EnableSpecificRouting | SoAd.h | Enables routing of a group of PDUs in the SoAd related to
        the RoutingGroup specified by parameter id only on the socket connection identified by SoConId.
        SoAd_GetLocalAddr | SoAd.h | Retrieves the local address (IP address and port) actually used
        for the SoAd socket connection specified by SoConId, the netmask and default router
        SoAd_GetPhysAddr | SoAd.h | Retrieves the physical source address of the EthIf controller used
        by the SoAd socket connection specified by SoConId.
        SoAd_GetRemoteAddr | SoAd.h | Retrieves the remote address (IP address and port) actually used
        for the SoAd socket connection specified by SoConId
        SoAd_GetSoConMode | SoAd.h | Returns current state of the socket connection specified by
        SoConId.
        SoAd_IfSpecificRoutingGroupTransmit | SoAd.h | Triggers the transmission of all If-TxPDUs
        identified by the parameter id on the socket connection specified by SoConId after requesting
        the data from the related upper layer.
        SoAd_IfTransmit | SoAd.h | Requests transmission of a PDU.
        SoAd_ReleaseRemoteAddr | SoAd.h | By this API service the remote address (IP address and port)
        of the specified socket connection shall be released, i.e. set back to the configured remote
        address setting.
        SoAd_SetRemoteAddr | SoAd.h | By this API service the remote address (IP address and port) of
        the specified socket connection shall be set.
      </description>
      <comment>
        This requirement is informational only
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00134</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        API Function | Header File | Description
        BswM_Sd_ClientServiceCurrentState | BswM_Sd.h | Function called by Service Discovery to
        indicate current state of the Client Service (available/down)
        BswM_Sd_ConsumedEventGroupCurrentState | BswM_Sd.h | Function called by Service Discovery to
        indicate current status of the Consumed Eventgroup (available/down)
        BswM_Sd_EventHandlerCurrentState | BswM_Sd.h | Function called by Service Discovery to indicate
        current status of the EventHandler (requested/released)
        Det_ReportError | Det.h | Service to report development errors.
        SoAd_CloseSoCon | SoAd.h | This service closes the socket connection specified by SoConId.
        SoAd_DisableRouting | SoAd.h | Disables routing of a group of PDUs in the SoAd related to the
        RoutingGroup specified by parameter id. Routing of PDUs can be either forwarding of PDUs from
        the upper layer to a TCP or UDP socket of the TCP/IP stack specified by a PduRoute or the other
        way around specified by a SocketRoute.
        SoAd_EnableRouting | SoAd.h | Enables routing of a group of PDUs in the SoAd related to the
        RoutingGroup specified by parameter id. Routing of PDUs can be either forwarding of PDUs from
        the upper layer to a TCP or UDP socket of the TCP/IP stack specified by a PduRoute or the other
        way around specified by a SocketRoute.
        SoAd_GetSoConId | SoAd.h | Returns socket connection index related to the specified TxPduId.
        SoAd_IfRoutingGroupTransmit | SoAd.h | Triggers the transmission of all If-TxPDUs identified by
        the parameter id after requesting the data from the related upper layer.
        SoAd_OpenSoCon | SoAd.h | This service opens the socket connection specified by SoConId.
        SoAd_ReleaseIpAddrAssignment | SoAd.h | By this API service the local IP address assignment
        used for the socket connection specified by SoConId is released.
        SoAd_RequestIpAddrAssignment | SoAd.h | By this API service the local IP address assignment
        which shall be used for the socket connection specified by SoConId is initiated.
        SoAd_SetUniqueRemoteAddr | SoAd.h | This API service shall either return the socket connection
        index of the SoAdSocketConnectionGroup where the specified remote address (IP address and port)
        is set or assign the remote address to an unused socket connection from the same
        SoAdSocketConnectionGroup.
      </description>
      <comment>
        This requirement is informational only
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00135</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module shall support tool based configuration.
      </description>
      <comment>
        This requirement is informational only
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00136</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The configuration tool shall check the consistency of the configuration parameters at system
        configuration time.
      </description>
      <comment>
        This requirement is informational only
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00140</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The length of the Protocol Version field shall be 8 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00141</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The value for the Protocol Version field shall be statically set to 0x01.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.MessageError.ProtocolVersion</srcid><srcstatus/><internalId>1120</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorProtocolVersion</srcid><srcstatus/><internalId>1661</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00142</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The length of the Interface Version field shall be 8 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00143</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The value for the Interface Version field shall be statically set to 0x01.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.MessageError.InterfaceVersion</srcid><srcstatus/><internalId>1121</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorInterfaceVersion</srcid><srcstatus/><internalId>1662</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00144</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The length of the Message Type field shall be 8 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00145</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The value for the Message Type field shall be statically set to 0x02.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.MessageError.MessageType</srcid><srcstatus/><internalId>1122</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorMessageType</srcid><srcstatus/><internalId>1663</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00146</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The length of the Return Code field shall be 8 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00147</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Return Code field shall be statically set to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.MessageError.ReturnCode</srcid><srcstatus/><internalId>1123</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorReturnCode</srcid><srcstatus/><internalId>1664</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00149</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The length of the Flags field shall be 8 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00150</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The first bit of the Flags field (highest order bit) shall be called Reboot Flag.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00151</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reboot Flag shall be set to '1' for all messages after reboot until the Session ID of the
        Request ID field wraps and thus starts with 0x0001 again. After that the Reboot Flag shall be
        set to '0'
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageRebootFlag_0</srcid><srcstatus/><internalId>1714</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00152</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The second bit of the Flag field (second highest order bit) shall be called Unicast Flag.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00153</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Unicast Flag of the Flag field shall be set to Unicast Flag and shall be set to '1',
        meaning: This ECU supports receiving Unicast messages.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00154</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Undefined bits within the Flag field shall be statically set to '0'
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00155</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The length of the Reserved field shall be 24 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00156</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        All bits of the Reserved field shall be statically set to 0 binary.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00157</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The length of the first field of the Entries Array shall be 32 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00158</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The first field of the Entries Array shall carry the amount of bytes of the Entries Array (
        excluding this 32 bit field carrying the length information)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.flushBuffer.001</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00159</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Type 1 Entries shall have the following layout:
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00160</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The length of the Type 1 Entry shall be 16 bytes.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00161</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Type 1 format shall contain the following fields in the following order and sizes:
        Type [8 bits]
        Index 1st option [8 bits]
        Index 2nd option [8 bits]
        of opt 1 [4 bits]
        of opt 2 [4 bits]
        Service ID [16 bits]
        Instance ID [16 bits]
        Major Version [8 bits]
        TTL [24 bits]
        Minor Version [32 bits]
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00162</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Type field of the Type 1 Entry format layout shall carry one of the following values:
        0x00 to encode FindService
        0x01 to encode OfferService and StopOfferService
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_1</srcid><srcstatus/><internalId>1691</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00163</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Index First Option Run" field of the Type 1 Entry format layout shall have a fixed size of
        8 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00164</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Index First Option Run" field of the Type 1 Entry format layout shall carry the index of
        the first option of the first option run of this entry in the option array.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00165</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Index Second Option Run" field of the Type 1 Entry format layout shall have a fixed size
        of 8 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00166</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Index Second Option Run" field of the Type 1 Entry format layout shall carry the index of
        the first option of the second option run of this entry in the option array.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00167</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Number of Option 1" field of the Type 1 Entry format layout shall have a fixed size of 4
        bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00168</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Number of Option 1" of the Type 1 Entry format layout shall carry the number of options
        the first option run uses.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00169</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Number of Option 2" field of the Type 1 Entry format layout shall have a fixed size of 4
        bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00170</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Number of Option 2" field of the Type 1 Entry format layout shall carry the number of
        options the second option run uses.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00172</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service ID field of the Type 1 Entry format shall have a fixed size of 16 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00173</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service ID field of the Type 1 Entry format layout shall carry the Service ID of the
        service, statically configured using the parameter SdServerServiceID and SdClientServiceID,
        depending on being a server or client entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00174</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Instance ID field of the Type 1 Entry format layout shall have a fixed size of 16 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00175</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Instance ID field of the Type 1 Entry format layout shall carry the Instance ID of the
        service, statically configured using the parameter SdServerServiceInstanceID and
        SdClientServiceInstanceID, depending on being a server or client entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00176</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If not a single but all instances are addressed, the Instance ID field of the Type 1 Entry
        format layout shall be set to 0xFFFF.
      </description>
      <comment>
        This requirement is not applicable.
        The SdServerServiceInstanceId and SdClientServiceInstanceId is limited by the configuration to the range 0 to 65534.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00177</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Major Version field of the Type 1 Entry format layout shall have a fixed size of 8 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00178</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Major Version field of the Type 1 Entry format layout shall carry the
        SdServerServiceMajorVersion and SdClientServiceMajorVersion, depending on being a server or
        client entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00179</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The TTL field of the Type 1 Entry format layout shall have a fixed size of 24 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00180</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The TTL field of the Type 1 Entry format layout defines the lifetime of the entry in seconds
        configured using the parameter SdServerTimerTTL and SdClientTimerTTL, except for Stop-Entries,
        which have a TTL of 0.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00181</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Minor Version field of the Type 1 Entry format layout shall have a fixed size of 32 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00182</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Minor Version field of the Type 1 Entry format layout shall carry the
        SdServerServiceMinorVersion and SdClientServiceMinorVersion.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00183</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The length of Type 2 Entries shall be 16 bytes.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00184</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Type 2 format shall contain the following fields in the following order and sizes:
        Type [8 bits]
        Index 1st option [8 bits]
        Index 2nd option [8 bits]
        of opt 1 [4 bits]
        of opt 2 [4 bits]
        Service ID [16 bits]
        Instance ID [16 bits]
        Major Version [8 bits]
        TTL [24 bits]
        Reserved [12 bits]
        Counter [4 bits]
        Eventgroup ID [16 bits]
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00185</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Index First Option Run" field of the Type 2 Entry format layout shall have a fixed size of
        8 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00186</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Index Second Option Run" field of the Type 2 Entry format layout shall have a fixed size
        of 8 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00187</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Index Second Option Run" field of the Type 2 Entry format layout shall carry the index of
        the first option of the second option run of this entry in the option array.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00188</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Number of Option 1" field of the Type 2 Entry format layout shall carry the number of
        options the first option run uses.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00189</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Number of Option 2" field of the Type 2 Entry format layout shall have a fixed size of 4
        bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00190</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Number of Option 2" field of the Type 2 Entry format layout shall carry the number of
        options the second option run uses.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00192</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service ID field of the Type 2 shall have a fixed size of 16 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00193</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service ID field of the Type 2 Entry format layout shall carry the Service ID of the
        eventgroups service, statically configured using the parameter SdServerServiceID and
        SdClientServiceID, depending on being a server or client entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00194</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Instance ID field of the Type 2 Entry format layout shall have a fixed size of 16 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00195</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Instance ID field of the Type 2 Entry format layout shall carry the Instance ID of the
        eventgroups service statically configured using the parameter SdServerServiceInstanceID and
        SdClientServiceInstanceID, depending on being a server or client entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00197</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Major Version field of the Type 2 Entry format layout shall have a fixed size of 8 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00198</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Major Version field of the Type 2 Entry format layout shall carry the
        SdServerServiceMajorVersion and SdClientServiceMajorVersion, depending on being a server or
        client entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00199</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The TTL field of the Type 2 Entry format layout shall have a fixed size of 24 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00200</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The TTL field of the Type 2 Entry format layout defines the lifetime of the entry in seconds
        configured using the parameter SdServerTimerTTL and SdClientTimerTTL, except for Stop- or Nack-
        Entries, which use a TTL of 0.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_1</srcid><srcstatus/><internalId>1701</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00201</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reserved field of the Type 2 Entry format layout shall have a fixed size of 12 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00202</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reserved field, which follows the TTL field of the Type 2 Entry format layout, shall be
        statically set to 0x000.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00203</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Eventgroup ID field of the Type 2 Entry format layout shall have a fixed size of 16 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00204</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Eventgroup ID field of the Type 2 Entry format layout shall carry the ID of an Eventgroup,
        configured using the parameter SdConsumedEventGroupID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00205</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The option format shall contain the following fields in the following order and sizes:
        Length [16 bits]
        Type [8 bits]
        Reserved [8 bits]
        Zero-terminated Configuration String (format e.g. for two configuration items [len]id=value[len]
        id=value[0]
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.Error001</srcid><srcstatus/><internalId>1144</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.Error002</srcid><srcstatus/><internalId>1145</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Rx_Read_Config_Option</srcid><srcstatus/><internalId>1380</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00206</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Length field shall carry the total number of bytes occupied by the configuration option,
        excluding the 16 bit Length field and the 8 bit type flag.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.Error002</srcid><srcstatus/><internalId>1145</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_1</srcid><srcstatus/><internalId>1681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00207</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Type field of the Configuration Option field shall be statically set to 0x01.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_1</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_2</srcid><srcstatus/><internalId>1682</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionKey_0</srcid><srcstatus/><internalId>1710</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00208</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reserved field of the Configuration Option field shall be statically set to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_1</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00209</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Length field of the IPv4 Endpoint Option shall be set to 0x0009.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00210</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Type field of the IPv4 Endpoint Option shall be statically set to 0x04.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00211</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reserved field of the IPv4 Endpoint Option (followed by the IPv4-Address field) shall be
        statically set to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00212</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv4-Address field [32 bits] of the IPv4 Endpoint Option shall be set to the local IP
        address of the relevant Service or Eventgroup.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00213</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reserved field of the IPv4 Endpoint Option shall statically be set to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00214</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Layer 4 Protocol field [8 bits] (L4-Proto) of the IPv4 Endpoint Option shall be set to one
        of the following values, depending on the port specified:
        0x06: TCP
        0x11: UDP
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_7</srcid><srcstatus/><internalId>1614</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00215</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Port Number field [16 bits] of the IPv4 Endpoint Option shall carry the UDP or TCP port
        number for the service instance or Eventgroup.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00216</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Length field [16 bits] of the IPv6 Endpoint Option shall be set to 0x0015.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.MessageError.InvalidIPv6OptionLength</srcid><srcstatus/><internalId>1128</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00217</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Type field [8 bits] of the IPv6 Endpoint Option shall be statically set to 0x06.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00218</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reserved field [8 bits] of the IPv6 Endpoint Option (followed by the IPv6-Address field) of
        the Configuration Option segment shall be statically set to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00219</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv6-Address field [128 bits] of the IPv6 Endpoint Option shall be set to the local IP
        address of the relevant Service or Eventgroup.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00220</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reserved field [8 bits] of the IPv6 Endpoint Option shall statically be set to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00221</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Layer 4 Protocol field [8 bits] (L4-Proto) of the IPv6 Endpoint Option shall be set to one
        of the following values, depending on the port specified:
        0x06: TCP
        0x11: UDP
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00222</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Port Number field [16 bits] of the IPv6 Endpoint Option shall carry the UDP or TCP port
        number for the service instance or Eventgroup.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_703</srcid><srcstatus/><internalId>839</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00223</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The first option run starts with the option referenced by the field Index 1st options and
        references zero to fifteen options.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_FirstOptionRun_0</srcid><srcstatus/><internalId>1639</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_FirstOptionRun_1</srcid><srcstatus/><internalId>1640</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionRuns_0</srcid><srcstatus/><internalId>1643</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00224</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The number of options referenced by the first option run is determined by the field # of opt 1.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_FirstOptionRun_1</srcid><srcstatus/><internalId>1640</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionRuns_0</srcid><srcstatus/><internalId>1643</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00225</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The second option run starts with the option referenced by the field Index 2nd options and
        references zero to fifteen options.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_SecondOptionRun_0</srcid><srcstatus/><internalId>1641</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SecondOptionRun_1</srcid><srcstatus/><internalId>1642</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionRuns_0</srcid><srcstatus/><internalId>1643</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00226</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The number of options referenced by the second option run is determined by the field # of opt 2.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_SecondOptionRun_1</srcid><srcstatus/><internalId>1642</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionRuns_0</srcid><srcstatus/><internalId>1643</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00240</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A FindService entry has the type field set to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueFindService.001</srcid><srcstatus/><internalId>1167</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00253</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A StopOfferService (type 0x01) entry shall set the TTL field to 0x000000.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.002</srcid><srcstatus/><internalId>1170</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00254</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        An OfferService entry shall set the type to 0x01.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.001</srcid><srcstatus/><internalId>1169</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00267</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        All entries concerning Services (FindService, OfferService and StopOfferService shall carry - i.
        e. reference - the options as configured.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.004</srcid><srcstatus/><internalId>1172</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueOfferService.005</srcid><srcstatus/><internalId>1173</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroup.004</srcid><srcstatus/><internalId>1177</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupAck.002</srcid><srcstatus/><internalId>1180</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00281</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A StopOfferService (type 0x01), shall carry - i.e. reference - the same options as the entries
        trying to stop.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.002</srcid><srcstatus/><internalId>1170</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueOfferService.004</srcid><srcstatus/><internalId>1172</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueOfferService.005</srcid><srcstatus/><internalId>1173</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroup.003</srcid><srcstatus/><internalId>1175</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroup.004</srcid><srcstatus/><internalId>1177</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_1</srcid><srcstatus/><internalId>1691</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00289</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Eventgroups entries include:
        SubscribeEventgroup and StopSubscribeEventgroup
        SubscribeEventgroupAck and SubscribeEventgroupNack
      </description>
      <comment>
        This requirement is informational only
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00290</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        All Eventgroup entries shall use the Entry Format Type 2.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00291</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Eventgroup entries shall set the Eventgroup ID to the ID of the Eventgroup (configuration
        parameters SdConsumedEventGroupId and SdEventHandlerEventGroupId)
      </description>
      <comment>
        Evengroup IDs with value 0xFFFF are not configurable according to the range of
        SdEventHandlerEventGroupId and SdConsumedEventGroupId. Therefore this part of the requirement can be ignored.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00292</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Configuration String shall be constructed as follows from the SdServerCapabilityRecord and
        SdClientCapabilityRecord (Eventgroups of Services with ID 0xFFFE shall include the Services
        CapabilityRecord)
        For every SdServerCapabilityRecordKey/ SdServerCapabilityRecordValue or
        SdClientServiceCapabilityRecordKey/ SdClientServiceCapabilityRecordValue pair:
        A config_item_string is constructed of the concatenation of key, "=", and value.
        The length of this config_item_string is written as uint8 to the configuration string.
        The config_item_string is appended to the configuration string.
        Append a 0x00 uint8 at the end. This means no further config_item_string follows.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.Error001</srcid><srcstatus/><internalId>1144</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.Error002</srcid><srcstatus/><internalId>1145</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.Error003</srcid><srcstatus/><internalId>1146</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.ConfigOption.Hostname</srcid><srcstatus/><internalId>1164</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.ConfigOption.CapabilityRecordKey</srcid><srcstatus/><internalId>1165</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.ConfigOption.CapabilityRecordValue</srcid><srcstatus/><internalId>1166</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00293</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Non-SOME/IP-Services exist, that are not identified by a unique 16 Bit Service ID but a unique
        value of the key otherserv. These services use the Service ID 0xFFFE and must always carry a
        configuration option with an otherserv record. ECUs receiving an entry with Service ID 0xFFFE
        shall use the configuration option and the otherserv record within in order to identify the
        relevant Service or Eventgroup configuration item.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_15</srcid><srcstatus/><internalId>1491</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00294</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        All entries concerning Services (FindService, OfferService, StopOfferService) shall be of Entry
        Format Type 1.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_1</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00295</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        An Instance ID of 0xFFFF shall mean any possible instances and are not allowed for OfferService
        and StopOfferService entries.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.001</srcid><srcstatus/><internalId>1026</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Find.003</srcid><srcstatus/><internalId>1095</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00296</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        FindService entries shall carry Service ID, Service Instance ID, Major Version, and Minor
        Version as configured in SdClientServiceID, SdClientServiceInstanceID,
        SdClientServiceMajorVersion, and SdClientServiceMinorVersion.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00297</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        OfferService and StopOfferService shall carry Service ID, Service Instance ID, Major Version,
        Minor Version, and as configured in SdServerServiceID, SdServerServiceInstanceID,
        SdServerServiceMajorVersion, and SdServerServiceMinorVersion.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00298</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        FindService entries shall carry the TTL as configured in SdClientTimerTTL.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00299</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        OfferService entries shall carry the TTL as configured in SdServerTimerTTL.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.003</srcid><srcstatus/><internalId>1171</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00300</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Eventgroup entries shall set the Reserved fields to 0x00 and 0x000.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00301</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        SubscribeEventgroup, and StopSubscribeEventgroup entries shall set the Service IDs, Service
        Instance IDs, and Eventgroup IDs based on the configuration (configuration parameters
        SdClientServiceId and SdClientServiceInstanceId)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00303</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Instance ID shall not be set to 0xFFFF for any "Instance"
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.ECUC_SD_00011</srcid><srcstatus/><internalId>33</internalId></linkedfrom><linkedfrom><srcid>Sd.ECUC_SD_00022</srcid><srcstatus/><internalId>36</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00304</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        SubscribeEventgroup entries shall have the TTL field set to the configured value (configuration
        parameter SdClientTimerTTL of SdConsumedEventGroup) and the SubscribeEventgroupAck entry shall
        use the TTL value of the SubscribeEventgroup entry it acknowledges.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00306</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A StopSubscribeEventgroup (type 0x06), and SubscribeEventgroupNack (type 0x07) entry shall set
        the TTL field to 0x000000.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00307</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Eventgroup entries shall carry the options as configured.
      </description>
      <comment>
        This requirement is informational only
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00312</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A SubscribeEventgroup entry shall set the type to 0x06.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_2</srcid><srcstatus/><internalId>1693</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00313</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A StopSubscribeEventgroup entry shall set the type to 0x06.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroup.005</srcid><srcstatus/><internalId>1178</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00314</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A SubscribeEventgroupAck entry shall set the type to 0x07.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupAck.003</srcid><srcstatus/><internalId>1181</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00315</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A SubscribeEventgroupAck entry shall set the TTL field to the value of the SubscribeEventgroup
        entry, it acknowledges.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.009</srcid><srcstatus/><internalId>1105</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00316</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A SubscribeEventgroupNack entry shall set the type to 0x07.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupNack.002</srcid><srcstatus/><internalId>1184</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupNackUnknown.002</srcid><srcstatus/><internalId>1187</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00317</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the following conditions apply, the Initial Wait Phase for this configured Server Service
        Instance shall be entered:
        Sd_Init() has been called
        SdServerService state was set to SD_SERVER_SERVICE_AVAILABLE (via Sd_ServerServiceSetState() or
        Sd_ServiceGroupStart(
        Sd_LocalIpAddrAssignmentChg() with state "TCPIP_IPADDR_STATE_ASSIGNED" has been called for the
        first IpAddrId associated with the SdInstanceTxPdu.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.EB.SWS_SD_00317</srcid><srcstatus/><internalId>644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00318</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When entering the Initial Wait Phase, a random timer shall be started, using a random value
        within the configured range of SdServerTimerInitialOfferDelayMin and
        SdServerTimerInitialOfferDelayMax.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_5</srcid><srcstatus/><internalId>1530</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_6</srcid><srcstatus/><internalId>1531</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00319</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a FindService Entry is received within the Initial Wait Phase for this Server Service
        Instance, it shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.InitialWait.Ev.006</srcid><srcstatus/><internalId>1067</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Ignore</srcid><srcstatus/><internalId>1084</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Find.002</srcid><srcstatus/><internalId>1094</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00320</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SubscribeEventgroup Entry or StopSubscribeEventgroup Entry are received within the Initial
        Wait Phase (or other phases) for an Event Handler of this Server Service Instance, it shall
        only be processed within the Service Discovery. Please refer to the according sequence diagrams
        and section [REF]
      </description>
      <comment>
        It is understood that SubscribeEventgroup and StopSubscribeEventgroup entries will be ignored in the Initial Wait phase.
               Rationale:
               SubscribeEventgroup entries shall be sent by the Client as response to Offer entries.
               In the Initialwait phase we have not yet sent an Offer entry.
               So every received SubscribeEventgroup and StopSubscribeEventgroup entry should be considered invalid and discarded.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.InitialWait.Ev.007</srcid><srcstatus/><internalId>1068</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Ignore</srcid><srcstatus/><internalId>1084</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00321</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the calculated random timer based on the min and max values
        SdServerTimerInitialOfferDelayMin and SdServerTimerInitialOfferDelayMax expires, the first
        OfferService entry shall be sent out.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.InitialWait.Ev.004</srcid><srcstatus/><internalId>1065</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.InitialWait.Ev.005</srcid><srcstatus/><internalId>1066</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00323</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdServerService is set to a state other than SD_SERVER_SERVICE_AVAILABLE (via
        Sd_ServerServiceSetState() or Sd_ServiceGroupStop()) while being in Initial Wait Phase:
        Enter the Down Phase.
        Set all associated EventHandler to SD_EVENT_HANDLER_RELEASED and report it to the BswM by
        calling the API BswM_Sd_EventHandlerCurrentState.
        Cancle all relevant timers for service instance (see SWS_SD_00318)
      </description>
      <comment>
        It is understood that BswM_Sd_EventHandlerCurrentState should not be called during this transition
               Rationale:
               According to SWS_SD_00338 BswM_Sd_EventHandlerCurrentState shall be called only for EventHandler that have been reported as REQUESTED before.
               According to our understanding of SWS_SD_00320 SubscribeEventgroup entries will be discarded in Intial Wait Phase.
               As consequence of this there should be no Eventgroups requested, that could be released.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.InitialWait.Ev.001</srcid><srcstatus/><internalId>1062</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00325</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If Sd_LocalIpAddrAssignmentChg() is called with a state other than "TCPIP_IPADDR_STATE_ASSIGNED"
        while being in Initial Wait Phase, this phase shall be left and the Down Phase shall be entered.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.InitialWait.Ev.002</srcid><srcstatus/><internalId>1063</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.InitialWait.Ev.003</srcid><srcstatus/><internalId>1064</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00329</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Repetition Phase is entered, the Service Discovery shall wait
        SdServerTimerInitialOfferRepetitionBaseDelay and send an OfferService Entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Repetition.Ev.003</srcid><srcstatus/><internalId>1072</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00330</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Initial Wait Phase is entered, the routing of the Server Service shall be enabled. See
        SdServerServiceActivationRef of this Server Service Instance.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.ProvidedMethodRouting</srcid><srcstatus/><internalId>1085</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00331</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the Repetition Phase up to SdServerTimerInitialOfferRepetitionsMax OfferService Entries
        shall be sent with doubling intervals (BaseDelay, first OfferService Entries, 2x BaseDelay,
        second OfferService Entries, 4x BaseDelay, third OfferService Entries)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Repetition.Ev.003</srcid><srcstatus/><internalId>1072</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Repetition.Ev.004</srcid><srcstatus/><internalId>1073</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00332</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Service Discovery Module receives a FindService Entry, the following step(s) shall be
        performed in the following order:
        Send an "OfferService Entry" considering the appropriate delay (see chapter [REF]) without
        changing the current counter value and without influencing the current running repetition timer.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Find.003</srcid><srcstatus/><internalId>1095</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00333</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Service Discovery Module receives a "SubscribeEventgroup" entry, the following step(s)
        shall be performed in the following order:
        Send a SubscribeEventgroupAck / Nack entry using Unicast considering the appropriate delay (see
        chapter [REF]) without changing the current counter value and without influencing the current
        running repetition timer.
        Call the BswM with the API BswM_Sd_EventHandlerCurrentState() with state
        SD_EVENT_HANDLER_REQUESTED only if the state for this EventHandler changed (i.e. has not been
        SD_EVENT_HANDLER_REQUESTED)
        Start the TTL timer according to the value received via the SubscribeEventgroup Entry.
      </description>
      <comment>
        The SubscribeEventgroupAck entries are transmitted in a single Sd message after processing all entries of the received Sd message.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_1</srcid><srcstatus/><internalId>1572</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_1</srcid><srcstatus/><internalId>1616</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00334</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Service Discovery Module receives a StopSubscribeEventgroup Entry, the following step(s)
        shall be performed in the following order:
        Stop the TTL timer for this client
        Update State
        If this has been the last subscribed client, report "SD_EVENT_HANDLER_RELEASED" to the BswM by
        calling the API BswM_Sd_EventHandlerCurrentState(
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventStopSubscribe</srcid><srcstatus/><internalId>1582</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00336</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the amount of cyclically sent OfferServices within the Repetition Phase equals the amount
        of SdServerTimerInitialOfferRepetitionsMax, the Main Phase shall be entered.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Repetition.Ev.004</srcid><srcstatus/><internalId>1073</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00338</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a ServerService is set to a state other than SD_SERVER_SERVICE_AVAILABLE (i.e.
        SD_SERVER_SERVICE_DOWN) (via Sd_ServerServiceSetState() or Sd_ServiceGroupStop()) while being
        in Repetition Phase:
        Leave this phase and enter the Down Phase.
        Sent a StopOfferService.
        All associated EventHandler which state is not SD_EVENT_HANDLER_RELEASED shall be changed to
        SD_EVENT_HANDLER_RELEASED and indicated to the BswM by calling the API
        BswM_Sd_EventHandlerCurrentState(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Repetition.Ev.001</srcid><srcstatus/><internalId>1069</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00340</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If Sd_LocalIpAddrAssignmentChg()is called with a state other than "TCPIP_IPADDR_STATE_ASSIGNED"
        while being in Repetition Phase, this phase shall be left and the Down Phase shall be entered.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Repetition.Ev.002</srcid><srcstatus/><internalId>1070</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Repetition.Ev.008</srcid><srcstatus/><internalId>1071</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00341</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the state SD_SERVER_SERVICE_DOWN is set by Sd_ServerServiceSetState() or
        Sd_ServiceGroupStop() in Repetition Phase, the routing of this Server Service Instance shall be
        disabled. See SdServerServiceActivationRef of this Server Service Instance.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.ProvidedMethodRouting</srcid><srcstatus/><internalId>1085</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00342</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery Module shall stay in the Main Phase for the configured Server Service as
        long as the following conditions apply:
        Server Service is in state "SD_SERVER_SERVICE_AVAILABLE" (indicated by a call of
        Sd_ServerServiceSetState() or Sd_ServiceGroupStart(
        IP address is assigned and can be used (i.e. Sd_LocalIpAddrAssignmentChg has been called with
        status TCPIP_IPADDR_STATE_ASSIGNED)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Ignore</srcid><srcstatus/><internalId>1009</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00343</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Service Discovery Module receives a FindService Entry the following step shall be
        performed:
        Send an "OfferService Entry" considering the appropriate delay (see chapter [REF]
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Main.Ev.005</srcid><srcstatus/><internalId>1081</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00344</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Service Discovery Module receives a "SubscribeEventgroup", the following step(s) shall
        be performed in the following order:
        Send a SubscribeEventgroupAck / Nack entry using Unicast considering the appropriate delay (see
        chapter [REF]) without influencing the current running main phase timer.
        Report to the BswM SD_EVENT_HANDLER_REQUESTED by calling the API
        BswM_Sd_EventHandlerCurrentState(
        Start the TTL timer according to the value received via the "SubscribeEventgroup"
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Main.Ev.006</srcid><srcstatus/><internalId>1082</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00345</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Service Discovery Module receives a StopSubscribeEventgroup", the following step(s)
        shall be performed in the following order:
        Stop the TTL timer and remove it from the notification list
        If no other client is subscribed to this Eventgroup anymore, enter the State "
        SD_EVENT_HANDLER_RELEASED" and report it to the BswM by calling the API
        BswM_Sd_EventHandlerCurrentState () with state SD_SERVER_SERVICE_AVAILABLE.
      </description>
      <comment>
        It is understood that SD_EVENT_HANDLER_RELEASED shall be reported to BswM instead of SD_SERVER_SERVICE_AVAILABLE.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Main.Ev.007</srcid><srcstatus/><internalId>1083</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00347</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the API LocalIpAddrAssignmentChg has been called with a state other than
        TCPIP_IPADDR_STATE_ASSIGNED,
        The Service Discovery Module shall leave the Main Phase and enter the DOWN Phase
        All EventHandler which are not in state SD_EVENT_HANDLER_RELEASED shall be set to
        SD_EVENT_HANDLER_RELEASED and be indicated to the BswM module by calling the API
        BswM_Sd_EventHandlerCurrentState
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Main.Ev.002</srcid><srcstatus/><internalId>1078</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Main.Ev.003</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00348</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SdServerService is set to state "SD_SERVER_SERVICE_DOWN" (indicated by a call of
        Sd_ServerServiceSetState() or Sd_ServiceGroupStop()) while the IP address is still assigned (i.
        e. Sd_LocalIpAddrAssignmentChg has been called with state TCPIP_IPADDR_STATE_ASSIGNED), the
        Service Discovery module shall
        send a StopOfferService
        enter the DOWN Phase
        all subscriptions of the eventgroup(s) of this service instance shall be deleted and
        SD_EVENT_HANDLER_RELEASED and reported to BswM using the API BswM_Sd_EventHandlerCurrentState
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Main.Ev.001</srcid><srcstatus/><internalId>1077</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00349</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Main Phase is left, the routing of this Server Service Instance shall be disabled. See
        SdServerServiceActivationRef of this Server Service Instance.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.ProvidedMethodRouting</srcid><srcstatus/><internalId>1085</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00350</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the following conditions apply, the Initial Wait Phase for this configured Client Service
        Instance shall be entered:
        Sd_Init() has been called.
        SdClientService was set to state SD_CLIENT_SERVICE_REQUESTED (indicated by a call of
        Sd_ClientServiceSetState() or Sd_ServiceGroupStart() or SdClientServiceAutoRequired = TRUE)
        Sd_LocalIpAddrAssignmentChg() with state "TCPIP_IPADDR_STATE_ASSIGNED" has been called for the
        first IpAddrId associated with the SdInstanceTxPdu.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.EB.SWS_SD_00350</srcid><srcstatus/><internalId>645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00351</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        This Client Service Instance shall stay in the Initial Wait Phase for a time within the
        configured range of SdClientTimerInitialFindDelayMin and SdClientTimerInitialFindDelayMax
        unless an OfferService entry for this Client Service Instance is received or this random timer
        expires.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.100</srcid><srcstatus/><internalId>954</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.101</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.103</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.111</srcid><srcstatus/><internalId>958</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00352</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If an OfferService Entry for this Client Service Instance is received within the Initial Wait
        Phase,
        The calculated random timer, which has been started when entering the Initial Wait Phase, shall
        be canceled.
        If received TTL is not equal to the max value, set the TTL timer for this entry to the received
        TTL value.
        Open TCP connection if SdClientServiceTcpRef is configured and was not opened before.
        Leave the Initial Wait Phase Enter the Main Phase.
      </description>
      <comment>
        Note1: AUTOSAR Main Phase = WAIT_SOCON + AVAILABE + MAIN phase in EB state machine.
         Note2: In this case the case the WAIT_SOCON phase will be entered.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1376</srcid><srcstatus/><internalId>744</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3426</srcid><srcstatus/><internalId>791</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3435</srcid><srcstatus/><internalId>793</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.113</srcid><srcstatus/><internalId>956</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_MAIN_0</srcid><srcstatus/><internalId>1404</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00353</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the calculated random timer based on the parameters SdClientTimerInitialFindDelayMin and
        SdClientTimerInitialFindDelayMax expires (i.e. no OfferService has been received within this
        timespan), the following shall be done in the following order:
        FindService Entry shall be sent.
        If the SdClientTimerInitialFindRepetitionsMax&gt;0, enter the Repetition Phase
        If the SdClientTimerInitialFindRepetitionsMax=0, enter the Main Phase
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.100</srcid><srcstatus/><internalId>954</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.101</srcid><srcstatus/><internalId>955</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00354</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the API Sd_Init() is called while being in Initial Wait Phase, the Down Phase shall be
        entered.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.Reinit</srcid><srcstatus/><internalId>662</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00355</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SdClientService it set to state SD_CLIENT_SERVICE_RELEASED (by call of
        Sd_ClientServiceSetState() or Sd_ServiceGroupStop()) while being in Initial Wait Phase, this
        phase shall be left and the Service shall enter Down Phase.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.103</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.111</srcid><srcstatus/><internalId>958</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00357</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If Sd_LocalIpAddrAssignmentChg() is called with a state other than "TCPIP_IPADDR_STATE_ASSIGNED"
        while being in Initial Wait Phase, the Down Phase shall be entered.
      </description>
      <comment>
        BswM_Sd_ClientServiceCurrentState and BswM_Sd_ConsumedEventGroupCurrentState shall not be called,
        since the ClientService and the ConsumedEventgroup have not yet been reported as AVAILABLE.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.104</srcid><srcstatus/><internalId>959</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.105</srcid><srcstatus/><internalId>960</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00358</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Repetition Phase is entered, the Service Discovery Module shall start the timer
        SdClientTimerInitialFindRepetitionsBaseDelay
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.100</srcid><srcstatus/><internalId>954</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00363</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the Repetition Phase up to SdClientTimerInitialFindRepetitionsMax FindServer entries shall
        be sent with doubling intervals (BaseDelay, first FindService Entry, 2x BaseDelay, second
        FindService Entry, 4x BaseDelay, third FindService Entry,
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Repetition.Ev.200</srcid><srcstatus/><internalId>966</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Repetition.Ev.201</srcid><srcstatus/><internalId>967</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00365</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Service Discovery Module receives an OfferService Entry while the current state
        SD_CLIENT_SERVICE_REQUESTED is for this Client Service Instance, the following step(s) shall be
        performed in the following order:
        Cancel the repetition timer.
        If received TTL is not equal to the max value, set the TTL timer for this entry to the received
        TTL value.
        Open TCP connection if SdClientServiceTcpRef is configured and was not opened before.
        Leave the Repetition Phase immediately and enter the Main Phase.
      </description>
      <comment>
        Note1: AUTOSAR Main Phase = WAIT_SOCON + AVAILABE + MAIN phase in EB state machine
         Note2: In this case the case the WAIT_SOCON phase will be entered.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1377</srcid><srcstatus/><internalId>745</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3427</srcid><srcstatus/><internalId>792</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3436</srcid><srcstatus/><internalId>794</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Repetition.Ev.212</srcid><srcstatus/><internalId>968</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_WAIT_SOCON_1</srcid><srcstatus/><internalId>1415</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00367</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Service Discovery Module receives a StopOfferService Entry, the following step(s) shall
        be performed in the following order:
        Stop the TTL timers of this Client Service Instance and all related Consumed Eventgroups.
        Report this Client Service as DOWN if it was reported AVAILABLE before (call
        BswM_Sd_ClientServiceCurrentState with SD_CLIENT_SERVICE_DOWN and the Client Service's handle
        ID)
        Report all Consumed Eventgroups as DOWN that were reported AVAILABLE before (call
        BswM_Sd_ConsumedEventGroupCurrentState with SD_CONSUMED_EVENTGROUP_DOWN and the Consumed
        Eventgroup's handle ID)
        If SdSubscribeEventgroupRetryEnable is set to TRUE and if SdSubscribeEventgroupRetryMax is
        greater 0, cancel the corresponding client service subscription retry delay timer and reset
        subscription retry counter of all corresponding Eventgroups to 0.
        Close all Socket Connections associated with this Client Service Instance that have been opened
        before.
        Stay in Main Phase and do not send FindService entries.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Available.Ev.401</srcid><srcstatus/><internalId>991</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_STOP_OFFER</srcid><srcstatus/><internalId>1353</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_TTL_too_Short</srcid><srcstatus/><internalId>1357</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SubscriptionDelayTimer</srcid><srcstatus/><internalId>669</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00369</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        After sending the maximum amount of repetitions (defined by
        SdClientTimerInitialFindRepetitionsMax) of FindService entries, the Repetition Phase shall be
        left and the Main Phase shall be entered.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Repetition.Ev.201</srcid><srcstatus/><internalId>967</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00371</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdClientService it set to state SD_CLIENT_SERVICE_RELEASED (by call of
        Sd_ClientServiceSetState() or Sd_ServiceGroupStop()) while being in Repetition Phase, this
        phase shall be left and the service instance shall enter Down Phase.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Repetition.Ev.203</srcid><srcstatus/><internalId>969</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00373</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If Sd_LocalIpAddrAssignmentChg() is called with a state other than "TCPIP_IPADDR_STATE_ASSIGNED"
        while being in Repetition Phase the Down Phase shall be entered.
      </description>
      <comment>
        It is understood that this requirements describes the expected behaviour in the Repetition Phase.
               BswM_Sd_ClientServiceCurrentState and BswM_Sd_ConsumedEventGroupCurrentState shall not be called,
               since the ClientService and the ConsumedEventgroup have not yet been reported as AVAILABLE.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Repetition.Ev.204</srcid><srcstatus/><internalId>970</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Repetition.Ev.205</srcid><srcstatus/><internalId>971</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Repetition.Ev.206</srcid><srcstatus/><internalId>972</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Repetition.Ev.207</srcid><srcstatus/><internalId>973</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00375</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery Module shall stay in the Main Phase as long as the following conditions
        apply:
        Client Service was set to state "SD_CLIENT_SERVICE_REQUESTED" (indicated by a call of
        Sd_ClientServiceSetState() or Sd_ServiceGroupStart(
        IP address assigned and can be used (i.e. Sd_LocalIpAddrAssignmentChg has been called with
        status TCPIP_IPADDR_STATE_ASSIGNED)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.108</srcid><srcstatus/><internalId>961</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.109</srcid><srcstatus/><internalId>962</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.110</srcid><srcstatus/><internalId>963</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.112</srcid><srcstatus/><internalId>964</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00376</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Service Discovery Module receives an OfferService Entry, the following step(s) shall be
        performed in the following order:
        If received TTL is not equal to the max value, update the timer by the received TTL value.
        Open TCP connection if SdClientServiceTcpRef is configured and was not opened before.
        For each currently requested Consumed Eventgroup of this Client Service Instance (Consumed
        Eventgroups are requested using Sd_ConsumedEventGroupSetState and with state
        SD_CONSUMED_EVENTGROUP_REQUESTED or automatically on startup if SdConsumedEventGroupAutoRequire
        is configured to true), the following shall be done in exactly this order:
        StopSubscribeEventgroup entry shall be sent out, if the last SubscribeEventgroup entry was sent
        as reaction to an OfferService entry received via Multicast, it was never answered with a
        SubscribeEventgroupAck, and the current OfferService entry was received via Multicast.
        A SubscribeEventgroup entry shall be sent out.
        If SdSubscribeEventgroupRetryEnable is set to TRUE and if SdSubscribeEventgroupRetryMax is
        greater 0, the Eventgroup subscription retry counter shall be reset to 1.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1378</srcid><srcstatus/><internalId>746</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_0</srcid><srcstatus/><internalId>1456</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_1</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_2</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_3</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_4</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_5</srcid><srcstatus/><internalId>1461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00377</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Service Discovery Module receives a SubscribeEventgroupAck fitting a Consumed Eventgroup
        that is not yet available, the following steps shall be performed in the following order:
        If the SubscribeEventgroupAck references a Multicast Endpointoption
        The relevant Socket Connection Group shall be identified using
        SdConsumedEventGroupMulticastGroupRef with the local Address and Port of the Multicast Endpoint
        Option or set one up using SoAd_RequestIpAddrAssignment(
        If SdSetRemAddrOfClientRxMulticastSoCon is set to TRUE, the relevant Socket Connection of this
        service shall be identified using the Address and Port of the Endpoint Option referenced in the
        Offer entry of this service or shall be set up (SoAd_SetUniqueRemoteAddr()), if not existed
        before.
        If no Wildcard Socket Connection is left, SD_E_OUT_OF_RES shall be reported.
        If SdSetRemAddrOfClientRxMulticastSoCon is set to FALSE, a Wildcard Socket Connection of this
        service shall be used without updating the according remote Address, i.e. Wildcard of this
        Socket Connection shall be kept.
        If no Wildcard Socket Connection is left, SD_E_OUT_OF_RES shall be reported.
        The relevant Routing Group shall be identified by following
        SdConsumedEventGroupMulticastActivationRef.
        Call SoAd_EnableSpecificRouting() with the SocketID and the RoutingGroupID.
        Call BswM_Sd_ConsumedEventGroupCurrentState with SD_CONSUMED_EVENTGROUP_AVAILABLE if the
        datapath was set up successfully.
        Setup the TTL timer with the TTL of the SubscribeEventgroupAck entry if the datapath was set up
        successfully.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE</srcid><srcstatus/><internalId>1014</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SetRemAddrOfClientRxMulticastSoCon</srcid><srcstatus/><internalId>682</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00380</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery Module shall leave the Main Phase and enter the state
        SD_CLIENT_SERVICE_DOWN if at least one of the listed conditions described in SWS_SD_00375 does
        not apply any more.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Main.Ev.301</srcid><srcstatus/><internalId>981</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Main.Ev.302</srcid><srcstatus/><internalId>982</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Main.Ev.303</srcid><srcstatus/><internalId>983</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Main.Ev.304</srcid><srcstatus/><internalId>984</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Main.Ev.305</srcid><srcstatus/><internalId>985</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00381</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SdClientService is set to state "SD_CLIENT_SERVICE_RELEASED" (indicated by a call of
        Sd_ClientServiceSetState() or Sd_ServiceGroupStop()) while all other conditions listed in
        SWS_SD_00375 still apply, the Service Discovery module shall perform the following steps:
        Enter the Down Phase and indicate the state SD_CLIENT_SERVICE_DOWN to the BswM by calling the
        API BswM_Sd_ClientServiceCurrentState
        For all subscribed eventgroups of this Client Service,
        a StopSubscribeEventgroup shall be sent
        the status shall be set to SD_CONSUMED_EVENTGROUP_DOWN and reported to BswM by calling the API
        BswM_Sd_ConsumedEventGroupCurrentState(
        If SdSubscribeEventgroupRetryEnable is set to TRUE and if SdSubscribeEventgroupRetryMax is
        greater 0, cancel the corresponding client service subscription retry delay timer and reset
        subscription retry counter of all corresponding Eventgroups to 0.
      </description>
      <comment>
        It is understood that SD_CONSUMED_EVENTGROUP_DOWN shall be reported instead of SD_CONSUMED_EVENTGROUP_REQUESTED.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Available.Ev.403</srcid><srcstatus/><internalId>993</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN</srcid><srcstatus/><internalId>1017</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_Release_ClientService</srcid><srcstatus/><internalId>1354</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SubscriptionDelayTimer</srcid><srcstatus/><internalId>669</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00382</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Main Phase is left,
        The API SoAd_DisableSpecificRouting()shall be called for all Socket Connections associated with
        this Client Service ID that have been opened before.
        Close all Socket Connections associated with this Client Service Instance that have been opened
        before.
      </description>
      <comment>
        Disbale only routings for SocketConnections that have been opened before.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Available.Ev.401</srcid><srcstatus/><internalId>991</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Available.Ev.402</srcid><srcstatus/><internalId>992</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Available.Ev.403</srcid><srcstatus/><internalId>993</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Available.Ev.404</srcid><srcstatus/><internalId>994</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Available.Ev.405</srcid><srcstatus/><internalId>995</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Available.Ev.406</srcid><srcstatus/><internalId>996</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Available.Ev.407</srcid><srcstatus/><internalId>997</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0002.Client.ServiceRelocation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>908</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00385</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Type field of the Type 2 Entry format layout shall carry one of the following values,
        depending on the purpose of the message sent:
        0x06 to encode SubscribeEventgroup and StopSubscribeEventgroup
        0x07 to encode SubscribeEventgroupAck and SubscribeEventgroupNack
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroup.005</srcid><srcstatus/><internalId>1178</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupAck.003</srcid><srcstatus/><internalId>1181</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupNack.002</srcid><srcstatus/><internalId>1184</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupNackUnknown.002</srcid><srcstatus/><internalId>1187</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00386</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Index First Option Run" field of the Type 2 Entry format layout shall carry the index of
        the first option of the first option run of this entry in the option array.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00387</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The "Number of Option 1" field of the Type 2 Entry format layout shall have a fixed size of 4
        bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00390</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Length field [16 bits] of the IPv4 Multicast Option shall be set to 0x0009.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00391</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Type field [8 bits] of the IPv4 Multicast Option shall be statically set to 0x14.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00392</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reserved field [8 bits] of the IPv4 Multicast Option (followed by the IPv4-Address field)
        of the Configuration Option segment shall be statically set to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00393</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv4-Address field [32 bits] of the IPv4 Multicast Option shall be set to the Multicast IP
        address of the Eventgroup.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00394</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reserved field [8 bits] of the IPv4 Multicast Option shall statically be set to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00395</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Layer 4 Protocol field [8 bits] (L4-Proto) of the IPv4 Multicast Option shall be set to
        0x11 (UDP)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.EndpointOption.MulticastNonUDP</srcid><srcstatus/><internalId>1142</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_5</srcid><srcstatus/><internalId>1632</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00396</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Port Number field [16 bits] of the IPv4 Multicast Option shall carry the port number for
        transporting Multicast Events of the Eventgroup.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00397</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Length field [16 bits] of the IPv6 Multicast Option shall be set to 0x0015.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.MessageError.InvalidIPv6OptionLength</srcid><srcstatus/><internalId>1128</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00398</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Type field [8 bits] of the IPv6 Multicast Option shall be statically set to 0x16.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00399</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reserved field [8 bits] of the IPv6 Multicast Option (followed by the IPv6-Address field)
        shall be statically set to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00400</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        It shall be possible to configure the Service Discovery module as an optional AUTOSAR BSW
        Module. Please refer to the SystemTemplate for configuration.
      </description>
      <comment>
        This requirement is informational only
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00402</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module shall store all IP address assignment states referenced by server
        and client Service Instances.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Data.Runtime</srcid><srcstatus/><internalId>918</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00403</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the TTL timer (contained in TTL field find or Subscribe entry) expires in state "
        SD_EVENT_HANDLER_REQUESTED", enter the state SD_EVENT_HANDLER_RELEASED and report it to the
        BswM by calling the BswM_Sd_EventHandlerCurrentState(
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ConsumedEventgroup.AVAILABLE_MAIN</srcid><srcstatus/><internalId>1016</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_2</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_multipleMulticastSubscribers</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_multipleSubscribers</srcid><srcstatus/><internalId>1579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00404</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv6-Address field [128 bits] of the IPv6 Multicast shall be set to the Multicast IP
        address of the Eventgroup.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00405</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | Sd_ClientServiceSetStateType
        Kind | Enumeration
        Range | SD_CLIENT_SERVICE_RELEASED | 0x00
        SD_CLIENT_SERVICE_REQUESTED | 0x01
        Description | This type defines the Client states that are reported to the BswM using the
        expected API Sd_ClientServiceSetState.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd_Types.h_65</srcid><srcstatus/><internalId>702</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00407</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled and the Service Discovery module has not been
        initialized using Sd_Init(), the Sd_ServerServiceSetState function shall raise the development
        error code SD_E_UNINIT and the Sd_ServerServiceSetState function shall return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_NoInit</srcid><srcstatus/><internalId>1289</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.DevError.SD_E_UNINIT</srcid><srcstatus/><internalId>670</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00408</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the parameter ServerServiceState has an undefined value, the Service Discovery module shall
        not store the requested mode and return E_NOT_OK. In case development error detection is
        enabled, the Service Discovery module shall additionally raise the development error code
        SD_E_INV_MODE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_InvMode</srcid><srcstatus/><internalId>1298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00409</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | Sd_ClientServiceSetState
        Syntax
        Std_ReturnType Sd_ClientServiceSetState (uint16 ClientServiceHandleId,
        Sd_ClientServiceSetStateType ClientServiceState)
        Service ID [hex] | 0x08
        Sync/Async | Asynchronous
        Reentrancy | Reentrant
        Parameters (in) | ClientServiceHandleId | ID to identify the Client Service Instance.
        ClientServiceState | The state the Client Service Instance shall be set to.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: State acceptedE_NOT_OK: State not accepted
        Description | This API function is used by the BswM to set the Client Service Instance state.
        Available via | Sd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd.h_358</srcid><srcstatus/><internalId>695</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00410</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled and the Service Discovery module has not been
        initialized using Sd_Init(), the Sd_ClientServiceSetState function shall raise the development
        error code SD_E_UNINIT and the Sd_ClientServiceSetState function shall return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_NoInit</srcid><srcstatus/><internalId>1290</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.DevError.SD_E_UNINIT</srcid><srcstatus/><internalId>670</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00411</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the parameter ClientServiceState has an undefined value, the Service Discovery module shall
        not store the requested mode and return E_NOT_OK. In case development error detection is
        enabled, the Service Discovery module shall additionally raise the development error code
        SD_E_INV_MODE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_InvMode</srcid><srcstatus/><internalId>1300</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00412</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | Sd_LocalIpAddrAssignmentChg
        Syntax
        void Sd_LocalIpAddrAssignmentChg (SoAd_SoConIdType SoConId, TcpIp_IpAddrStateType State)
        Service ID [hex] | 0x05
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SoConIds. Non Reentrant for the same SoConId.
        Parameters (in) | SoConId | socket connection index specifying the socket connection where the
        IP address assigment has changed.
        State | state of IP address assignment.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | This function gets called by the SoAd if an IP address assignment related to a
        socket connection changes (i.e. new address assigned or assigned address becomes invalid)
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd_Cbk.h_53</srcid><srcstatus/><internalId>697</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00413</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Reserved field [8 bits] of the IPv6 Multicast Option shall statically be set to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00414</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Layer 4 Protocol field [8 bits] (L4-Proto) of the IPv6 Multicast Option shall be set 0x11 (
        UDP)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00415</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Port Number field [16 bits] of the IPv6 Multicast Option shall carry the port number for
        transporting Multicast Events of the Eventgroup.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_704</srcid><srcstatus/><internalId>840</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00416</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        OfferService entries shall always reference at least an IPv4 or IPv6 Endpoint Option to signal
        how the service is reachable.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.004</srcid><srcstatus/><internalId>1172</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueOfferService.005</srcid><srcstatus/><internalId>1173</internalId></linkedfrom><linkedfrom><srcid>Sd.EB.Config.Server001</srcid><srcstatus/><internalId>1199</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00417</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        For each L4 protocol needed for the service (i.e. UDP and/or TCP) an IPv4 Endpoint option shall
        be added if IPv4 is supported.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.004</srcid><srcstatus/><internalId>1172</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueOfferService.005</srcid><srcstatus/><internalId>1173</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Tcp</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Subscribe_Nack</srcid><srcstatus/><internalId>1320</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00418</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        For each L4 protocol needed for the service (i.e. UDP and/or TCP) an IPv6 Endpoint option shall
        be added if IPv6 is supported.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Tcp</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Subscribe_Nack</srcid><srcstatus/><internalId>1320</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00419</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IP addresses and port numbers of the Endpoint Options shall also be used for transporting
        events and notification events.
      </description>
      <comment>
        This requirement is informational only
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00420</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the case of UDP this information is used for the source address and the source port of the
        events and notification events.
      </description>
      <comment>
        This requirement is informational only
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00421</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the case of TCP this is the IP address and port the client needs to open a TCP connection to
        in order to receive events using TCP.
      </description>
      <comment>
        This requirement is informational only
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00422</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The StopOfferService entry type shall be used to stop offering Service Instances.
      </description>
      <comment>
        This requirement is informational only
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00423</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A StopOfferService entry shall set the type to 0x01.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_1</srcid><srcstatus/><internalId>1691</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00424</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        StopOfferService entries shall set the entry fields exactly like the OfferService entry they
        are stopping, except TTL.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_1</srcid><srcstatus/><internalId>1691</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00425</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        TTL shall be set to 0x000000.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.002</srcid><srcstatus/><internalId>1170</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_1</srcid><srcstatus/><internalId>1691</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00426</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The TTL shall be set to 0x000000.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_1</srcid><srcstatus/><internalId>1695</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00427</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        StopSubscribeEventgroup entries shall set the entry fields exactly like the SubscribeEventgroup
        entry they are stopping, except the TTL field.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_multipleSubscribers</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_1</srcid><srcstatus/><internalId>1695</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00428</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service ID, Instance ID, Major Version, Eventgroup ID, TTL, Counter, and Reserved shall be the
        same value as in the Subscribe that is being answered.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.009</srcid><srcstatus/><internalId>1105</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupAck.001</srcid><srcstatus/><internalId>1179</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00429</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        SubscribeEventgroupAck entries referencing events and notification events that are transported
        via multicast shall reference an IPv4 Multicast Option and/or and IPv6 Multicast Option. The
        Multicast Options state to which Multicast address and port the events and notification events
        will be sent to.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00430</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SubscribeEventgroupNegativeAcknowledgment entry type shall be used to indicate that a valid
        SubscribeEventgroup (see SWS_SD_00476) entry was NOT accepted. It shall be always sent instead
        of a SubscribeEventgroupAck if such an error occurred. Reasons for sending a
        SubscribeEventgroupNegativeAcknowledgment include: • Combination of Service ID, Instance ID,
        Eventgroup ID, and Major Version is unknown • Required TCP-connection was not opened by client
        Problems with the references options occurred (wrong values, missing endpoint, or conflicting
        endpoints) • Resource problems at the Server
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.005</srcid><srcstatus/><internalId>1098</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.012</srcid><srcstatus/><internalId>1100</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.007</srcid><srcstatus/><internalId>1101</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.010</srcid><srcstatus/><internalId>1102</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.011</srcid><srcstatus/><internalId>1103</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.008</srcid><srcstatus/><internalId>1104</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.Entry.ConflictingOptions</srcid><srcstatus/><internalId>1138</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_DOWN</srcid><srcstatus/><internalId>1315</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_INITIALWAIT</srcid><srcstatus/><internalId>1316</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_1</srcid><srcstatus/><internalId>1616</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00431</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SubscribeEventgroupNegativeAcknowledgment is sent (see SWS_SD_00430),
        the Service ID, Instance ID, Major Version, Eventgroup ID, Counter, and Reserved
        shall be the same value as in the subscribe that is being answered.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupNack.001</srcid><srcstatus/><internalId>1183</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupNackUnknown.001</srcid><srcstatus/><internalId>1186</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00432</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The TTL shall be set to 0x000000.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_1</srcid><srcstatus/><internalId>1701</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00434</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the calculated random timer expires and the parameter
        SdServerTimerInitialOfferRepetitionsMax does not equals '0', the Repetition Phase shall be
        entered.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.InitialWait.Ev.004</srcid><srcstatus/><internalId>1065</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00435</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the calculated random timer expires and the parameter
        SdServerTimerInitialOfferRepetitionsMax equal '0', the Main Phase shall be entered.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.InitialWait.Ev.005</srcid><srcstatus/><internalId>1066</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00437</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every configured Client Service Instance shall have an ECU wide, unique SdClientServiceHandleId.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.EB.Config.HandleId</srcid><srcstatus/><internalId>1198</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00438</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every configured Consumed Event Group shall have an ECU wide, unique
        SdConsumedEventGroupHandleId.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.EB.Config.HandleId</srcid><srcstatus/><internalId>1198</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00439</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every configured Event Handler shall have an ECU wide, unique SdEventHandlerHandleId.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.EB.Config.HandleId</srcid><srcstatus/><internalId>1198</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00440</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        After initialization of the Service Discovery module by calling of the API Sd_Init(), all
        configured Eventgroups shall have the state "SD_CONSUMED_EVENTGROUP_ RELEASED", unless a
        Consumed Eventgroup has "SdConsumedEventGroupAutoRequired" set to true, then the state shall be
        set to "SD_CONSUMED_EVENTGROUP_REQUESTED" as soon as the associated Client Service Instance is
        requested.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.ClientService.API.Sd_ClientService_init</srcid><srcstatus/><internalId>928</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_1</srcid><srcstatus/><internalId>1463</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_2</srcid><srcstatus/><internalId>1464</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00442</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If Sd_ConsumedEventGroupSetState is called with SD_CONSUMED_EVENTGROUP_REQUESTED while its
        Client Service Instance is still released (SD_CLIENT_SERVICE_RELEASED) E_NO_OK shall be
        returned.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.ClientService.API.Sd_ConsumedEventGroupSetState</srcid><srcstatus/><internalId>927</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_AVAILABLE_1</srcid><srcstatus/><internalId>1391</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00443</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SdClientService is set to SD_CLIENT_SERVICE_RELEASED (via Sd_ClientServiceSetState() or
        Sd_ServiceGroupStop()) while one or more of its Eventgroups are still requested (
        SD_CONSUMED_EVENTGROUP_REQUESTED) the Service Discovery shall interpret this the same way as
        these Eventgroups were called with SD_CONSUMED_EVENTGROUP_RELEASED first.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.ClientService.API.Sd_ClientServiceSetState</srcid><srcstatus/><internalId>926</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_5</srcid><srcstatus/><internalId>1448</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_CEvg_Unicast</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00444</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service ID shall be set to the Service ID of the service that shall be found.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueFindService.001</srcid><srcstatus/><internalId>1167</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00445</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery shall keep track of the last received of a communication partner Session
        ID value and Reboot Flag value independently for unicast and multicast. This means that the
        communication partners values received over multicast shall not be updated by a unicast message.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.Unicast</srcid><srcstatus/><internalId>1132</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.Multicast</srcid><srcstatus/><internalId>1133</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.ResetConnection</srcid><srcstatus/><internalId>1134</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_1</srcid><srcstatus/><internalId>1652</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_3</srcid><srcstatus/><internalId>1657</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_4</srcid><srcstatus/><internalId>1658</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00446</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A reboot of the communication partner shall be detected based on consecutive Service Discovery
        messages (for communication partner; unicast and multicast separated) in the following two ways:
        Reboot Flag changes from '0' to '1' or
        Session ID does not increase, while Reboot Flag stays '1'
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.Unicast</srcid><srcstatus/><internalId>1132</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.Multicast</srcid><srcstatus/><internalId>1133</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.ResetConnection</srcid><srcstatus/><internalId>1134</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00447</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery may also detect reboots based on the unicast information.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.Unicast</srcid><srcstatus/><internalId>1132</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.ResetConnection</srcid><srcstatus/><internalId>1134</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00448</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A reboot detected with Session ID and Reboot Flag shall lead to expiration of the local state
        that is controlled by this communication partner. In case of a reboot of a server, of which the
        client uses a service, the client shall handle the reboot as if a Stop Offer entry was received
        see also SWS_SD_00367 for further details) In case of a reboot of a server, of which the client
        uses a service, the server shall handle the reboot as if a StopSubscribeEventgroup entry was
        received (see also SWS_SD_00345 for further details)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.ClientService.API.Sd_ClientService_resetRemoteConnection</srcid><srcstatus/><internalId>935</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.ResetRemoteConnection.001</srcid><srcstatus/><internalId>1040</internalId></linkedfrom><linkedfrom><srcid>Sd.ServerService.API.Sd_ServerService_resetRemoteConnection</srcid><srcstatus/><internalId>1050</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.ResetRemoteConnection.001</srcid><srcstatus/><internalId>1111</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.ResetRemoteConnection.002</srcid><srcstatus/><internalId>1112</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.ResetConnection</srcid><srcstatus/><internalId>1134</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.ResetState</srcid><srcstatus/><internalId>1135</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00449</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdServerTimerOfferCyclicDelay is greater than 0, in the Main Phase an OfferService entry
        shall be sent cyclically with an interval defined by configuration item
        SdServerTimerOfferCyclicDelay.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Main.Ev.004</srcid><srcstatus/><internalId>1080</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00450</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The first OfferService is sent SdServerTimerOfferCyclicDelay after the beginning of the Main
        Phase.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Main.Ev.004</srcid><srcstatus/><internalId>1080</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00451</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdServerTimerOfferCyclicDelay is 0, no OfferService entries shall be sent in Main Phase for
        this Server Service Instance.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_self_MAIN_2</srcid><srcstatus/><internalId>1549</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00452</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery shall keep track of the subscribed clients per Event Handler and remove
        clients from the fan out, if the last SubscribeEventgroup entry was longer ago than the time
        specified in its TTL field of that SubscribeEventgroup entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_3</srcid><srcstatus/><internalId>1577</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00453</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdEventHandlerTCP is configured: For every SubscribeEventgroup entry of this Event Handler,
        the following shall be done:
        The relevant Routing Groups shall be identified by SdEventHandlerTcp.
        The relevant TCP Socket Connection of this client shall be identified using the Address/Port of
        Endpoint Option (UDP) referenced in the SubscribeEventgroup entry and the SdServerServiceTcpRef,
        or shall be set up, if not existed before.
        Check state of incoming TCP connection using SoAd_GetSoConMode. If mode is not
        SOAD_SOCON_ONLINE, answer using SubscribeEventgroupNack. Only if the client was not subscribed
        before receiving the aforementioned entry:
        SoAd_EnableSpecificRouting with SdEventActivationRef and the Socket Connection.
        SoAd_IfSpecificRoutingGroupTransmit with SdEventTriggeringRef and the Socket Connection.
        Answer using SubscribeEventgroup entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_1753</srcid><srcstatus/><internalId>853</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_1771</srcid><srcstatus/><internalId>854</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_OFFER_UDP_TCP_Endpoint</srcid><srcstatus/><internalId>1314</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Tcp</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_PENDING_OK</srcid><srcstatus/><internalId>1330</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_NOT_OK</srcid><srcstatus/><internalId>1331</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_Multiple_OFFER_ConnectionReady_NOT_OK</srcid><srcstatus/><internalId>1332</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Out_Of_Resources_SUBSCRIBE_TCP</srcid><srcstatus/><internalId>1341</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SubscribeEventgroupEntry</srcid><srcstatus/><internalId>671</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00454</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdEventHandlerUDP is configured: For every SubscribeEventgroup entry of this Eventhandler,
        the following shall be done:
        The relevant Routing Groups shall be identified by SdEventHandlerUdp.
        The relevant UDP Socket Connection of this client shall be identified using the Address/Port of
        Endpoint Option (UDP) referenced in the SubscribeEventgroup entry and the SdServerServiceUdpRef,
        or shall be set up (SoAd_SetUniqueRemoteAddr()), if not existed before.
        If no Wildcard Socket Connection is left, SD_E_OUT_OF_RES shall be reported.
        Only if the client was not subscribed before receiving this entry:
        SoAd_EnableSpecificRouting with SdEventActivationRef and the Socket Connection depending on
        current number of subscribed clients and the SdEventHandlerMulticastThreshhold.
        SoAd_IfSpecificRoutingGroupTransmit with SdEventTriggeringRef and the Socket Connection.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_1670</srcid><srcstatus/><internalId>850</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_1913</srcid><srcstatus/><internalId>858</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_1928</srcid><srcstatus/><internalId>859</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_ServerService_Unicast_UDP_RoutingGroup_Specific</srcid><srcstatus/><internalId>1251</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_ServerService_Unicast_TCP_RoutingGroup_Specific</srcid><srcstatus/><internalId>1252</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Out_Of_Resources_SUBSCRIBE_UDP</srcid><srcstatus/><internalId>1340</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.EventhandlerRoutingUDP</srcid><srcstatus/><internalId>1087</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.009</srcid><srcstatus/><internalId>1105</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00455</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SdEventHandlerMulticastThreshhold shall be used to control when to enable/disable Unicast/
        Multicast by using SoAd_EnableSpecificRouting and SoAd_DisableSpecificRouting:
        If SdEventHandlerMulticastThreshhold = 0: Setup Unicast to every subscribed client (Multicast
        always disabled)
        If SdEventHandlerMulticastThreshhold = 1: Setup Multicast if one or more clients are subscribed
        Unicast always disabled)
        If SdEventHandlerMulticastThreshhold &gt; 1:
        Setup Unicast for all subscribed clients if number of subscribed clients &lt;
        SdEventHandlerMulticastThreshhold,
        else setup Multicast. Switch dynamically based on the number of subscribed clients:
        With 0 clients: nothing enabled.
        With clients &lt; threshold: unicast for subscribed clients enabled. Multicast disabled.
        With clients ≥ threshold: multicast enabled. Unicast disabled.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.EventhandlerRoutingMulticast</srcid><srcstatus/><internalId>1086</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_ServerService_Multicast_RoutingGroup_Specific</srcid><srcstatus/><internalId>1253</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_multipleMulticastSubscribers</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_multipleSubscribers</srcid><srcstatus/><internalId>1579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00456</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If for any reasons the Initial Wait Phase is left, the calculated random timer (of the Initial
        Wait Phase) for this Service Instance shall be stopped.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.103</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.111</srcid><srcstatus/><internalId>958</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.104</srcid><srcstatus/><internalId>959</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.InitialWait.Ev.105</srcid><srcstatus/><internalId>960</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00457</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the timer SdClientTimerInitialFindRepetitionsBaseDelay expires within the Repetition Phase,
        a FindOffer Message shall be sent.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Repetition.Ev.200</srcid><srcstatus/><internalId>966</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Repetition.Ev.201</srcid><srcstatus/><internalId>967</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00458</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the TTL of a received SubscribeEventgroup Entry expires, the following step shall be
        performed in the following order:
        If this has been the last subscribed client, report "SD_EVENT_HANDLER_RELEASED" to the BswM by
        calling the API BswM_Sd_EventHandlerCurrentState() and update the state within the Service
        Discovery Module
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_5</srcid><srcstatus/><internalId>1574</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00459</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        For all SD messages sent and received via the Socket Adaptor module, the header mode shall be
        activated.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_909</srcid><srcstatus/><internalId>878</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_934</srcid><srcstatus/><internalId>881</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_985</srcid><srcstatus/><internalId>885</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00460</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        For all SD messages sent and received via the Socket Adaptor module, the SoAdTxPduHeaderId and
        the SoAdRxPduHeaderId shall be set to 0xFFFF8100 respectively.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_910</srcid><srcstatus/><internalId>879</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_935</srcid><srcstatus/><internalId>882</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_986</srcid><srcstatus/><internalId>886</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00461</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        SdServerCapabilityRecordValue and SdClientServiceCapabilityRecordValue are allowed to be empty.
        This means that after "=" the next length uint8 or "0" follows.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.NoValue</srcid><srcstatus/><internalId>1147</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.ConfigOption.CapabilityRecordValue</srcid><srcstatus/><internalId>1166</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00462</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        As long as a service is not requested by the BswM, the Service Discovery shall not send
        FindService Entry entries.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Ignore</srcid><srcstatus/><internalId>1009</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00463</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If an OfferService Entry is received during Down Phase,
        The Service Discovery shall store the state of this Service instance.
        A timer shall be set/reset to the TTL value of the received OfferService entry (TTL timer)
        Until the TTL Timer expires or a StopOfferService entry is received, the Service instance is
        considered Available.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Down.Ev.001</srcid><srcstatus/><internalId>937</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_DOWN_0</srcid><srcstatus/><internalId>1399</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00464</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SdClientService is set to state SD_CLIENT_SERVICE_REQUESTED (by call of
        Sd_ClientServiceSetState() or Sd_ServiceGroupStart()) while being in Down Phase:
        If no OfferService entry was received before or its TTL timer expired already:
        The Initial Wait Phase shall be entered,
        If an OfferService entry was received and its TTL timer did not expire yet:
        If SoAd_OpenSoCon() was not called before, the API SoAd_OpenSoCon() shall be called for all
        Socket Connections associated with this Client Service Instance.
        The API SoAd_EnableSpecificRouting() shall be called with SdClientServiceActivationRef (see
        SdConsumedMethods) and the relevant Socket Connections for this Client Service Instance.
        Open TCP connection if SdClientServiceTcpRef is configured and was not opened before.
        The Main Phase shall be entered.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <comment>
        Note1: AUTOSAR Main Phase = WAIT_SOCON + AVAILABE + MAIN phase in EB state machine
        Note2: When an OfferService entry was received, the WAIT_SOCON phase will be entered.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Down.Ev.019</srcid><srcstatus/><internalId>947</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Down.Ev.020</srcid><srcstatus/><internalId>948</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3595</srcid><srcstatus/><internalId>796</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3601</srcid><srcstatus/><internalId>798</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_ClientService_Method_RoutingGroup_Specific</srcid><srcstatus/><internalId>1257</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_Sd_Client_Service_IP_Address_Not_Assigned</srcid><srcstatus/><internalId>1310</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Client_Service</srcid><srcstatus/><internalId>1313</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_OFFER_UDP_TCP_Endpoint</srcid><srcstatus/><internalId>1314</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_Client_Service_TCP_SoCon_ONLINE_OFFLINE_ONLINE</srcid><srcstatus/><internalId>1329</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_PENDING_OK</srcid><srcstatus/><internalId>1330</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_NOT_OK</srcid><srcstatus/><internalId>1331</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_Multiple_OFFER_ConnectionReady_NOT_OK</srcid><srcstatus/><internalId>1332</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_ConsumedEventGroup_Multicast_Only_UDP_Ref</srcid><srcstatus/><internalId>1337</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_REBOOT</srcid><srcstatus/><internalId>1361</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Offer_Handling_In_WAIT_SOCON</srcid><srcstatus/><internalId>1519</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00465</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a Service Discovery Message contains only a SubscribeEventgroupNack entry but no
        SubscribeEventgroupAck entry for the same Eventgroup, Service Discovery shall do the following:
        Report the DEM error SD_E_SUBSCR_NACK_RECV (see ECUC_SD_00123)
        If SdClientServiceTcpRef is configured for this service, determine the used SoCon and call the
        API SoAd_CloseSoCon() with the SoConID and parameter abort set to TRUE
        If SdClientServiceTcpRef is configured for this service, determine the used SoCon and call the
        API SoAd_OpenSoCon() with the SoConID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Receive_Subscribe_Nack</srcid><srcstatus/><internalId>1342</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.DEM_reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00466</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Receiving a config_item_string without an "=" sign shall be interpreted as key present without
        value.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.NoEqualsign</srcid><srcstatus/><internalId>1148</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.ConfigOption.CapabilityRecordValue</srcid><srcstatus/><internalId>1166</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00467</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Multiple config_item_string with the same key in a single configuration option shall be
        supported.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionKey_0</srcid><srcstatus/><internalId>1710</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00468</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdInstanceHostname exists, a key "hostname" with the value set to the string of this
        configuration item shall be added to the Configuration Option.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.ConfigOption.Hostname</srcid><srcstatus/><internalId>1164</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00469</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled and the Service Discovery module has not been
        initialized using Sd_Init(), the Sd_ConsumedEventGroupSetState function shall raise the
        development error code SD_E_UNINIT and the Sd_ConsumedEventGroupSetState function shall return
        E_NOT_OK.
      </description>
      <comment>
        TODO: Clarify if the argument check shall also be done with disabled DET
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_NoInit</srcid><srcstatus/><internalId>1291</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.DevError.SD_E_UNINIT</srcid><srcstatus/><internalId>670</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00470</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If ConsumedEventGroupSetState has an undefined value, the Service Discovery module shall not
        store the requested mode and return E_NOT_OK. In case development error detection is enabled,
        the Service Discovery module shall additionally raise the development error code SD_E_INV_MODE.
      </description>
      <comment>
        TODO: Clarify if the argument check shall also be done with disabled DET
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_InvMode</srcid><srcstatus/><internalId>1302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00471</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled and the Service Discovery module has not been
        initialized using Sd_Init(), the Sd_LocalIpAddrAssignmentChg function shall raise the
        development error code SD_E_UNINIT and the Sd_LocalIpAddrAssignmentChg function shall return
        without further action.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_NoInit</srcid><srcstatus/><internalId>1292</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.DevError.SD_E_UNINIT</srcid><srcstatus/><internalId>670</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00472</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the parameter State has an undefined value, the Service Discovery module shall not store the
        requested mode and return. In case development error detection is enabled, the Service
        Discovery module shall additionally raise the development error code SD_E_INV_MODE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_InvState</srcid><srcstatus/><internalId>1304</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00473</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled and the Service Discovery module has not been
        initialized using Sd_Init(), the Sd_RxIndication function shall raise the development error
        code SD_E_UNINIT and the Sd_RxIndication function shall return without further action.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_NoInit</srcid><srcstatus/><internalId>1293</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.DevError.SD_E_UNINIT</srcid><srcstatus/><internalId>670</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00474</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If RxPduId has an undefined value, the Service Discovery module shall discard the message and
        return without further action. In case development error detection is enabled, the Service
        Discovery module shall additionally raise the development error code SD_E_INV_ID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_InvRxPduId</srcid><srcstatus/><internalId>1297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00475</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check parameter PduInfoPtr for
        being a null pointer. In this case, the function shall raise the development error
        SD_E_PARAM_POINTER and return without further action.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RxIndication_NullPtr</srcid><srcstatus/><internalId>1296</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00476</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type 2 Entries (Entries for Eventgroups) shall not use "any values" as Service ID (i.e. 0xFFFF)
        Instance ID (i.e. 0xFFFF), Eventgroup ID (i.e. 0xFFFF), and/or Major Version (i.e. 0xFF)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.ECUC_SD_00011</srcid><srcstatus/><internalId>33</internalId></linkedfrom><linkedfrom><srcid>Sd.ECUC_SD_00020</srcid><srcstatus/><internalId>35</internalId></linkedfrom><linkedfrom><srcid>Sd.ECUC_SD_00022</srcid><srcstatus/><internalId>36</internalId></linkedfrom><linkedfrom><srcid>Sd.ECUC_SD_00057</srcid><srcstatus/><internalId>55</internalId></linkedfrom><linkedfrom><srcid>Sd.ECUC_SD_00070</srcid><srcstatus/><internalId>61</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.001</srcid><srcstatus/><internalId>1096</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00477</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The following table shows which Option is allowed to be carried by different Entries (all other
        combinations shall not be used): See "SWS_ServiceDiscovery__Table_11"
        Endpoint Options (IPv4 and IPv6) | Multicast Options (IPv4 and IPv6) | Configuration Option
        FindService | | | Allowed
        OfferService | Allowed | | Allowed
        StopOfferService | Allowed | | Allowed
        SubscribeEventgroup | Allowed | | Allowed
        StopSubscribeEventgroup | Allowed | | Allowed
        SubscribeEventgroupAck | | Allowed | Allowed
        SubscribeEventgroupNack | | | Allowed
        Table [REF] - Allowed Options per Entry
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_FindService_0</srcid><srcstatus/><internalId>1602</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotStored</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotCleared</srcid><srcstatus/><internalId>1606</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_0</srcid><srcstatus/><internalId>1607</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_1</srcid><srcstatus/><internalId>1608</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_0</srcid><srcstatus/><internalId>1615</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1621</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1627</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1635</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_1</srcid><srcstatus/><internalId>1701</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00478</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        This chapter describes how to derive all necessary data to assemble an OfferService Message:
        Derive all static data from the configuration container. These are e.g:
        Container SdServerService: SdServerServiceId
        Container SdServerService: SdServerServiceInstanceId
        Container SdServerService: SdServerServiceMajorVersion
        Container SdServerService: SdServerServiceMinorVersion
        Container SdServerTimer: SdServerTimerTTL
        Container SdInstance: SdInstanceHostname
        If TCP is configured for this service (configuration item SdServerServiceTcpRef exists)
        The generator derives a SoConID out of the SoConGroup referenced by the configuration parameter
        SdServerServiceTcpRef
        Call the Socket Adaptor's API SoAd_GetLocalAddr() with the derived SoConID to get back the IP
        Address, Transport protocol (Layer 4), and the port number needed for the Endpoint Option.
        Build the relevant Endpoint Option with L4-Protocol set to TCP (shall be same as in LocalAddr)
        If UDP is configured for this service (configuration item SdServerServiceUdpRef exists)
        The generator derives a SoConID out of the SoConGroup referenced by the configuration parameter
        SdServerServiceUdpRef
        Call the Socket Adaptor's API SoAd_GetLocalAddr() with the derived SoConID to get back the IP
        Address, Transport protocol (Layer 4), and the port number needed for the Endpoint Option.
        Build the relevant Endpoint Option with L4-Protocol set to TCP (shall be same as in LocalAddr)
        Build Configuration Option if configured (see configuration item SdServerCapabilityRecord and
        SdInstanceHostname)
        Build OfferService Entry as described above.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_00478.TCP</srcid><srcstatus/><internalId>575</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00478.UDP</srcid><srcstatus/><internalId>576</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00479</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When receiving Service Discovery messages the values of all reserved fields shall be ignored.
      </description>
      <comment>
        This requirement is informational only. It is not possible to test it.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00480</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        This chapter describes the interaction with the Socket Adaptor module to send Service Discovery
        messages:
        Precondition: Service Discovery message is assembled
        In case the message shall be sent via unicast: - Call the Socket Adaptor's API
        SoAd_SetRemoteAddr
        In case the message shall be sent via multicast: - Call the API SoAd_SetRemoteAddr to set the
        destination
        Call SoAd_IfTransmit() to send the message on the bus
        Please also refer to the sequence "CLIENT/SERVER: TransmitSdMessage" shown in Chapter 9.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_00480.unicast</srcid><srcstatus/><internalId>579</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00480.multicast</srcid><srcstatus/><internalId>580</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00481</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>2</version>
      <description>
        Every wildcard socket connection shall be reset to wildcard using SoAd_ReleaseRemoteAddr() if
        all of the following conditions apply:
        The remote address of a socket connection has been set by SD.
        The socket connection is not used by a ClientService anymore. I.e. no Offer was received, a
        Stop Offer was received or the TTL has expired.
        The socket connection is not used by an Eventhandler anymore. I.e. the client has unsubscribed
        all Eventgroups using this socket connection. The socket connection shall not be reset if the
        routings get disabled because the SdEventHandlerMulticastThreshold was reached.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_MAIN_1</srcid><srcstatus/><internalId>1440</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_INITIALWAIT_1</srcid><srcstatus/><internalId>1442</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00482</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        This chapter describes the interaction with the Socket Adaptor on how Service Discovery
        messages are received:
        When the SocketAdaptor receives a Service Discovery message, the API Sd_RxIndication() is
        called.
        Using the indicated RxPduId, the associated SoConId for this SD Instance has to be determined.
        Call API SoAd_GetRemoteAddr() with this SoConId.
        Store address and message for further processing.
        Reset the SoCon back to Wildcard using SoAd_ReleaseRemoteAddr(
        The entries shall be processed exactly in the order they arrived.
        Please also refer to the sequence "CLIENT/SERVER: Sd_RxIndication" shown in Chapter 9.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.RxIndication.Seq</srcid><srcstatus/><internalId>1116</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_FindService_0</srcid><srcstatus/><internalId>1602</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotStored</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotCleared</srcid><srcstatus/><internalId>1606</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_0</srcid><srcstatus/><internalId>1607</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_1</srcid><srcstatus/><internalId>1608</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_0</srcid><srcstatus/><internalId>1615</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1621</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1627</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1635</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_MultipleEntries_0</srcid><srcstatus/><internalId>1637</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_MultipleEntries_1</srcid><srcstatus/><internalId>1638</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00483</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When receiving Service Discovery messages, the receiver shall ignore Entries of unknown type.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.Entry.UnknownType</srcid><srcstatus/><internalId>1136</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00484</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When receiving Service Discovery messages, the receiver shall ignore Options of unknown type.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_FindService_2</srcid><srcstatus/><internalId>1604</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_3</srcid><srcstatus/><internalId>1610</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_4</srcid><srcstatus/><internalId>1619</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_4</srcid><srcstatus/><internalId>1625</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1629</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00485</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When receiving Service Discovery messages, the receiver shall ignore the values of reserved
        fields.
      </description>
      <comment>
        This requirement is informational only. It is not possible to test it.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00486</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When receiving a FindService Entry Service ID, Instance ID, Major Version, and Minor Version
        must match exactly to the configured values to identify a Service Instances and its associated
        Eventgroups, except if "any values" are in the Entry (i.e. 0xFFFF for Service ID, 0xFFFF for
        Instance ID, 0xFF for Major Version, and 0xFFFFFFFF for Minor Version.) See configuration
        parameters SdServerServiceServiceId, SdServerServiceInstanceId, SdServerServiceMajorVersion,
        and SdServerServiceMinorVersion.
      </description>
      <comment>
        Note:
      When receiving a FindService with Service ID 0x0001, Instance ID 0xFFFF, Major Version 0x02, and Minor Version 0xFFFFFF, only the Service ID and the Major Version shall be used to match the local Service Instances and its associated Eventgroups fitting to this FindService.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Find.001</srcid><srcstatus/><internalId>1092</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Find.003</srcid><srcstatus/><internalId>1095</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_FIND_Malformed_Invalid_MinorVersion</srcid><srcstatus/><internalId>1334</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_STOP_OFFER_Invalid_ID</srcid><srcstatus/><internalId>1335</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_STOP_OFFER_Wilcard_ID</srcid><srcstatus/><internalId>1336</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00487</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When receiving an OfferService or StopOfferService the Service ID, Instance ID, Major Version
        must match exactly to the configured values to identify a Service Instances and its associated
        Eventgroups. See configuration parameters SdClientServiceServiceId, SdClientServiceInstanceId,
        and SdClientServiceMajorVersion.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.001</srcid><srcstatus/><internalId>1026</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.002</srcid><srcstatus/><internalId>1027</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_STOP_OFFER</srcid><srcstatus/><internalId>1346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00488</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdClientServiceMinorVersion is set to 0xFFFFFF and SdVersionDrivenFindBehavior is set to
        EXACT_OR_ANY_MINOR_VERSION, the Minor Version in a received OfferService or StopOfferService
        entry is not checked for identifying Service Instances and its associated Eventgroups.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.003</srcid><srcstatus/><internalId>1028</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2235</srcid><srcstatus/><internalId>766</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2307</srcid><srcstatus/><internalId>770</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00489</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdClientServiceMinorVersion is set to any value except 0xFFFFFF and
        SdVersionDrivenFindBehavior is set to EXACT_OR_ANY_MINOR_VERSION, the Minor Version in a
        received OfferService or StopOfferService shall be checked for identifying Service Instances
        and its associated Eventgroups. The Service Discovery module shall process a OfferService or
        StopOfferService where the minor version of the received entry match exact the configured minor
        version of the corresponding SdClientService.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.004</srcid><srcstatus/><internalId>1029</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2236</srcid><srcstatus/><internalId>767</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2308</srcid><srcstatus/><internalId>771</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Different_Minor_Versions</srcid><srcstatus/><internalId>1311</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00490</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When receiving Eventgroup entries (i.e.SubscribeEventgroup, StopSubscribeEventgroup,
        SubscribeEventgroupAck, and SubscribeEventgroupNack) the Service ID, Instance ID, Eventgroup ID,
        and Major Version shall be exactly matched to identify the Eventgroup.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.eventSubscribeEventgroupAck.001</srcid><srcstatus/><internalId>1033</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.001</srcid><srcstatus/><internalId>1096</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.StopSubscribeEventgroup.001</srcid><srcstatus/><internalId>1106</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_4</srcid><srcstatus/><internalId>1497</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00491</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Answers to Entries received using multicast shall be delayed based on the appropriate
        configuration items:
        For ServerServices:
        SdServerTimerRequestResponseMinDelay
        SdServerTimerRequestResponseMaxDelay
        For ConsumedEventgroups:
        SdClientTimerRequestResponseMinDelay
        SdClientTimerRequestResponseMaxDelay
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_00491.ServerService</srcid><srcstatus/><internalId>581</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00491.ClientService</srcid><srcstatus/><internalId>582</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00492</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The configuration parameters for delaying OfferService entries as response to FindService
        entries received by multicast shall be taken from the Timer containers referenced by the
        Service container:
        SdServerService
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/Sd.xgen_1214</srcid><srcstatus/><internalId>906</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00493</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The configuration parameters for delaying SubscribeEventgroup entries as response to
        OfferService entries received by multicast shall be taken from the Timer containers referenced
        by the Eventgroup containers:
        SdConsumedEventGroup
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/Sd.xgen_1083</srcid><srcstatus/><internalId>903</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_var/xgen/Sd.xgen_1084</srcid><srcstatus/><internalId>904</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00494</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        There shall be a random delay between the appropriate MinDelay and MaxDelay before answering to
        an Entry received via multicast.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Repetition.Ev.005</srcid><srcstatus/><internalId>1074</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Main.Ev.005</srcid><srcstatus/><internalId>1081</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00495</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Delayed answering Entries received via multicast (as in SWS_SD_00494) shall no influence other
        timers (e.g. for handling the Repetition Phase)
      </description>
      <comment>
        This requirement is informational only. It is not possible to test it.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00496</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | Sd_ServerServiceSetState
        Syntax
        Std_ReturnType Sd_ServerServiceSetState (uint16 SdServerServiceHandleId,
        Sd_ServerServiceSetStateType ServerServiceState)
        Service ID [hex] | 0x07
        Sync/Async | Asynchronous
        Reentrancy | Reentrant
        Parameters (in) | SdServerServiceHandleId | ID to identify the Server Service Instance.
        ServerServiceState | The state the Server Service Instance shall be set to.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: State acceptedE_NOT_OK: State not accepted
        Description | This API function is used by the BswM to set the Server Service Instance state.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd.h_334</srcid><srcstatus/><internalId>694</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00497</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection for the Service Discovery module is enabled, then the function
        Sd_GetVersionInfo shall check whether the parameter VersioninfoPtr is a NULL pointer (NULL_PTR)
        If VersioninfoPtr is a NULL pointer, then the function Sd_GetVersionInfo shall raise the
        development error SD_E_PARAM_POINTER and return.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_GetVersionInfo_NullPtr</srcid><srcstatus/><internalId>1295</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00501</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Instance ID shall be set to 0xFFFF, if all Service Instances shall be returned. It shall be set
        to the Instance ID of a specific Service Instance, if just a single Service Instance shall be
        returned.
      </description>
      <comment>
        Note: This means that when receiving Instance ID 0xFFFF for all appropriate Service Instances must be answered as if separate Find Entries were received.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueFindService.001</srcid><srcstatus/><internalId>1167</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00502</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Major Version shall be set to 0xFF, that means that services with any version shall be returned.
        If set to value different than 0xFF, services with this specific major version shall be
        returned only.
      </description>
      <comment>
        Note: It is expected that the Major Version on client side is configured to a specific value in normal operation since the client should look for an specific interface version. Different Major Versions are not compatible to each other.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueFindService.001</srcid><srcstatus/><internalId>1167</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00503</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdVersionDrivenFindBehavior is set to EXACT_OR_MINOR_VERSION then minor Version shall be set
        to 0xFFFF FFFF, that means that services with any version shall be returned. If set to a value
        different to 0xFFFF FFFF, services with this specific minor version shall be returned only.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueFindService.001</srcid><srcstatus/><internalId>1167</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Different_Minor_Versions</srcid><srcstatus/><internalId>1311</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_274</srcid><srcstatus/><internalId>823</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.MinorVersionHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>649</internalId></provcov>
    </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00504</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        TTL shall be set according to the configuration.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueFindService.002</srcid><srcstatus/><internalId>1168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00505</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        FindServer entries shall never reference Endpoint or Multicast Options. They shall reference
        configuration options, if configured to do so.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00506</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        TTL shall not be set to 0x000000 since this is considered to be the Stop entry for this entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueFindService.002</srcid><srcstatus/><internalId>1168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00509</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service ID shall be set to the Service ID of the Service Instance offered.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.001</srcid><srcstatus/><internalId>1169</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00510</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Instance ID shall be set to the Instance ID of the Service Instance offered.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.001</srcid><srcstatus/><internalId>1169</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00511</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Major Version shall be set to the Major Version of the Service Instance offered (see
        SdServerServiceMajorVersion)
      </description>
      <comment>
        Note: Since SdServerServiceMajorVersion can be only a value up to 0xFE, the value 0xFF (any) cannot occur in an OfferService entry.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.001</srcid><srcstatus/><internalId>1169</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00512</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Minor Version shall be set to the Minor Version of the Service Instance offered.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.001</srcid><srcstatus/><internalId>1169</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00513</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        TTL shall be set to the lifetime of the Service Instance. After this lifetime the Service
        Instance shall considered not been offered.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.002</srcid><srcstatus/><internalId>1170</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueOfferService.003</srcid><srcstatus/><internalId>1171</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00514</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If TTL is set to 0xFFFFFF, the OfferService entry shall be considered valid until the next
        reboot.
      </description>
      <comment>
        I.e. the service shall be considered available for ever, this requirement can not be fully tested.
      Verification is achieved using source code tracing.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1397</srcid><srcstatus/><internalId>747</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00515</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        TTL shall be set to another value than 0x000000 since 0x000000 is considered to be the Stop
        entry for this entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.003</srcid><srcstatus/><internalId>1171</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00550</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | Sd_ConsumedEventGroupSetStateType
        Kind | Enumeration
        Range | SD_CONSUMED_EVENTGROUP_RELEASED | 0x00
        SD_CONSUMED_EVENTGROUP_REQUESTED | 0x01
        Description | This type defines the subscription policy by consumed EventGroup for the Client
        Service.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd_Types.h_74</srcid><srcstatus/><internalId>703</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>416</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00551</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | Sd_ClientServiceCurrentStateType
        Kind | Enumeration
        Range | SD_CLIENT_SERVICE_DOWN | 0x00
        SD_CLIENT_SERVICE_AVAILABLE | 0x01
        Description | This type defines the modes to indicate the current mode request of a Client
        Service.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd_Types.h_29</srcid><srcstatus/><internalId>698</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>417</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00552</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | Sd_ConsumedEventGroupCurrentStateType
        Kind | Enumeration
        Range | SD_CONSUMED_EVENTGROUP_DOWN | 0x00
        SD_CONSUMED_EVENTGROUP_AVAILABLE | 0x01
        Description | This type defines the subscription policy by consumed EventGroup for the Client
        Service.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd_Types.h_38</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>418</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00553</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | Sd_EventHandlerCurrentStateType
        Kind | Enumeration
        Range | SD_EVENT_HANDLER_RELEASED | 0x00
        SD_EVENT_HANDLER_REQUESTED | 0x01
        Description | This type defines the subscription policy by EventHandler for the Server Service.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd_Types.h_47</srcid><srcstatus/><internalId>700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>419</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00560</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | Sd_ConsumedEventGroupSetState
        Syntax
        Std_ReturnType Sd_ConsumedEventGroupSetState (uint16 SdConsumedEventGroupHandleId,
        Sd_ConsumedEventGroupSetStateType ConsumedEventGroupState)
        Service ID [hex] | 0x09
        Sync/Async | Asynchronous
        Reentrancy | Reentrant
        Parameters (in) | SdConsumedEventGroupHandleId | ID to identify the Consumed Eventgroup
        ConsumedEventGroupState | The state the EventGroup shall be set to.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: State acceptedE_NOT_OK: State not accepted
        Description | This API function is used by the BswM to set the requested state of the
        EventGroupStatus.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd.h_382</srcid><srcstatus/><internalId>696</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>420</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00600</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the TTL Timer of a Client Service expires, the Service Discovery module shall perform the
        following steps:
        Enter the Initial Wait Phase and indicate the state SD_CLIENT_SERVICE_DOWN to the BswM by
        calling the API BswM_Sd_ClientServiceCurrentState
        All subscribed Eventgroups of this Client Service shall expired in this instance (stop TTL
        timer) and the expiration shall be handled as describe in SWS_SD_00601.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Available.Ev.402</srcid><srcstatus/><internalId>992</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_TTL_too_Short</srcid><srcstatus/><internalId>1357</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_INFINITE_RETRY_TTL_NOT_INFINITE</srcid><srcstatus/><internalId>1363</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>421</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00601</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the TTL Timer of an Eventgroup expires, the Service Discovery module shall perform the
        following step(s)
        the status shall be set to SD_CONSUMED_EVENTGROUP_DOWN and reported to BswM by calling the API
        BswM_Sd_ConsumedEventGroupCurrentState(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ConsumedEventgroup.AVAILABLE_MAIN</srcid><srcstatus/><internalId>1016</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>422</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00604</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When a OfferService for a required Client Service is received and SoAd_OpenSoCon()was not
        called before, the API SoAd_OpenSoCon() shall be called for all Socket Connections associated
        with this Client Service Instance.
      </description>
      <comment>
        Note: In the current implementation socket connections are opened when Sd_ClientServiceSetState() is called with state SD_CLIENT_SERVICE_REQUESTED while being in Down Phase. If a OfferService for a required Client Service is received SoAd_OpenSoCon() will have been already called, see Sd.SWS_SD_00464.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3596</srcid><srcstatus/><internalId>797</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3602</srcid><srcstatus/><internalId>799</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>423</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00605</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Down Phase is entered (coming from states other than init), the API SoAd_CloseSoCon()
        shall be called for all Socket Connections associated with this Server Service Instance.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Sd_ServerService_ComSM_entry_DOWN</srcid><srcstatus/><internalId>1114</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>424</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00606</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Initial Wait Phase is entered, the API SoAd_OpenSoCon() shall be called for all Socket
        Connections associated with this Server Service Instance.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_2468</srcid><srcstatus/><internalId>863</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_2483</srcid><srcstatus/><internalId>864</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_1</srcid><srcstatus/><internalId>1526</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_2</srcid><srcstatus/><internalId>1527</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_3</srcid><srcstatus/><internalId>1528</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_4</srcid><srcstatus/><internalId>1529</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_5</srcid><srcstatus/><internalId>1530</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_6</srcid><srcstatus/><internalId>1531</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_DOWN_2</srcid><srcstatus/><internalId>1539</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_DOWN_3</srcid><srcstatus/><internalId>1540</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_1</srcid><srcstatus/><internalId>1543</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_2</srcid><srcstatus/><internalId>1544</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_MAIN_DOWN_2</srcid><srcstatus/><internalId>1553</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_MAIN_DOWN_3</srcid><srcstatus/><internalId>1554</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_REPETITION_1</srcid><srcstatus/><internalId>1560</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_DOWN_2</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_DOWN_3</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP_receive_UDP</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>425</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00607</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the parameter SdServerServiceHandleId has an invalid value, the Service Discovery Module
        shall not store the requested mode and return E_NOT_OK. In case development error detection is
        enabled, the Service Discovery module shall additionally raise the development error code
        SD_E_INV_ID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_InvHandleId</srcid><srcstatus/><internalId>1299</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>426</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00608</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the parameter ClientServiceHandleId has an invalid value, the Service Discovery module shall
        not store the requested mode and return E_NOT_OK. In case development error detection is
        enabled, the Service Discovery module shall additionally raise the development error code
        SD_E_INV_ID.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_InvHandleId</srcid><srcstatus/><internalId>1301</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>427</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00609</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the parameter SdConsumedEventGroupHandleId has an invalid value, the Service Discovery
        module shall not store the requested mode and return E_NOT_OK. In case development error
        detection is enabled, the Service Discovery module shall additionally raise the development
        error code SD_E_INV_ID.
      </description>
      <comment>
        TODO: Clarify if the argument check shall also be done with disabled DET
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_InvHandleId</srcid><srcstatus/><internalId>1303</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>428</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00610</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the parameter SoConId has an invalid value, the Service Discovery module shall not store the
        requested mode and return. In case development error detection is enabled, the Service
        Discovery module shall additionally raise the development error code SD_E_INV_ID.
      </description>
      <comment>
        And return E_NOT_OK.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_InvSoConId</srcid><srcstatus/><internalId>1305</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>429</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00622</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the number of options is set to zero, the option run is considered empty.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>430</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00623</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        For empty runs the Index (i.e. Index First Option Run and/or Index Second Option Run) shall be
        set to zero.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>431</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00624</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Implementations shall accept and process incoming SD messages with option run length set to
        zero and option index not set to zero.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_EmptyOptionRun_0</srcid><srcstatus/><internalId>1644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>432</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00625</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the number of options is set to zero, the option run is considered empty.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>433</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00626</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        For empty runs the Index (i.e. Index First Option Run and/or Index Second Option Run) shall be
        set to zero.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>434</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00627</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Implementations shall accept and process incoming SD messages with option run length set to
        zero and option index not set to zero.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_EmptyOptionRun_1</srcid><srcstatus/><internalId>1645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>435</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00650</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Entries received with the unicast flag set to 0, shall not be answered with unicast but ignored
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.Message.UnicastFlag</srcid><srcstatus/><internalId>1131</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>436</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00651</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The amount of separate Service Discovery messages shall be reduced, i.e.: Combine as much
        information as possible into one Service Discovery message before calling the Socket Adaptor's
        transmit API. This means that when a entry is sent after waiting the appropriate delay (i.e.
        based on Request-Response-Delay) all other entries for this communication partner may be packed
        into the Service Discovery message as well.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Sd_MainFunction</srcid><srcstatus/><internalId>920</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>437</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00652</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If TTL is set to 0xFFFFFF, the Find Service entry entry shall be considered valid until
        shutdown (i.e. next reboot)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_TTL_0</srcid><srcstatus/><internalId>1501</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.TTL</srcid><srcstatus/><internalId>672</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>438</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00653</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every OfferService entry shall reference up to two IPv4 Endpoint Options (up to one for UDP and
        up to one for TCP) that describe endpoint(s) (IP and Port) the server accepts methods on and
        sends events from for this service instance.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>439</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00654</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Different service instances of the same service on the same ECU shall use different endpoints,
        so that they can be differentiated by the endpoints. Different services may share the same
        endpoints.
      </description>
      <comment>
        This requirement is informational only
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>440</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00655</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every SubscribeEventgroup entry shall reference up to two IPv4 Endpoint Options (up to one for
        UDP and up to one for TCP) that describe(s) the endpoints (IP and Port) the client wishes to
        receive events. The client shall use these endpoints for sending methods as well.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroup.004</srcid><srcstatus/><internalId>1177</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupAck.002</srcid><srcstatus/><internalId>1180</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_404</srcid><srcstatus/><internalId>827</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_416</srcid><srcstatus/><internalId>830</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>441</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00656</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every OfferService entry shall reference up to two IPv6 Endpoint Options (up to one for UDP and
        up to one for TCP) that describe endpoint(s) (IP and Port) the server accepts methods on and
        sends events from for this service instance.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_00656.TCP</srcid><srcstatus/><internalId>571</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00656.UDP</srcid><srcstatus/><internalId>572</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>442</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00657</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Different service instances of the same service on the same ECU shall use different endpoints,
        so that they can be differentiated by the endpoints. Different services may share the same
        endpoints.
      </description>
      <comment>
        This requirement is informational only
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>443</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00658</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every SubscribeEventgroup entry shall reference up to two IPv6 Endpoint Options (up to one for
        UDP and up to one for TCP) that describe(s) the endpoints (IP and Port) the client wishes to
        receive events. The client shall use these endpoints for sending methods as well.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_00658.TCP</srcid><srcstatus/><internalId>573</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00658.UDP</srcid><srcstatus/><internalId>574</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>444</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00659</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        IPv4 Multicast Options shall be only referenced by SubscribeEventgroupAck entries, describing
        the multicast destination IP address and port multicast events shall be sent to.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>445</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00660</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        IPv6 Multicast Options shall be only referenced by SubscribeEventgroupAck entries, describing
        the multicast destination IP address and port multicast events shall be sent to.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_REPETITION</srcid><srcstatus/><internalId>1317</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Tcp</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Subscribe_Nack</srcid><srcstatus/><internalId>1320</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>446</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00661</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If an entry references an unknown option, this option shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_FindService_2</srcid><srcstatus/><internalId>1604</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_3</srcid><srcstatus/><internalId>1610</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_4</srcid><srcstatus/><internalId>1619</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_4</srcid><srcstatus/><internalId>1625</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1629</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>447</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00662</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If an entry references an redundant option (option that is not needed by this specific entry),
        this option shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_FindService_1</srcid><srcstatus/><internalId>1603</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotStored</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotCleared</srcid><srcstatus/><internalId>1606</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_0</srcid><srcstatus/><internalId>1607</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_1</srcid><srcstatus/><internalId>1608</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_0</srcid><srcstatus/><internalId>1615</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupNack_1</srcid><srcstatus/><internalId>1636</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>448</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00663</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SubscribeEventgroup entry references two or more options that are in conflict, this entry
        shall be answered with a SubscribeEventgroupNack entry.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_2</srcid><srcstatus/><internalId>1609</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_1</srcid><srcstatus/><internalId>1616</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_1</srcid><srcstatus/><internalId>1622</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_1</srcid><srcstatus/><internalId>1628</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>449</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00664</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When two different Configuration Options are referenced by an entry, the configuration sets
        shall be merged.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ConfigurationOption</srcid><srcstatus/><internalId>658</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>450</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00665</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the two Configuration Options have conflicting items (same name), all items shall be handled.
        There shall be no attempt been made to merge duplicate items.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ConfigurationOption</srcid><srcstatus/><internalId>658</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>451</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00118</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdMulticastEventSoConRef
        Parameter Type: Reference
        Parent Containers: SdEventHandlerMulticast,
        Description: Reference to the SoAdSocketConnection representing the multicast data path (UDP)
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup/SoAdSocketConnection
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.MulticastEventSoConRef.Multiplicity</srcid><srcstatus/><internalId>673</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>452</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00119</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdConsumedEventGroupMulticastGroupRef
        Parameter Type: Reference
        Parent Containers: SdConsumedEventGroup,
        Description: Reference to the SoAdSocketConnectionGroup representing the multicast data path (
        UDP)
        Lower Multiplicity: 0
        infinite
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>453</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00120</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdInstanceDemEventParameterRefs
        Container Type: Sub-Container
        Parent Containers: SdInstance,
        Description: Container for the references to DemEventParameter elements which shall be invoked
        using the API Dem_SetEventStatus in case the corresponding error occurs. The EventId is taken
        from the referenced DemEventParameter's DemEventId symbolic value. The standardized errors are
        provided in this container and can be extended by vendor-specific error references.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.DEM_reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>454</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00121</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SD_E_MALFORMED_MSG
        Parameter Type: Reference
        Parent Containers: SdInstanceDemEventParameterRefs,
        Description: Reference to the DemEventParameter which shall be issued when the SD Instance
        received malformed messsage.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.DEM_reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>455</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00122</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SD_E_OUT_OF_RES
        Parameter Type: Reference
        Parent Containers: SdInstanceDemEventParameterRefs,
        Description: Reference to the DemEventParameter which shall be issued when the SD Instance does
        not have enough resources to handle client.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.DEM_reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>456</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00670</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv4 SD Endpoint Option shall be included in any SD Options Array up to one time.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>457</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00671</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv4 SD Endpoint Option shall only be included if the SOME/IP-SD message is transported
        over IPv4.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>458</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00672</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv4 SD Endpoint Option shall be the first option in the options array, if it exists.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>459</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00673</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If more than one IPv4 SD Endpoint Option is received, only the first shall be processed and all
        further IPv4 SD Endpoint Options shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>460</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00674</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        No SD Entry shall reference the IPv4 SD Endpoint Option.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>461</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00675</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the IPv4 SD Endpoint Option is included in the SD message, the receiving SD implementation
        shall use the content of this option instead of the Source IP Address and Source Port Number.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>462</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00676</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv4 SD Endpoint Option shall use the Type 0x24.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>463</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00677</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv4 SD Endpoint Option shall specify the IPv4-Address, the transport layer protocol (ISO/
        OSI layer 4) used, and a Port Number.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>464</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00678</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Format of the IPv4 SD Endpoint Option shall be as follows: • Length [uint16]: Shall be set
        to 0x0009. • Type [uint8]: Shall be set to 0x24. • Reserved [uint8]: Shall be set to 0x00. •
        IPv4-Address [uint32]: Shall transport the unicast IP-Address of SOME/IP-SD as four Bytes. •
        Reserved [uint8]: Shall be set to 0x00. • Transport Protocol (L4-Proto) [uint8]: Shall be set
        to the transport layer protocol of SOME/IP-SD (currently: 0x11 UDP). • Transport Protocol Port
        Number (L4-Port) [uint16]: Shall be set to the transport layer port of SOME/IP-SD.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>465</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00679</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv6 SD Endpoint Option shall be included in any SD message up to one time.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>466</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00680</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv6 SD Endpoint Option shall only be included if the SOME/IP-SD message is transported
        over IPv6.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>467</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00681</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv6 SD Endpoint Option shall be the first option in the options array, if existing.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>468</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00682</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If more than one IPv6 SD Endpoint Option is received, only the first shall be processed and all
        further IPv6 SD Endpoint Options shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>469</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00683</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        No SD Entry shall reference the IPv6 SD Endpoint Option.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>470</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00684</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the IPv6 SD Endpoint Option is included in the SD message, the receiving SD implementation
        shall use the content of this option instead of the Source IP Address and Source Port for
        answering this SD messages.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>471</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00685</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv6 SD Endpoint Option shall use the Type 0x26.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>472</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00686</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The IPv6 SD Endpoint Option shall specify the IPv6-Address, the transport layer protocol (ISO/
        OSI layer 4) used, and the Port Number.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>473</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00687</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Format of the IPv6 SD Endpoint Option shall be as follows: • Length [uint16]: Shall be set
        to 0x0015. • Type [uint8]: Shall be set to 0x26. • Reserved [uint8]: Shall be set to 0x00. •
        IPv6-Address [uint128]: Shall transport the unicast IP-Address of SOME/IP-SD as 16 Bytes. •
        Reserved [uint8]: Shall be set to 0x00. • Transport Protocol (L4-Proto) [uint8]: Shall be set
        to the transport layer protocol of SOME/IP-SD (currently: 0x11 UDP). • Transport Protocol Port
        Number (L4-Port) [uint16]: Shall be set to the transport layer port of SOME/IP-SD.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SdEndpointOption</srcid><srcstatus/><internalId>660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>474</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00688</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A SOME/IP-SD implementation shall always check that the IP Addresses received in Endpoint
        options and SD Endpoint options are topological correct (reference IP Addresses in the IP
        subnet for which SOME/IP-SD is used) and shall ignore IP Addresses that are not topological
        correct as well as the entries referencing those options.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SecurityConsiderations</srcid><srcstatus/><internalId>663</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>475</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00690</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | Sd_ConfigType
        Kind | Structure
        Elements | implementation specific
        Type
        Comment | The content of the configuration data structure is implementation specific.
        Description | Configuration data structure of Sd module.
        Available via | Sd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Data.Config</srcid><srcstatus/><internalId>917</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>476</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00691</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Counter field of the Type 2 Entry format layout shall have a fixed size of 4 bits.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>477</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00692</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Counter field, which follows the Reserved filed of the Type 2 Entry format layout, is used
        to differentiate identical Type 2 Entries (e.g. multiple subscriptions to same Eventgroup)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>478</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00693</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Counter field in the Type 2 Entry format is used to differentiate different Subscribe
        Eventgroups to otherwise identical Eventgroups (i.e. same Service ID, same Instance ID, same
        Eventgroup ID, and same Major Version). The Counter field shall be reflected by the Server to
        the Subscribe Eventgroup Ack and Nack entries. If identical Consumed Eventgroups are configured
        with different Endpoints, then the SD shall use the Counter to differentiate the different
        Subscriptions. The value of the Counter can be determined by the implementation.
      </description>
      <comment>
        Note: A width of 4 bits limits this to 16 different Subscriptions to the same Eventgroup.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.IdenticalConsumedEventgroup</srcid><srcstatus/><internalId>665</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>479</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00694</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A Stop Subscribe Eventgroup Entry shall reference the same options the Subscribe Eventgroup
        Entry referenced. This includes but is not limited to Endpoint and Configuration options.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_1</srcid><srcstatus/><internalId>1695</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>480</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00695</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a StopSubscribeEventgroup and SubscribeEventgroup for the same Eventgroup (i.e. same Service
        ID, Instance ID, Eventgroup ID, Counter, and Major Version) have to be sent out, these entries
        have to be directly after each other in the same SD message (no entry between them)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3009</srcid><srcstatus/><internalId>787</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3018</srcid><srcstatus/><internalId>788</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>481</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00696</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the entries of a single Service Discovery Message would lead to closing and opening the same
        Socket Connection in the Socket Adaptor, the Service Discovery shall not close the Socket
        Connection first.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SoAdAPIDebouncing</srcid><srcstatus/><internalId>664</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>482</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00697</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A SD Instance does only support a single Address Family (i.e. IPv4 or IPv6). This address
        family shall be learned by means of the SoAd configuration of SdInstanceTxPdu,
        SdInstanceUnicastRxPdu, and SdInstanceMulticastRxPdu (local address)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_366</srcid><srcstatus/><internalId>714</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>483</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00698</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SubscribeEventgroup entry referencing two conflicting Endpoint Options (UDP or TCP) is
        received then a SubscribeEventgroupNack shall be generated. Endpoint options are considered
        conflicting if they are of the same type but hold different values, like different IP or Port
        number.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.012</srcid><srcstatus/><internalId>1100</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.Entry.ConflictingOptions</srcid><srcstatus/><internalId>1138</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>484</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00699</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module shall be able to trigger the sending of initial Events using the
        API SoAd_IfSpecificRoutingGroupTransmit(
      </description>
      <comment>
        This requirement is informational only. It is not a requirement on the Sd module
        but has to be considered by the integrator.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>485</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00700</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module shall be able to reference SocketConnections and
        SocketConnectionGroups per Service Instance/Eventgroup. See the following configuration
        parameters:
        SdClientServiceTcpRef (Service Instance and Eventgroups)
        SdClientServiceUdpRef (Service Instance and Eventgroups)
        SdConsumedEventGroupMulticastGroupRef (Eventgroup)
        SdServerServiceTcpRef (Service Instance and Eventgroups)
        SdServerServiceUdpRef (Service Instance and Eventgroups)
        SdMulticastEventSoConRef in SdEventHandlerMulticast (Eventgroup)
      </description>
      <comment>
        This requirement is informational only.
        This requirement is fulfilled by the configuration specification in chapter 10.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>486</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00701</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        This requirement describes how to derive all necessary data to assemble a SubscribeEventgroup
        Message:
        Derive all static data from the configuration container. These are e.g:
        Container SdClientService: SdClientServiceId
        Container SdClientService: SdClientServiceInstanceId
        Container SdClientService: SdClientServiceMajorVersion
        Container SdClientService: SdClientServiceMinorVersion
        Container SdConsumedEventGroupTimerRef - SdClientTimer: SdClientTimerTTL
        Container SdInstance: SdInstanceHostname
        If TCP is configured for this service (configuration item SdClientServiceTcpRef exists)
        Find the relevant SocketConnection based on the SdClientServiceTcpRef (finding SoConGroup) and
        the Endpoint Option of the OfferService entry (finding SoCon within)
        Call the Socket Adaptor's API SoAd_GetLocalAddr() with the derived SoConID to get back the IP
        Address, Transport protocol (Layer 4), and the port number needed for the Endpoint Option.
        Build the relevant Endpoint Option with L4-Protocol set to TCP (shall be same as in LocalAddr)
        If UDP is configured for this service (configuration item SdClientServiceUdpRef exists)
        Find the relevant SocketConnection based on the SdClientServiceUdpRef (finding SoConGroup) and
        the Endpoint Option of the OfferService entry (finding SoCon within)
        Call the Socket Adaptor's API SoAd_GetLocalAddr() with the derived SoConID to get back the IP
        Address, Transport protocol (Layer 4), and the port number needed for the Endpoint Option.
        Build the relevant Endpoint Option with L4-Protocol set to UDP (shall be same as in LocalAddr)
        Build Configuration Option if configured (see configuration item SdClientCapabilityRecord and
        SdInstanceHostname)
        Build SubscribeEventgroup Entry as described above.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_00701.TCP</srcid><srcstatus/><internalId>577</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00701.UDP</srcid><srcstatus/><internalId>578</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>487</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00702</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdConsumedEventGroupTcpActivationRef is configured: When sending SubscribeEventgroup entries
        for this Eventgroup, the following shall be done:
        The relevant Routing Group shall be identified by following
        SdConsumedEventGroupTcpActivationRef.
        The relevant TCP Socket Connection shall be identified by SdClientServiceTcpRef.
        A TCP Endpoint option shall be constructed with these parameters.
        Only if this client is currently not subscribed yet:
        SoAd_EnableSpecificRouting with the two parameters above.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1196</srcid><srcstatus/><internalId>735</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1880</srcid><srcstatus/><internalId>758</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2979</srcid><srcstatus/><internalId>786</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3674</srcid><srcstatus/><internalId>802</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ConsumedEventgroup.DOWN_MAIN</srcid><srcstatus/><internalId>1013</internalId></linkedfrom><linkedfrom><srcid>Sd.EB.ConsumedEventgroup.RoutingTCP</srcid><srcstatus/><internalId>1020</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_Client_Service_TCP_SoCon_ONLINE_OFFLINE_ONLINE</srcid><srcstatus/><internalId>1329</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>488</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00703</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdConsumedEventGroupUdpActivationRef is configured: When sending SubscribeEventgroup entries
        for this Eventgroup, the following shall be done:
        The relevant Routing Group shall be identified by following
        SdConsumedEventGroupUdpActivationRef.
        The relevant TCP Socket Connection shall be identified by SdClientServiceUdpRef.
        A UDP Endpoint option shall be constructed with these parameters.
        Only if this client is currently not subscribed yet:
        SoAd_EnableSpecificRouting with the two parameters above.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1194</srcid><srcstatus/><internalId>734</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1908</srcid><srcstatus/><internalId>759</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2977</srcid><srcstatus/><internalId>785</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3682</srcid><srcstatus/><internalId>803</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ConsumedEventgroup.DOWN_MAIN</srcid><srcstatus/><internalId>1013</internalId></linkedfrom><linkedfrom><srcid>Sd.EB.ConsumedEventgroup.RoutingUDP</srcid><srcstatus/><internalId>1019</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_ClientService_Unicast_UDP_RoutingGroup_Specific</srcid><srcstatus/><internalId>1254</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_ClientService_Unicast_TCP_RoutingGroup_Specific</srcid><srcstatus/><internalId>1255</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>489</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00704</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdConsumedEventGroupMulticastActivationRef is configured: When receiving
        SubscribeEventgroupAck entries for this Eventgroup and with a referenced Multicast Endpoint
        Option, the following shall be done if this client is currently not subscribed yet:
        The relevant Routing Group shall be identified by following
        SdConsumedEventGroupMulticastActivationRef.
        The relevant UDP Socket Connection shall be identified:
        Find the relevant Socket Connection Group using SdConsumedEventGroupMulticastGroupRef with the
        local Address and Port of the Multicast Endpoint Option or set one up.
        Find the relevant Socket Connection in this Socket Connection Group by finding the Address and
        Port of this Services Endpoint or set one up.
        SoAd_EnableSpecificRouting with the two parameters above.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2882</srcid><srcstatus/><internalId>781</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE</srcid><srcstatus/><internalId>1014</internalId></linkedfrom><linkedfrom><srcid>Sd.EB.ConsumedEventgroup.RoutingMulticast</srcid><srcstatus/><internalId>1021</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_ClientService_Multicast_RoutingGroup_Specific</srcid><srcstatus/><internalId>1256</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ConsumedEventGroup_SocketGroup_Multiplicity</srcid><srcstatus/><internalId>667</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>490</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00706</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every wildcard socket connection shall be reset to wildcard using ReleaseRemoteAddr() if all of
        the following conditions apply:
        The remote address of the socket connection has been set by SD according to SWS_SD_00377.
        No Eventgroup Subscription for this socket connection is used anymore.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2922</srcid><srcstatus/><internalId>783</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_10</srcid><srcstatus/><internalId>1453</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_AVAILABLE_DOWN_0</srcid><srcstatus/><internalId>1473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>491</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00707</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The following table lists production errors that shall be distinguished by the Sd module: See "
        SWS_ServiceDiscovery__Table_18"
        Type or error | Relevance | Related error code | Value [hex]
        Received Malformed Message | Extended Production | SD_E_MALFORMED_MSG | Assigned by DEM
        Out of resources | Extended Production | SD_E_OUT_OF_RES | Assigned by DEM
        Negative Acknowledge received | Extended Production | SD_E_SUBSCR_NACK_RECV | Assigned by DEM
        Table [REF] - Error classification (Extended Production Errors)
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <comment>
        This requirement is informational only
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Out_Of_Resources_OFFER</srcid><srcstatus/><internalId>1339</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Out_Of_Resources_SUBSCRIBE_UDP</srcid><srcstatus/><internalId>1340</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Out_Of_Resources_SUBSCRIBE_TCP</srcid><srcstatus/><internalId>1341</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Receive_Subscribe_Nack</srcid><srcstatus/><internalId>1342</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_01</srcid><srcstatus/><internalId>1343</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_02</srcid><srcstatus/><internalId>1344</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_03</srcid><srcstatus/><internalId>1345</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_STOP_OFFER</srcid><srcstatus/><internalId>1346</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Unicast_STOP_OFFER</srcid><srcstatus/><internalId>1347</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_STOP_SUBSCRIBE</srcid><srcstatus/><internalId>1348</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_SUBSCRIBE_ACK</srcid><srcstatus/><internalId>1349</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_CEVG_LATE_REQUEST</srcid><srcstatus/><internalId>1359</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_CEVG_LATE_REQUEST_2</srcid><srcstatus/><internalId>1360</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.DEM_reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>492</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00708</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every time the Service Discovery module receives a SOME/IP-SD message, the consistency of this
        message has to be checked. This includes but is not limited to:
        Validating that the SOME/IP-SD message is long enough to fit the entries and options arrays (
        total length = 12 + length of entries array + length of options array)
        Check that entries reference existing options.
        In case a malformed message has been received, the extended production error SD_E_MALFORMED_MSG
        shall be reported.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.MessageError.MinPDULength</srcid><srcstatus/><internalId>1118</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.ClientID</srcid><srcstatus/><internalId>1119</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.ProtocolVersion</srcid><srcstatus/><internalId>1120</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.InterfaceVersion</srcid><srcstatus/><internalId>1121</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.MessageType</srcid><srcstatus/><internalId>1122</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.ReturnCode</srcid><srcstatus/><internalId>1123</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.LengthOfEntriesArray</srcid><srcstatus/><internalId>1124</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.OptionsLengthField</srcid><srcstatus/><internalId>1125</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.OptionsLength</srcid><srcstatus/><internalId>1126</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_01</srcid><srcstatus/><internalId>1343</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_02</srcid><srcstatus/><internalId>1344</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_03</srcid><srcstatus/><internalId>1345</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_4</srcid><srcstatus/><internalId>1611</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_1</srcid><srcstatus/><internalId>1616</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_3</srcid><srcstatus/><internalId>1618</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_3</srcid><srcstatus/><internalId>1624</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_3</srcid><srcstatus/><internalId>1630</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorMinPDULength</srcid><srcstatus/><internalId>1659</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorClientId</srcid><srcstatus/><internalId>1660</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorProtocolVersion</srcid><srcstatus/><internalId>1661</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorInterfaceVersion</srcid><srcstatus/><internalId>1662</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorMessageType</srcid><srcstatus/><internalId>1663</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorReturnCode</srcid><srcstatus/><internalId>1664</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorLengthOfEntriesArray</srcid><srcstatus/><internalId>1665</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorOptionsLengthField</srcid><srcstatus/><internalId>1666</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorOptionsLength</srcid><srcstatus/><internalId>1667</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>493</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00041</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerTimerInitialOfferRepetitionBaseDelay
        Parameter Type: FloatValue
        Parent Containers: SdServerTimer,
        Description: The base delay in [s] for offer repetitions. Successive offers have an exponential
        back off delay (1x base delay, 2x base delay, 4x base delay, ...). This parameter is mandatory
        for ServerService.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>494</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientTimerInitialFindRepetitionsBaseDelay
        Parameter Type: FloatValue
        Parent Containers: SdClientTimer,
        Description: The base delay in [s] for find repetitions. Successive finds have an exponential
        back off delay (1x base delay, 2x base delay, 4x base delay, ...). This parameter is mandatory
        for ClientService.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>495</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdConsumedEventGroupMulticastActivationRef
        Parameter Type: Reference
        Parent Containers: SdConsumedEventGroup,
        Description: The reference of a Routing Group in order to activate and setup the Socket
        Connection for Multicast Events of this EventGroup. The multicast address from the received
        Multicast option is setup by SoAd_RequestIpAddrAssignment.
        Introduction: The local address is the same as for the unicast events; thus, it was sent in the
        UDP Endpoint option of the Subscribe EventGroup entry. This is usually equal to the
        SdConsumedEventGroupUdpActivationRef.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>496</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00123</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SD_E_SUBSCR_NACK_RECV
        Parameter Type: Reference
        Parent Containers: SdInstanceDemEventParameterRefs,
        Description: Reference to the DemEventParameter which shall be issued when receiving
        SubscribeEventgroupNack entry.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>497</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00709</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Ignore, if SoAd_IfTransmit() returns E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_209</srcid><srcstatus/><internalId>822</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>498</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00710</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a received entry does not reference at least the configured options, this entry shall be
        ignored or a SubscribeEventgroupNack (for SubscribeEventgroup entries) shall be sent. Missing
        Multicast Endpoint Options shall be ignored by the client, if unicast communication via UDP was
        set up (UDP Endpoint Option in Offer and Subscribe)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_952</srcid><srcstatus/><internalId>848</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match003</srcid><srcstatus/><internalId>925</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>499</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00711</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Routing Groups of EventGroups (see SdConsumedEventGroupTcpActivationRef,
        SdConsumedEventGroupUdpActivationRef, and SdConsumedEventGroupMulticastActivationRef) shall be
        deactivated, if they are not needed anymore (Main phase was left, StopOffer received or
        ConsumedEventgroup was released)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.EB.ConsumedEventgroup.RoutingUDP</srcid><srcstatus/><internalId>1019</internalId></linkedfrom><linkedfrom><srcid>Sd.EB.ConsumedEventgroup.RoutingTCP</srcid><srcstatus/><internalId>1020</internalId></linkedfrom><linkedfrom><srcid>Sd.EB.ConsumedEventgroup.RoutingMulticast</srcid><srcstatus/><internalId>1021</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>500</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00124</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdCapabilityRecordMatchCallout
        Container Type: Sub-Container
        Parent Containers: SdConfig,
        Description: Callout that is invoked by the Sd implementation to determine whether the
        configuration options contained in the entries of a received SD message match the capability
        record elements configured in SdServerCapabilityRecord or SdClientCapabilityRecord.
        Lower Multiplicity: 0
        infinite
        Post-Build-Variant-Multiplicity: false
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.CapabilityRecordMatchCallout</srcid><srcstatus/><internalId>675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>501</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00125</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdCapabilityRecordMatchCalloutName
        Parameter Type: FunctionRef
        Parent Containers: SdCapabilityRecordMatchCallout,
        Description: Function name (i.e., C-identifier) of the SdCapabilityRecordMatchCallout.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: false
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: LINK, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: LINK, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        FunctionName Def Condition:Max-Length: , Min-Length
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.CapabilityRecordMatchCallout</srcid><srcstatus/><internalId>675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>502</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00126</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerCapabilityRecordMatchCalloutRef
        Parameter Type: Reference
        Parent Containers: SdServerService,
        Description: Reference to a SdCapabilityRecordMatchCallout, The referenced
        SdCapabilityRecordMatchCallout is invoked to determine whether the configuration options
        contained in the entries of a received SD message match the server's configured
        SdServerCapabilityRecord elements.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Sd/SdConfig/SdCapabilityRecordMatchCallout
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.CapabilityRecordMatchCallout</srcid><srcstatus/><internalId>675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>503</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00127</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientCapabilityRecordMatchCalloutRef
        Parameter Type: Reference
        Parent Containers: SdClientService,
        Description: Reference to a SdCapabilityRecordMatchCallout, The referenced
        SdCapabilityRecordMatchCallout is invoked to determine whether the configuration options
        contained in the entries of a received SD message match the client's configured
        SdClientCapabilityRecord elements.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Sd/SdConfig/SdCapabilityRecordMatchCallout
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.CapabilityRecordMatchCallout</srcid><srcstatus/><internalId>675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>504</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00128</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdInstanceLocalAdressCheckLength
        Parameter Type: Integer
        Parent Containers: SdInstance,
        Description: This item describes on how many bits of the addresses shall be compared to
        determine, if a remote address is acceptable to be used.
        Introduction: This shall support IPv4 (0..32) and IPv6 (0..128). If this item is not present,
        the security checks use the configured netmask instead. "0" meaning not to check at all. For
        example "8" means that the first 8 bits of a remote address must be equal to the local address
        to be considered acceptable.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 128 (Type:
        Min-Value: 0 (Type:
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.InstanceLocalAdressCheckLength</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>505</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00712</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If Sd_LocalIpAddrAssignmentChg() is called with a state other than "TCPIP_IPADDR_STATE_ASSIGNED"
        while being in Main Phase:
        The Down Phase shall be entered.
        SD_CLIENT_SERVICE_DOWN" shall be indicated to the BswM module by calling the API
        BswM_Sd_ClientServiceCurrentState(), if the present state is SD_CLIENT_SERVICE_AVAILABLE.
        SD_CONSUMED_EVENTGROUP_DOWN" shall be indicated to the BswM module by calling the API
        BswM_Sd_ConsumedEventGroupCurrentState() for all associated ConsumedEventgroups, if the present
        state is SD_CONSUMED_EVENTGROUP_AVAILABLE.
        If SdSubscribeEventgroupRetryEnable is set to TRUE and if SdSubscribeEventgroupRetryMax is
        greater 0, cancel the corresponding client service subscription retry delay timer and reset
        subscription retry counter of all corresponding Eventgroups to 0.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_687</srcid><srcstatus/><internalId>729</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3064</srcid><srcstatus/><internalId>790</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3801</srcid><srcstatus/><internalId>807</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3840</srcid><srcstatus/><internalId>809</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_Instance_Unassigned</srcid><srcstatus/><internalId>1356</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_Linkdown_LinkUp_TTL</srcid><srcstatus/><internalId>1367</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_TX_Unassign</srcid><srcstatus/><internalId>1401</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_RX_Unassign</srcid><srcstatus/><internalId>1402</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.RetrySubscriptionEventgroups</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>506</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00713</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Consumed Event Group is not requested anymore as indicated by a call of
        Sd_ConsumedEventGroupSetState with state SD_CONSUMED_EVENTGROUP_RELEASED, the Service Discovery
        module shall perform the following steps for the consumed event group:
        A StopSubscribeEventgroup shall be sent.
        The status shall be set to SD_CONSUMED_EVENTGROUP_DOWN and be reported to the BswM by calling
        the API BswM_Sd_ConsumedEventGroupCurrentState(), if the status is not currently
        SD_CONSUMED_EVENTGROUP_DOWN.
        If SdSubscribeEventgroupRetryEnable is set to TRUE and if SdSubscribeEventgroupRetryMax is
        greater 0, cancel the corresponding client service subscription retry delay timer and reset
        subscription retry counter of all corresponding Eventgroups to 0.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1996</srcid><srcstatus/><internalId>763</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2054</srcid><srcstatus/><internalId>764</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2902</srcid><srcstatus/><internalId>782</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_Release_ConsumedEventGroup</srcid><srcstatus/><internalId>1355</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_TCP_INITIALWAIT_AVAILABLE</srcid><srcstatus/><internalId>1405</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_DOWN</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_AVAILABLE_DOWN_0</srcid><srcstatus/><internalId>1473</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SubscriptionDelayTimer</srcid><srcstatus/><internalId>669</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.RetrySubscriptionEventgroups</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>507</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00714</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If an entry other than a SubscribeEventgroup entry references two or more options that are in
        conflict, this entry shall be silently discarded.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_1</srcid><srcstatus/><internalId>1622</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Receive.Entry.ConflictingOptions</srcid><srcstatus/><internalId>1138</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>508</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00715</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The use of configuration options is limited to Type 1 Entries of any Service-ID and Type 2
        Entries of Service-ID 0xFFFE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_14</srcid><srcstatus/><internalId>1490</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_15</srcid><srcstatus/><internalId>1491</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>509</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00716</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If either the received Type 1 SD entry references a configuration option or a service match
        candidate has capability records configured (i.e., SdServerCapabilityRecord in case of a
        received FindService entry or SdClientCapabilityRecord in case of a OfferService or a
        StopOfferService entry), the configured SdCapabilityRecordMatchCallout shall be invoked by the
        SD implementation.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.CapabilityRecordMatchCallout</srcid><srcstatus/><internalId>675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>510</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00717</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A received Type 2 SD entry with Service ID 0xFFFE shall be matched accordingly to SWS_SD_00716
        with the capability records of the Service (SdServerCapabilityRecord in case of a received
        SubscribeEventgroup or StopSubscribeEventgroup entry or SdClientCapabilityRecord in case of
        SubscribeEventgroupAck or SubscribeEventgroupNack entry)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_15</srcid><srcstatus/><internalId>1491</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>511</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00718</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the invoked SdCapabilityRecordMatchCallout returns true, the respective service instance
        match candidate actually provides a match for the received SD message including the configured
        capability records.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.CapabilityRecordMatchCallout</srcid><srcstatus/><internalId>675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>512</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00719</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the invoked SdCapabilityRecordMatchCallout returns false, the respective service instance
        match candidate actually does not provide a match for the received SD message due to the
        mismatch with respect to the configured capability records.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.CapabilityRecordMatchCallout</srcid><srcstatus/><internalId>675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>513</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00720</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        For checking whether endpoints are topological correct, the value of ECUC_SD_00128 shall be
        used in order to determine on how many leading bits shall be compared when checking if an
        address is local. If not present, the value of the locally configured netmask for the IP
        address shall be used.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.InstanceLocalAdressCheckLength</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>514</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00721</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If an OfferService entry was received and its TTL timer did not expire yet, the associated
        Socket Connections are in state SOAD_SOCON_ONLINE in the Main phase:
        If the client service has not been reported as SD_CLIENT_SERVICE_AVAILABLE:
        the API SoAd_EnableSpecificRouting() shall be called with SdClientServiceActivationRef (see
        SdConsumedMethods) and the relevant Socket Connections for this Client Service Instance.
        SD_CLIENT_SERVICE_AVAILABLE shall be indicated to the BswM module by calling the API
        BswM_Sd_ClientServiceCurrentState(
        For each currently requested Consumed Eventgroup of this Client Service Instance (Consumed
        Eventgroups are requested using Sd_ConsumedEventGroupSetState() and with state
        SD_CONSUMED_EVENTGROUP_REQUESTED or automatically on startup if SdConsumedEventGroupAutoRequire
        is configured to true), the following shall be done in exactly this order:
        StopSubscribeEventgroup entry shall be sent out, if the last SubscribeEventgroup entry was sent
        as reaction to an OfferService entry received via Multicast, it was never answered with a
        SubscribeEventgroupAck, and the current OfferService entry was received via Multicast.
        A SubscribeEventgroup entry shall be sent out.
        If SdSubscribeEventgroupRetryEnable is set to TRUE and if SdSubscribeEventgroupRetryMax is
        greater 0, the Eventgroup subscription retry counter shall be reset to 1.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.WaitSoCon.Ev.502</srcid><srcstatus/><internalId>1002</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_3</srcid><srcstatus/><internalId>1459</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>515</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00722</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Client Service is reported as SD_CLIENT_SERVICE_DOWN to the BswM by calling the API
        BswM_Sd_ClientServiceCurrentState(
        the API SoAd_DisableSpecificRouting() shall be called with SdClientServiceActivationRef (see
        SdConsumedMethods) and the relevant Socket Connections for this Client Service Instance.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Available.Ev.403</srcid><srcstatus/><internalId>993</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>516</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00730</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the TCP/IP connection has been lost (Socket connection is other than SOAD_SOCON_ONLINE), the
        Service Discovery Module shall leave the Repetition Phase, enter the Wait Phase, and stop the
        TTL timers of the associated Client Service Instances and EventGroups.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ConnectionLostClient</srcid><srcstatus/><internalId>678</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>517</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00731</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the TCP/IP connection has been lost (Socket connection is other than SOAD_SOCON_ONLINE), the
        Service Discovery Module shall leave the Main Phase, enter the Wait Phase, and stop the TTL
        timers of the associated Client Service Instances and EventGroups.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_Client_Service_TCP_SoCon_ONLINE_OFFLINE_ONLINE</srcid><srcstatus/><internalId>1329</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>518</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00732</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the TCP/IP connection has been lost (Socket connection is other than SOAD_SOCON_ONLINE), the
        Service Discovery Module shall leave the Repetition Phase and enter the Wait Phase.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ConnectionLostServer</srcid><srcstatus/><internalId>677</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>519</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00733</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the TCP/IP connection has been lost (Socket connection is other than SOAD_SOCON_ONLINE), the
        Service Discovery Module shall leave the Main Phase and enter the Wait Phase.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ConnectionLostServer</srcid><srcstatus/><internalId>677</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>520</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_91001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | &lt;SdCapabilityRecordMatchCallout&gt;
        Syntax
        boolean &lt;SdCapabilityRecordMatchCallout&gt; (PduIdType pduID, uint8 type, uint16 serviceID, uint16
        instanceID, uint8 majorVersion, uint32 minorVersion, const Sd_ConfigOptionStringType*
        receivedConfigOptionPtrArray, const Sd_ConfigOptionStringType* configuredConfigOptionPtrArray)
        Service ID [hex] | 0x10
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | pduID | ID of the received I-PDU (used to to distinguish between different SD
        instances)
        type | Content of the Type field of the received entry (see section 7.3.8)
        serviceID | Content of the Service ID field of the received entry (see section 7.3.8)
        instanceID | Content of the Instance ID field of the received entry (see section 7.3.8)
        majorVersion | Content of the Major Version field of the received entry (see section 7.3.8)
        minorVersion | Content of the Minor Version field of the received entry (see section 7.3.8)
        receivedConfigOptionPtrArray | NULL_PTR terminated array of pointers to zero-terminated
        configuration strings received in the incoming entry, i.e. received SD message (see Figure 6 -
        Configuration Option)
        configuredConfigOptionPtrArray | NULL_PTR terminated array of pointers to zero-terminated
        configuration strings configured in the local SD configuration (see Figure 6 - Configuration
        Option)
        Parameters (inout) | None
        Parameters (out) | None
        Return value | boolean | TRUE: The received configuration options match the configured ones.
        FALSE: The received configuration options do not match the configured ones.
        Description | This callout is invoked to determine whether the configuration options contained
        in a received SD message match the ones configured in the local SD configuration (i.e.,
        SdServerCapabilityRecord or SdClientCapabilityRecord)
        Available via | Sd_Externals.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.CapabilityRecordMatchCallout</srcid><srcstatus/><internalId>675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>521</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_91002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | Sd_ConfigOptionStringType
        Kind | Const Pointer
        Type | const uint8*
        Description | Type for a zero-terminated string of configuration options.
        Available via | Sd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ConfigOptions</srcid><srcstatus/><internalId>674</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>522</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00723</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        During initialization of the SD module, the API SoAd_OpenSoCon() shall be called for all Socket
        Connections associated with SdInstanceTxPdu, SdInstanceUnicastRxPdu and
        SdInstanceMulticastRxPdu.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_245</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Init</srcid><srcstatus/><internalId>1307</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>523</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00724</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdServerTimerRequestResponseMinDelay and SdServerTimerRequestResponseMaxDelay are set to the
        same value, this value shall be used as delay. If SdServerTimerRequestResponseMinDelay and
        SdServerTimerRequestResponseMaxDelay are set to 0, no delay shall be introduced.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_00491.ServerService</srcid><srcstatus/><internalId>581</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>524</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00725</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdClientTimerRequestResponseMinDelay and SdClientTimerRequestResponseMaxDelay are set to the
        same value, this value shall be used as delay. If SdClientTimerRequestResponseMinDelay and
        SdClientTimerRequestResponseMaxDelay are set to 0, no delay shall be introduced.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_00491.ClientService</srcid><srcstatus/><internalId>582</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>525</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00129</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceLoadBalancingPriority
        Parameter Type: Integer
        Parent Containers: SdServerService,
        Description: Defines the value to be used for load balancing priority in the service offer.
        Lower value means higher priority.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.LoadBalancing</srcid><srcstatus/><internalId>679</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>526</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00130</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceLoadBalancingWeight
        Parameter Type: Integer
        Parent Containers: SdServerService,
        Description: Defines the value to be used for load balancing weight in the service offer.
        Higher value means higher probability to be chosen.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.LoadBalancing</srcid><srcstatus/><internalId>679</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>527</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00131</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdSubscribeEventgroupRetryEnable
        Parameter Type: Boolean
        Parent Containers: SdGeneral,
        Description: Switch to enable or disable the retry functionality to subscribe to Eventgroups of
        ServerServices with TTL set to 0xFFFFFF.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>528</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00132</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdSubscribeEventgroupRetryMax
        Parameter Type: Integer
        Parent Containers: SdClientTimer,
        Description: Maximum count of retry a subscription, if a subscription to an event group is not
        acknowledged by SubscribeEventGroupAck or SubscribeEventGroupNack. 0x0=no retry, 0xFF=retry
        forever (as long as the event group is requested)
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 255 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>529</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00133</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdSubscribeEventgroupRetryDelay
        Parameter Type: FloatValue
        Parent Containers: SdClientTimer,
        Description: Time in seconds when a subscription to an event group shall be retriggered, if no
        SubscribeEventGroupAck or SubscribeEventGroupNack was received.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 50 (Type: CLOSED)
        Min-Value: 0.001 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>530</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00611</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Load Balancing Option is used, the Priority field shall be set to the configured value
        of SdServerServiceLoadBalancingPriority.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.LoadBalancing</srcid><srcstatus/><internalId>679</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>531</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00734</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every wildcard socket connection group shall be reset to wildcard using
        SoAd_ReleaseIpAddrAssignment() if all of the following conditions apply:
        Local address of the socket connection group has been set by SD according to SWS_SD_00377.
        All socket connections of this socket connection group have been released.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2923</srcid><srcstatus/><internalId>784</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_AVAILABLE_DOWN_0</srcid><srcstatus/><internalId>1473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>532</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00735</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The subscribe Eventgroup retry handling shall only be processed for Eventgroups of a
        ServerService where
        SdSubscribeEventgroupRetryMax is greater than 0,
        and only if SdSubscribeEventgroupRetryEnable is set to TRUE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1424</srcid><srcstatus/><internalId>748</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RetryOfSubscription</srcid><srcstatus/><internalId>1352</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.RetryOfSubscriptions</srcid><srcstatus/><internalId>666</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.RetrySubscriptionEventgroups</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>533</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00736</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdSubscribeEventgroupRetryEnable is set to TRUE and SdSubscribeEventgroupRetryMax is set to
        a value greater than 0, every time a Consumed Eventgroup transit to the state
        SD_CONSUMED_EVENTGROUP_REQUESTED, the following actions shall be done:
        the corresponding client service subscription retry delay timer shall be started and set to
        SdSubscribeEventgroupRetryDelay, if the timer is not already running
        the Eventgroup subscription retry counter shall be initialized with 1
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1936</srcid><srcstatus/><internalId>761</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_CEVG_LATE_REQUEST</srcid><srcstatus/><internalId>1359</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_CEVG_LATE_REQUEST_2</srcid><srcstatus/><internalId>1360</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.RetrySubscriptionEventgroups</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>534</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00737</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the client service subscription retry delay timer elapsed and the counts of retries of
        subscription (SdSubscribeEventgroupRetryMax) did not exceed for a configured Eventgroup, the
        subscription for the Eventgroup shall be re-triggered by sending a combination of
        StopSubscribeEventgroup/SubscribeEventgroup, and the retry counter shall be incremented. If the
        counts of retries of subscription (SdSubscribeEventgroupRetryMax) exceeds, the ServiceDiscovery
        module shall raise the runtime error "SD_E_COUNT_OF_RETRY_SUBSCRIPTION_EXCEEDED"
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1203</srcid><srcstatus/><internalId>736</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RetryOfSubscription</srcid><srcstatus/><internalId>1352</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_CEVG_LATE_REQUEST</srcid><srcstatus/><internalId>1359</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_CEVG_LATE_REQUEST_2</srcid><srcstatus/><internalId>1360</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>535</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00738</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The retry of a subscription for a requested Eventgroup shall be stopped for the following
        conditions:
        If a SubscribeEventGroupAck or SubscribeEventGroupNack was received for the requested
        Eventgroup.
        If the count of retries exceeds SdEventgroupSubscribeRetryMax of the requested Eventgroup.
        If the requested Eventgroup is set to "SD_CONSUMED_EVENTGROUP_RELEASED"
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1225</srcid><srcstatus/><internalId>738</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1592</srcid><srcstatus/><internalId>753</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1995</srcid><srcstatus/><internalId>762</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3839</srcid><srcstatus/><internalId>808</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RetryOfSubscription</srcid><srcstatus/><internalId>1352</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_SECOND_OFFER</srcid><srcstatus/><internalId>1358</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_INFINITE_RETRY</srcid><srcstatus/><internalId>1362</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_INFINITE_RETRY_TTL_NOT_INFINITE</srcid><srcstatus/><internalId>1363</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>536</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00739</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdSubscribeEventgroupRetryEnable is set to TRUE and SubscribeEventgroupRetryMax is set to
        0xFF, the retries of subscription shall continue as long as all of the following conditions are
        fulfilled:
        the corresponding Eventgroup is set to "SD_CONSUMED_EVENTGROUP_REQUESTED"
        no SubscribeEventGroupAck or no SubscribeEventGroupNack was received
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1204</srcid><srcstatus/><internalId>737</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1480</srcid><srcstatus/><internalId>751</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1593</srcid><srcstatus/><internalId>754</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_INFINITE_RETRY</srcid><srcstatus/><internalId>1362</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.RetrySubscriptionEventgroups</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>537</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00740</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The client service subscription retry delay timer shall be cancelled, if the retry is finished
        for all Eventgroups of a ClientService according to SWS_SD_00738.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1481</srcid><srcstatus/><internalId>752</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3766</srcid><srcstatus/><internalId>806</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_SECOND_OFFER</srcid><srcstatus/><internalId>1358</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>538</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00741</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a Consumed Eventgroup switches to the state SD_CONSUMED_EVENTGROUP_REQUESTED while the
        corresponding state of the requested Service Instance was already set to
        SD_CLIENT_SERVICE_AVAILABLE (due to an already received Offer Service with TTL 0xFFFFFF), a
        SubscribeEventgroup entry shall be sent out only if all of the following conditions apply:
        SdSubscribeEventgroupRetryEnable is set to TRUE,
        SdSubscribeEventgroupRetryMax is greater 0,
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1923</srcid><srcstatus/><internalId>760</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_CEVG_LATE_REQUEST</srcid><srcstatus/><internalId>1359</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_CEVG_LATE_REQUEST_2</srcid><srcstatus/><internalId>1360</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.RetrySubscriptionEventgroups</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>539</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00742</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type of error | Related error code | Error value
        Retry was not successful | SD_E_COUNT_OF_RETRY_SUBSCRIPTION_EXCEEDEDSd.
        SD_E_COUNT_OF_RETRY_SUBSCRIPTION_EXCEEDED | 0x06
      </description>
      <comment>
        This requirement is informational only
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_RetryOfSubscription</srcid><srcstatus/><internalId>1352</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1228</srcid><srcstatus/><internalId>739</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>540</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_91003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | Sd_SoConModeChg
        Syntax
        void Sd_SoConModeChg (SoAd_SoConIdType SoConId, SoAd_SoConModeType Mode)
        Service ID [hex] | 0x43
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in) | SoConId | socket connection index specifying the socket connection with the
        mode change.
        Mode | new mode
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Notification about a SoAd socket connection state change, e.g. socket connection
        gets online
        Available via | Sd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SoConModeChg</srcid><srcstatus/><internalId>680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>541</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        See"Sd_x_Module"
        Module Name | SdSd
        Module Description | Configuration of the Service Discovery module.
        Post-Build Variant Support | true
        Supported Config Variants | VARIANT-LINK-TIME, VARIANT-POST-BUILD, VARIANT-PRE-COMPILE
        Included containers: "Sd_x_Included_Containers"
        Included Containers
        Container Name | Multiplicity | Scope / Dependency
        SdConfig | 1 | This container contains the configuration parameters and sub containers of the
        AUTOSAR Service Discovery module.
        SdGeneral | 1 | This container lists the general configuration parameters for the Service
        Discovery module.
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.1</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>542</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00134</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServiceGroup
        Container Type: Sub-Container
        Parent Containers: SdConfig,
        Description: Contains the configuration parameters of the AUTOSAR SD module's SdServiceGroupS.
        Lower Multiplicity: 0
        infinite
        Post-Build-Variant-Multiplicity: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>543</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00135</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServiceGroupHandleId
        Parameter Type: Integer
        Parent Containers: SdServiceGroup,
        Description: The numerical value used as the ID of this SdServiceGroup. The SdServiceHandleId
        is required by the API calls to start and stop SdServiceGroupS.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>544</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00136</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServiceGroupRef
        Parameter Type: Reference
        Parent Containers: SdServerService,
        Description: Reference to the SdServiceGroupS this SdServerService belongs to.
        Lower Multiplicity: 0
        infinite
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Sd/SdConfig/SdServiceGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>545</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00137</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServiceGroupRef
        Parameter Type: Reference
        Parent Containers: SdClientService,
        Description: Reference to the SdServiceGroupS this SdClientService belongs to.
        Lower Multiplicity: 0
        infinite
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Sd/SdConfig/SdServiceGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>546</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00138</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdServerServiceAutoAvailable
        Parameter Type: Boolean
        Parent Containers: SdServerService,
        Description: If existing and set to true, this Service will be set to "Available" on start.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>547</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00139</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdSetRemAddrOfClientRxMulticastSoCon
        Parameter Type: Boolean
        Parent Containers: SdGeneral,
        Description: If SdSetRemAddrOfClientRxMulticastSoCon is set to TRUE, the Service Discovery
        module shall choose an multicast socket connection which match to the received Endpoint option
        of the corresponding OfferService. If no particular socket connection exist, then an unused
        socket connection with its remote address set to wildcard shall be used and the remote address
        shall be updated accordingly. If SdSetRemAddrOfClientRxMulticastSoCon is set to FALSE, the
        Service Discovery shall choose an unused socket connection with its remote address set to
        wildcard and skip to update the remote address, i.e. the wildcard for the remote address is
        kept.
        Introduction: Note: setting SdSetRemAddrOfClientRxMulticastSoCon to FALSE supports the re-use
        of a multicast socket connection for multiple ClientServices which are located on the same ECU
        and subscribed to ServerServices which are located on differen ECUs. The configuration of the
        ECU where the ClientServices are located, could be simplified by only configuring one socket
        connection within the multicast socket connection group.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.SetRemAddrOfClientRxMulticastSoCon</srcid><srcstatus/><internalId>682</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>548</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00140</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdVersionDrivenFindBehavior
        Parameter Type: Enumeration
        Parent Containers: SdClientService,
        Description: Defined the possible acceptance kinds for required service instances. Tags: atp.
        Status=draft
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: LINK, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Enumeration Literal: EXACT_OR_ANY_MINOR_VERSION, AUTOSAR_ECUC
        Enumeration Literal: MINIMUM_MINOR_VERSION, AUTOSAR_ECUC
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>549</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00141</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdBlacklistedVersions
        Container Type: Sub-Container
        Parent Containers: SdClientService,
        Description: Collection of blacklisted versions. Tags: atp.Status=draft
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Post-Build-Variant-Multiplicity: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>550</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00142</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdBlacklistedMinorVersions
        Parameter Type: Integer
        Parent Containers: SdBlacklistedVersions,
        Description: Blaclisted MinorVersions. Tags: atp.Status=draft
        Lower Multiplicity: 0
        infinite
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 4294967295 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>551</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00143</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdClientServiceAutoRequire
        Parameter Type: Boolean
        Parent Containers: SdClientService,
        Description: If existing and set to true, this Service will be set to "required" on start.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>552</internalId></specobject>
    <specobject>
      <id>Sd.ECUC_SD_00144</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SdConsumedEventGroupAutoRequire
        Parameter Type: Boolean
        Parent Containers: SdConsumedEventGroup,
        Description: If existing and set to true, this EventGroup will be set to "required" on start.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>553</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00612</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Load Balancing Option is used, the Weight field shall be set to the configured value of
        SdServerServiceLoadBalancingWeight.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.LoadBalancing</srcid><srcstatus/><internalId>679</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>554</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00743</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If several ServerServices refer to the same SdServerTimer, they shall share a common timer (and
        therefore a common random offset), if they either refer to the same SdServiceGroup and do not
        refer to any other (additional) SdServiceGroup or, if SdServerServiceAutoAvailable of all
        ServerServices are set to TRUE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>555</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00744</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If several ClientServices refer to the same SdClientTimer, they shall share a common timer (and
        therefore a common random offset), if they either refer to the same SdServiceGroup and do not
        refer to any other (additional) SdServiceGroup or, if SdClientServiceAutoRequire of all
        ClientServices are set to TRUE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>556</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00745</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        A SdClientService and SdServerService, respectively, is requested and available, respectively,
        if at least one SdServiceGroup is started it refers to.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>557</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00746</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The state of a SdClientService and a SdServerService, respectively, which refer to at least one
        SdServiceGroup shall only be changed via Sd_ServiceGroupStart and Sd_ServiceGroupStop,
        respectively. The state of a SdClientService and SdServerService, respectively, which do NOT
        reference any SdServiceGroup, shall only be changed via Sd_ClientServiceSetState() and
        Sd_ServerServiceSetState(), respectively.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>558</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00747</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The AUTOSAR ServiceDiscovery module shall keep track of requests and availabilities per
        SdClientServiceS and SdServerServiceS, respectively, which reference at least one
        SdServiceGroup. Therefore each affected SdClientService and SdServerService shall have a client
        request counter and server availability counter, respectively. Each time Sd_ServiceGroupStart(
        is called, the client request counter shall be incremented for all affected SdClientServices
        and the server availability counter shall be incremented for all affected SdServerServices.
        Each time Sd_ServiceGroupStop() is called the client request counter shall be decremented for
        all affected SdClientServices, and the server availability counter shall be decremented for all
        affected SdServerServices.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>559</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00748</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        By default, all SdServiceGroupS shall be in the state stopped and they shall not be started
        automatically by a call to Sd_Init.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>560</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00749</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If an SdServiceGroup is started by Sd_ServiceGroupStart(), the AUTOSAR Service Discovery module
        shall set all SdClientServiceS which are referencing the affected SdServiceGroup to
        SD_CLIENT_SERVICE_REQUESTED and all SdServerServiceS which are referencing the affected
        SdServiceGroup to SD_SERVER_SERVICE_AVAILABLE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>561</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00750</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If an SdServiceGroup is stopped by Sd_ServiceGroupStop(), the AUTOSAR Service Discovery module
        shall set all SdClientServiceS, which are referencing the affected SdServiceGroup to
        SD_CLIENT_SERVICE_RELEASED where the corresponding client request counter (see SWS_SD_00747)
        has reached 0, and all SdServerServices which are referencing the affected SdServiceGroup to
        SD_SERVER_SERVICE_DOWN where the corresponding server availability counter (see SWS_SD_00747)
        has reached 0.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>562</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_01503</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Service Discovery module shall ignore all received service entries of a Client Service,
        where the minor version of the received entry is specified within a version blacklist of the
        corresponding SdClientService (see SdBlacklistedVersions)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2231</srcid><srcstatus/><internalId>765</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2303</srcid><srcstatus/><internalId>769</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Blacklisted_MinorVersions</srcid><srcstatus/><internalId>1312</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.MinorVersionBlacklisting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>563</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_04089</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdVersionDrivenFindBehavior is set to MINIMUM_MINOR_VERSION, the Minor Version in a received
        OfferService or StopOfferService shall be checked for identifying Service Instances and its
        associated Eventgroups. The Service Discovery module shall process a OfferServices or
        StopOfferServices where the minor version of the received entry are equal or greater than the
        configured minor version of the corresponding SdClientService.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2244</srcid><srcstatus/><internalId>768</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2316</srcid><srcstatus/><internalId>772</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Different_Minor_Versions</srcid><srcstatus/><internalId>1311</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>564</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_07016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a service match candidate is detected for a ClientService where SdVersionDrivenFindBehavior
        is set to MINIMUM_MINOR_VERSION and the ClientService has already triggered a subsription to
        another ServerService, the Service Discovery module shall silently discard this service match
        candidate.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.DiscardServiceMatchCandidate</srcid><srcstatus/><internalId>683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>565</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_10503</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SdVersionDrivenFindBehavior is set to MINIMUM_MINOR_VERSION the following points shall be
        considered by the Service Discovery module:
        the Minor Version shall be set to the minimum acceptable required minor version in the
        configuration
        Service Discovery shall use 0xFFFF FFFF (ANY) for the FindService entry, which means that
        services with any minor version shall will be returned
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_278</srcid><srcstatus/><internalId>824</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Different_Minor_Versions</srcid><srcstatus/><internalId>1311</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>566</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_91006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | Sd_ServiceGroupStart
        Syntax
        void Sd_ServiceGroupStart (Sd_ServiceGroupIdType ServiceGroupId)
        Service ID [hex] | 0x44
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SdServiceGroupS. Non reentrant for the same SdServiceGroup.
        Parameters (in) | ServiceGroupId | Id of SdServiceGroup to be started
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Starts a preconfigured SdServiceGroup. For example, OfferService entries will be
        sent out after the call of Sd_ServiceGroupStart() for all ServerServives of a SdServiceGroup,
        which are not requested yet.
        Available via | Sd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>567</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_91007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | Sd_ServiceGroupStop
        Syntax
        void Sd_ServiceGroupStop (Sd_ServiceGroupIdType ServiceGroupId)
        Service ID [hex] | 0x45
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SdServiceGroupS. Non reentrant for the same SdServiceGroup.
        Parameters (in) | ServiceGroupId | Id of SdServiceGroup to be stopped
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Stops a preconfigured SdServiceGroup. For example, StopOfferService entries will
        be sent out after the call of Sd_ServiceGroupStop() for all ServerServices of a SdServiceGroup,
        which are not requested by another SdServiceGroup.
        Available via | Sd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>568</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_91008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | Sd_ServiceGroupIdType
        Kind | Type
        Derived from | uint16
        Range | 0..65535 | -- | Zero-based integer number
        Description | The AUTOSAR ServiceDiscovery module's SdServiceGroup object identifier.
        Available via | Sd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.ServiceGroup</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>569</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00751</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SD_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Service Discovery Module receives an StopOfferService Entry while the current state
        SD_CLIENT_SERVICE_REQUESTED is for this Client Service Instance, the following step(s) shall be
        performed in the following order:
        Cancel the repetition timer.
        Leave the Repetition Phase immediately and enter the Main Phase.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Sd.StopOfferRequested</srcid><srcstatus/><internalId>684</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>570</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>Sd.SWS_SD_00656.TCP</id>
      <status>approved</status>
      <version>1</version>
      <description>TCP is configured for this service</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_311</srcid><srcstatus/><internalId>825</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_323</srcid><srcstatus/><internalId>826</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Tcp</srcid><srcstatus/><internalId>1319</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00656</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>571</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00656.UDP</id>
      <status>approved</status>
      <version>1</version>
      <description>UDP is configured for this service</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Tcp</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Subscribe_Nack</srcid><srcstatus/><internalId>1320</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00656</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>572</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00658.TCP</id>
      <status>approved</status>
      <version>1</version>
      <description>TCP is configured for this service</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_417</srcid><srcstatus/><internalId>831</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Tcp</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_Client_Service_TCP_SoCon_ONLINE_OFFLINE_ONLINE</srcid><srcstatus/><internalId>1329</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00658</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>444</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>573</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00658.UDP</id>
      <status>approved</status>
      <version>1</version>
      <description>UDP is configured for this service</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_Sd_Client_Service_IP_Address_Not_Assigned</srcid><srcstatus/><internalId>1310</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Client_Service</srcid><srcstatus/><internalId>1313</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_ConsumedEventGroup_Multicast_Only_UDP_Ref</srcid><srcstatus/><internalId>1337</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_ConsumedEventGroup_Multicast_Only_No_UDP_Ref</srcid><srcstatus/><internalId>1338</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_REBOOT</srcid><srcstatus/><internalId>1361</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_405</srcid><srcstatus/><internalId>828</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00658</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>444</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>574</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00478.TCP</id>
      <status>approved</status>
      <version>1</version>
      <description>TCP is configured for this service</description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.005</srcid><srcstatus/><internalId>1173</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00478</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>575</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00478.UDP</id>
      <status>approved</status>
      <version>1</version>
      <description>UDP is configured for this service</description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.004</srcid><srcstatus/><internalId>1172</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_0</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_1</srcid><srcstatus/><internalId>1704</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_2</srcid><srcstatus/><internalId>1705</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_3</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_4</srcid><srcstatus/><internalId>1707</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00478</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>576</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00701.TCP</id>
      <status>approved</status>
      <version>1</version>
      <description>TCP is configured for this service</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_421</srcid><srcstatus/><internalId>832</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_459</srcid><srcstatus/><internalId>834</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_670</srcid><srcstatus/><internalId>835</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_696</srcid><srcstatus/><internalId>837</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_735</srcid><srcstatus/><internalId>842</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_0</srcid><srcstatus/><internalId>1708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>487</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>577</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00701.UDP</id>
      <status>approved</status>
      <version>1</version>
      <description>UDP is configured for this service</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_409</srcid><srcstatus/><internalId>829</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_458</srcid><srcstatus/><internalId>833</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_674</srcid><srcstatus/><internalId>836</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_700</srcid><srcstatus/><internalId>838</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_734</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_2</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_0</srcid><srcstatus/><internalId>1708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>487</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>578</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00480.unicast</id>
      <status>approved</status>
      <version>1</version>
      <description>In case the message shall be sent via unicast</description>
      <furtherinfo>WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.</furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_1</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_2</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_1</srcid><srcstatus/><internalId>1695</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_1</srcid><srcstatus/><internalId>1697</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_1</srcid><srcstatus/><internalId>1701</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_0</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_1</srcid><srcstatus/><internalId>1704</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_2</srcid><srcstatus/><internalId>1705</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_3</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_4</srcid><srcstatus/><internalId>1707</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_0</srcid><srcstatus/><internalId>1708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00480</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>579</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00480.multicast</id>
      <status>approved</status>
      <version>1</version>
      <description>In case the message shall be sent via multicast</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_1</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_2</srcid><srcstatus/><internalId>1682</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionKey_0</srcid><srcstatus/><internalId>1710</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00480</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>580</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00491.ServerService</id>
      <status>approved</status>
      <version>1</version>
      <description>Answers to Find Entries received using multicast shall be delayed based on the configuration items:
    &lt;ul&gt;
      &lt;li&gt;SdServerTimerRequestResponseMinDelay&lt;/li&gt;
      &lt;li&gt;SdServerTimerRequestResponseMaxDelay&lt;/li&gt;
    &lt;/ul&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_eventFind</srcid><srcstatus/><internalId>1570</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00491</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>396</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00724</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>524</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>581</internalId></specobject>
    <specobject>
      <id>Sd.SWS_SD_00491.ClientService</id>
      <status>approved</status>
      <version>1</version>
      <description>Answers to Offer Entries received using multicast shall be delayed based on the configuration items:
    &lt;ul&gt;
      &lt;li&gt;SdClientTimerRequestResponseMinDelay&lt;/li&gt;
      &lt;li&gt;SdClientTimerRequestResponseMaxDelay&lt;/li&gt;
    &lt;/ul&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_2</srcid><srcstatus/><internalId>1409</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_AVAILABLE_2</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_1</srcid><srcstatus/><internalId>1426</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_2</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_3</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_4</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_2</srcid><srcstatus/><internalId>1464</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_TTL_1</srcid><srcstatus/><internalId>1502</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00491</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>396</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00725</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>525</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>582</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Sd.SWS_SD_00763</id>
      <status>approved</status>
      <source>DESIGN</source>
      <version>1</version>
      <description>
        If SdEnableAclPolicyCheck is TRUE, SD shall activate the ACL feature.
      </description>
      <releases>
        <release>AUTOSAR R23-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Sd_Cfg.h.m4_51</srcid><srcstatus/><internalId>688</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_Check_Passed</srcid><srcstatus/><internalId>1368</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_RemoteAddr_Check_Failed</srcid><srcstatus/><internalId>1369</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_IPv6_Check_Failed</srcid><srcstatus/><internalId>1370</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_No_RemoteAddr_Check_Endpoint_Check_Failed</srcid><srcstatus/><internalId>1371</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>910</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>583</internalId></specobject>

    <specobject>
      <id>Sd.SWS_SD_00764</id>
      <status>approved</status>
      <source>DESIGN</source>
      <version>1</version>
      <description>
        In ClientService, the ACL SdClientServiceAllowedProvider shall
        be configured with the allowed service providers IP address to enable the ACL check.
      </description>
      <releases>
        <release>AUTOSAR R23-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_456</srcid><srcstatus/><internalId>868</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_Check_Passed</srcid><srcstatus/><internalId>1368</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_RemoteAddr_Check_Failed</srcid><srcstatus/><internalId>1369</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_No_RemoteAddr_Check_Endpoint_Check_Failed</srcid><srcstatus/><internalId>1371</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>910</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>584</internalId></specobject>

    <specobject>
      <id>Sd.SWS_SD_00765</id>
      <status>approved</status>
      <source>DESIGN</source>
      <version>1</version>
      <description>
        In ClientService, if the ACL SdClientServiceAllowedProvider is not
        configured, the ACL check shall be disabled for this ClientService.
      </description>
      <releases>
        <release>AUTOSAR R23-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Sd_Cfg.h.m4_52</srcid><srcstatus/><internalId>689</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>910</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>585</internalId></specobject>

    <specobject>
      <id>Sd.SWS_SD_00785</id>
      <status>approved</status>
      <source>DESIGN</source>
      <version>1</version>
      <description>
        SD shall check the provided IP address in the Endpoint option of an OfferService entry against the
        ClientService ACL SdClientServiceAllowedProvider:
        - If the IP address in the Endpoint option of this OfferService entry is not on this
          ClientService ACL SdClientServiceAllowedProvider, SD shall ignore the offer. If issue reporting is enabled,
          SD shall log the event SD_REPORT_ID_ACL_CHECK_FAILED.
        - If the IP address in the Endpoint option of this OfferService entry is on this
          ClientService ACL SdClientServiceAllowedProvider, SD shall call function SoAd_
          SetUniqueRemoteAddr with remote address equal to the Endpoint option of this
          OfferService entry.
      </description>
      <releases>
        <release>AUTOSAR R23-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1321</srcid><srcstatus/><internalId>742</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1347</srcid><srcstatus/><internalId>743</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_Check_Passed</srcid><srcstatus/><internalId>1368</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_No_RemoteAddr_Check_Endpoint_Check_Failed</srcid><srcstatus/><internalId>1371</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_ACL_CHECK_WRONG_MULTICAST_ENDPOINT</srcid><srcstatus/><internalId>1524</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>910</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>586</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <defaults>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
    </defaults>

    <specobject>
      <id>Sd.EB.BSWMDGeneration_1</id><status>approved</status><source>EB</source><version>1</version>
      <description>
        The Sd module's generator shall generate a basic software
        module description (BSWMD) based on the Sd module's
        configuration containing information on the exclusive areas
        required by the Sd module's implementation.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ComTest_02_SchM</srcid><srcstatus/><internalId>1236</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>587</internalId></specobject>

    <specobject>
      <id>Sd.EB.BSWMDGeneration_2</id><status>approved</status><source>EB</source><version>1</version>
      <description>
        The Sd module's generator shall generate a basic software
        module description (BSWMD) based on the Sd module's
        configuration containing information on the scheduled
        MainFunctions together with the scheduling period.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ComTest_02_SchM</srcid><srcstatus/><internalId>1236</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>588</internalId></specobject>

    <specobject>
      <id>Sd.EB.BSWMDGeneration_3</id><status>approved</status><source>EB</source><version>1</version>
      <description>
        The Sd module's BSWMD shall be generated using a generator
        mode named "generate_swcd".
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ComTest_02_SchM</srcid><srcstatus/><internalId>1236</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>589</internalId></specobject>

    <specobject>
      <id>Sd.EB.HandleIdGenerator</id><status>approved</status><source>EB</source><version>1</version>
      <description><![CDATA[
        The module shall support the correct automatic calculation of
        the handle IDs for the following parameters:
        <itemizedlist>
          <listitem><para><parameter>SdServerServiceHandleId</parameter></para></listitem>
          <listitem><para><parameter>SdEventHandlerHandleId</parameter></para></listitem>
          <listitem><para><parameter>SdClientServiceHandleId</parameter></para></listitem>
          <listitem><para><parameter>SdConsumedEventGroupHandleId</parameter></para></listitem>
        </itemizedlist>.]]>
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ComTest_03_HandleIdGenerator</srcid><srcstatus/><internalId>1237</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>590</internalId></specobject>

    <specobject>
      <id>Sd.EB.ASCCCB1403</id><status>approved</status><source>EB</source><version>1</version>
      <description>
      If a Main function of a un-initialized module is called from the
      BSW Scheduler, then it shall return immediately without
      performing any functionality and without raising any errors.

      Main Function processing of an un-initialized Module may result
      in undesired and non defined behaviour.

      Rationale for the deviation list: The SchM module may schedule
      the modules main function before the module is initialized.
      This would result in lots of Det errors during start up.
      Therefore the modules main function does not throw a Det error
      if the module is not yet initialized and simply returns in this
      case.
      </description>
      <comment>
      EB requirement is in line with the AUTOSAR 4.0 General SRS
      requirement BSW00450.

      https://issue.ebgroup.elektrobit.com/browse/ASCCCB-1403
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_MainFctCall_NoInit</srcid><srcstatus/><internalId>1288</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR42.SWS_SD_00132</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>591</internalId></specobject>

    <specobject>
      <id>Sd.EB.Sd_Init_NULL_PTR</id><status>approved</status><source>EB</source><version>1</version>
      <description><![CDATA[
        If Sd_Init() is called and a NULL_PTR is passed as parameter ConfigPtr, then Sd_Init() shall call
        Det with error code SD_E_PARAM_POINTER and abort execution.
        ]]>
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Init_NullPtr</srcid><srcstatus/><internalId>1294</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>592</internalId></specobject>
    
    <specobject>
      <id>Sd.EB.PBSelectable.FileName</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        If postBuildVariant returns a non-empty string, the module's post-build-time
        configuration file names shall be changed in the following way:
        &lt;Mod&gt;[_*]_PBcfg.* to &lt;Mod&gt;_&lt;postBuildVariant&gt;[_*]_PBcfg.*
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Com_01_PostBuildSelectable</srcid><srcstatus/><internalId>1238</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>593</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBSelectable.Master</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        If postBuildVariant returns a non-empty string, the module shall generate a post-build-time
        configuration file Sd_PBcfg.h/c which includes all the variants specific post-build-time
        configurations (Sd_&lt;postBuildVariant&gt;[_*]_PBcfg.h/c).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Com_01_PostBuildSelectable</srcid><srcstatus/><internalId>1238</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>594</internalId></specobject>
  
    <specobject>
      <id>Sd.EB.PBSelectable.ServerServiceAutoAvailable</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        AUTOSAR attribute postBuildVariantValue shall be set to true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1018</srcid><srcstatus/><internalId>889</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_AutoAvailable</srcid><srcstatus/><internalId>1381</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>595</internalId></specobject>
 
    <specobject>
      <id>Sd.EB.PBSelectable.ServerServiceId</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        AUTOSAR attribute postBuildVariantValue shall be set to true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1045</srcid><srcstatus/><internalId>890</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_PostBuild_Sd_Server_Service_Parameters</srcid><srcstatus/><internalId>1382</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>596</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBSelectable.ServerServiceInstanceId</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        AUTOSAR attribute postBuildVariantValue shall be set to true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1063</srcid><srcstatus/><internalId>891</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_PostBuild_Sd_Server_Service_Parameters</srcid><srcstatus/><internalId>1382</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>597</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBSelectable.ServerServiceMajorVersion</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        AUTOSAR attribute postBuildVariantValue shall be set to true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1116</srcid><srcstatus/><internalId>892</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_PostBuild_Sd_Server_Service_Parameters</srcid><srcstatus/><internalId>1382</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>598</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBSelectable.ServerServiceMinorVersion</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        AUTOSAR attribute postBuildVariantValue shall be set to true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1133</srcid><srcstatus/><internalId>893</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_PostBuild_Sd_Server_Service_Parameters</srcid><srcstatus/><internalId>1382</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>599</internalId></specobject>

    <specobject>
      <id>Sd.EB.DEMReporting.ServerService_Not_Available</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        In case SD_E_SERVER_NOT_AVAILABLE Dem reporting is activated and has an valid
        reference, Sd shall report to DEM if a requested client service which had previousle received
        one or more OFFER(s) entries does not receive any OFFER more before the TTL of the existing OFFER dies out.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_ServerService_Not_Available_Multicast</srcid><srcstatus/><internalId>1350</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_ServerService_Not_Available</srcid><srcstatus/><internalId>1351</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_931</srcid><srcstatus/><internalId>730</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.DEM_reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>600</internalId></specobject>
	
    <specobject>
      <id>Sd.EB.CallBack.ServerService_Not_Available</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        In case Sd_SendDataBackServerNotAvailable is activated Sd shall make a call to the function configured in this container when a previously available server service is no longer available.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_ServerService_Not_Available_Multicast</srcid><srcstatus/><internalId>1350</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_ServerService_Not_Available</srcid><srcstatus/><internalId>1351</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_985</srcid><srcstatus/><internalId>731</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>601</internalId></specobject>

    <specobject>
      <id>Sd.EB.CallBack.ServerService_Not_Available_Multicast</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        If Sd_SendDataBackServerNotAvailableMulticast is activated Sd shall make a
        call to the function configured in this container when a previously
        available server service is no longer available. This callout is made for every active consumed event 
        group associated with the client service.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_ServerService_Not_Available_Multicast</srcid><srcstatus/><internalId>1350</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1031</srcid><srcstatus/><internalId>732</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>602</internalId></specobject>

    <specobject>
      <id>Sd.EB.CallBack.MalformedMsg</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        In case Sd_SendDataBackMalformedMsg is activated Sd shall make a call to the function configured in this container when a malformed SD control frame is received.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_01</srcid><srcstatus/><internalId>1343</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_02</srcid><srcstatus/><internalId>1344</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_03</srcid><srcstatus/><internalId>1345</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Receive.c_490</srcid><srcstatus/><internalId>818</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>603</internalId></specobject>

    <specobject>
      <id>Sd.EB.CallBack.SubscribeNackReceived</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        In case Sd_SendDataBackSubscribeNackReceived is activated Sd shall make a call to the function configured in this container when a subscribe NACK entry is received.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Receive_Subscribe_Nack</srcid><srcstatus/><internalId>1342</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1628</srcid><srcstatus/><internalId>755</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>604</internalId></specobject>

    <specobject>
      <id>Sd.EB.CallOut.EventMapping_DOWN</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        In case SdCallOutEventMapping is activated Sd shall make a call out to the function 
        Sd_Callout_EventMapping each time the state of the client service changes to state DOWN
        with the pointer corresponding to the IP Address set to NULL to communicate to a external SWC 
        that this Client Service Id, Client Service Instance Id is no longer AVAILABLE.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_INFINITE_RETRY_TTL_NOT_INFINITE</srcid><srcstatus/><internalId>1363</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_CallOut_EventMapping_TCP</srcid><srcstatus/><internalId>1364</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_CallOut_EventMapping_UDP</srcid><srcstatus/><internalId>1365</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3734</srcid><srcstatus/><internalId>804</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>605</internalId></specobject>

    <specobject>
      <id>Sd.EB.CallOut.EventMapping_AVAILABLE</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        In case SdCallOutEventMapping is activated Sd shall make a call out to the function 
        Sd_Callout_EventMapping each time the state of the client service changes to state AVAILABLE
        with the pointer corresponding to the IP Address of the received OFFER message to communicate to a external SWC 
        that this Client Service Id, Client Service Instance Id has become AVAILABLE.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_INFINITE_RETRY</srcid><srcstatus/><internalId>1362</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_INFINITE_RETRY_TTL_NOT_INFINITE</srcid><srcstatus/><internalId>1363</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_CallOut_EventMapping_TCP</srcid><srcstatus/><internalId>1364</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_CallOut_EventMapping_UDP</srcid><srcstatus/><internalId>1365</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3638</srcid><srcstatus/><internalId>801</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>606</internalId></specobject>

    <specobject>
      <id>Sd.EB.RelocatablePBCfg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In order to support post-build-time configuration data handled by relative offsets to
        the configuration start address, the container SdGeneral must be extended by
        the configuration parameter SdRelocatablePbcfgEnable.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_PBcfgM_On</srcid><srcstatus/><internalId>641</internalId></linkedfrom><linkedfrom><srcid>Sd_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1240</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>607</internalId></specobject>

    <specobject>
      <id>Sd.EB.PostBuild_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Sd module shall compile and build an executable even in the absence
        of a post build configuration, i.e. without any post build generated .c and .h files
        available.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_ComTest_NoPBCfg</srcid><srcstatus/><internalId>1239</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>608</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBCFGM101</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: Sd_IsValidConfig
        Syntax: Std_ReturnType Sd_IsValidConfig( void* ConfigPtr )
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters (in): ConfigPtr, post build configuration manager
        configuration.
        Parameters (inout): None
        Parameters (out): None
        Return value: Returns E_OK if the Sd configuration is valid otherwise E_NOT_OK. A
        null pointer is interpreted as invalid configuration.
        Description: This function determines if the Sd configuration is valid. This
        function can be called also before the Sd is initialized. No error reporting
        is necessary within this function.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_IsValidConfig</srcid><srcstatus/><internalId>642</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>609</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBCFGM102</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        A configuration is valid
        - if the platform signature in the post build configuration equals the value
          determined by the macro TS_PlatformSigIsValid.
        - if the link time signature in the post build configuration equals the link time
          signature in the link time configuration file.
        - if the compile time signature in the post build configuration equals the value of
          the macro TCPIP_CFG_SIGNATURE.
        - if the compile time signature of Published information in the post build configuration
          equals the value of the macro TCPIP_PUBLIC_INFO_SIGNATURE.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_IsValidConfig</srcid><srcstatus/><internalId>642</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>610</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBCFGM104</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          CfgSignature.
        - the Sd_Cfg.h file shall contain the macro
          TCPIP_CFG_SIGNATURE.
        - the MCG shall generate this signature value of compile time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of compile time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_IsValidConfig</srcid><srcstatus/><internalId>642</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>611</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBCFGM104_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          PublicInfoSignature.
        - the Sd_Cfg.h file shall contain the macro
          TCPIP_PUBLIC_INFO_SIGNATURE.
        - The MCG shall generate this signature value from the list of parameters of
          configuration class 'PublishedInformation' except 'Release'. The XPath function
          asc:getConfigSignature(nodeset) shall be used to determine the signature out of the
          list of parameters. The list of parameters shall be determined with the function
          asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_IsValidConfig</srcid><srcstatus/><internalId>642</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>612</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBCFGM105</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the link time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          LcfgSignature.
        - the link time configuration shall contain the uint32 value
          Sd_LcfgSignature.
        - the MCG shall generate this signature value of link time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of link time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_IsValidConfig</srcid><srcstatus/><internalId>642</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>613</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBCFGM106</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For Platform verification:
        - the Sd post build configuration structure shall contain the value
          uint32 PlatformSignature. This uint32 must be the first value of the post build
          configuration structure to guarantee the correct access not disturbed by any padding
          bytes.
        - the MCG shall generate this signature for the selected target. The generator shall
          use the x-path function asc:getPlatformSignature() to determine this value.
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
        https://issue.ebgroup.elektrobit.com/browse/ASCBASE-1485
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_IsValidConfig</srcid><srcstatus/><internalId>642</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>614</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBCFGM107</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        PbcfgM support shall be enabled or disabled via the macro
        SD_PBCFGM_SUPPORT_ENABLED defined in the file
        Sd_Cfg.h.
        If the PbcfgM configuration references the Sd configuration
        the macro is set to STD_ON otherwise, or if no PbcfgM configuration is
        available it is set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_IsValidConfig</srcid><srcstatus/><internalId>642</internalId></linkedfrom><linkedfrom><srcid>Sd_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1240</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>615</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBCFGM108</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If Sd is referenced by the PbcfgM, the parameter regarding the
        relocatable feature, shall not be editable and the MCG shall use the configuration of
        the PbcfgM.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_PBcfgM_On</srcid><srcstatus/><internalId>641</internalId></linkedfrom><linkedfrom><srcid>Sd_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1240</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd_EBParameters.xdm.m4_49</srcid><srcstatus/><internalId>901</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>616</internalId></specobject>

    <specobject>
      <id>Sd.EB.PBCFGM110</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The Sd_Init() function must be extended to enable the PbcgfM
        features.
        The initialization function shall obtain the Sd configuration
        from the PbcfgM if the PbcfgM support is enabled within this Sd
        and the initialization function is called with a null pointer.
        The validity of the configuration shall be checked by the function
        Sd_IsValidConfig(). The validity shall be check regardless the PbcfgM
        support is enabled or not.
        If no valid configuration can be obtained the initialization function shall
        return, leaving the Sd uninitialized.
        In the case error reporting is enabled and no valid configuration can be obtained
        an erroneous parameter shall be indicated.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_VerifyInitWithPcfgM</srcid><srcstatus/><internalId>643</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>617</internalId></specobject>

    <specobject>
      <id>Sd.EB.PbcfgM_General_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Sd module shall provide the following macros in the header file
        Sd_Cfg.h:
        - SD_RELOCATABLE_CFG_ENABLE which is set to STD_ON
          if relocatable config shall be enabled, otherwise it's set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_PBcfgM_On</srcid><srcstatus/><internalId>641</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>618</internalId></specobject>

    <specobject>
      <id>Sd.EB.PbcfgM_General_6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If PbcfgM support is enabled Sd shall define the following macros in
        Sd_PBCfg.c:
        - TS_PB_CFG_LAYOUT_TYPE: Shall expand to the type definition of the Postbuild
          configuration layout type (e.g. Sd_ConstConfigLayoutType)
        - TS_PB_CFG_NAME: Shall expand to the name of the structure defining the Postbuild
          configuration layout (e.g. Sd_ConfigLayout)
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd_Test_PBcfgM_On</srcid><srcstatus/><internalId>641</internalId></linkedfrom><linkedfrom><srcid>Sd_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1240</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>619</internalId></specobject>

    <specobject>
      <id>Sd.EB.ConnectionReady.Flag</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        A connection state flag has been created to monitor the connection state to each one of the remode nodes
        connected to an instance. 
        If any unicast message is received from a remote node this flag shall be set
        to TRUE to indicate that unicast transmission to that remote node is possible.
        If after receiving a multicast message and before sending the unicast response, function SoAd_IsConnectionReady
        returns OK, this flag shall be set to TRUE to indicate that unicast transmission to that remote node is possible.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_1050</srcid><srcstatus/><internalId>718</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Receive.c_391</srcid><srcstatus/><internalId>815</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.IsConnectionReady</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage> 
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>620</internalId></specobject>

    <specobject>
      <id>Sd.EB.ConnectionReady.Pending</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        After a Multicast message has been received from a remote node, 
        and only if no unicast message from that remote node has not been previously received, then
        connection state with that remote node shall be checked. If connection state is in state pending, 
        then a new check of the connection state shall be carried out on the next SD main cycle.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_1055</srcid><srcstatus/><internalId>719</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_PENDING_OK</srcid><srcstatus/><internalId>1330</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_Timer</srcid><srcstatus/><internalId>1333</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Handle_Offer_After_ConnectionReadyTimer_Running_Out</srcid><srcstatus/><internalId>1366</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.IsConnectionReady</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>621</internalId></specobject>

    <specobject>
      <id>Sd.EB.ConnectionReady.OK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        After a Multicast message has been received from a remote node, 
        and only if no unicast message from that remote node has not been previously received,
        then connection state with that remote node shall be checked. If connection state with is in state OK, 
        this means that connection is ready and the unicast response message to that remote node shall be sent out.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_1102</srcid><srcstatus/><internalId>722</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_PENDING_OK</srcid><srcstatus/><internalId>1330</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_ConsumedEventGroup_Multicast_Only_UDP_Ref</srcid><srcstatus/><internalId>1337</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_ConsumedEventGroup_Multicast_Only_No_UDP_Ref</srcid><srcstatus/><internalId>1338</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Handle_Offer_After_ConnectionReadyTimer_Running_Out</srcid><srcstatus/><internalId>1366</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.IsConnectionReady</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>622</internalId></specobject>

    <specobject>
      <id>Sd.EB.ConnectionReady.NOT_OK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        After a Multicast message has been received from a remote node, 
        and only if no unicast message from that remote node has not been previously received,
        then connection state with that remote node shall be checked. 
        If connection state with that remote node is in state NOT_OK, this means that connection
        any transmission to that remote node is not allowed. A DET ERROR log entry will be generated.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_1091</srcid><srcstatus/><internalId>721</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_NOT_OK</srcid><srcstatus/><internalId>1331</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_Multiple_OFFER_ConnectionReady_NOT_OK</srcid><srcstatus/><internalId>1332</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.IsConnectionReady</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>623</internalId></specobject>

    <specobject>
      <id>Sd.EB.ConnectionReady.Timer</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        After a Multicast message has been received from a remote node, 
        and only if no unicast message from that remote node has not been previously received,
        then a connection ready timer shall be started. This timer will be decreased on every main cycle
        as long as connection to that remote node has not been established yet.
        Once this timer is zero, the state of the connection shall not be checked again, all SD messages
        will be sent normally and a DET ERROR log entry will be generated.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_1073</srcid><srcstatus/><internalId>720</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_Timer</srcid><srcstatus/><internalId>1333</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Handle_Offer_After_ConnectionReadyTimer_Running_Out</srcid><srcstatus/><internalId>1366</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.TL.IsConnectionReady</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>624</internalId></specobject>

    <specobject>
      <id>Sd.EB.Consistency.SoAdHeaderId.SdServiceId</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        The SoAd HeaderId of the routing group associated to an event handler unicast UDP reference,
        an event handler multicast UDP reference, an event handler TCP reference, a provided method,
        a consumed event group unicast UDP reference, 
        a consumed event group multicast UDP reference, 
        a consumed event group TCP reference or a consumed method
        shall be checked for consistency with the Sd Service Id of the service Id where this reference is contained.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_Eventhandler_Unicast_UDP_RoutingGroup_Header_Id</srcid><srcstatus/><internalId>1267</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_Eventhandler_TCP_RoutingGroup_Header_Id</srcid><srcstatus/><internalId>1268</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_Eventhandler_Multicast_RoutingGroup_Header_Id</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_Provided_Method_RoutingGroup_Header_Id</srcid><srcstatus/><internalId>1270</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_Consumed_EventGroup_Unicast_UDP_RoutingGroup_Header_Id</srcid><srcstatus/><internalId>1271</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_Consumed_EventGroup_TCP_RoutingGroup_Header_Id</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_Consumed_EventGroup_Multicast_RoutingGroup_Header_Id</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_Consumed_Method_RoutingGroup_Header_Id</srcid><srcstatus/><internalId>1274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>625</internalId></specobject>
	
    <specobject>
      <id>Sd.EB.Remote.Node.Address.Not.Stored</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        If a SD message is received from a remote address for the first time it will not be saved under the following circumstances:
        None of the Entries has a relation to the processing node and he remote address is not already associated with the processing node.
        Under thess circumstances the remote address will not be stored in the remote node array.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_UDP_RemoteNode_Not_Found_For_SetUniqueRemoteAddr_NOT_OK</srcid><srcstatus/><internalId>1508</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_TCP_RemoteNode_Not_Found_For_SetUniqueRemoteAddr_NOT_OK</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_RemoteNode_For_Duplicated_Service_Not_Stored</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotStored</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotCleared</srcid><srcstatus/><internalId>1606</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Receive.c_270</srcid><srcstatus/><internalId>814</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>626</internalId></specobject>

    <specobject>
      <id>Sd.EB.MulticastThresholdOne.NoUnicastUDP_Ref</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        If the multicast threshold of an event handler is configured to be 1, then
        no unicast UDP routing group reference should be configured.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_MulticastThreshold_One_No_Unicast_UDP_Reference</srcid><srcstatus/><internalId>1275</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>627</internalId></specobject>

    <specobject>
      <id>Sd.EB.ConsumedEventGroup_MulticastRef.NoMulticast_RoutingGroup</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        If a consumed event group has a multicast socket connection reference configured then 
        it should also have a configured multicast routing group to be received over the multicast reference.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_ConsumedEventGroup_MulticastRef_No_Multicast_RoutingGroup</srcid><srcstatus/><internalId>1276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>628</internalId></specobject>

    <specobject>
      <id>Sd.EB.Control.Unicast.TxRx_PDU.Reference</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        Socket connection bundle referenced by SdInstanceTxPdu/SdTxPduRef shall only have one socket connection. 
        Socket connection bundle referenced by SdInstanceUnicastRxPdu/SdRxPduRef shall only have one socket connection.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_SD_Control_Unicast_TxRx_PDU_Reference</srcid><srcstatus/><internalId>1277</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>629</internalId></specobject>

    <specobject>
      <id>Sd.EB.Maximum.Number.Instances</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        Total number of instances defined in the configuration shall not exceed the configured maximum number of instances allowed.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_SD_Max_Instance_Count_Exceeded</srcid><srcstatus/><internalId>1278</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>630</internalId></specobject>

    <specobject>
      <id>Sd.EB.Maximum.Number.Client.Services</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        Total number of Client Services defined in the configuration shall not exceed the maximum allowed number of Client Services configured in SdGeneral/SdMaxClientServiceCount.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_SD_Max_ClientService_Count_Exceeded</srcid><srcstatus/><internalId>1279</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>631</internalId></specobject>

    <specobject>
      <id>Sd.EB.Maximum.Number.Server.Services</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        Total number of Server Services defined in the configuration shall not exceed the maximum allowed number of Server Services configured in SdGeneral/SdMaxServerServiceCount.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_SD_Max_ServerService_Count_Exceeded</srcid><srcstatus/><internalId>1280</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>632</internalId></specobject>

    <specobject>
      <id>Sd.EB.Maximum.Number.Client.Service.EventGroups</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        Total number of Client Service Event Groups defined in the configuration shall not exceed maximum allowed number of Client Services Event Groups configured in SdGeneral/SdMaxClientServiceEventGroupCount.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_SD_Max_ClientServiceEventGroups_Count_Exceeded</srcid><srcstatus/><internalId>1281</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>633</internalId></specobject>

    <specobject>
      <id>Sd.EB.Maximum.Number.Server.Service.Events</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        Total number of Server Service Events defined in the configuration shall not exceed the maximum allowed number of Server Service Events configured in SdGeneral/SdMaxServerServiceEventCount.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_SD_Max_ServerServiceEvents_Count_Exceeded</srcid><srcstatus/><internalId>1282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>634</internalId></specobject>

    <specobject>
      <id>Sd.EB.Maximum.Number.Consumed.EventGroups.Multicast.References</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        Total Number of defined consumed event group multicast references in the configuration shall not exceed the total number of consumed event groups.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_SD_Max_ConsumedEventGroupMulticastReferences_Exceeded</srcid><srcstatus/><internalId>1283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>635</internalId></specobject>

   <specobject>
      <id>Sd.EB.Maximum.Number.Retries</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        If maximum number retries set in configuration parameter SdSubscribeEventgroupRetryMax is set to a value bigger than zero then retry delay timer shall be enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_SdSubscribeEventgroupRetryMax_Not_Zero_SdSubscribeEventgroupRetryDelay_Enabled</srcid><srcstatus/><internalId>1284</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>636</internalId></specobject>

    <specobject>
      <id>Sd.EB.DET.Error.Retry.Infinite.TTL.Not.Infinite</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        In case retry timer is set to infinite and TTL of the received Offer is not inifinite,
        a Det error is generated to indicate this incoherence on system design.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_INFINITE_RETRY_TTL_NOT_INFINITE</srcid><srcstatus/><internalId>1363</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1435</srcid><srcstatus/><internalId>749</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>637</internalId></specobject>

    <specobject>
      <id>Sd.EB.DET.Error.Retry.Process.Bigger.Than.TTL</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        In case that response time plus retry timer is set to a value bigger than the TTL
        of the received Offer a Det error is generated to indicate this incoherence on system design.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_TTL_too_Short</srcid><srcstatus/><internalId>1357</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1459</srcid><srcstatus/><internalId>750</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>638</internalId></specobject>

    <specobject>
      <id>Sd.EB.VersionDrivenFindBehavior.MinimumMinorVersion.MinorVersion.MaximumValue</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        In case that variable SdVersionDrivenFindBehavior is set to MINIMUM_MINOR_VERSION 
        then minor version should not be set to the maximum value 4294967295.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_VersionDrivenFindBehavior_MinimumMinorVersion_MinorVersion_MaximumValue</srcid><srcstatus/><internalId>1285</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_298</srcid><srcstatus/><internalId>866</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>639</internalId></specobject>

    <specobject>
      <id>Sd.EB.CheckUDPConnection</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        If the UDP connection of a client service is not established and fully operational anymore
        (Socket connection is other than SOAD_SOCON_ONLINE), the Service Discovery Module shall
        leave the Main Phase, enter the Wait Phase, and stop the TTL timers of the associated
        Client Service Instances and EventGroups.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_Exit_AVAILABLE_If_UDP_SoCon_NOT_ONLINE</srcid><srcstatus/><internalId>1521</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Exit_AVAILABLE_If_UDP_IsConnectionReady_NOT_OK</srcid><srcstatus/><internalId>1522</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>640</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Sd_Test_PBcfgM_On</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>C:/Work/Projects/trunk/asc_SD/build/reqm/common_req/Sd_PbcfgM_On_Compile_Test.c</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      1.)
      Verify that SD_RELOCATABLE_CFG_ENABLE is defined
      in the header file Sd_Cfg.h.
      2.)
      Verify that if PbcfgM support is enabled then Sd_PBCfg.c shall NOT define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
    
Test Object: None.
Test Precondition: 
        - SD_PBCFGM_SUPPORT_ENABLED = STD_ON
    
Test Execution: 
        ------------------------ 1.) ---------------------
        01: VP (Sd.EB.PbcfgM_General_3,
                Sd.EB.PBCFGM108,
                Sd.EB.RelocatablePBCfg):
            Verify that SD_RELOCATABLE_CFG_ENABLE is set to STD_ON.
        ------------------------ 2.) ---------------------
        02: Include Sd_PBcfg.c.
        03: VP(Sd.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exist.
    
Test Input: 
        None.
    
Test Output: 
        Binary file.
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PbcfgM_General_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>618</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>619</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>607</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>641</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Sd_Test_IsValidConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>C:/Work/Projects/trunk/asc_SD/build/reqm/common_req/Sd_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the function Sd_IsValidConfig() is implemented as specified.
  
Test Object: 
    Sd_IsValidConfig()
  
Test Precondition: 
    The Sd module is not initialized.
  
Test Execution: 
    01: Call the function Sd_IsValidConfig() with an NULL_PTR.
    02: VP:
        The function must have returned with E_NOT_OK.
    03: Create an invalid configuration regarding the endianness and alignment.
    04: Call the function Sd_IsValidConfig() with this invalid configuration.
    05: VP(Sd.EB.PBCFGM106):
        The function must have returned with E_NOT_OK.
    The following 3 steps are only executed if the module has a link-time configuration:
        06: Create an invalid configuration regarding the link time configuration.
        07: Call the function Sd_IsValidConfig() with this invalid configuration.
        08: VP(Sd.EB.PBCFGM105):
                The function must have returned with E_NOT_OK.
    09: Create an invalid configuration regarding the compile time configuration.
    10: Call the function Sd_IsValidConfig() with this invalid configuration.
    11: VP(Sd.EB.PBCFGM104):
        The function must have returned with E_NOT_OK.
    12: Create an invalid configuration regarding the published information configuration.
    13: Call the function Sd_IsValidConfig() with this invalid configuration.
    14: VP(Sd.EB.PBCFGM104_1):
        The function must have returned with E_NOT_OK.
    15: Call the function Sd_IsValidConfig() with a valid configuration.
    16: VP:
        The function must have returned with E_OK.
    17: VP(Sd.EB.PBCFGM107):
        Check if SD_PBCFGM_SUPPORT_ENABLED is set to STD_ON.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PBCFGM101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>609</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBCFGM102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>610</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBCFGM104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>611</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBCFGM104_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>612</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBCFGM105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>613</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBCFGM106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>614</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>615</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>642</internalId></specobject>
    <specobject>
      <id>Sd_Test_VerifyInitWithPcfgM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>C:/Work/Projects/trunk/asc_SD/build/reqm/common_req/Sd_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the Sd can be initialized via the PbcfgM.
  
Test Object: 
    Sd_IsValidConfig()
  
Test Precondition: 
    The Sd module must not have been initialized.
  
Test Execution: 
    01: Create an invalid configuration regarding the endianness and alignment.
    02: Call the function Sd_Init() with this invalid configuration.
    03: VP:
        A Det call must have been performed correctly.
    04: Create an invalid configuration regarding the compile time configuration.
    05: Call the function Sd_Init() with this invalid configuration.
    06: VP:
        A Det call must have been performed correctly.
    The following 3 steps are only executed if the module has a link-time configuration:
        07: Create an invalid configuration regarding the link time configuration.
        08: Call the function Sd_Init() with this invalid configuration.
        09: VP:
            A Det call must have been performed correctly.
    10: Create an invalid configuration regarding the published information configuration.
    11: Call the function Sd_Init() with this invalid configuration.
    12: VP:
        A Det call must have been performed correctly.
    13: Initialize the PbcfgM_GetConfig() stub that way that it can return a valid function.
    14: Call the function Sd_Init() with a null pointer.
    15: VP:
        The function PbcfgM_GetConfig() must have been called once.
    16: VP:
        No Det call must have been performed.
    17: VP:
        The module internal configuration pointer Sd_RootPtr must equal
        the pointer supplied to the initialization function
    18: PbcfgM_GetConfig shall return E_NOT_OK.
        set the configuration pointer which is returned to NULL_PTR
    19: Call Sd_Init with NULL_PTR.
    20: VP(Sd.EB.PBCFGM110):
        Check if Det error is reported.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PBCFGM110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>617</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>643</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <defaults>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
    </defaults>

    <specobject>
      <id>Sd.EB.SWS_SD_00317</id>
        <status>approved</status>
        <source>EB refinement</source>
        <version>1</version>
      <description>
        If the following conditions apply, the Initial Wait Phase for this configured Server Service Instance shall be entered:
        &lt;ul&gt;
          &lt;li&gt;Sd_Init() has been called&lt;/li&gt;
          &lt;li&gt;Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE has been called&lt;/li&gt;
          &lt;li&gt;Sd_LocalIpAddrAssignmentChg() with state "TCPIP_IPADDR_STATE_ASSIGNED" has been called for the IpAddrIds associated with the SdInstanceTxPdu and SdInstanceMulticastRxPdu.&lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Down.Ev.002</srcid><srcstatus/><internalId>1053</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Down.Ev.006</srcid><srcstatus/><internalId>1058</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Down.Ev.007</srcid><srcstatus/><internalId>1059</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00317</linksto>
            <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>644</internalId></specobject>

    <specobject>
      <id>Sd.EB.SWS_SD_00350</id>
        <status>approved</status>
        <source>EB refinement</source>
        <version>1</version>
      <description>
        If the following conditions apply, the Initial Wait Phase for this configured Client Service Instance shall be entered:
        &lt;ul&gt;
          &lt;li&gt;Sd_Init() has been called.&lt;/li&gt;
          &lt;li&gt;Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED has been called OR SdClientServiceAutoRequired = TRUE.&lt;/li&gt;
          &lt;li&gt;Sd_LocalIpAddrAssignmentChg() with state "TCPIP_IPADDR_STATE_ASSIGNED" has been called for the IpAddrIds associated with the SdInstanceTxPdu and SdInstanceMulticastRxPdu.&lt;/li&gt;
        &lt;/ul&gt;
      </description>
         <comment>
        The multicast IP address is determined from the socket connection associated with SdInstanceMulticastRxPdu.
        Since a multicast IP address is mandatory for operation (e.g. OFFER, FIND), Sd can be started only if the multicast address has been assigned.
      </comment>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.Down.Ev.007</srcid><srcstatus/><internalId>941</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Down.Ev.008</srcid><srcstatus/><internalId>942</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.Down.Ev.010</srcid><srcstatus/><internalId>944</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00350</linksto>
            <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>277</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>645</internalId></specobject>
    
    
    <!-- top level feature spec objects as proxy for tracing into product description -->
    <specobject>
      <id>Sd.TL.DEM_reporting</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        Support for reporting the following DEM events in case of errors: 
        * SD_E_MALFORMED_MSG - Malformed message received (SWS_SD_00707)
        * SD_E_OUT_OF_RES - Out of resources (SWS_SD_00707)
        * SD_E_SUBSCR_NACK_RECV - Negative acknowledge received (SWS_SD_00707)
        * SD_E_SERVER_NOT_AVAILABLE - Server Service previously available is no longer sending OFFER entries (extension to AUTOSAR)
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.ASR41.SWS_SD_00106</srcid><srcstatus/><internalId>6</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00003</srcid><srcstatus/><internalId>100</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00465</srcid><srcstatus/><internalId>370</internalId></linkedfrom><linkedfrom><srcid>Sd.ECUC_SD_00120</srcid><srcstatus/><internalId>454</internalId></linkedfrom><linkedfrom><srcid>Sd.ECUC_SD_00121</srcid><srcstatus/><internalId>455</internalId></linkedfrom><linkedfrom><srcid>Sd.ECUC_SD_00122</srcid><srcstatus/><internalId>456</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00707</srcid><srcstatus/><internalId>492</internalId></linkedfrom><linkedfrom><srcid>Sd.EB.DEMReporting.ServerService_Not_Available</srcid><srcstatus/><internalId>600</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>646</internalId></specobject>    
    
    <specobject>
      <id>Sd.TL.IsConnectionReady</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        At startup, Service Discovery queries the underlying IP stack to determine if it is
        initialized. SOME/IP-SD messages are buffered until TcpIp is ready for transmission, i.e.,
        until the MAC address is known and security associations are established in case of IKEv2.
        With this mechanism, no messages are lost and no IP packet queue is needed. SOME/IP-SD
        messages are sent without delay as soon as TcpIp is ready for transmission
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.EB.ConnectionReady.Flag</srcid><srcstatus/><internalId>620</internalId></linkedfrom><linkedfrom><srcid>Sd.EB.ConnectionReady.Pending</srcid><srcstatus/><internalId>621</internalId></linkedfrom><linkedfrom><srcid>Sd.EB.ConnectionReady.OK</srcid><srcstatus/><internalId>622</internalId></linkedfrom><linkedfrom><srcid>Sd.EB.ConnectionReady.NOT_OK</srcid><srcstatus/><internalId>623</internalId></linkedfrom><linkedfrom><srcid>Sd.EB.ConnectionReady.Timer</srcid><srcstatus/><internalId>624</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>647</internalId></specobject>    
    
    <specobject>
      <id>Sd.TL.RetrySubscriptionEventgroups</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        Support for the retry mechanism for eventgroup subscription according to AUTOSAR RFC AR-3796 (for infinite TTL) and according to AUTOSAR RFC AR-3052 for cyclic offers. Previously no retry mechanism for subscription of eventgroups existed. This could lead to permanent unavailability of services in certain situations.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_00712</srcid><srcstatus/><internalId>506</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00713</srcid><srcstatus/><internalId>507</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00735</srcid><srcstatus/><internalId>533</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00736</srcid><srcstatus/><internalId>534</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00739</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00741</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>648</internalId></specobject>    
    
    <specobject>
      <id>Sd.TL.MinorVersionHandling</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        Handling of minor version according to AUTOSAR RFC AR-92616 and AR-91617. Ignore OFFER message entries for minor version smaller than a configured value.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_00503</srcid><srcstatus/><internalId>405</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>649</internalId></specobject>    
    
    <specobject>
      <id>Sd.TL.MinorVersionBlacklisting</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
      <description>
        Blacklisting of minor version according to AUTOSAR RFC AR-92618: Allow configuration of a blacklist for minor versions. Ignore OFFER message entries for minor version which are part of this blacklist.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_01503</srcid><srcstatus/><internalId>563</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>650</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Sd.EB.DBGINST001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Every public API of the module shall have debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_DBGINST_001</srcid><srcstatus/><internalId>1234</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>651</internalId></specobject>

    <specobject>
      <id>Sd.EB.DBGINST002</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the entry instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_DBGINST_001</srcid><srcstatus/><internalId>1234</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>652</internalId></specobject>

    <specobject>
      <id>Sd.EB.DBGINST003</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the exit instrumentation.
        If the API has a return value, the very first parameter of the macro shall contain the expected return value.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_DBGINST_001</srcid><srcstatus/><internalId>1234</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>653</internalId></specobject>

    <specobject>
      <id>Sd.EB.DBGINST004</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The default implementation of the debug instrumentation shall be an empty macro.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_DBGINST_001</srcid><srcstatus/><internalId>1234</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>654</internalId></specobject>

    <specobject>
      <id>Sd.EB.DBGINST005</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall include the header files Base_Dbg.h in order to allow changing the default implementation of the debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_DBGINST_001</srcid><srcstatus/><internalId>1234</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>655</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Sd.EB.PDULENGTHTYPE001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The Sd module shall support the following values of PduLengthType:
        [UINT32, UINT16]
      </description>
      <verifycrit>
        Use case 1 - Modules not capable of handling more than 64 kbytes of data:
          - use PduLengthType value 'UINT32' with conformance test
          - verify successful test run, verify absence of metric violations
            (MISRA-C:2012, static code analysis, compiler warnings)
        Use case 2 - Modules capable of handling more than 64 kbytes of data:
          - use conformance test which handles more than 64 kbytes of data
          - apply "boundary" tests using data length of:
            [&lt;&lt;65535,65535, 65536, &gt;131072][bytes]
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_Sd_Client_Service_IP_Address_Not_Assigned</srcid><srcstatus/><internalId>1310</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Client_Service</srcid><srcstatus/><internalId>1313</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_REBOOT</srcid><srcstatus/><internalId>1361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>656</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Sd.EB.Interface.Consistency</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        The module shall provide a mechanism to guarantee consistency of interfaces and
        types between its implementation and its code stub.
       </description>
       <comment>
        The code stub of a module shall provide the same external view than the module itself.
        This is mandatory because unit test of modules test against the code stubs of
        adjacent modules. Inconsistent stubs may result in the situation that incompatible
        interfaces are not detected as unit test stage.
       </comment>
       <verifycrit>
        Create a compile test with two permutations that call all interfaces of a module
        (in both permutations).
        p0: Behave like a regular compile test; call the module generator and compile against
        the implementation of the module.
        p1: Do not generate module code and do not compile the implementation of the module.
        Instead the module shall be replaced with its own code stub.
       </verifycrit>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_VerifyCodeStub</srcid><srcstatus/><internalId>1235</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>657</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.Sd.ConfigurationOption</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00664</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>450</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00665</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>658</internalId></specobject>
    <specobject>
      <id>dev.Sd.ImplementationConfigVariant</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00138</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00139</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>659</internalId></specobject>
    <specobject>
      <id>dev.Sd.SdEndpointOption</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>60</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00670</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00671</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00672</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>459</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00674</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>463</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00677</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00678</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00679</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00680</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00681</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00682</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00683</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00684</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00685</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00686</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00687</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>660</internalId></specobject>
    <specobject>
      <id>dev.Sd.DebugAndTrace</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00116</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>661</internalId></specobject>
    <specobject>
      <id>dev.Sd.Reinit</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>111</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00354</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>662</internalId></specobject>
    <specobject>
      <id>dev.Sd.SecurityConsiderations</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>133</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00688</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>663</internalId></specobject>
    <specobject>
      <id>dev.Sd.SoAdAPIDebouncing</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>154</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00696</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>664</internalId></specobject>
    <specobject>
      <id>dev.Sd.IdenticalConsumedEventgroup</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>176</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00693</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>665</internalId></specobject>
    <specobject>
      <id>dev.Sd.RetryOfSubscriptions</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>199</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00735</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>533</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>666</internalId></specobject>
    <specobject>
      <id>dev.Sd.ConsumedEventGroup_SocketGroup_Multiplicity</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>221</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00704</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>667</internalId></specobject>
    <specobject>
      <id>dev.Sd.MainFunctionCycleTime</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>237</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ECUC_SD_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>668</internalId></specobject>
    <specobject>
      <id>dev.Sd.SubscriptionDelayTimer</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>247</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00367</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>287</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00381</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00713</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>669</internalId></specobject>
    <specobject>
      <id>dev.Sd.DevError.SD_E_UNINIT</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>261</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00407</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>315</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00469</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>374</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00410</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>318</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00473</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00471</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>376</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>670</internalId></specobject>
    <specobject>
      <id>dev.Sd.SubscribeEventgroupEntry</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>280</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00453</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>671</internalId></specobject>
    <specobject>
      <id>dev.Sd.TTL</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>290</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00652</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>672</internalId></specobject>
    <specobject>
      <id>dev.Sd.MulticastEventSoConRef.Multiplicity</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>300</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ECUC_SD_00118</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>452</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>673</internalId></specobject>
    <specobject>
      <id>dev.Sd.ConfigOptions</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>311</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_91002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>522</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>674</internalId></specobject>
    <specobject>
      <id>dev.Sd.CapabilityRecordMatchCallout</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>325</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00716</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>510</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
        <provcov>
          <linksto>Sd.ECUC_SD_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>501</internalId></provcov>
        <provcov>
          <linksto>Sd.ECUC_SD_00125</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>502</internalId></provcov>
        <provcov>
          <linksto>Sd.ECUC_SD_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>503</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00718</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
        <provcov>
          <linksto>Sd.ECUC_SD_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>504</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00719</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>513</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>675</internalId></specobject>
    <specobject>
      <id>dev.Sd.InstanceLocalAdressCheckLength</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>343</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ECUC_SD_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>505</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00720</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>514</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>676</internalId></specobject>
    <specobject>
      <id>dev.Sd.ConnectionLostServer</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>358</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00732</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>519</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00733</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>677</internalId></specobject>
    <specobject>
      <id>dev.Sd.ConnectionLostClient</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>373</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00730</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>517</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>678</internalId></specobject>
    <specobject>
      <id>dev.Sd.LoadBalancing</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>384</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00611</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>531</internalId></provcov>
        <provcov>
          <linksto>Sd.ECUC_SD_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>527</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00612</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>554</internalId></provcov>
        <provcov>
          <linksto>Sd.ECUC_SD_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>679</internalId></specobject>
    <specobject>
      <id>dev.Sd.SoConModeChg</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>398</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>541</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>680</internalId></specobject>
    <specobject>
      <id>dev.Sd.ServiceGroup</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>413</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_91007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>568</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_91006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>567</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_91008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>569</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00749</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>561</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00747</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>559</internalId></provcov>
        <provcov>
          <linksto>Sd.ECUC_SD_00134</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>543</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00748</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>560</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00745</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>557</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00746</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>558</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00750</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>562</internalId></provcov>
        <provcov>
          <linksto>Sd.ECUC_SD_00135</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>544</internalId></provcov>
        <provcov>
          <linksto>Sd.ECUC_SD_00136</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>545</internalId></provcov>
        <provcov>
          <linksto>Sd.ECUC_SD_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>546</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00743</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>555</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00744</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>556</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>681</internalId></specobject>
    <specobject>
      <id>dev.Sd.SetRemAddrOfClientRxMulticastSoCon</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>438</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ECUC_SD_00139</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>548</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00377</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>682</internalId></specobject>
    <specobject>
      <id>dev.Sd.DiscardServiceMatchCandidate</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>454</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_07016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>683</internalId></specobject>
    <specobject>
      <id>dev.Sd.StopOfferRequested</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>468</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00751</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>570</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>684</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/Sd_Cfg.h.m4_30</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate/include/Sd_Cfg.h.m4</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>685</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Sd_Cfg.h.m4_31</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate/include/Sd_Cfg.h.m4</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>686</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Sd_Cfg.h.m4_46</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate/include/Sd_Cfg.h.m4</sourcefile>
      <sourceline>46</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>687</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Sd_Cfg.h.m4_51</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate/include/Sd_Cfg.h.m4</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>583</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>688</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Sd_Cfg.h.m4_52</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate/include/Sd_Cfg.h.m4</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00765</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>585</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>689</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Sd_Cfg.h.m4_55</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate/include/Sd_Cfg.h.m4</sourcefile>
      <sourceline>55</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList_Disable_RemoteAddr_Check</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>690</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Sd_Cfg.h.m4_119</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate/include/Sd_Cfg.h.m4</sourcefile>
      <sourceline>119</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>691</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/src/Sd_Cfg.c_52</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate/src/Sd_Cfg.c</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>692</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/Sd.h_318</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd.h</sourcefile>
      <sourceline>318</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>693</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Sd.h_334</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd.h</sourcefile>
      <sourceline>334</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00496</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>401</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>694</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Sd.h_358</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd.h</sourcefile>
      <sourceline>358</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00409</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>317</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>695</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Sd.h_382</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd.h</sourcefile>
      <sourceline>382</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00560</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>420</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>696</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/Sd_Cbk.h_53</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd_Cbk.h</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00412</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>320</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>697</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/Sd_Types.h_29</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd_Types.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00551</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>698</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Sd_Types.h_38</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd_Types.h</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00552</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>418</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>699</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Sd_Types.h_47</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd_Types.h</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00553</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>419</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>700</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Sd_Types.h_56</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd_Types.h</sourcefile>
      <sourceline>56</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00118</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>701</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Sd_Types.h_65</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd_Types.h</sourcefile>
      <sourceline>65</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00405</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>314</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>702</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Sd_Types.h_74</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd_Types.h</sourcefile>
      <sourceline>74</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00550</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>703</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Sd_Types.h_127</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd_Types.h</sourcefile>
      <sourceline>127</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.Sd_EventType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>704</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Sd_Types.h_160</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd_Types.h</sourcefile>
      <sourceline>160</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.Sd_ReportIssueContextType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>705</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Sd_Types.h_174</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/include/Sd_Types.h</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>706</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_136</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>136</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.API.Sd_GetVersionInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>911</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>707</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_137</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>137</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>708</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_198</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>198</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.API.Sd_Init</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>912</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>709</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_239</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>239</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>710</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_245</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>245</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00723</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>523</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>711</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_288</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>288</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>712</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_325</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>325</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.API.Sd_LocalIpAddrAssignmentChg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>913</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>713</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_366</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>366</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00697</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>483</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>714</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_522</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>522</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Sd_MainFunction</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>920</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>715</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_584</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>584</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.API.Sd_StartRandom</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>915</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>716</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_595</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>595</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList_Disable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>717</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_1050</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>1050</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>620</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>718</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_1055</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>1055</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.Pending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>621</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>719</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_1073</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>1073</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.Timer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>624</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>720</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_1091</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>1091</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>721</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd.c.m4_1102</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd.c.m4</sourcefile>
      <sourceline>1102</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>622</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>722</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_35</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>35</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>723</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_36</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>724</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_86</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>86</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Data.ServiceStates</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>919</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>725</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_527</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>527</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_getComphase</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>936</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>726</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_538</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>538</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_init</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>928</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>727</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_637</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>637</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_mainFunction</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>929</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>728</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_687</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>687</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00712</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>729</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_931</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>931</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.DEMReporting.ServerService_Not_Available</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>600</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>730</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_985</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>985</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.CallBack.ServerService_Not_Available</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>731</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1031</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1031</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.CallBack.ServerService_Not_Available_Multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>732</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1081</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1081</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_sendEntriesUnicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>930</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>733</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1194</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1194</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00703</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>734</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1196</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1196</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00702</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>735</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1203</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1203</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00737</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>535</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>736</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1204</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1204</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00739</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>537</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>737</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1225</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1225</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00738</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>738</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1228</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1228</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00742</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>540</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>739</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1304</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1304</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList_Disable_RemoteAddr_Check</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>740</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1311</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1311</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList_RemoteAddr_Check</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>741</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1321</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1321</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00785</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>742</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1347</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1347</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00785</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>743</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1376</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1376</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00352</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>744</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1377</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1377</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00365</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>745</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1378</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1378</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00376</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>746</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1397</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1397</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00514</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>414</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>747</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1424</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1424</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00735</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>533</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>748</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1435</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1435</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.DET.Error.Retry.Infinite.TTL.Not.Infinite</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>637</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>749</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1459</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1459</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.DET.Error.Retry.Process.Bigger.Than.TTL</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>638</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>750</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1480</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1480</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00739</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>537</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>751</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1481</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1481</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00740</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>538</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>752</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1592</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1592</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00738</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>753</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1593</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1593</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00739</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>537</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>754</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1628</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1628</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.CallBack.SubscribeNackReceived</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>604</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>755</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1641</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1641</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_startServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>933</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>756</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1666</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1666</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_haltServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>934</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>757</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1880</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1880</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00702</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>758</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1908</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1908</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00703</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>759</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1923</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1923</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00741</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>539</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>760</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1936</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1936</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00736</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>534</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>761</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1995</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1995</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00738</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>762</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_1996</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>1996</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00713</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>763</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2054</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2054</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00713</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>764</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2231</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2231</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_01503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>563</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>765</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2235</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2235</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00488</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>393</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>766</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2236</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2236</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00489</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>394</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>767</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2244</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2244</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_04089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>768</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2303</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2303</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_01503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>563</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>769</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2307</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2307</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00488</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>393</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>770</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2308</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2308</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00489</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>394</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>771</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2316</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2316</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_04089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>772</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2367</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2367</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>773</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2428</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2428</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>774</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2489</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2489</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>775</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2504</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2504</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>776</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2532</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2532</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>777</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2610</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2610</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>778</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2625</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2625</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>779</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2653</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2653</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>780</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2882</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2882</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00704</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>781</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2902</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2902</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00713</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>782</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2922</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2922</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00706</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>491</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>783</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2923</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2923</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00734</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>532</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>784</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2977</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2977</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00703</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>785</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_2979</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>2979</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00702</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>786</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3009</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3009</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00695</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>787</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3018</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3018</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00695</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>788</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3039</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3039</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.ClientService.SubscribeEventgroup.DelayedTransmission</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1011</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>789</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3064</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3064</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00712</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>790</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3426</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3426</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00352</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>791</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3427</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3427</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00365</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>792</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3435</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3435</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00352</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>793</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3436</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3436</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00365</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>794</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3504</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3504</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1032</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>795</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3595</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3595</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>796</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3596</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3596</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00604</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>797</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3601</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3601</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>798</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3602</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3602</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00604</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>799</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3622</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3622</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00362</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>800</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3638</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3638</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.CallOut.EventMapping_AVAILABLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>801</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3674</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3674</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00702</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>802</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3682</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3682</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00703</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>803</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3734</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3734</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.CallOut.EventMapping_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>804</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3762</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3762</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR42.SWS_SD_00705</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>805</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3766</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3766</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00740</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>538</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>806</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3801</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3801</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00712</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>807</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3839</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3839</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00738</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>808</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ClientService.c_3840</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ClientService.c</sourcefile>
      <sourceline>3840</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00712</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>809</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/Sd_Int.h_84</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Int.h</sourcefile>
      <sourceline>84</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>810</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Int.h_85</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Int.h</sourcefile>
      <sourceline>85</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>811</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Int.h_447</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Int.h</sourcefile>
      <sourceline>447</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Data.Runtime</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>918</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>812</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Int.h_526</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Int.h</sourcefile>
      <sourceline>526</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Data.Runtime</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>918</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>813</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/Sd_Receive.c_270</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Receive.c</sourcefile>
      <sourceline>270</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Remote.Node.Address.Not.Stored</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>814</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Receive.c_391</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Receive.c</sourcefile>
      <sourceline>391</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>620</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>815</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Receive.c_395</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Receive.c</sourcefile>
      <sourceline>395</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.Unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>816</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Receive.c_396</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Receive.c</sourcefile>
      <sourceline>396</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.Multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1133</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>817</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Receive.c_490</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Receive.c</sourcefile>
      <sourceline>490</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.CallBack.MalformedMsg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>603</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>818</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_36</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Data.Runtime</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>918</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>819</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_149</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>149</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_init</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>820</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_163</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>163</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_setupBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>821</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_209</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>209</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00709</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>498</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>822</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_274</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>274</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>823</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_278</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>278</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_10503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>566</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>824</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_311</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>311</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00656.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>571</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>825</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_323</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>323</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00656.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>571</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>826</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_404</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>404</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00655</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>827</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_405</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>405</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00658.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>828</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_409</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>409</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>829</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_416</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>416</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00655</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>830</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_417</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>417</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00658.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>573</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>831</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_421</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>421</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>832</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_458</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>458</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>833</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_459</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>459</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>834</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_670</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>670</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>835</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_674</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>674</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>836</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_696</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>696</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>837</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_700</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>700</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>838</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_703</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>703</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>839</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_704</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>704</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00415</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>840</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_734</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>734</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>841</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_Send.c_735</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_Send.c</sourcefile>
      <sourceline>735</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00701.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>842</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_40</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Data.ServiceStates</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>919</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>843</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_267</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>267</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_getComphase</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1051</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>844</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_279</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>279</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_init</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1042</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>845</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_350</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>350</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.MainFunction.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1113</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>846</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_546</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>546</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ServerService_sendEntriesUnicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1044</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>847</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_952</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>952</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00710</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>848</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_975</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>975</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>849</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_1670</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>1670</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>850</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_1711</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>1711</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>851</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_1735</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>1735</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>852</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_1753</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>1753</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00453</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>853</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_1771</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>1771</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00453</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>854</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_1789</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>1789</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>855</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_1796</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>1796</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>856</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_1820</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>1820</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>857</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_1913</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>1913</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>858</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_1928</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>1928</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>859</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_2001</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>2001</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>860</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_2082</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>2082</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>861</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_2307</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>2307</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00603</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>862</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_2468</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>2468</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>863</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Sd_ServerService.c_2483</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/src/Sd_ServerService.c</sourcefile>
      <sourceline>2483</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>864</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_62</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>62</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.HandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>865</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_298</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>298</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.VersionDrivenFindBehavior.MinimumMinorVersion.MinorVersion.MaximumValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>866</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_363</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>363</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Client001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>867</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_456</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>456</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00764</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>584</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>868</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_478</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>478</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.ConsumedEventGroup001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>869</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_479</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>479</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.ConsumedEventGroup002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>870</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_480</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>480</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.ConsumedEventGroup003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>871</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_481</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>481</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.ConsumedEventGroup005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>872</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_505</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>505</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.ConsumedEventGroup004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>873</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_680</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>680</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Delay</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>874</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_761</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>761</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Delay</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>875</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_885</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>885</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1216</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>876</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_906</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>906</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>877</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_909</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>909</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00459</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>364</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>878</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_910</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>910</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00460</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>879</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_932</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>932</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>880</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_934</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>934</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00459</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>364</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>881</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_935</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>935</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00460</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>882</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_957</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>957</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1217</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>883</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_982</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>982</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>884</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_985</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>985</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00459</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>364</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>885</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_986</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>986</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00460</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>886</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1005</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1005</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Server001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>887</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1008</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1008</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Server002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>888</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1018</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1018</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PBSelectable.ServerServiceAutoAvailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>889</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1045</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1045</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PBSelectable.ServerServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>890</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1063</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1063</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PBSelectable.ServerServiceInstanceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>891</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1116</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1116</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PBSelectable.ServerServiceMajorVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>892</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1133</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1133</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PBSelectable.ServerServiceMinorVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>893</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1168</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1168</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SoAd001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>894</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1198</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1198</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SoAd002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>895</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1273</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1273</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.EventHandler001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1202</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>896</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1277</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1277</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.EventHandler002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>897</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1279</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1279</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.EventHandler003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>898</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1557</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1557</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Delay</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>899</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Sd.xdm.m4_1650</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd.xdm.m4</sourcefile>
      <sourceline>1650</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Delay</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>900</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/Sd_EBParameters.xdm.m4_49</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/config/Sd_EBParameters.xdm.m4</sourcefile>
      <sourceline>49</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>901</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_var/xgen/Sd.xgen_352</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate_var/xgen/Sd.xgen</sourcefile>
      <sourceline>352</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Data.Config</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>917</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>902</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/Sd.xgen_1083</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate_var/xgen/Sd.xgen</sourcefile>
      <sourceline>1083</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00493</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>398</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>903</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/Sd.xgen_1084</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate_var/xgen/Sd.xgen</sourcefile>
      <sourceline>1084</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00493</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>398</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>904</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/Sd.xgen_1093</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate_var/xgen/Sd.xgen</sourcefile>
      <sourceline>1093</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Client002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>905</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/Sd.xgen_1214</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/src/Autosar/generate_var/xgen/Sd.xgen</sourcefile>
      <sourceline>1214</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00492</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>397</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>906</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Seamless service relocation">
    <specobject>
      <id>Sd.dsn.Func0001.Server.ServiceRelocation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>742</sourceline>
      <version>1</version>
      <description>
            A Sd server instance shall accept Sd client instances to consume services and free the
            resources for new clients after consumption has finished.
          </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.ASR41.SWS_SD_00569</srcid><srcstatus/><internalId>18</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>907</internalId></specobject>
    <specobject>
      <id>Sd.dsn.Func0002.Client.ServiceRelocation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>755</sourceline>
      <version>1</version>
      <description>
            A Sd client instance shall be able to switch the provide of the services
            when the service was relocated.
          </description>
      <comment>
            Service relocation can only be done when a offer/subscription runs out. It is not
            indented that the same service instance is provided by multiple server at the same time.
          </comment>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.ASR42.SWS_SD_00705</srcid><srcstatus/><internalId>24</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00382</srcid><srcstatus/><internalId>296</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>908</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of Report Issue Callout Function Requirement">
    <specobject>
      <id>Sd.dsn.Func0003.EB.ReportIssueCallout</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>774</sourceline>
      <version>1</version>
      <description>
            SD shall support a user callout function to report dropped entries under certain
            circumstances.
          </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.dsn.Func0003.ReportIssueCallout_Reporting</srcid><srcstatus/><internalId>1190</internalId></linkedfrom><linkedfrom><srcid>Sd.dsn.Func0003.ReportIssueCallout_Conf</srcid><srcstatus/><internalId>1191</internalId></linkedfrom><linkedfrom><srcid>Sd.dsn.Func0003.User_ReportIssueCallout</srcid><srcstatus/><internalId>1192</internalId></linkedfrom><linkedfrom><srcid>Sd.dsn.Func0003.Sd_ReportIssueContextType</srcid><srcstatus/><internalId>1193</internalId></linkedfrom><linkedfrom><srcid>Sd.dsn.Func0003.Sd_EventType</srcid><srcstatus/><internalId>1194</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>909</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of Access control list">
    <specobject>
      <id>Sd.dsn.Func0004.Client.AccessControlList</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>789</sourceline>
      <version>1</version>
      <description>
            SD shall support a configurable Access Control List (ACL) for clients, which contains
            a list of authenticated communication partners.
          </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.SWS_SD_00763</srcid><srcstatus/><internalId>583</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00764</srcid><srcstatus/><internalId>584</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00765</srcid><srcstatus/><internalId>585</internalId></linkedfrom><linkedfrom><srcid>Sd.SWS_SD_00785</srcid><srcstatus/><internalId>586</internalId></linkedfrom><linkedfrom><srcid>Sd.dsn.Func0004.Client.AccessControlList_RemoteAddr_Check</srcid><srcstatus/><internalId>1195</internalId></linkedfrom><linkedfrom><srcid>Sd.dsn.Func0004.Client.AccessControlList_Disable_RemoteAddr_Check</srcid><srcstatus/><internalId>1196</internalId></linkedfrom><linkedfrom><srcid>Sd.dsn.Func0004.Client.AccessControlList_Disable</srcid><srcstatus/><internalId>1197</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>910</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.API.Sd_GetVersionInfo</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>20686</sourceline>
      <version>1</version>
      <description>See &amp;lt;xref linkend="API_Sd_GetVersionInfo"/&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_136</srcid><srcstatus/><internalId>707</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>911</internalId></specobject>
    <specobject>
      <id>Sd.API.Sd_Init</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>20694</sourceline>
      <version>1</version>
      <description>See &amp;lt;xref linkend="API_Sd_Init"/&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_198</srcid><srcstatus/><internalId>709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>912</internalId></specobject>
    <specobject>
      <id>Sd.API.Sd_LocalIpAddrAssignmentChg</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>20702</sourceline>
      <version>1</version>
      <description>See &amp;lt;xref linkend="API_Sd_LocalIpAddrAssignmentChg"/&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_325</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>913</internalId></specobject>
    <specobject>
      <id>Sd.API.Sd_MainFunction</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>20710</sourceline>
      <version>1</version>
      <description>See &amp;lt;xref linkend="API_Sd_MainFunction"/&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Sd_MainFunction</srcid><srcstatus/><internalId>920</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>914</internalId></specobject>
    <specobject>
      <id>Sd.API.Sd_StartRandom</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>20721</sourceline>
      <version>1</version>
      <description>See &amp;lt;xref linkend="API_Sd_StartRandom"/&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_584</srcid><srcstatus/><internalId>716</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>915</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Sd.API.Sd_CapabilityRecordStrCmp</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>20740</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match001</srcid><srcstatus/><internalId>923</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match002</srcid><srcstatus/><internalId>924</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match003</srcid><srcstatus/><internalId>925</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>916</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Data.Config</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>21060</sourceline>
      <version>1</version>
      <description>
            &amp;lt;figure id="Fig_ConfigurationData"&amp;gt;
              &amp;lt;title&amp;gt;Configuration data&amp;lt;/title&amp;gt;
              &amp;lt;mediaobject&amp;gt;
                &amp;lt;imageobject&amp;gt;
                  &amp;lt;imagedata fileref="images/EAID_19BCAA64_491D_47e8_9123_8BC657495DCC.png" scalefit="1"/&amp;gt;
                &amp;lt;/imageobject&amp;gt;
              &amp;lt;/mediaobject&amp;gt;
            &amp;lt;/figure&amp;gt;
            </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/Sd.xgen_352</srcid><srcstatus/><internalId>902</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00690</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>476</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>917</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Data.Runtime</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>21614</sourceline>
      <version>1</version>
      <description>
              &amp;lt;figure id="figureRuntimeData"&amp;gt;
                &amp;lt;title&amp;gt;Service Discovery Run-time data&amp;lt;/title&amp;gt;
                &amp;lt;mediaobject&amp;gt;
                  &amp;lt;imageobject&amp;gt;
                    &amp;lt;imagedata fileref="images/EAID_2C2C40FE_2651_4ae6_B169_6C83E464C330.png" scale="70"/&amp;gt;
                  &amp;lt;/imageobject&amp;gt;
                &amp;lt;/mediaobject&amp;gt;
              &amp;lt;/figure&amp;gt;
          </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Int.h_447</srcid><srcstatus/><internalId>812</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Int.h_526</srcid><srcstatus/><internalId>813</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_36</srcid><srcstatus/><internalId>819</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00402</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>311</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>918</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Data.ServiceStates</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>21884</sourceline>
      <version>1</version>
      <description>
            &amp;lt;figure id="figureRuntimeDataServices"&amp;gt;
            &amp;lt;title&amp;gt;Service Discovery Run-time data Services&amp;lt;/title&amp;gt;
            &amp;lt;mediaobject&amp;gt;
              &amp;lt;imageobject&amp;gt;
                &amp;lt;imagedata fileref="images/EAID_5D87794B_8EDE_425c_92AE_FC6A951BC619.png" scale="70"/&amp;gt;
              &amp;lt;/imageobject&amp;gt;
            &amp;lt;/mediaobject&amp;gt;
          &amp;lt;/figure&amp;gt;
            </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_86</srcid><srcstatus/><internalId>725</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_40</srcid><srcstatus/><internalId>843</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>919</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Sd_MainFunction</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22022</sourceline>
      <version>1</version>
      <description>
          &amp;lt;figure id="fig.Seq_Sd_MainFunction"&amp;gt;
            &amp;lt;title&amp;gt;Sd_MainFunction&amp;lt;/title&amp;gt;
            &amp;lt;mediaobject&amp;gt;
              &amp;lt;imageobject&amp;gt;
                &amp;lt;imagedata fileref="images/EAID_8ABB15DC_F980_4147_A28C_C3292A8A46A5.png" scale="70"/&amp;gt;
              &amp;lt;/imageobject&amp;gt;
            &amp;lt;/mediaobject&amp;gt;
          &amp;lt;/figure&amp;gt;
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_522</srcid><srcstatus/><internalId>715</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00481</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00651</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
        <provcov>
          <linksto>Sd.API.Sd_MainFunction</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>914</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00131</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>920</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Sd.Random.Start</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22063</sourceline>
      <version>1</version>
      <description>
          The function &amp;lt;function&amp;gt;Sd_StartRandom()&amp;lt;/function&amp;gt; shall set the state of the LCG.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Random_1</srcid><srcstatus/><internalId>1309</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>921</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Sd.Random.Get</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22076</sourceline>
      <version>1</version>
      <description>
          The function &amp;lt;function&amp;gt;Sd_GetRandom()&amp;lt;/function&amp;gt; shall yield a random number
          in the range min to max.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Random_0</srcid><srcstatus/><internalId>1308</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>922</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22092</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; unit shall consider the configuration string as matching when
          no configuration string is received and no configuration string is configured.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_17</srcid><srcstatus/><internalId>1492</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.Sd.API.Sd_CapabilityRecordStrCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>916</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>923</internalId></specobject>
    <specobject>
      <id>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22107</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; unit shall consider the confgiuration string as matching when
          one configuration string is received and one configuration string is configured
          and the strings are identical until the first zero byte.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_14</srcid><srcstatus/><internalId>1490</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.Sd.API.Sd_CapabilityRecordStrCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>916</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>924</internalId></specobject>
    <specobject>
      <id>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22123</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; unit shall not consider the confgiuration string as matching in all other cases.
        </description>
      <comment>
          More than one configuration option is not supported.
          Rationale: Configurations resulting in more than one config option are not possible.
        </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_13</srcid><srcstatus/><internalId>1489</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_14</srcid><srcstatus/><internalId>1490</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_2ConfigOptionStrings</srcid><srcstatus/><internalId>1650</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.Sd.API.Sd_CapabilityRecordStrCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>916</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00710</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>925</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.ClientService.API.Sd_ClientServiceSetState</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22279</sourceline>
      <version>1</version>
      <description>See &amp;lt;xref linkend="API_Sd_ClientServiceSetState"/&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.SetState.001</srcid><srcstatus/><internalId>1022</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.SetState.002</srcid><srcstatus/><internalId>1023</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00443</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>348</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>926</internalId></specobject>
    <specobject>
      <id>Sd.ClientService.API.Sd_ConsumedEventGroupSetState</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22290</sourceline>
      <version>1</version>
      <description>See &amp;lt;xref linkend="API_Sd_ConsumedEventGroupSetState"/&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.ConsumedEventGroupSetState.001</srcid><srcstatus/><internalId>1024</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.ConsumedEventGroupSetState.002</srcid><srcstatus/><internalId>1025</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00442</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>347</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>927</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.ClientService.API.Sd_ClientService_init</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22312</sourceline>
      <version>1</version>
      <description>&lt;description/&gt;</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_538</srcid><srcstatus/><internalId>727</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_2</srcid><srcstatus/><internalId>1464</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00440</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>346</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>928</internalId></specobject>
    <specobject>
      <id>Sd.ClientService.API.Sd_ClientService_mainFunction</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22389</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_637</srcid><srcstatus/><internalId>728</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>929</internalId></specobject>
    <specobject>
      <id>Sd.ClientService.API.Sd_ClientService_sendEntriesUnicast</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22528</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1081</srcid><srcstatus/><internalId>733</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>930</internalId></specobject>
    <specobject>
      <id>Sd.ClientService.API.Sd_ClientService_eventOfferService</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22653</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.001</srcid><srcstatus/><internalId>1026</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.002</srcid><srcstatus/><internalId>1027</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.003</srcid><srcstatus/><internalId>1028</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.004</srcid><srcstatus/><internalId>1029</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.005</srcid><srcstatus/><internalId>1030</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.006</srcid><srcstatus/><internalId>1031</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventOffer.007</srcid><srcstatus/><internalId>1032</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>931</internalId></specobject>
    <specobject>
      <id>Sd.ClientService.API.Sd_ClientService_eventSubscribeAck</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>22848</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.eventSubscribeEventgroupAck.001</srcid><srcstatus/><internalId>1033</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventSubscribeEventgroupAck.002</srcid><srcstatus/><internalId>1034</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventSubscribeEventgroupAck.003</srcid><srcstatus/><internalId>1035</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventSubscribeEventgroupAck.004</srcid><srcstatus/><internalId>1036</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventSubscribeEventgroupAck.005</srcid><srcstatus/><internalId>1037</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventSubscribeEventgroupAck.006</srcid><srcstatus/><internalId>1038</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ClientService.eventSubscribeEventgroupAck.008</srcid><srcstatus/><internalId>1039</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>932</internalId></specobject>
    <specobject>
      <id>Sd.ClientService.API.Sd_ClientService_startServices</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23029</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1641</srcid><srcstatus/><internalId>756</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>933</internalId></specobject>
    <specobject>
      <id>Sd.ClientService.API.Sd_ClientService_haltServices</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23129</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1666</srcid><srcstatus/><internalId>757</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>934</internalId></specobject>
    <specobject>
      <id>Sd.ClientService.API.Sd_ClientService_resetRemoteConnection</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23229</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ClientService.ResetRemoteConnection.001</srcid><srcstatus/><internalId>1040</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00448</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>935</internalId></specobject>
    <specobject>
      <id>Sd.ClientService.API.Sd_ClientService_getComphase</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23346</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_527</srcid><srcstatus/><internalId>726</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>936</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23509</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.001&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Offer received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_WAIT_SOCON_0</srcid><srcstatus/><internalId>1389</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_AVAILABLE_0</srcid><srcstatus/><internalId>1390</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_AVAILABLE_1</srcid><srcstatus/><internalId>1391</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_OfferReceived</srcid><srcstatus/><internalId>1394</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_StopOfferReceived</srcid><srcstatus/><internalId>1395</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00463</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>368</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>937</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23514</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.002&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;StopOffer received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_StopOfferReceived</srcid><srcstatus/><internalId>1395</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>938</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23515</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.003&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Offer TTL timeout&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_OfferReceived</srcid><srcstatus/><internalId>1394</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>939</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23516</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.004&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Rx and Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service released&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_1</srcid><srcstatus/><internalId>1384</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>940</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.007</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23517</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.007&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Rx and Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;AutoRequire = TRUE&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_0</srcid><srcstatus/><internalId>1383</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_4</srcid><srcstatus/><internalId>1387</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_5</srcid><srcstatus/><internalId>1388</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_1</srcid><srcstatus/><internalId>1463</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.SWS_SD_00350</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>645</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>941</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.008</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23522</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.008&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Requested and Rx assigned&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_2</srcid><srcstatus/><internalId>1385</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_TX_Unassign</srcid><srcstatus/><internalId>1401</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.SWS_SD_00350</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>645</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>942</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.009</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23527</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.009&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Requested and Rx not assigned&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_0</srcid><srcstatus/><internalId>1383</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_3</srcid><srcstatus/><internalId>1386</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_4</srcid><srcstatus/><internalId>1387</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_5</srcid><srcstatus/><internalId>1388</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>943</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.010</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23528</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.010&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Requested and Tx assigned&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_3</srcid><srcstatus/><internalId>1386</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_RX_Unassign</srcid><srcstatus/><internalId>1402</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.SWS_SD_00350</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>645</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>944</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.011</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23533</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.011&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Requested and Tx not assigned&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_2</srcid><srcstatus/><internalId>1385</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>945</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.018</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23534</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.018&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Request service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Ip not assigned&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_2</srcid><srcstatus/><internalId>1385</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_3</srcid><srcstatus/><internalId>1386</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>946</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.019</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23535</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.019&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Request service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Rx and Tx assigned and Offer not received&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_1</srcid><srcstatus/><internalId>1384</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_REPETITION_NoInitialFindDelay</srcid><srcstatus/><internalId>1392</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_MAIN_NoInitialFindDelayNoRepetition</srcid><srcstatus/><internalId>1393</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_OfferReceived</srcid><srcstatus/><internalId>1394</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_StopOfferReceived</srcid><srcstatus/><internalId>1395</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>947</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.020</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23540</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.020&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Request service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;WAIT_SOCON&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Rx and Tx assigned, Offer received&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_WAIT_SOCON_0</srcid><srcstatus/><internalId>1389</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>948</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.012</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23545</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.012&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Unassign Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_TX_NotAssigned</srcid><srcstatus/><internalId>1397</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>949</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.013</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23546</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.013&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Unassign Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_RX_NotAssigned</srcid><srcstatus/><internalId>1398</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>950</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.014</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23547</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.014&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;OnHold Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_TX_NotAssigned</srcid><srcstatus/><internalId>1397</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>951</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.015</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23548</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.015&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;OnHold Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_RX_NotAssigned</srcid><srcstatus/><internalId>1398</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>952</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Down.Ev.016</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23549</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.016&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Release service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_ReleaseRequest</srcid><srcstatus/><internalId>1396</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>953</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.100</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23578</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.100&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Initial find delay expired&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;REPETITION&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;InitialFindRepetitionsMax &amp;gt; 0 &amp;amp;amp;&amp;amp;amp; SoAd_GetSoConMode() != SOAD_SOCON_OFFLINE&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_REPETITION_NoInitialFindDelay</srcid><srcstatus/><internalId>1392</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_MAIN_NoInitialFindDelayNoRepetition</srcid><srcstatus/><internalId>1393</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_REPETITION_0</srcid><srcstatus/><internalId>1403</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Check_SoConMode_Before_Sending_Find_In_INITIALWAIT</srcid><srcstatus/><internalId>1520</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Send_Find_After_TTL_And_FindDelayMax_Run_Out</srcid><srcstatus/><internalId>1523</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00351</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00353</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00358</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>284</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>954</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.101</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23585</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.101&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Initial find delay expired&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MAIN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;InitialFindRepetitionsMax = 0 &amp;amp;amp;&amp;amp;amp; SoAd_GetSoConMode() != SOAD_SOCON_OFFLINE&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_MAIN_NoRepetition</srcid><srcstatus/><internalId>1410</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00351</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00353</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>955</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.113</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23591</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.113&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Offer received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;WAIT_SOCON&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_MAIN_0</srcid><srcstatus/><internalId>1404</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_TCP_INITIALWAIT_AVAILABLE</srcid><srcstatus/><internalId>1405</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_MAIN_2</srcid><srcstatus/><internalId>1406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00352</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>956</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.103</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23596</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.103&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Release service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_DOWN_0</srcid><srcstatus/><internalId>1399</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00351</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00355</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00456</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>361</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>957</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.111</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23603</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.111&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Release service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;AutoRequire = TRUE&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_DOWN_1</srcid><srcstatus/><internalId>1400</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00351</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00355</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00456</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>361</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>958</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.104</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23610</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.104&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Unassign Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_TX_Unassign</srcid><srcstatus/><internalId>1401</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00357</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00456</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>361</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>959</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.105</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23616</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.105&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Unassign Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_RX_Unassign</srcid><srcstatus/><internalId>1402</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00357</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00456</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>361</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>960</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.108</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23622</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.108&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_Ignore_0</srcid><srcstatus/><internalId>1411</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00375</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>961</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.109</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23627</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.109&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_Ignore_0</srcid><srcstatus/><internalId>1411</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00375</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>962</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.110</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23632</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.110&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Request service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_Ignore_1</srcid><srcstatus/><internalId>1412</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00375</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>963</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.112</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23637</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.112&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;StopOffer received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_Ignore_2</srcid><srcstatus/><internalId>1413</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00375</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>964</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.InitialWait.Ev.114</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23642</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.114&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;State machine timer expired&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;SoAd_GetSoConMode() == SOAD_SOCON_OFFLINE&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_Check_SoConMode_Before_Sending_Find_In_INITIALWAIT</srcid><srcstatus/><internalId>1520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>965</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.200</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23672</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.200&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Find repetition delay expired&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;REPETITION&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Not the final repetition&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_MAIN_0</srcid><srcstatus/><internalId>1414</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_AVAILABLE_1</srcid><srcstatus/><internalId>1417</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00457</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>362</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00363</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>285</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>966</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.201</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23678</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.201&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Find repetition delay expired&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MAIN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;The final repetition&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_MAIN_NoInitialFindDelayNoRepetition</srcid><srcstatus/><internalId>1393</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_MAIN_0</srcid><srcstatus/><internalId>1414</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00457</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>362</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00369</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>288</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00363</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>285</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>967</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.212</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23685</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.212&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Offer received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;WAIT_SOCON&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_WAIT_SOCON_1</srcid><srcstatus/><internalId>1415</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00365</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>968</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.203</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23692</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.203&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Release service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_DOWN_0</srcid><srcstatus/><internalId>1419</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00371</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>969</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.204</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23697</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.204&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Unassign Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_DOWN_1</srcid><srcstatus/><internalId>1420</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00373</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>970</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.205</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23702</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.205&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Unassign Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_DOWN_2</srcid><srcstatus/><internalId>1421</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00373</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>971</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.206</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23707</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.206&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;OnHold Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_DOWN_1</srcid><srcstatus/><internalId>1420</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00373</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>972</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.207</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23712</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.207&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;OnHold Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_DOWN_2</srcid><srcstatus/><internalId>1421</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00373</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>973</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.208</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23717</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.208&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;REPETITION&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_Ignore_0</srcid><srcstatus/><internalId>1422</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>974</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.209</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23718</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.209&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;REPETITION&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_Ignore_0</srcid><srcstatus/><internalId>1422</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>975</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.210</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23719</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.210&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Request service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;REPETITION&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_Ignore_1</srcid><srcstatus/><internalId>1423</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>976</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Repetition.Ev.211</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23720</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.211&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;StopOffer received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;REPETITION&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_Ignore_2</srcid><srcstatus/><internalId>1424</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>977</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.310</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23749</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.310&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Offer received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;WAIT_SOCON&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_OfferReceived</srcid><srcstatus/><internalId>1435</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>978</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.312</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23750</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.312&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;SoConMode online&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MAIN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_SoConModeOnline_0</srcid><srcstatus/><internalId>1436</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>979</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.314</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23751</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.314&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Offer TTL timeout&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_INITIALWAIT_0</srcid><srcstatus/><internalId>1434</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>980</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.301</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23752</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.301&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Release service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_DOWN_0</srcid><srcstatus/><internalId>1428</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00380</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>294</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>981</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.302</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23757</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.302&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Unassign Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_DOWN_1</srcid><srcstatus/><internalId>1429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00380</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>294</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>982</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.303</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23762</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.303&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Unassign Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_DOWN_2</srcid><srcstatus/><internalId>1430</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00380</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>294</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>983</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.304</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23767</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.304&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;OnHold Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_DOWN_1</srcid><srcstatus/><internalId>1429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00380</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>294</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>984</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.305</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23772</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.305&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;OnHold Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_DOWN_2</srcid><srcstatus/><internalId>1430</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00380</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>294</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>985</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.306</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23777</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.306&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MAIN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_Ignore_0</srcid><srcstatus/><internalId>1431</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>986</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.307</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23778</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.307&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MAIN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_Ignore_0</srcid><srcstatus/><internalId>1431</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>987</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.308</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23779</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.308&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Request service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MAIN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_Ignore_1</srcid><srcstatus/><internalId>1432</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>988</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Main.Ev.309</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23780</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.309&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;StopOffer received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MAIN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_Ignore_2</srcid><srcstatus/><internalId>1433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>989</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.Available.Ev.400</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23809</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Available.Ev.400&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Offer received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;AVAILABLE&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_self_AVAILABLE_0</srcid><srcstatus/><internalId>1438</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_0</srcid><srcstatus/><internalId>1456</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_1</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_2</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_3</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_4</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_EG_self_AVAILABLE_5</srcid><srcstatus/><internalId>1461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>990</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Available.Ev.401</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23810</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Available.Ev.401&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;StopOffer received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MAIN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_MAIN_0</srcid><srcstatus/><internalId>1439</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_MAIN_1</srcid><srcstatus/><internalId>1440</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_resetRemoteConnection_0</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00367</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>287</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00382</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>991</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Available.Ev.402</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23816</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Available.Ev.402&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Offer TTL timeout&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_self_AVAILABLE_0</srcid><srcstatus/><internalId>1438</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_INITIALWAIT_0</srcid><srcstatus/><internalId>1441</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_INITIALWAIT_1</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_OfferService_TTL_0</srcid><srcstatus/><internalId>1505</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>421</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00382</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>992</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Available.Ev.403</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23822</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Available.Ev.403&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Release service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_0</srcid><srcstatus/><internalId>1443</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_5</srcid><srcstatus/><internalId>1448</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_10</srcid><srcstatus/><internalId>1453</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_CEvg_Unicast</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Dynamic_TCP</srcid><srcstatus/><internalId>1511</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Static_TCP</srcid><srcstatus/><internalId>1512</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_WAIT_SOCON_To_AVAILABLE_UDP</srcid><srcstatus/><internalId>1513</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00381</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00382</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00722</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>516</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>993</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Available.Ev.404</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23829</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Available.Ev.404&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Unassign Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_2</srcid><srcstatus/><internalId>1445</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_7</srcid><srcstatus/><internalId>1450</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00382</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>994</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Available.Ev.405</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23834</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Available.Ev.405&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Unassign Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_4</srcid><srcstatus/><internalId>1447</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_9</srcid><srcstatus/><internalId>1452</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00382</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>995</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Available.Ev.406</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23839</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Available.Ev.406&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;OnHold Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_1</srcid><srcstatus/><internalId>1444</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_6</srcid><srcstatus/><internalId>1449</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00382</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>996</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Available.Ev.407</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23844</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Available.Ev.407&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;OnHold Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_3</srcid><srcstatus/><internalId>1446</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_8</srcid><srcstatus/><internalId>1451</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00382</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>997</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Available.Ev.408</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23849</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Available.Ev.408&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Tx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;AVAILABLE&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_Ignore_0</srcid><srcstatus/><internalId>1454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>998</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Available.Ev.409</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23850</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Available.Ev.409&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Assign Rx&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;AVAILABLE&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_Ignore_0</srcid><srcstatus/><internalId>1454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>999</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.Available.Ev.410</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23851</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Available.Ev.410&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Request service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;AVAILABLE&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_Ignore_1</srcid><srcstatus/><internalId>1455</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1000</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.WaitSoCon.Ev.501</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23882</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;.WaitSoCon.Ev.501&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;On entry of WAIT_SOCON&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;WAIT_SOCON&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;OpenSoCon(), Check SoConMode + IsConnectionReady()&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Dynamic_TCP</srcid><srcstatus/><internalId>1511</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Static_TCP</srcid><srcstatus/><internalId>1512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1001</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.WaitSoCon.Ev.502</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23883</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;.WaitSoCon.Ev.502&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;TCP: SoConMode == ONLINE + UDP: SoConMode == ONLINE AND IsConnectionReady() == TCPIP_E_OK&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;AVAILABLE&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <furtherinfo>WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.</furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_AVAILABLE_0</srcid><srcstatus/><internalId>1390</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_AVAILABLE_1</srcid><srcstatus/><internalId>1391</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_0</srcid><srcstatus/><internalId>1407</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_1</srcid><srcstatus/><internalId>1408</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_2</srcid><srcstatus/><internalId>1409</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_AVAILABLE_0</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_AVAILABLE_1</srcid><srcstatus/><internalId>1417</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_AVAILABLE_2</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_0</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_1</srcid><srcstatus/><internalId>1426</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_2</srcid><srcstatus/><internalId>1427</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_SoConModeOnline_1</srcid><srcstatus/><internalId>1437</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_1</srcid><srcstatus/><internalId>1463</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_OfferService_TTL_0</srcid><srcstatus/><internalId>1505</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Dynamic_TCP</srcid><srcstatus/><internalId>1511</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Static_TCP</srcid><srcstatus/><internalId>1512</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_WAIT_SOCON_To_AVAILABLE_UDP</srcid><srcstatus/><internalId>1513</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00721</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>515</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1002</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.WaitSoCon.Ev.503</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23891</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;.WaitSoCon.Ev.503&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;TCP: SoConMode == OFFLINE || UDP: SoConMode == OFFLINE || IsConnectionReady() == TCPIP_E_PENDING&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;WAIT_SOCON&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Set StateMachineTimer to next MainFunction&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Dynamic_TCP</srcid><srcstatus/><internalId>1511</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Static_TCP</srcid><srcstatus/><internalId>1512</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_WAIT_SOCON_To_AVAILABLE_UDP</srcid><srcstatus/><internalId>1513</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_From_WAIT_SOCON_to_INITIAL_WAIT_Two_Clients</srcid><srcstatus/><internalId>1514</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_From_WAIT_SOCON_To_MAIN</srcid><srcstatus/><internalId>1515</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_StopOffer_Followed_By_Offer_in_WAIT_SOCON</srcid><srcstatus/><internalId>1516</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Release_in_WAIT_SOCON</srcid><srcstatus/><internalId>1517</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Offer_TTL_Runs_Out_in_WAIT_SOCON</srcid><srcstatus/><internalId>1518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1003</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.WaitSoCon.Ev.504</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23892</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;.WaitSoCon.Ev.504&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;UDP: IsConnectionReady() == TCPIP_E_NOT_OK&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIAL_WAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;CloseSoCon() + if no valid offer: ReleaseRemoteAddr()&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_From_WAIT_SOCON_to_INITIAL_WAIT_Two_Clients</srcid><srcstatus/><internalId>1514</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1004</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.WaitSoCon.Ev.505</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23893</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;.WaitSoCon.Ev.505&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;StateMachineTimer runs out&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;WAIT_SOCON&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;TCP: Check SoConMode || UDP: Check SoConMode + IsConnectionReady()&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Dynamic_TCP</srcid><srcstatus/><internalId>1511</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Static_TCP</srcid><srcstatus/><internalId>1512</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_WAIT_SOCON_To_AVAILABLE_UDP</srcid><srcstatus/><internalId>1513</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1005</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.WaitSoCon.Ev.506</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23894</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;.WaitSoCon.Ev.506&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;OfferTTL runs out&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;INITIALWAIT&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;CloseSoCon() + ReleaseRemoteAddr()&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_Offer_TTL_Runs_Out_in_WAIT_SOCON</srcid><srcstatus/><internalId>1518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1006</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.WaitSoCon.Ev.507</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23895</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;.WaitSoCon.Ev.507&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Release service&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;DOWN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;CloseSoCon() + if no valid offer: ReleaseRemoteAddr()&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_Release_in_WAIT_SOCON</srcid><srcstatus/><internalId>1517</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1007</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.WaitSoCon.Ev.508</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23896</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;.WaitSoCon.Ev.508&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;StopOffer received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MAIN&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;CloseSoCon() + if no valid offer: ReleaseRemoteAddr()&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_From_WAIT_SOCON_To_MAIN</srcid><srcstatus/><internalId>1515</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1008</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.Ignore</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23903</sourceline>
      <version>1</version>
      <description>
          Ignore events not specified in &amp;lt;xref linkend="Fig_ClientServiceComPhases" xrefstyle="select: label"/&amp;gt;.
        </description>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_2</srcid><srcstatus/><internalId>1385</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_3</srcid><srcstatus/><internalId>1386</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_WAIT_SOCON_0</srcid><srcstatus/><internalId>1389</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_AVAILABLE_0</srcid><srcstatus/><internalId>1390</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_AVAILABLE_1</srcid><srcstatus/><internalId>1391</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_OfferReceived</srcid><srcstatus/><internalId>1394</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_StopOfferReceived</srcid><srcstatus/><internalId>1395</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_ReleaseRequest</srcid><srcstatus/><internalId>1396</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_TX_NotAssigned</srcid><srcstatus/><internalId>1397</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_RX_NotAssigned</srcid><srcstatus/><internalId>1398</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_Ignore_0</srcid><srcstatus/><internalId>1411</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_Ignore_1</srcid><srcstatus/><internalId>1412</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_Ignore_2</srcid><srcstatus/><internalId>1413</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_Ignore_0</srcid><srcstatus/><internalId>1422</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_Ignore_1</srcid><srcstatus/><internalId>1423</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_Ignore_2</srcid><srcstatus/><internalId>1424</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_Ignore_0</srcid><srcstatus/><internalId>1431</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_Ignore_1</srcid><srcstatus/><internalId>1432</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_Ignore_2</srcid><srcstatus/><internalId>1433</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_Ignore_0</srcid><srcstatus/><internalId>1454</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_Ignore_1</srcid><srcstatus/><internalId>1455</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_OfferService_TTL_0</srcid><srcstatus/><internalId>1505</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00342</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00462</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1009</internalId></specobject>
    <specobject>
      <id>Sd.EB.ClientService.ConsumedMethodRouting</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23922</sourceline>
      <version>1</version>
      <description>
The Sd shall enable the routing for ConsumedMethods when the ClientService enters the AVAILABLE phase using the API
&amp;lt;function&amp;gt;SoAd_EnableRouting()&amp;lt;/function&amp;gt; with the RoutingGroupId of &amp;lt;code&amp;gt;SdConsumedMethods/SdClientServiceActivationRef&amp;lt;/code&amp;gt;.
The Sd shall disable the routing when the ClientService exits the AVAILABLE phase using the API &amp;lt;function&amp;gt;SoAd_DisableRouting()&amp;lt;/function&amp;gt;.
        </description>
      <rationale>The Sd shall call SoAd_EnableRouting() because the related RoutingGroup references SoAdSockeConnections
          in the current importer implementation.
          This needs to be changed when the RoutingGroup references a SoAdSocketConnectionGroup.
        </rationale>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_0</srcid><srcstatus/><internalId>1407</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_1</srcid><srcstatus/><internalId>1408</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_AVAILABLE_0</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_0</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_SoConModeOnline_1</srcid><srcstatus/><internalId>1437</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_MAIN_0</srcid><srcstatus/><internalId>1439</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_INITIALWAIT_0</srcid><srcstatus/><internalId>1441</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_0</srcid><srcstatus/><internalId>1443</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_1</srcid><srcstatus/><internalId>1444</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_2</srcid><srcstatus/><internalId>1445</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_3</srcid><srcstatus/><internalId>1446</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_4</srcid><srcstatus/><internalId>1447</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_No_RemoteSoCon</srcid><srcstatus/><internalId>1506</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00362</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1010</internalId></specobject>
    <specobject>
      <id>Sd.EB.ClientService.SubscribeEventgroup.DelayedTransmission</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23947</sourceline>
      <version>1</version>
      <description>
The Sd shall delay the transmission of SubScribeEventgroup entries until the Client Service is in ComPhase AVAILABLE.
If the SdClientTimerRequestResponseDelay expires before the service is AVAILABLE, the SubscribeEventgroup
shall be sent as soon as the service is available but shall not be considered as reaction to a multicast-Offer according to SWS_SD_00376.
If the SdClientTimerRequestResponseDelay expires while the ClientService or the ConsumedEventgroups are Released,
there shall be no response to the OfferService entry.
        </description>
      <rationale>
          If the Subscribe is sent before the SoCon is ONLINE, Initial Events would be lost.
          SubscribeEventgroup entries shall be sent after the expiration of the ResponseDelay ensure fast service availability.
          Do not condsider the SubscribeEventgroup entries as response to a Multicast-Offer since the entries are probably
          transmitted just before the receiption of the following Multicast-Offer (Ack will not be received in time).
        </rationale>
      <comment>Refer to https://www.autosar.org/bugzilla/show_bug.cgi?id=73062</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3039</srcid><srcstatus/><internalId>789</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1011</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ConsumedEventgroup.Ignore</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23985</sourceline>
      <version>1</version>
      <description>
          Ignore events not specified in &amp;lt;xref linkend="Fig_ConsumedEventgroupStates" xrefstyle="select: label"/&amp;gt;.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_Ignore_0</srcid><srcstatus/><internalId>1465</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_Ignore_1</srcid><srcstatus/><internalId>1466</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_Ignore_0</srcid><srcstatus/><internalId>1470</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_Ignore_1</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_TTL_0</srcid><srcstatus/><internalId>1501</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1012</internalId></specobject>
    <specobject>
      <id>Sd.Design.ConsumedEventgroup.DOWN_MAIN</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>23995</sourceline>
      <version>1</version>
      <description>
          See &amp;lt;xref linkend="Fig_ConsumedEventgroupStates" xrefstyle="select: label"/&amp;gt; transition DOWN to MAIN.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_2</srcid><srcstatus/><internalId>1409</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_AVAILABLE_2</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_1</srcid><srcstatus/><internalId>1426</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_2</srcid><srcstatus/><internalId>1427</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_0</srcid><srcstatus/><internalId>1462</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_1</srcid><srcstatus/><internalId>1463</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_2</srcid><srcstatus/><internalId>1464</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00703</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00702</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1013</internalId></specobject>
    <specobject>
      <id>Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24009</sourceline>
      <version>1</version>
      <description>
          See &amp;lt;xref linkend="Fig_ConsumedEventgroupStates" xrefstyle="select: label"/&amp;gt; transition MAIN to AVAILABLE.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_AVAILABLE_0</srcid><srcstatus/><internalId>1467</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_AVAILABLE_1</srcid><srcstatus/><internalId>1468</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_TTL_0</srcid><srcstatus/><internalId>1501</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_TTL_1</srcid><srcstatus/><internalId>1502</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_AVAILABLE_TWO_EVENTGROUPS_TWO_SERVERS</srcid><srcstatus/><internalId>1507</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00377</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00704</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1014</internalId></specobject>
    <specobject>
      <id>Sd.Design.ConsumedEventgroup.MAIN_DOWN</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24023</sourceline>
      <version>1</version>
      <description>
          See &amp;lt;xref linkend="Fig_ConsumedEventgroupStates" xrefstyle="select: label"/&amp;gt; transition MAIN to DOWN.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_MAIN_1</srcid><srcstatus/><internalId>1440</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_INITIALWAIT_1</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_5</srcid><srcstatus/><internalId>1448</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_6</srcid><srcstatus/><internalId>1449</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_7</srcid><srcstatus/><internalId>1450</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_8</srcid><srcstatus/><internalId>1451</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_9</srcid><srcstatus/><internalId>1452</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_DOWN</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_CEvg_Unicast</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1015</internalId></specobject>
    <specobject>
      <id>Sd.Design.ConsumedEventgroup.AVAILABLE_MAIN</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24033</sourceline>
      <version>1</version>
      <description>
          See &amp;lt;xref linkend="Fig_ConsumedEventgroupStates" xrefstyle="select: label"/&amp;gt; transition AVAILABLE to MAIN.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_self_AVAILABLE_MAIN_0</srcid><srcstatus/><internalId>1469</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_TTL_0</srcid><srcstatus/><internalId>1501</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00601</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>422</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1016</internalId></specobject>
    <specobject>
      <id>Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24047</sourceline>
      <version>1</version>
      <description>
          See &amp;lt;xref linkend="Fig_ConsumedEventgroupStates" xrefstyle="select: label"/&amp;gt; transition AVAILABLE to DOWN.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_10</srcid><srcstatus/><internalId>1453</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_AVAILABLE_DOWN_0</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_AVAILABLE_DOWN_1</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_resetRemoteConnection_0</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00381</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1017</internalId></specobject>
    <specobject>
      <id>Sd.Design.ConsumedEventgroup.self_AVAILABLE</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24060</sourceline>
      <version>1</version>
      <description>
          See &amp;lt;xref linkend="Fig_ConsumedEventgroupStates" xrefstyle="select: label"/&amp;gt; selftransition AVAILABLE.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_self_AVAILABLE_MAIN_0</srcid><srcstatus/><internalId>1469</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1018</internalId></specobject>
    <specobject>
      <id>Sd.EB.ConsumedEventgroup.RoutingUDP</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24070</sourceline>
      <version>1</version>
      <description>
The Sd shall enable the routing of a UDP ConsumedEventgroup if the ClientService
is in AVAILABLE phase and the eventgroup is requested.
The Sd shall disable the routing of a UDP ConsumedEventgroup if one of the above
conditions is not fullfilled anymore.
The Sd shall enable and disable the routing of UDP ConsumedEventgroups using the API
&amp;lt;function&amp;gt;SoAd_EnableRouting()&amp;lt;/function&amp;gt; and &amp;lt;function&amp;gt;SoAd_DisableRouting()&amp;lt;/function&amp;gt;
with the RoutingGroupId of &amp;lt;code&amp;gt;SdConsumedEventGroupUDPActivationRef&amp;lt;/code&amp;gt;.
        </description>
      <rationale>The API function SoAd_EnableRouting() must be used because the corresponding routing
          references a SoAdSocketConnection.
        </rationale>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_2</srcid><srcstatus/><internalId>1409</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_AVAILABLE_2</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_1</srcid><srcstatus/><internalId>1426</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_2</srcid><srcstatus/><internalId>1427</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_MAIN_1</srcid><srcstatus/><internalId>1440</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_INITIALWAIT_1</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_5</srcid><srcstatus/><internalId>1448</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_6</srcid><srcstatus/><internalId>1449</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_7</srcid><srcstatus/><internalId>1450</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_8</srcid><srcstatus/><internalId>1451</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_9</srcid><srcstatus/><internalId>1452</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_10</srcid><srcstatus/><internalId>1453</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_0</srcid><srcstatus/><internalId>1462</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_1</srcid><srcstatus/><internalId>1463</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_2</srcid><srcstatus/><internalId>1464</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_DOWN</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_AVAILABLE_DOWN_0</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_AVAILABLE_DOWN_CEvg_Unicast</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_resetRemoteConnection_0</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00703</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00711</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>500</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1019</internalId></specobject>
    <specobject>
      <id>Sd.EB.ConsumedEventgroup.RoutingTCP</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24099</sourceline>
      <version>1</version>
      <description>
The Sd shall enable the routing of a TCP ConsumedEventgroup if the ClientService
is in AVAILABLE phase and the eventgroup is requested.
The Sd shall disable the routing of a TCP ConsumedEventgroup if one of the above
conditions is not fullfilled anymore.
The Sd shall enable and disable the routing of TCP ConsumedEventgroups using the API
&amp;lt;function&amp;gt;SoAd_EnableRouting()&amp;lt;/function&amp;gt; and &amp;lt;function&amp;gt;SoAd_DisableRouting()&amp;lt;/function&amp;gt;
with the RoutingGroupId of &amp;lt;code&amp;gt;SdConsumedEventGroupTCPActivationRef&amp;lt;/code&amp;gt;.
        </description>
      <rationale>The API function SoAd_EnableRouting() must be used because the corresponding routing
          references a SoAdSocketConnection.
        </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_TCP_INITIALWAIT_AVAILABLE</srcid><srcstatus/><internalId>1405</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00702</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00711</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>500</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1020</internalId></specobject>
    <specobject>
      <id>Sd.EB.ConsumedEventgroup.RoutingMulticast</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24125</sourceline>
      <version>1</version>
      <description>
The Sd shall enable the routing of a Multicast ConsumedEventgroup when a
SubscribeEventgroupAck entry with a Multicast Endpoint is received the first time.
The Sd shall disable the routing of a Multicast ConsumedEventgroup when the TTL expires,
the ServerService is not AVAILABE anymore, or the Eventgroup is released.
The Sd shall enable and disable the routing of Multicast ConsumedEventgroups using the API
&amp;lt;function&amp;gt;SoAd_EnableRouting()&amp;lt;/function&amp;gt; and &amp;lt;function&amp;gt;SoAd_DisableRouting()&amp;lt;/function&amp;gt;
with the RoutingGroupId of &amp;lt;code&amp;gt;SdConsumedEventGroupMulticastActivationRef&amp;lt;/code&amp;gt;.
        </description>
      <rationale>The API function SoAd_EnableRouting() must be used because the corresponding
          routing references a SoAdSocketConnection.
        </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_AVAILABLE_0</srcid><srcstatus/><internalId>1467</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_AVAILABLE_1</srcid><srcstatus/><internalId>1468</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_TTL_1</srcid><srcstatus/><internalId>1502</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_resetRemoteConnection_0</srcid><srcstatus/><internalId>1503</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_AVAILABLE_TWO_EVENTGROUPS_TWO_SERVERS</srcid><srcstatus/><internalId>1507</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00704</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00711</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>500</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1021</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.SetState.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24175</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_ClientServiceSetState()&amp;lt;/function&amp;gt; sets the EventFlag START if the
          state of the ClientService changes from RELEASED to REQUESTED and the IP-Addresses of the
          SdInstance are assigned.
          The EventFlag STOP or HALT shall remain unchanged.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_DOWN_INITIALWAIT_1</srcid><srcstatus/><internalId>1384</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientServiceSetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>926</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1022</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.SetState.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24192</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_ClientServiceSetState()&amp;lt;/function&amp;gt; sets the EventFlag STOP and clears the
          flag START if the state of the ClientService changes from REQUESTED to RELEASED and the service is running.
          The EventFlag HALT shall remain unchanged.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_DOWN_0</srcid><srcstatus/><internalId>1399</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_DOWN_0</srcid><srcstatus/><internalId>1419</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_DOWN_0</srcid><srcstatus/><internalId>1428</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientServiceSetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>926</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1023</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.ConsumedEventGroupSetState.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24213</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_ConsumedEventGroupSetState()&amp;lt;/function&amp;gt; shall start the ConsumedEventgroup statemachine
          when the ConsumedEventgroup is requested.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_2</srcid><srcstatus/><internalId>1409</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_AVAILABLE_2</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_1</srcid><srcstatus/><internalId>1426</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_2</srcid><srcstatus/><internalId>1427</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_0</srcid><srcstatus/><internalId>1462</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_2</srcid><srcstatus/><internalId>1464</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_1</srcid><srcstatus/><internalId>1494</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1495</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ConsumedEventGroupSetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>927</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1024</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.ConsumedEventGroupSetState.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24228</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_ConsumedEventGroupSetState()&amp;lt;/function&amp;gt; shall stop the ConsumedEventgroup statemachine
          when the ConsumedEventgroup is released.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_MAIN_DOWN</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_AVAILABLE_DOWN_0</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_AVAILABLE_DOWN_1</srcid><srcstatus/><internalId>1474</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ConsumedEventGroupSetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>927</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1025</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.eventOffer.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24247</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall ignore Offer entries where
          the ServiceID, InstanceID or MajorVersion is set to Wildcard.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_0</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_2</srcid><srcstatus/><internalId>1478</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00487</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>392</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00295</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>931</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1026</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventOffer.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24263</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall search a ClientService
          that exactly matches the &amp;lt;parameter&amp;gt;SdClientServiceServiceId&amp;lt;/parameter&amp;gt;,
          &amp;lt;parameter&amp;gt;SdClientServiceInstanceId&amp;lt;/parameter&amp;gt; and &amp;lt;parameter&amp;gt;SdClientServiceMajorVersion&amp;lt;/parameter&amp;gt;.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_1</srcid><srcstatus/><internalId>1477</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_3</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_4</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_5</srcid><srcstatus/><internalId>1481</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_6</srcid><srcstatus/><internalId>1482</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_7</srcid><srcstatus/><internalId>1483</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_8</srcid><srcstatus/><internalId>1484</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_9</srcid><srcstatus/><internalId>1485</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_10</srcid><srcstatus/><internalId>1486</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_11</srcid><srcstatus/><internalId>1487</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00487</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>392</internalId></provcov>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>931</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1027</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventOffer.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24279</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall not check the MinorVersion
          if SdClientServiceMinorVersion is set to Wildcard (0xFFFF FFFF).
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_1</srcid><srcstatus/><internalId>1477</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_3</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_4</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_5</srcid><srcstatus/><internalId>1481</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_6</srcid><srcstatus/><internalId>1482</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_7</srcid><srcstatus/><internalId>1483</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_9</srcid><srcstatus/><internalId>1485</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_11</srcid><srcstatus/><internalId>1487</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00488</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>393</internalId></provcov>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>931</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1028</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventOffer.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24294</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall check the MinorVersion
          if SdClientServiceMinorVersion is set to any value except Wildcard (0xFFFF FFFF).
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_1</srcid><srcstatus/><internalId>1477</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_3</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_8</srcid><srcstatus/><internalId>1484</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_10</srcid><srcstatus/><internalId>1486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00489</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>394</internalId></provcov>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>931</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1029</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventOffer.005</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24309</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall ignore OfferService entries referencing
          errorneous options.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_01</srcid><srcstatus/><internalId>1343</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_Malformed_MSg_02</srcid><srcstatus/><internalId>1344</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>931</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1030</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventOffer.006</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24323</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall process valid OfferService entries.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_0</srcid><srcstatus/><internalId>1407</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_REPETITION_AVAILABLE_0</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_MAIN_AVAILABLE_0</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventOfferService_12</srcid><srcstatus/><internalId>1488</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_OfferService_TTL_0</srcid><srcstatus/><internalId>1505</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_No_RemoteSoCon</srcid><srcstatus/><internalId>1506</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>931</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1031</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventOffer.007</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24336</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall not start the ResponseTimer if no ConsumedEventgroups are configured for this Client Service.
        </description>
      <comment>It is not possible to verify that the timer is not started and will never expire using a testcase.
          Verification is achieved using source code tracing.</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_3504</srcid><srcstatus/><internalId>795</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>931</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1032</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.eventSubscribeEventgroupAck.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24356</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall ignore SubscribeEventgroupAck entries where
          the ServiceID, InstanceID, MajorVersion or EventgroupID is set to Wildcard.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1493</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_3</srcid><srcstatus/><internalId>1496</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00490</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>395</internalId></provcov>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventSubscribeAck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>932</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1033</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventSubscribeEventgroupAck.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24371</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall ignore SubscribeEventgroupAck entries referencing
          errorneous options.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_6</srcid><srcstatus/><internalId>1499</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventSubscribeAck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>932</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1034</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventSubscribeEventgroupAck.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24385</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall ignore the SubscribeEventgroupAck entry if
          it references a multicast endpoint option and
          SdConsumedEventGroupMulticastActivationRef is not configured.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_CEvg_DOWN_Ignore_0</srcid><srcstatus/><internalId>1465</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_1</srcid><srcstatus/><internalId>1494</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventSubscribeAck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>932</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1035</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventSubscribeEventgroupAck.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24400</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall ignore the SubscribeEventgroupAck entry if
          it references no multicast endpoint option and
          SdConsumedEventGroupUdpActivationRef is not configured.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1495</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventSubscribeAck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>932</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1036</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventSubscribeEventgroupAck.005</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24415</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall accept the SubscribeEventgroupAck entry if
          it references no multicast endpoint option and SdConsumedEventGroupUdpActivationRef is configured.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_7</srcid><srcstatus/><internalId>1500</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventSubscribeAck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>932</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1037</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventSubscribeEventgroupAck.006</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24429</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall accept the SubscribeEventgroupAck entry if
          it references multicast endpoint option and SdConsumedEventGroupUdpActivationRef is not configured.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_5</srcid><srcstatus/><internalId>1498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventSubscribeAck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>932</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1038</internalId></specobject>
    <specobject>
      <id>Sd.Design.ClientService.eventSubscribeEventgroupAck.008</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24443</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall accept the SubscribeEventgroupAck entry if
          it references a multicast endpoint option and only SdConsumedEventGroupMulticastActivationRef is configured.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_1</srcid><srcstatus/><internalId>1494</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_eventSubscribeAck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>932</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1039</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ClientService.ResetRemoteConnection.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24462</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ClientService&amp;lt;/package&amp;gt; unit shall handle the detected reboot as
          if a StopOfferService entry was received.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Client_resetRemoteConnection_0</srcid><srcstatus/><internalId>1503</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Client_resetRemoteConnection_1</srcid><srcstatus/><internalId>1504</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00448</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_resetRemoteConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>935</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1040</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.ServerService.API.Sd_SetServerServiceState</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24555</sourceline>
      <version>1</version>
      <description>See &amp;lt;xref linkend="API_Sd_ServerServiceSetState"/&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.SetState.001</srcid><srcstatus/><internalId>1088</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SetState.002</srcid><srcstatus/><internalId>1089</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1041</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.ServerService.API.Sd_ServerService_init</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24573</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_279</srcid><srcstatus/><internalId>845</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1042</internalId></specobject>
    <specobject>
      <id>Sd.ServerService.API.Sd_ServerService_mainFunction</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24647</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.MainFunction.001</srcid><srcstatus/><internalId>1113</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1043</internalId></specobject>
    <specobject>
      <id>Sd.ClientService.API.Sd_ServerService_sendEntriesUnicast</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24772</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_546</srcid><srcstatus/><internalId>847</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1044</internalId></specobject>
    <specobject>
      <id>Sd.ServerService.API.Sd_ServerService_startServices</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24897</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Down.Ev.005</srcid><srcstatus/><internalId>1057</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Down.Ev.006</srcid><srcstatus/><internalId>1058</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Down.Ev.007</srcid><srcstatus/><internalId>1059</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1045</internalId></specobject>
    <specobject>
      <id>Sd.ServerService.API.Sd_ServerService_haltServices</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>24997</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.InitialWait.Ev.002</srcid><srcstatus/><internalId>1063</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.InitialWait.Ev.003</srcid><srcstatus/><internalId>1064</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Repetition.Ev.002</srcid><srcstatus/><internalId>1070</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Repetition.Ev.008</srcid><srcstatus/><internalId>1071</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Main.Ev.002</srcid><srcstatus/><internalId>1078</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Main.Ev.003</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1046</internalId></specobject>
    <specobject>
      <id>Sd.ServerService.API.Sd_ServerService_eventFind</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25097</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.Find.001</srcid><srcstatus/><internalId>1092</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Find.004</srcid><srcstatus/><internalId>1093</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Find.002</srcid><srcstatus/><internalId>1094</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.Find.003</srcid><srcstatus/><internalId>1095</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1047</internalId></specobject>
    <specobject>
      <id>Sd.ServerService.API.Sd_ServerService_eventSubscribe</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25239</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.001</srcid><srcstatus/><internalId>1096</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.013</srcid><srcstatus/><internalId>1097</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.005</srcid><srcstatus/><internalId>1098</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.006</srcid><srcstatus/><internalId>1099</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.012</srcid><srcstatus/><internalId>1100</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.007</srcid><srcstatus/><internalId>1101</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.010</srcid><srcstatus/><internalId>1102</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.008</srcid><srcstatus/><internalId>1104</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.009</srcid><srcstatus/><internalId>1105</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1048</internalId></specobject>
    <specobject>
      <id>Sd.ServerService.API.Sd_ServerService_eventStopSubscribe</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25409</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.StopSubscribeEventgroup.001</srcid><srcstatus/><internalId>1106</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.StopSubscribeEventgroup.004</srcid><srcstatus/><internalId>1107</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.StopSubscribeEventgroup.002</srcid><srcstatus/><internalId>1108</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.StopSubscribeEventgroup.003</srcid><srcstatus/><internalId>1109</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.StopSubscribeEventgroup.005</srcid><srcstatus/><internalId>1110</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1049</internalId></specobject>
    <specobject>
      <id>Sd.ServerService.API.Sd_ServerService_resetRemoteConnection</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25565</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.ResetRemoteConnection.001</srcid><srcstatus/><internalId>1111</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.ServerService.ResetRemoteConnection.002</srcid><srcstatus/><internalId>1112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00448</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1050</internalId></specobject>
    <specobject>
      <id>Sd.ServerService.API.Sd_ServerService_getComphase</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25668</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_267</srcid><srcstatus/><internalId>844</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1051</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.Down.Ev.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25829</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.001&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service available&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;IP not assigned&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_1</srcid><srcstatus/><internalId>1526</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_4</srcid><srcstatus/><internalId>1529</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_1</srcid><srcstatus/><internalId>1543</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_Ignore_1</srcid><srcstatus/><internalId>1545</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_Ignore_3</srcid><srcstatus/><internalId>1547</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1052</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Down.Ev.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25830</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.002&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service available&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;InitialWait&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;IP Assigned&amp;lt;?lb?&amp;gt;InitialOfferDelay &amp;amp;gt; 0&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_1</srcid><srcstatus/><internalId>1526</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_4</srcid><srcstatus/><internalId>1529</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_5</srcid><srcstatus/><internalId>1530</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_6</srcid><srcstatus/><internalId>1531</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.SWS_SD_00317</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>644</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1053</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Down.Ev.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25835</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.003&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service available&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Repetition&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;IP Assigned&amp;lt;?lb?&amp;gt;InitialOfferDelay = 0&amp;lt;?lb?&amp;gt;InitialOfferRepetitionsMax &amp;amp;gt; 0&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_REPETITION_1</srcid><srcstatus/><internalId>1560</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1054</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Down.Ev.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25836</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.004&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service available&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Main&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;IP Assigned&amp;lt;?lb?&amp;gt;InitialOfferDelay = 0&amp;lt;?lb?&amp;gt;InitialOfferRepetitionsMax = 0&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_2</srcid><srcstatus/><internalId>1544</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP_receive_UDP</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1055</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Down.Ev.010</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25837</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.010&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;IP address assigned&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Main&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service available&amp;lt;?lb?&amp;gt;InitialOfferDelay = 0&amp;lt;?lb?&amp;gt;InitialOfferRepetitionsMax = 0&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_1</srcid><srcstatus/><internalId>1543</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1056</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Down.Ev.005</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25838</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.005&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;IP address assigned&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service down&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_2</srcid><srcstatus/><internalId>1527</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_2</srcid><srcstatus/><internalId>1544</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_Ignore_2</srcid><srcstatus/><internalId>1546</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_Ignore_3</srcid><srcstatus/><internalId>1547</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_REPETITION_1</srcid><srcstatus/><internalId>1560</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_startServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1045</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1057</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Down.Ev.006</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25841</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.006&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;IP address assigned&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;InitialWait&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service available&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_2</srcid><srcstatus/><internalId>1527</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_startServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1045</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.SWS_SD_00317</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>644</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1058</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Down.Ev.007</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25847</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.007&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;IP address assigned&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;InitialWait&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service auto-available&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_3</srcid><srcstatus/><internalId>1528</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_startServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1045</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.SWS_SD_00317</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>644</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1059</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Down.Ev.008</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25853</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.008&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Find received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_Ignore_evFind</srcid><srcstatus/><internalId>1532</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1060</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Down.Ev.009</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25854</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Down.Ev.009&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;SubscribeEventgroup received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_Ignore_evSubs</srcid><srcstatus/><internalId>1533</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1061</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.InitialWait.Ev.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25883</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.001&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_DOWN_1</srcid><srcstatus/><internalId>1538</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_DOWN_4</srcid><srcstatus/><internalId>1541</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_DOWN_5</srcid><srcstatus/><internalId>1542</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00323</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1062</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.InitialWait.Ev.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25888</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.002&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;TX IP address unassigned&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_DOWN_2</srcid><srcstatus/><internalId>1539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_haltServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1046</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1063</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.InitialWait.Ev.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25894</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.003&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MC RX IP address unassigned&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_DOWN_3</srcid><srcstatus/><internalId>1540</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_haltServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1046</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1064</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.InitialWait.Ev.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25900</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.004&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Timeout&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Repetition&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;InitialOfferRepetitionsMax &amp;amp;gt; 0&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_REPETITION_1</srcid><srcstatus/><internalId>1557</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00321</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00434</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>341</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1065</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.InitialWait.Ev.005</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25906</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.005&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Timeout&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Main&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;InitialOfferRepetitionsMax = 0&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_MAIN_1</srcid><srcstatus/><internalId>1556</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00321</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00435</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>342</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1066</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.InitialWait.Ev.006</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25912</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.006&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Find received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;InitialWait&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_Ignore_evFind</srcid><srcstatus/><internalId>1535</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00319</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1067</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.InitialWait.Ev.007</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25917</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;InitialWait.Ev.007&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;SubscribeEventgroup received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;InitialWait&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_Ignore_evSubs</srcid><srcstatus/><internalId>1536</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00320</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1068</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.Repetition.Ev.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25950</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.001&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_DOWN_1</srcid><srcstatus/><internalId>1561</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_DOWN_4</srcid><srcstatus/><internalId>1564</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00338</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1069</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Repetition.Ev.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25955</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.002&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;TX IP address unassigned&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_DOWN_2</srcid><srcstatus/><internalId>1562</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_haltServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1046</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1070</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Repetition.Ev.008</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25960</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.008&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MC RX IP address unassigned&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_DOWN_3</srcid><srcstatus/><internalId>1563</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_haltServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1046</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1071</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Repetition.Ev.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25965</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.003&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Timeout&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Repetition&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;InitialOfferRepetitionsMax not reached&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_self_REPETITION_1</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00329</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00331</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1072</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Repetition.Ev.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25972</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.004&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Timeout&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Main&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;InitialOfferRepetitionsMax reached&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_MAIN_1</srcid><srcstatus/><internalId>1566</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00331</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00336</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1073</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Repetition.Ev.005</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25979</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.005&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Find received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Repetition&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_eventFind</srcid><srcstatus/><internalId>1570</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_Multiple_eventFind</srcid><srcstatus/><internalId>1571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00494</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>399</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1074</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Repetition.Ev.006</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25983</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.006&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;SubscribeEventgroup received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Repetition&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_1</srcid><srcstatus/><internalId>1572</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_2</srcid><srcstatus/><internalId>1573</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_5</srcid><srcstatus/><internalId>1574</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1075</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Repetition.Ev.007</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>25984</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Repetition.Ev.007&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;StopSubscribeEventgroup received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Repetition&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventStopSubscribe</srcid><srcstatus/><internalId>1582</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1076</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.Main.Ev.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26013</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.001&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Service down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_MAIN_DOWN_1</srcid><srcstatus/><internalId>1552</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_MAIN_DOWN_4</srcid><srcstatus/><internalId>1555</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP_receive_UDP</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00348</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>275</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1077</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Main.Ev.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26018</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.002&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;TX IP address unassigned&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_MAIN_DOWN_2</srcid><srcstatus/><internalId>1553</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_haltServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1046</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00347</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1078</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Main.Ev.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26024</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.003&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;MC RX IP address unassigned&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Down&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_MAIN_DOWN_3</srcid><srcstatus/><internalId>1554</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_haltServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1046</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00347</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1079</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Main.Ev.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26030</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.004&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Timeout&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Main&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_self_MAIN_1</srcid><srcstatus/><internalId>1548</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP_receive_UDP</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00449</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>354</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00450</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>355</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1080</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Main.Ev.005</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26036</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.005&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Find received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Main&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Tcp</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Subscribe_Nack</srcid><srcstatus/><internalId>1320</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Subscribe_Unknown</srcid><srcstatus/><internalId>1321</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_eventFind_1</srcid><srcstatus/><internalId>1569</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_Multiple_eventFind</srcid><srcstatus/><internalId>1571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00343</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00494</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>399</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1081</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Main.Ev.006</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26043</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.006&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;SubscribeEventgroup received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Main&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_1</srcid><srcstatus/><internalId>1575</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_2</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_3</srcid><srcstatus/><internalId>1577</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_multipleMulticastSubscribers</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventMulticastSubscribe_infiniteTTL</srcid><srcstatus/><internalId>1580</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_infiniteTTL</srcid><srcstatus/><internalId>1581</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00344</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1082</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Main.Ev.007</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26048</sourceline>
      <version>1</version>
      <description>&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;Main.Ev.007&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;StopSubscribeEventgroup received&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;Main&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventStopSubscribe_1</srcid><srcstatus/><internalId>1583</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00345</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1083</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.Ignore</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26059</sourceline>
      <version>1</version>
      <description>
Ignore events not specified in &amp;lt;xref linkend="Fig_ServerServiceComPhases" xrefstyle="select: label"/&amp;gt;.
                </description>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_Ignore_evStopSub</srcid><srcstatus/><internalId>1534</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_Ignore_evStopSubs</srcid><srcstatus/><internalId>1537</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_Ignore_1</srcid><srcstatus/><internalId>1545</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_Ignore_3</srcid><srcstatus/><internalId>1547</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_self_MAIN_2</srcid><srcstatus/><internalId>1549</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_MAIN_Ignore_1</srcid><srcstatus/><internalId>1550</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_MAIN_Ignore_2</srcid><srcstatus/><internalId>1551</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_Ignore_1</srcid><srcstatus/><internalId>1558</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_Ignore_2</srcid><srcstatus/><internalId>1559</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_Ignore_1</srcid><srcstatus/><internalId>1567</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_Ignore_2</srcid><srcstatus/><internalId>1568</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventStopSubscribe_2</srcid><srcstatus/><internalId>1584</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00319</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00320</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1084</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.ProvidedMethodRouting</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26074</sourceline>
      <version>1</version>
      <description>
The Sd shall enable the routing of ProvidedMethods when the ServerService exits the DOWN phase using the API &amp;lt;function&amp;gt;SoAd_EnableRouting()&amp;lt;/function&amp;gt; 
with the RoutingGroupId of &amp;lt;code&amp;gt;SdProvidedMethods/SdServerServiceActivationRef&amp;lt;/code&amp;gt;.
The Sd shall disable the routing of ProvidedMethods when the ServerService enters the DOWN phase using the API &amp;lt;function&amp;gt;SoAd_DisableRouting()&amp;lt;/function&amp;gt;.
            </description>
      <rationale>The API function SoAd_EnableRouting() must be used because the corresponding routing references a SoAdSocketConnection.</rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_4</srcid><srcstatus/><internalId>1529</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00330</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00341</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00349</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1085</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.EventhandlerRoutingMulticast</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26095</sourceline>
      <version>1</version>
      <description>
The Sd shall enable and disable the routing of Multicast Eventhandler using the API &amp;lt;function&amp;gt;SoAd_EnableSpecificRouting()&amp;lt;/function&amp;gt;
and &amp;lt;function&amp;gt;SoAd_DisableSpecifcRouting()&amp;lt;/function&amp;gt; with the RoutingGroupId of &amp;lt;code&amp;gt;SdEventHandlerMulticast/SdEventActivationRef&amp;lt;/code&amp;gt;
and the SoAdSocketId of the multicast SocketConnection for this Eventhandler refererenced in &amp;lt;code&amp;gt;SdEventHandlerMulticast/SdMulticastEventSoConRef&amp;lt;/code&amp;gt;.
            </description>
      <rationale>The SoAdPduRoute in the multicast data path shall reference a SoAdSocketConnectionGroup.
          This allows to reuse the same SoAdPDURoute for unicast and multicast data path.</rationale>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_DOWN_5</srcid><srcstatus/><internalId>1542</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_MAIN_DOWN_4</srcid><srcstatus/><internalId>1555</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_DOWN_4</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_1</srcid><srcstatus/><internalId>1572</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_5</srcid><srcstatus/><internalId>1574</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_1</srcid><srcstatus/><internalId>1575</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_multipleMulticastSubscribers</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventMulticastSubscribe_infiniteTTL</srcid><srcstatus/><internalId>1580</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_infiniteTTL</srcid><srcstatus/><internalId>1581</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventStopSubscribe</srcid><srcstatus/><internalId>1582</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventStopSubscribe_1</srcid><srcstatus/><internalId>1583</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_DOWN_halt</srcid><srcstatus/><internalId>1587</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_SUBSCRIBE_RUN_OUT</srcid><srcstatus/><internalId>1588</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_DOWN_halt</srcid><srcstatus/><internalId>1589</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00455</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1086</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.EventhandlerRoutingUDP</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26118</sourceline>
      <version>1</version>
      <description>
The Sd shall enable and disable the routing of UDP Eventhandler using the API &amp;lt;function&amp;gt;SoAd_EnableSpecificRouting()&amp;lt;/function&amp;gt;
and &amp;lt;function&amp;gt;SoAd_DisableSpecifcRouting()&amp;lt;/function&amp;gt; with the RoutingGroupId of &amp;lt;code&amp;gt;SdEventHandlerUdp/SdEventActivationRef&amp;lt;/code&amp;gt;
and the SoAdSocketId of the SocketConnection for this Client from the SoAdSocketConnectionGroup referenced in &amp;lt;code&amp;gt;SdServerServiceUdpRef&amp;lt;/code&amp;gt;.
            </description>
      <rationale>The API function SoAd_EnableSpecificRouting() must be used because the corresponding routing references a SoAdSocketConnectionGroup.</rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_2</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_3</srcid><srcstatus/><internalId>1577</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1087</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.SetState.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26170</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_ServerServiceSetState()&amp;lt;/function&amp;gt; sets the EventFlag START if the
          state of the ServerService changes from DOWN to AVAILABLE and the IP-Addresses of the
          SdInstance are assigned.
          The EventFlag STOP or HALT shall remain unchanged.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_2</srcid><srcstatus/><internalId>1544</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_REPETITION_1</srcid><srcstatus/><internalId>1560</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP_receive_UDP</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_SetServerServiceState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1041</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1088</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.SetState.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26187</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_ServerServiceSetState()&amp;lt;/function&amp;gt; sets the EventFlag STOP and clears the
          flag START if the state of the ServerService changes from AVAILABLE to DOWN and the service is running.
          The EventFlag HALT shall remain unchanged.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_DOWN_stop</srcid><srcstatus/><internalId>1585</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_DOWN_stop</srcid><srcstatus/><internalId>1586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_SetServerServiceState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1041</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1089</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.StartServices</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26208</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_ServerService_startServices()&amp;lt;/function&amp;gt; sets the EventFlag START
          for all ServerServices of the given SdInstance that are AVAILABLE and not running.
          The EventFlag STOP or HALT shall remain unchanged.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_INITIALWAIT_1</srcid><srcstatus/><internalId>1526</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP_receive_UDP</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1090</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.HaltServices.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26225</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_ServerService_haltServices()&amp;lt;/function&amp;gt; sets the EventFlag HALT
          and clears the flag START for all ServerServices of the given SdInstance that are
          AVAILABLE and running.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_DOWN_halt</srcid><srcstatus/><internalId>1587</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_SUBSCRIBE_RUN_OUT</srcid><srcstatus/><internalId>1588</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_DOWN_halt</srcid><srcstatus/><internalId>1589</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1091</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.Find.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26242</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; module shall ignore Find entries if no matching ServerService
          is configured for this SdInstance.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_eventFind_1</srcid><srcstatus/><internalId>1569</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00486</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventFind</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1047</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1092</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Find.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26257</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; module shall ignore Find entries referencing
          errorneous options.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_FIND_Malformed_Invalid_MinorVersion</srcid><srcstatus/><internalId>1334</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventFind</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1047</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1093</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Find.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26271</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; module shall ignore Find entries if the matching ServerService
          is in DOWN or INITIAL_WAIT phase.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_DOWN</srcid><srcstatus/><internalId>1315</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_INITIALWAIT</srcid><srcstatus/><internalId>1316</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_Ignore_evFind</srcid><srcstatus/><internalId>1532</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_Ignore_evFind</srcid><srcstatus/><internalId>1535</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00319</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventFind</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1047</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1094</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.Find.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26286</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; module shall call &amp;lt;function&amp;gt;Sd_Send_queueOfferService&amp;lt;/function&amp;gt; 
          for every matching service that is in REPETITION or MAIN phase after the configured response delay.
          If multiple ServerServices are configured that match the Find entry (i.e. Wildcards in the Find entry),
          the &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; shall send multiple Offer entries.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_REPETITION_eventFind</srcid><srcstatus/><internalId>1570</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_Multiple_eventFind</srcid><srcstatus/><internalId>1571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00332</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00486</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00295</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventFind</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1047</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1095</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.SubscribeEventgroup.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26312</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; module shall ignore SubscribeEventgroup entries where the
          ServiceID, InstanceID, MajorVersion or EventgroupID is set to a Wildcard value.
        </description>
      <comment>Note: Sending a SubscribeEventgroupNack is not possible because the entry would be invalid.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_Subscribe_EG_1</srcid><srcstatus/><internalId>1590</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00476</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00490</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>395</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1048</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1096</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.SubscribeEventgroup.013</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26329</sourceline>
      <version>2</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService()&amp;lt;/package&amp;gt; shall call &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupNackUnknown&amp;lt;/function&amp;gt;
          when the SubscribeEventgroup entry references options where the error flag is set.
        </description>
      <comment>The entry may references a configuration option. Correct match with service can not be ensured.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_Subscribe_EG_2</srcid><srcstatus/><internalId>1591</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1048</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1097</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.SubscribeEventgroup.005</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26345</sourceline>
      <version>2</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService()&amp;lt;/package&amp;gt; shall call &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupNackUnknown&amp;lt;/function&amp;gt;
          when the ServiceID, InstanceID, MajorVersion and configuration option
          does not match to a configured service of this SdInstance.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_Subscribe_EG_2</srcid><srcstatus/><internalId>1591</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1048</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1098</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.SubscribeEventgroup.006</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26362</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; module shall not ignore SubscribeEventgroup entries when the
          configured service is in DOWN or INITIAL_WAIT phase, and it should send a Subscribe Nack.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_DOWN</srcid><srcstatus/><internalId>1315</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_INITIALWAIT</srcid><srcstatus/><internalId>1316</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_Ignore_evSubs</srcid><srcstatus/><internalId>1533</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_Ignore_evSubs</srcid><srcstatus/><internalId>1536</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1048</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1099</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.SubscribeEventgroup.012</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26376</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService()&amp;lt;/package&amp;gt; shall call &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupNack&amp;lt;/function&amp;gt;
          when the SubscribeEventgroup entry references options where the error flag is not set and any other status flag is set.
        </description>
      <comment>Refer to Sd.Design.ServerService.SubscribeEventgroup.013</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_5</srcid><srcstatus/><internalId>1574</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00698</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1048</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1100</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.SubscribeEventgroup.007</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26393</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; module shall call &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupNack&amp;lt;/function&amp;gt;
          when the EventgroupID does not match to a configured EventHandler in the according Service.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_Subscribe_EG_3</srcid><srcstatus/><internalId>1592</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1048</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1101</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.SubscribeEventgroup.010</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26408</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService()&amp;lt;/package&amp;gt; shall call &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupNack&amp;lt;/function&amp;gt;
          when the SubscribeEventgroup entry references a TCP endpoint option.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP_receive_UDP</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1048</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1102</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.SubscribeEventgroup.011</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26423</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService()&amp;lt;/package&amp;gt; shall process received valid SubscribeEventgroup entries
          when the SubscribeEventgroup entry references no UDP endpoint option and no TCP endpoint option
          as entries received from a multicast only client service consumed event group.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_2</srcid><srcstatus/><internalId>1573</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1103</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.SubscribeEventgroup.008</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26439</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; module shall process received valid SubscribeEventgroup entries,
          and call &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupNack&amp;lt;/function&amp;gt; if the necessary resources are not available.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_Subscribe_EG_4</srcid><srcstatus/><internalId>1593</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1048</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1104</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.SubscribeEventgroup.009</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26454</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; module shall process received valid SubscribeEventgroup entries
          if the necessary resources are available.
          &amp;lt;itemizedlist&amp;gt;
            &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Call &amp;lt;function&amp;gt;SoAd_SetUniqueRemoteAddr&amp;lt;/function&amp;gt; to assign the IP address of the endpoint option to a Wildcard SoCon,&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
            &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if this is the first subscribed client of this Eventhandler call &amp;lt;function&amp;gt;BswM_Sd_EventHandlerCurrentState()&amp;lt;/function&amp;gt; with state SD_EVENT_HANDLER_REQUESTED.&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
            &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if this client was not subscribed before call &amp;lt;function&amp;gt;SoAd_EnableSpecificRouting&amp;lt;/function&amp;gt; to enable the Unicast or Multicast routes depending on the number of subscribed clients&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
            &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if this client was not subscribed before and SdEventTriggeringRef is configured call &amp;lt;function&amp;gt;SoAd_IfSpecificRoutingGroupTransmit&amp;lt;/function&amp;gt; with the Unicast-RoutingGroupId and Unicast-SoConId&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
            &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;call &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupAck&amp;lt;/function&amp;gt;.&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
          &amp;lt;/itemizedlist&amp;gt;
          The TTL for the SubscribeEventgroup entry shall be taken from the received SubscribeEventgroup entry.
        </description>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_REPETITION</srcid><srcstatus/><internalId>1317</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Tcp</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Subscribe_Nack</srcid><srcstatus/><internalId>1320</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Subscribe_Unknown</srcid><srcstatus/><internalId>1321</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_1</srcid><srcstatus/><internalId>1572</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_5</srcid><srcstatus/><internalId>1574</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_1</srcid><srcstatus/><internalId>1575</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_2</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_3</srcid><srcstatus/><internalId>1577</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_multipleMulticastSubscribers</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_multipleSubscribers</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventMulticastSubscribe_infiniteTTL</srcid><srcstatus/><internalId>1580</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_infiniteTTL</srcid><srcstatus/><internalId>1581</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00315</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00428</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>336</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1048</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1105</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.StopSubscribeEventgroup.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26487</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall ignore StopSubscribeEventgroup entries where the
          ServiceID, InstanceID, MajorVersion or EventgroupID is set to a Wildcard value.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_StopSubscribe_EG_1</srcid><srcstatus/><internalId>1594</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00490</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>395</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventStopSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1049</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1106</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.StopSubscribeEventgroup.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26502</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; module shall ignore StopSubscribeEventgroup entries referencing
          options where the error flag is set.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_Dem_STOP_OFFER</srcid><srcstatus/><internalId>1346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventStopSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1049</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1107</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.StopSubscribeEventgroup.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26516</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall process received valid StopSubscribeEventgroup entries,
          and remove the client from the fan-out if the Eventgroup is subscribed by the client.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_multipleSubscribers</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_eventStopSubscribe</srcid><srcstatus/><internalId>1582</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventStopSubscribe_1</srcid><srcstatus/><internalId>1583</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventStopSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1049</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1108</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.StopSubscribeEventgroup.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26530</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall ignore received valid StopSubscribeEventgroup entries,
          if the Eventgroup is not subscribed by the client.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_StopSubscribe_EG_2</srcid><srcstatus/><internalId>1595</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventStopSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1049</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1109</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.StopSubscribeEventgroup.005</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26544</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService()&amp;lt;/package&amp;gt; shall process received valid StopSubscribeEventgroup entries
          when the StopSubscribeEventgroup entry references no UDP endpoint option and no TCP endpoint option
          as StopSubscribeEventgroup entries received from a multicast only client service consumed event group.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_eventStopSubscribe_2</srcid><srcstatus/><internalId>1584</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_eventStopSubscribe</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1049</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1110</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.ResetRemoteConnection.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26565</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; unit shall handle the detected reboot as
          if a StopSubscribeEventgroup entry was received.
        </description>
      <verifycrit>
          &lt;ul&gt;
            &lt;li&gt;Verify that detected reboot unsubscribes the events of the remote node.&lt;/li&gt;
            &lt;li&gt;Verify that the algorithm can handle high amount of configured subscribe events.&lt;/li&gt;
          &lt;/ul&gt;
        </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_ResetRemoteConnection_UDP</srcid><srcstatus/><internalId>1596</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_ResetRemoteConnection_ManyEventHandlers</srcid><srcstatus/><internalId>1597</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00448</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_resetRemoteConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1050</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1111</internalId></specobject>
    <specobject>
      <id>Sd.Design.ServerService.ResetRemoteConnection.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26589</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;ServerService&amp;lt;/package&amp;gt; unit shall cancel the transmission of OfferService entries
          that would be sent as response to a mulicast Find entry.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_ResetRemoteConnection_TCP</srcid><srcstatus/><internalId>1600</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00448</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_resetRemoteConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1050</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1112</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.ServerService.MainFunction.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26609</sourceline>
      <version>1</version>
      <description>The MainFunction processes the Eventflags for all Server Services.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_350</srcid><srcstatus/><internalId>846</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ServerService.API.Sd_ServerService_mainFunction</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1043</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1113</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Sd_ServerService_ComSM_entry_DOWN</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26625</sourceline>
      <version>1</version>
      <description>
          &amp;lt;figure id="fig.Sd_ServerService_ComSM_entry_DOWN"&amp;gt;
            &amp;lt;title&amp;gt;Entry function Sd_ServerService_ComSM_entry_DOWN&amp;lt;/title&amp;gt;
            &amp;lt;mediaobject&amp;gt;
              &amp;lt;imageobject&amp;gt;
                &amp;lt;imagedata fileref="../images/EAID_57397694_FAE6_4653_B63F_32EC0E281ADF.png" scale="70"/&amp;gt;
              &amp;lt;/imageobject&amp;gt;
            &amp;lt;/mediaobject&amp;gt;
          &amp;lt;/figure&amp;gt;
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_DOWN_4</srcid><srcstatus/><internalId>1541</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_INITIALWAIT_DOWN_5</srcid><srcstatus/><internalId>1542</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_DOWN_stop</srcid><srcstatus/><internalId>1585</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_REPETITION_DOWN_stop</srcid><srcstatus/><internalId>1586</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Server_EG_MAIN_DOWN_halt</srcid><srcstatus/><internalId>1589</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00605</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>424</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1114</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Receive.API.Sd_RxIndication</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26700</sourceline>
      <version>1</version>
      <description>See &amp;lt;xref linkend="API_Sd_RxIndication"/&amp;gt;</description>
      <furtherinfo>
            WRN.swdd.needscoverage.count - Short-term solution, detailed analysis pending.
          </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.ServerService.SubscribeEventgroup.011</srcid><srcstatus/><internalId>1103</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RxIndication.Seq</srcid><srcstatus/><internalId>1116</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.Message.ByteOrder</srcid><srcstatus/><internalId>1117</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.MinPDULength</srcid><srcstatus/><internalId>1118</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.ClientID</srcid><srcstatus/><internalId>1119</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.ProtocolVersion</srcid><srcstatus/><internalId>1120</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.InterfaceVersion</srcid><srcstatus/><internalId>1121</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.MessageType</srcid><srcstatus/><internalId>1122</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.ReturnCode</srcid><srcstatus/><internalId>1123</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.LengthOfEntriesArray</srcid><srcstatus/><internalId>1124</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.OptionsLengthField</srcid><srcstatus/><internalId>1125</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.MessageError.OptionsLength</srcid><srcstatus/><internalId>1126</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.Message.UnicastFlag</srcid><srcstatus/><internalId>1131</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.Unicast</srcid><srcstatus/><internalId>1132</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.Multicast</srcid><srcstatus/><internalId>1133</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.ResetConnection</srcid><srcstatus/><internalId>1134</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.RebootDetection.ResetState</srcid><srcstatus/><internalId>1135</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.Entry.UnknownType</srcid><srcstatus/><internalId>1136</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.Entry.ConflictingOptions</srcid><srcstatus/><internalId>1138</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.EndpointOption.MulticastNonUDP</srcid><srcstatus/><internalId>1142</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.EndpointOption.MulticastAddrRange</srcid><srcstatus/><internalId>1143</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.Error001</srcid><srcstatus/><internalId>1144</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.Error002</srcid><srcstatus/><internalId>1145</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.Error003</srcid><srcstatus/><internalId>1146</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.NoValue</srcid><srcstatus/><internalId>1147</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Receive.ConfigOption.NoEqualsign</srcid><srcstatus/><internalId>1148</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1115</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Receive.RxIndication.Seq</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26773</sourceline>
      <version>1</version>
      <description>
          &amp;lt;figure id="fig.Seq_Sd_RxIndication"&amp;gt;
            &amp;lt;title&amp;gt;Sequence: Sd_RxIndication()&amp;lt;/title&amp;gt;
            &amp;lt;mediaobject&amp;gt;
              &amp;lt;imageobject&amp;gt;
                &amp;lt;imagedata fileref="../images/EAID_568D1687_48E5_40d8_B7E1_B4F8FC3C3DA9.png" scale="50"/&amp;gt;
              &amp;lt;/imageobject&amp;gt;
            &amp;lt;/mediaobject&amp;gt;
          &amp;lt;/figure&amp;gt;
        </description>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_FindService_0</srcid><srcstatus/><internalId>1602</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_FindService_1</srcid><srcstatus/><internalId>1603</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_FindService_2</srcid><srcstatus/><internalId>1604</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotStored</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotCleared</srcid><srcstatus/><internalId>1606</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_0</srcid><srcstatus/><internalId>1607</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_1</srcid><srcstatus/><internalId>1608</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_2</srcid><srcstatus/><internalId>1609</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_3</srcid><srcstatus/><internalId>1610</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_4</srcid><srcstatus/><internalId>1611</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_5</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_6</srcid><srcstatus/><internalId>1613</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_0</srcid><srcstatus/><internalId>1615</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_1</srcid><srcstatus/><internalId>1616</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_2</srcid><srcstatus/><internalId>1617</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_3</srcid><srcstatus/><internalId>1618</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_4</srcid><srcstatus/><internalId>1619</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_5</srcid><srcstatus/><internalId>1620</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1621</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_1</srcid><srcstatus/><internalId>1622</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_2</srcid><srcstatus/><internalId>1623</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_3</srcid><srcstatus/><internalId>1624</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_4</srcid><srcstatus/><internalId>1625</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_5</srcid><srcstatus/><internalId>1626</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1627</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_1</srcid><srcstatus/><internalId>1628</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1629</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_3</srcid><srcstatus/><internalId>1630</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_4</srcid><srcstatus/><internalId>1631</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1635</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupNack_1</srcid><srcstatus/><internalId>1636</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_MultipleEntries_0</srcid><srcstatus/><internalId>1637</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_MultipleEntries_1</srcid><srcstatus/><internalId>1638</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_FirstOptionRun_0</srcid><srcstatus/><internalId>1639</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_FirstOptionRun_1</srcid><srcstatus/><internalId>1640</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SecondOptionRun_0</srcid><srcstatus/><internalId>1641</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SecondOptionRun_1</srcid><srcstatus/><internalId>1642</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionRuns_0</srcid><srcstatus/><internalId>1643</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_EmptyOptionRun_0</srcid><srcstatus/><internalId>1644</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_EmptyOptionRun_1</srcid><srcstatus/><internalId>1645</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ConfigOption_0</srcid><srcstatus/><internalId>1646</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ConfigOptionString_1</srcid><srcstatus/><internalId>1647</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_0</srcid><srcstatus/><internalId>1651</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_1</srcid><srcstatus/><internalId>1652</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_2</srcid><srcstatus/><internalId>1653</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_1</srcid><srcstatus/><internalId>1655</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_2</srcid><srcstatus/><internalId>1656</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_3</srcid><srcstatus/><internalId>1657</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_4</srcid><srcstatus/><internalId>1658</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorMinPDULength</srcid><srcstatus/><internalId>1659</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorClientId</srcid><srcstatus/><internalId>1660</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorProtocolVersion</srcid><srcstatus/><internalId>1661</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorInterfaceVersion</srcid><srcstatus/><internalId>1662</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorMessageType</srcid><srcstatus/><internalId>1663</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorReturnCode</srcid><srcstatus/><internalId>1664</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorLengthOfEntriesArray</srcid><srcstatus/><internalId>1665</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorOptionsLengthField</srcid><srcstatus/><internalId>1666</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorOptionsLength</srcid><srcstatus/><internalId>1667</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_GetRemoteAddr_Err</srcid><srcstatus/><internalId>1676</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_UnknownEntryType</srcid><srcstatus/><internalId>1677</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_UnicastFlag</srcid><srcstatus/><internalId>1678</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_NoRemoteNodeState</srcid><srcstatus/><internalId>1679</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00481</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1116</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.Message.ByteOrder</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26799</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall read all fields in the Service Discovery messages
          in Network Byte Order (i.e. Big Endian Byte Order), if not defined otherwise.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotStored</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNode_NotCleared</srcid><srcstatus/><internalId>1606</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_0</srcid><srcstatus/><internalId>1607</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_0</srcid><srcstatus/><internalId>1615</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1117</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.MinPDULength</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26814</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall ignore received messages and report SD_E_MALFORMED_MSG
          if the PDU-Length is less than 20 byte (sizeof(header) + sizeof(lengthof_entries_array) + sizeof(lengthof_options_array)).
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorMinPDULength</srcid><srcstatus/><internalId>1659</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1118</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.ClientID</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26829</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall ignore received messages and report SD_E_MALFORMED_MSG
          if the Client ID is not set to 0x0000.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorClientId</srcid><srcstatus/><internalId>1660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1119</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.ProtocolVersion</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26845</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall ignore received messages and report SD_E_MALFORMED_MSG
          if the Protocol Version field is not set to 0x01.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorProtocolVersion</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1120</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.InterfaceVersion</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26861</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall ignore received messages and report SD_E_MALFORMED_MSG
          if the Interface Version field is not set to 0x01.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorInterfaceVersion</srcid><srcstatus/><internalId>1662</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00143</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1121</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.MessageType</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26877</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall ignore received messages and report SD_E_MALFORMED_MSG
          if the Message Type field is not set to 0x02.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorMessageType</srcid><srcstatus/><internalId>1663</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00145</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1122</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.ReturnCode</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26893</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall ignore received messages and report SD_E_MALFORMED_MSG
          if the Return Code field is not set to 0x00.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorReturnCode</srcid><srcstatus/><internalId>1664</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1123</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.LengthOfEntriesArray</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26909</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall ignore received messages and report SD_E_MALFORMED_MSG
          if the Length of Entries Array Field is not set to a multiple of the size of an entry (16 byte).
        </description>
      <comment>This check is only valid if no entry type with a size other than 16 byte is defined.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorLengthOfEntriesArray</srcid><srcstatus/><internalId>1665</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1124</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.OptionsLengthField</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26926</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall ignore received messages and report SD_E_MALFORMED_MSG
          if the PDU-Length is less than
          sizeof(header) + sizeof(lengthof_entries_array) + lengthof_entries_array + sizeof(lengthof_options_array).
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorOptionsLengthField</srcid><srcstatus/><internalId>1666</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1125</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.OptionsLength</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26942</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall ignore received messages and report SD_E_MALFORMED_MSG
          if the PDU-Length is less than sizeof(header) + sizeof(lengthof_entries_array) + lengthof_entries_array
          + sizeof(lengthof_options_array) + lengthof_options_array.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ErrorOptionsLength</srcid><srcstatus/><internalId>1667</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1126</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.InvalidIPv4OptionLength</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26958</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall discard all IPv4 endpoint options with invalid length, and all options
          that are behind this option in the option array.
          Note: The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall mark the entryoptions with the error flag
          when the entry references discarded options (Refer to Sd.Design.Receive.Entry.InvalidOptionRun).
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionLength_0</srcid><srcstatus/><internalId>1668</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionLength_1</srcid><srcstatus/><internalId>1669</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1127</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.InvalidIPv6OptionLength</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26971</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall discard all IPv6 endpoint options with invalid length, and all options
          that are behind this option in the option array.
          Note: The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall mark the entryoptions with the error flag
          when the entry references discarded options (Refer to Sd.Design.Receive.Entry.InvalidOptionRun).
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionLength_2</srcid><srcstatus/><internalId>1670</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionLength_3</srcid><srcstatus/><internalId>1671</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00397</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>307</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1128</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.InvalidConfigOptionLength</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>26988</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall discard all config options with invalid length (less than 2 bytes), and all options
          that are behind this option in the option array.
          Note: The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall mark the entryoptions with the error flag
          when the entry references discarded options (Refer to Sd.Design.Receive.Entry.InvalidOptionRun).
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionLength_4</srcid><srcstatus/><internalId>1672</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionLength_5</srcid><srcstatus/><internalId>1673</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionLength_7</srcid><srcstatus/><internalId>1675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1129</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.MessageError.OptionsArrayExc</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27001</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall discard options that exceed the end of the options array.
          Note: The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall mark the entryoptions with the error flag
          when the entry references discarded options (Refer to Sd.Design.Receive.Entry.InvalidOptionRun).
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_OptionLength_6</srcid><srcstatus/><internalId>1674</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1130</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.Message.UnicastFlag</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27013</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall ignore messages where the unicast flag is not set.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_UnicastFlag</srcid><srcstatus/><internalId>1678</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00650</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1131</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Receive.RebootDetection.Unicast</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27032</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall store the Reboot Flag and Session Id
          received from a communication partner over unicast and detect a reboot when
          &amp;lt;itemizedlist&amp;gt;
            &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Reboot Flag changes from '0' to '1' or&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
            &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Session ID does not increase, while Reboot Flag stays '1'.&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
          &amp;lt;/itemizedlist&amp;gt;
        </description>
      <comment>Refer to https://www.autosar.org/bugzilla/show_bug.cgi?id=76513</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_2</srcid><srcstatus/><internalId>1656</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_3</srcid><srcstatus/><internalId>1657</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Receive.c_395</srcid><srcstatus/><internalId>816</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00445</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00446</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>351</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00447</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>352</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1132</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.RebootDetection.Multicast</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27055</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall store the Reboot Flag and Session Id
          received from a communication partner over multicast and detect a reboot when
          &amp;lt;itemizedlist&amp;gt;
            &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Reboot Flag changes from '0' to '1' or&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
            &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Session ID does not increase, while Reboot Flag stays '1'.&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
          &amp;lt;/itemizedlist&amp;gt;
        </description>
      <rationale>
          SWS_SD_00446 is on contradiction with PRS_SOMEIPSD_00258.
          According to the PRS Sd shall detect a reboot if the session ID stays the same (old.session_id&amp;gt;=new.session_id).
          According to the SWS_SD Sd shall detect a reboot only if the session Id decreases.
          After Rfc 76513, SWS_SD_00446 will be modified so that reboot is detected if session ID does not increase.
        </rationale>
      <comment>Refer to https://www.autosar.org/bugzilla/show_bug.cgi?id=76513</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_RemoteNodeReboot</srcid><srcstatus/><internalId>1327</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_ResponseTimerCounter</srcid><srcstatus/><internalId>1328</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_0</srcid><srcstatus/><internalId>1654</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_1</srcid><srcstatus/><internalId>1655</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_2</srcid><srcstatus/><internalId>1656</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_3</srcid><srcstatus/><internalId>1657</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Receive.c_396</srcid><srcstatus/><internalId>817</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00445</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00446</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>351</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1133</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.RebootDetection.ResetConnection</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27083</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall detect the reboot of a remote node and
          call the functions
          &amp;lt;itemizedlist&amp;gt;
            &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&amp;lt;function&amp;gt;Sd_ServerService_resetRemoteConnection()&amp;lt;/function&amp;gt; and&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
            &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&amp;lt;function&amp;gt;Sd_ClientService_resetRemoteConnection()&amp;lt;/function&amp;gt;.&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
          &amp;lt;/itemizedlist&amp;gt;
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_RemoteNodeReboot</srcid><srcstatus/><internalId>1327</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_ResponseTimerCounter</srcid><srcstatus/><internalId>1328</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_0</srcid><srcstatus/><internalId>1654</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_1</srcid><srcstatus/><internalId>1655</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00445</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00446</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>351</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00447</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>352</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00448</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1134</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.RebootDetection.ResetState</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27105</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_RxIndication()&amp;lt;/function&amp;gt; shall detect the reboot of a remote node and
          reset the last received Session ID and Reboot Flag received from this remote node over unicast
          and multicast communication.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_RemoteNodeReboot</srcid><srcstatus/><internalId>1327</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_ResponseTimerCounter</srcid><srcstatus/><internalId>1328</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_0</srcid><srcstatus/><internalId>1654</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_RemoteNodeReboot_1</srcid><srcstatus/><internalId>1655</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00448</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1135</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Receive.Entry.UnknownType</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27126</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall ignore entries of unknown type.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_UnknownEntryType</srcid><srcstatus/><internalId>1677</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00483</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1136</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.Entry.InvalidOptionRun</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27140</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Sd&amp;lt;/package&amp;gt; module shall shall mark the entryoptions with the error flag
          when the entry references not existing options.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_4</srcid><srcstatus/><internalId>1611</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_3</srcid><srcstatus/><internalId>1624</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_3</srcid><srcstatus/><internalId>1630</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1137</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.Entry.ConflictingOptions</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27151</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall mark the entryoptions with the conflicting options flag
          when the entry references two endpointoptions of the same type that are in conflict.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_2</srcid><srcstatus/><internalId>1609</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_1</srcid><srcstatus/><internalId>1616</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_1</srcid><srcstatus/><internalId>1622</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_1</srcid><srcstatus/><internalId>1628</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00698</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00714</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>508</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1138</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Receive.EndpointOption.InvalidAddr</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27173</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall mark the entryoptions with the invalid endpoint flag
          when the entry references an endpoint option where the IP-Address or port is zero.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_2</srcid><srcstatus/><internalId>1617</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_2</srcid><srcstatus/><internalId>1623</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1139</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.EndpointOption.InvalidAddrFamily</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27184</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall mark the entryoptions with the invalid endpoint flag
          when the entry references an endpoint option where the adress family is different from
          the adress family of the according SdInstance.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_5</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroup_5</srcid><srcstatus/><internalId>1620</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_StopSubscribeEventgroup_5</srcid><srcstatus/><internalId>1626</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_4</srcid><srcstatus/><internalId>1631</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1140</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.EndpointOption.IPv4InvalidProtocol</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27196</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall mark the entryoptions with the invalid endpoint flag
          when the entry references an IPv4 endpoint option where the protocol is not set
          to TCP or UDP.
        </description>
      <comment>Rationale: This case describes a known endpoint type with an invalid protocol type.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_OfferService_7</srcid><srcstatus/><internalId>1614</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1141</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.EndpointOption.MulticastNonUDP</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27209</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall mark the entryoptions with the invalid endpoint flag
          when the entry references a multicast endpoint option where the Protocol field
          is different from 0x11 (UDP).
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_5</srcid><srcstatus/><internalId>1632</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00395</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1142</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.EndpointOption.MulticastAddrRange</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27225</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall mark the entryoptions with the invalid endpoint flag
          when the entry references a multicast endpoint option where the IP-Address
          is not in the range 224.0.0.0 to 239.255.255.255.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_6</srcid><srcstatus/><internalId>1633</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_SubscribeEventgroupAck_Multicast</srcid><srcstatus/><internalId>1634</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1143</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Receive.ConfigOption.Error001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27247</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall mark the entryoptions with the error flag
          when the entry references a config option where a string has length zero.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ConfigOptionString_1</srcid><srcstatus/><internalId>1647</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1144</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.ConfigOption.Error002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27263</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall mark the entryoptions as errorneous
          when the entry references a config option where the strings do not
          exactly fit into the config option.
        </description>
      <comment>The config option is considered errorneous when the unit follows the
          length fields of the config_item_strings and does not end in a zero byte
          at the end of the option.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ConfigOptionString_1</srcid><srcstatus/><internalId>1647</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Receive_ConfigOptionString_2</srcid><srcstatus/><internalId>1648</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1145</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.ConfigOption.Error003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27284</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall mark the entryoptions with the error flag
          when the entry references a config option where the last byte is not set to zero.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ConfigOptionString_2</srcid><srcstatus/><internalId>1648</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1146</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.ConfigOption.NoValue</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27299</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall not mark the entryoptions with the error flag
          because of a referenced config option where a string contains no option value.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ConfigOptionString_3</srcid><srcstatus/><internalId>1649</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00461</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>366</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1147</internalId></specobject>
    <specobject>
      <id>Sd.Design.Receive.ConfigOption.NoEqualsign</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27314</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Receive&amp;lt;/package&amp;gt; unit shall not mark the entryoptions with the error flag
          because of a referenced config option where a string contains no equal sign.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Receive_ConfigOptionString_3</srcid><srcstatus/><internalId>1649</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00466</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>371</internalId></provcov>
        <provcov>
          <linksto>Sd.Receive.API.Sd_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1148</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Send.API.Sd_Send_init</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27377</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_149</srcid><srcstatus/><internalId>820</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1149</internalId></specobject>
    <specobject>
      <id>Sd.Send.API.Sd_Send_setupBuffer</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27448</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_Send.c_163</srcid><srcstatus/><internalId>821</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1150</internalId></specobject>
    <specobject>
      <id>Sd.Send.API.Sd_Send_flushBuffer</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27548</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.ByteOrder</srcid><srcstatus/><internalId>1158</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1151</internalId></specobject>
    <specobject>
      <id>Sd.Send.API.Sd_Send_queueFindService</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27619</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueFindService.001</srcid><srcstatus/><internalId>1167</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueFindService.002</srcid><srcstatus/><internalId>1168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1152</internalId></specobject>
    <specobject>
      <id>Sd.Send.API.Sd_Send_queueOfferService</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27719</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueOfferService.001</srcid><srcstatus/><internalId>1169</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueOfferService.002</srcid><srcstatus/><internalId>1170</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueOfferService.003</srcid><srcstatus/><internalId>1171</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueOfferService.004</srcid><srcstatus/><internalId>1172</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueOfferService.005</srcid><srcstatus/><internalId>1173</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1153</internalId></specobject>
    <specobject>
      <id>Sd.Send.API.Sd_Send_queueSubscribeEventgroup</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27833</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroup.001</srcid><srcstatus/><internalId>1174</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroup.003</srcid><srcstatus/><internalId>1175</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroup.002</srcid><srcstatus/><internalId>1176</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroup.004</srcid><srcstatus/><internalId>1177</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroup.005</srcid><srcstatus/><internalId>1178</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1154</internalId></specobject>
    <specobject>
      <id>Sd.Send.API.Sd_Send_queueSubscribeEventgroupAck</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>27961</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupAck.001</srcid><srcstatus/><internalId>1179</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupAck.002</srcid><srcstatus/><internalId>1180</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupAck.003</srcid><srcstatus/><internalId>1181</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupAck.004</srcid><srcstatus/><internalId>1182</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1155</internalId></specobject>
    <specobject>
      <id>Sd.Send.API.Sd_Send_queueSubscribeEventgroupNack</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28089</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupNack.001</srcid><srcstatus/><internalId>1183</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupNack.002</srcid><srcstatus/><internalId>1184</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupNack.003</srcid><srcstatus/><internalId>1185</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1156</internalId></specobject>
    <specobject>
      <id>Sd.Send.API.Sd_Send_queueSubscribeEventgroupNackUnknown</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28203</sourceline>
      <version>1</version>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupNackUnknown.001</srcid><srcstatus/><internalId>1186</internalId></linkedfrom><linkedfrom><srcid>Sd.Design.Send.queueSubscribeEventgroupNackUnknown.002</srcid><srcstatus/><internalId>1187</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1157</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Send.ByteOrder</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28402</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;package&amp;gt;Send()&amp;lt;/package&amp;gt; shall write all fields in the Service Discovery messages
          in Network Byte Order (i.e. Big Endian Byte Order), if not defined otherwise.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_flushBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1158</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.AutoFlush.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28417</sourceline>
      <version>1</version>
      <description>
          If the transmitbuffer is full it shall be transmitted automatically.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_AutoFlush_0</srcid><srcstatus/><internalId>1711</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1159</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.EndpointOption.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28427</sourceline>
      <version>1</version>
      <description>
          The queue entry functions shall append the required endpoint option to the transmitbuffer.
          If the required endpoint option is already present in the buffer it shall be reused if possible.
        </description>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_0</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_1</srcid><srcstatus/><internalId>1704</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_2</srcid><srcstatus/><internalId>1705</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_3</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_4</srcid><srcstatus/><internalId>1707</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_0</srcid><srcstatus/><internalId>1708</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1160</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.EndpointOption.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28441</sourceline>
      <version>1</version>
      <description>
          The queue entry functions shall append the TCP and UDP endpoint option to option run 1.
        </description>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_2</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_0</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_1</srcid><srcstatus/><internalId>1704</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_2</srcid><srcstatus/><internalId>1705</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_3</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_4</srcid><srcstatus/><internalId>1707</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_0</srcid><srcstatus/><internalId>1708</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1161</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.ConfigOption.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28454</sourceline>
      <version>1</version>
      <description>
          The queue entry functions shall append the config option to option run 2.
        </description>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_1</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_2</srcid><srcstatus/><internalId>1682</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_2</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_3</srcid><srcstatus/><internalId>1699</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_1</srcid><srcstatus/><internalId>1701</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_0</srcid><srcstatus/><internalId>1708</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionKey_0</srcid><srcstatus/><internalId>1710</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1162</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.ConfigOption.Reuse</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28467</sourceline>
      <version>1</version>
      <description>
          The queue entry functions shall reuse the configuration options for one service for all entries.
        </description>
      <comment>Several SubscribeEventgroup, SubscribeEventgroupAck and SubscribeEventgroupNack
          for the same service shall reference the same configuration option.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_0</srcid><srcstatus/><internalId>1708</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1163</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.ConfigOption.Hostname</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28479</sourceline>
      <version>1</version>
      <description>
          The queue entry functions shall add the string hostname=node:value(SdInstanceHostname)
          to the begin of a config string if the hostname is configured.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_2</srcid><srcstatus/><internalId>1682</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00468</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>373</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1164</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.ConfigOption.CapabilityRecordKey</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28494</sourceline>
      <version>1</version>
      <description>
          The queue entry functions shall add the CapabilityRecordKey to the config string.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_1</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1165</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.ConfigOption.CapabilityRecordValue</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28507</sourceline>
      <version>1</version>
      <description>
          The queue entry functions shall add an equal sign and node:value(CapabilityRecordValue)
          to the config string if CapabilityRecordValue is enabled.
        </description>
      <comment>CapabilityRecordValue can be empty.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_1</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00461</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>366</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00466</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>371</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1166</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Send.queueFindService.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28530</sourceline>
      <version>1</version>
      <description>
          The function &amp;lt;function&amp;gt;Sd_Send_queueFindService()&amp;lt;/function&amp;gt; adds a FindService entry
          to the transmit queue. The ServiceID, InstanceID, MajorVersion and MinorVersion
          shall be taken from the ClientService configuration.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_1</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_2</srcid><srcstatus/><internalId>1682</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionKey_0</srcid><srcstatus/><internalId>1710</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00444</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>349</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00501</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueFindService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1167</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueFindService.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28550</sourceline>
      <version>1</version>
      <description>
          The function &amp;lt;function&amp;gt;Sd_Send_queueFindService()&amp;lt;/function&amp;gt; shall take the TTL from
          the Timer container referenced by the SdClientService.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00504</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueFindService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1168</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Send.queueOfferService.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28571</sourceline>
      <version>1</version>
      <description>
            The function &amp;lt;function&amp;gt;Sd_Send_queueOfferService()&amp;lt;/function&amp;gt; adds a OfferService entry
            to the transmit queue. The ServiceID, InstanceID, MajorVersion and MinorVersion
            shall be taken from the ServerService configuration.
        </description>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_0</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_1</srcid><srcstatus/><internalId>1704</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_2</srcid><srcstatus/><internalId>1705</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_3</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_4</srcid><srcstatus/><internalId>1707</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00254</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00509</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>409</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00510</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>410</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00511</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>411</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1169</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueOfferService.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28594</sourceline>
      <version>1</version>
      <description>
            If the parameter &amp;lt;parameter&amp;gt;isStopOffer&amp;lt;/parameter&amp;gt; is TRUE, the function shall set the TTL to 0.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_1</srcid><srcstatus/><internalId>1691</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00253</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00513</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00281</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00425</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>333</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1170</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueOfferService.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28611</sourceline>
      <version>1</version>
      <description>
            If the parameter &amp;lt;parameter&amp;gt;isStopOffer&amp;lt;/parameter&amp;gt; is FALSE, the function shall take the TTL from
            the Timer container referenced by the SdServerService.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00299</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00513</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00515</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1171</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueOfferService.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28628</sourceline>
      <version>1</version>
      <description>
            If the parameter &amp;lt;parameter&amp;gt;SdServerServiceUdpRef&amp;lt;/parameter&amp;gt; of the SdServerService references a
            Socketconnectiongroup, the queued OfferService entry shall reference a UDP unicast endpoint option.
        </description>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_0</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_1</srcid><srcstatus/><internalId>1704</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_2</srcid><srcstatus/><internalId>1705</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_3</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_4</srcid><srcstatus/><internalId>1707</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00281</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1172</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueOfferService.005</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28650</sourceline>
      <version>1</version>
      <description>
            If the parameter &amp;lt;parameter&amp;gt;SdServerServiceTcpRef&amp;lt;/parameter&amp;gt; of the SdServerService references a
            Socketconnectiongroup, the queued OfferService entry shall reference a TCP endpoint option.
        </description>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_1</srcid><srcstatus/><internalId>1684</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_2</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_3</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_4</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_5</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_6</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_0</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_1</srcid><srcstatus/><internalId>1704</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_2</srcid><srcstatus/><internalId>1705</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_3</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_EndpointOptionReuse_4</srcid><srcstatus/><internalId>1707</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00281</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueOfferService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1173</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroup.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28678</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroup()&amp;lt;/function&amp;gt; adds a SubscribeEventgroup or
          StopSubscribeEventgroup entry to the transmit queue. The ServiceID, InstanceID and MajorVersion
          shall be taken from the ClientService configuration.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_2</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_1</srcid><srcstatus/><internalId>1695</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_0</srcid><srcstatus/><internalId>1708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1174</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroup.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28693</sourceline>
      <version>1</version>
      <description>
          If the parameter &amp;lt;parameter&amp;gt;isStopSubscribe&amp;lt;/parameter&amp;gt; is TRUE, the function shall set the TTL to 0.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00281</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1175</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroup.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28707</sourceline>
      <version>1</version>
      <description>
          If the parameter &amp;lt;parameter&amp;gt;isStopSubscribe&amp;lt;/parameter&amp;gt; is FALSE, the function shall take the TTL from
          the Timer container referenced by the SdConsumedEventgroup.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1176</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroup.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28721</sourceline>
      <version>1</version>
      <description>
            If the parameter &amp;lt;parameter&amp;gt;SdClientServiceUdpRef&amp;lt;/parameter&amp;gt; of the SdClientService references a
            Socketconnectiongroup, the queued SubscribeEventgroup entry shall reference a UDP endpoint option.
        </description>
      <comment>As long as TCP is not supported, the SubscribeEventgroup must always reference a Unicast endpoint option.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_2</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_0</srcid><srcstatus/><internalId>1708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00655</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00281</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1177</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroup.005</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28739</sourceline>
      <version>1</version>
      <description>
            The &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupAck()&amp;lt;/function&amp;gt; shall set the Message Type to 0x06.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_2</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_1</srcid><srcstatus/><internalId>1695</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_0</srcid><srcstatus/><internalId>1708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00385</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>297</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00313</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1178</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroupAck.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28759</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupAck()&amp;lt;/function&amp;gt; adds a SubscribeEventgroupAck
          entry to the transmit queue. The ServiceID, InstanceID, MajorVersion and EventGroupId shall
          be taken from the configuration.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_1</srcid><srcstatus/><internalId>1697</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_3</srcid><srcstatus/><internalId>1699</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroupAck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1155</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00428</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>336</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1179</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroupAck.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28775</sourceline>
      <version>1</version>
      <description>
              If the parameter &amp;lt;parameter&amp;gt;SdMulticastEventSoConRef&amp;lt;/parameter&amp;gt; of the Eventgroup references a
              Socketconnectiongroup, the queued SubscribeEventgroupAck entry shall reference a UDP multicast endpoint option.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_1</srcid><srcstatus/><internalId>1697</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00655</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroupAck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1180</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroupAck.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28791</sourceline>
      <version>1</version>
      <description>
            The &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupAck()&amp;lt;/function&amp;gt; shall set the Message Type to 0x07.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_3</srcid><srcstatus/><internalId>1699</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00385</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>297</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00314</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroupAck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1181</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroupAck.004</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28806</sourceline>
      <version>1</version>
      <description>
              If the parameter &amp;lt;parameter&amp;gt;SdServerCapabilityRecord&amp;lt;/parameter&amp;gt; of the Service
              is configured, the queued SubscribeEventgroupAck entry shall reference a configuration option.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_3</srcid><srcstatus/><internalId>1699</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionReuse_1</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroupAck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1182</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroupNack.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28825</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupNack()&amp;lt;/function&amp;gt; adds a SubscribeEventgroupNack
          entry to the transmit queue. The ServiceID, InstanceID and MajorVersion shall be taken
          from the configuration.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_1</srcid><srcstatus/><internalId>1701</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroupNack</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1156</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00431</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>339</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1183</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroupNack.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28841</sourceline>
      <version>1</version>
      <description>
            The &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupNack()&amp;lt;/function&amp;gt; shall set the Message Type to 0x07.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_1</srcid><srcstatus/><internalId>1701</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00385</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>297</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00316</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroupNack</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1184</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroupNack.003</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28856</sourceline>
      <version>1</version>
      <description>
              If the parameter &amp;lt;parameter&amp;gt;SdServerCapabilityRecord&amp;lt;/parameter&amp;gt; of the Service
              is configured, the queued SubscribeEventgroupNack entry shall reference a configuration option.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_1</srcid><srcstatus/><internalId>1701</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroupNack</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1185</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroupNackUnknown.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28875</sourceline>
      <version>1</version>
      <description>
          The &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupNackUnknown()&amp;lt;/function&amp;gt; adds a SubscribeEventgroupNack
          entry to the transmit queue. The ServiceID, InstanceID and MajorVersion shall be taken from the function arguments.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNackUnknown</srcid><srcstatus/><internalId>1702</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroupNackUnknown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1157</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00431</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>339</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1186</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.queueSubscribeEventgroupNackUnknown.002</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28890</sourceline>
      <version>1</version>
      <description>
            The &amp;lt;function&amp;gt;Sd_Send_queueSubscribeEventgroupNackUnknown()&amp;lt;/function&amp;gt; shall set the Message Type to 0x07.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNackUnknown</srcid><srcstatus/><internalId>1702</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00385</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>297</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00316</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
        <provcov>
          <linksto>Sd.Send.API.Sd_Send_queueSubscribeEventgroupNackUnknown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1187</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.Design.Send.flushBuffer.RequestID</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28911</sourceline>
      <version>1</version>
      <description>
        </description>
      <furtherinfo>
          WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_1</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_2</srcid><srcstatus/><internalId>1682</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_1</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_ConfigOptionKey_0</srcid><srcstatus/><internalId>1710</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageSessionId_0</srcid><srcstatus/><internalId>1713</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1188</internalId></specobject>
    <specobject>
      <id>Sd.Design.Send.flushBuffer.001</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28930</sourceline>
      <version>1</version>
      <description>
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_Unit_Send_QueueFind_0</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueOffer_0</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_0</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopOffer_1</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</srcid><srcstatus/><internalId>1700</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageFormat_0</srcid><srcstatus/><internalId>1712</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_Unit_Send_SdMessageRebootFlag_0</srcid><srcstatus/><internalId>1714</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00140</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00143</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00145</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00153</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1189</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Report Issue Callout Function">
    <specobject>
      <id>Sd.dsn.Func0003.ReportIssueCallout_Reporting</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28973</sourceline>
      <version>1</version>
      <description>
          If issue reporting has been enabled for the SD module
          (SdReportIssueCallout function set), SD shall report via
          the defined callout if a received entry was dropped.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2367</srcid><srcstatus/><internalId>773</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2428</srcid><srcstatus/><internalId>774</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2532</srcid><srcstatus/><internalId>777</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_2653</srcid><srcstatus/><internalId>780</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_975</srcid><srcstatus/><internalId>849</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_1735</srcid><srcstatus/><internalId>852</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ServerService.c_1820</srcid><srcstatus/><internalId>857</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_RemoteAddr_Check_Failed</srcid><srcstatus/><internalId>1369</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_IPv6_Check_Failed</srcid><srcstatus/><internalId>1370</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_No_RemoteAddr_Check_Endpoint_Check_Failed</srcid><srcstatus/><internalId>1371</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_Check_Disabled</srcid><srcstatus/><internalId>1372</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Client_Blacklisted_MinorVersion</srcid><srcstatus/><internalId>1373</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Client_No_Data_Socket_TCP</srcid><srcstatus/><internalId>1375</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Client_No_Data_Socket_UDP</srcid><srcstatus/><internalId>1376</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Server_Service_Not_Configured</srcid><srcstatus/><internalId>1377</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Server_No_Data_Socket_UDP</srcid><srcstatus/><internalId>1378</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Server_No_Data_Socket_TCP</srcid><srcstatus/><internalId>1379</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>909</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1190</internalId></specobject>
    <specobject>
      <id>Sd.dsn.Func0003.ReportIssueCallout_Conf</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>28995</sourceline>
      <version>1</version>
      <description>
          &lt;para&gt;Container name:                   SdReportIssueCallout&lt;/para&gt;
          &lt;para&gt;Parent containers:                SdGeneral&lt;/para&gt;
          &lt;para&gt;Description:                      This container holds user defined callout function name which has a prototype
                                                  specified in [User_ReportIssueCallout].&lt;/para&gt;
          &lt;para&gt;Container multiplicity:           0..1&lt;/para&gt;
          &lt;para&gt;Container Type:                   Sub-Container&lt;/para&gt;
          &lt;para&gt;Multiplicity Configuration Class: Pre-compile time&lt;/para&gt;
          &lt;para&gt;Value Configuration Class:        Link time&lt;/para&gt;
        </description>
      <comment>
          This is a configuration parameter requirement without functional specification.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/Sd_Cfg.c_52</srcid><srcstatus/><internalId>692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>909</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1191</internalId></specobject>
    <specobject>
      <id>Sd.dsn.Func0003.User_ReportIssueCallout</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29024</sourceline>
      <version>1</version>
      <description>
        &lt;para&gt;Service name: User_ReportIssueCallout&lt;/para&gt;
        &lt;para&gt;Syntax: (void) User_ReportIssueCallout(
                                              Sd_EventIdType EventType,
                                              const Sd_ReportIssueContextType* ContextDataPtr
                                              );&lt;/para&gt;
        &lt;para&gt;Sync/Async: Synchronous&lt;/para&gt;
        &lt;para&gt;Reentrancy: Reentrant&lt;/para&gt;
        &lt;para&gt;
          Parameters (in):
          &lt;itemizedlist&gt;
            &lt;listitem&gt;
              EventType - Identifier indicating event that caused entry to be dropped.
            &lt;/listitem&gt;
            &lt;listitem&gt;
              ContextDataPtr - Structure holding information (context) about entry.
            &lt;/listitem&gt;
          &lt;/itemizedlist&gt;
        &lt;/para&gt;
        &lt;para&gt;Description: User defined callout function Sd calls to report dropped Sd entry.&lt;/para&gt;
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd_Types.h_174</srcid><srcstatus/><internalId>706</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_RemoteAddr_Check_Failed</srcid><srcstatus/><internalId>1369</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_IPv6_Check_Failed</srcid><srcstatus/><internalId>1370</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_No_RemoteAddr_Check_Endpoint_Check_Failed</srcid><srcstatus/><internalId>1371</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_Check_Disabled</srcid><srcstatus/><internalId>1372</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Client_Blacklisted_MinorVersion</srcid><srcstatus/><internalId>1373</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Client_No_Match_Found</srcid><srcstatus/><internalId>1374</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Client_No_Data_Socket_TCP</srcid><srcstatus/><internalId>1375</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Client_No_Data_Socket_UDP</srcid><srcstatus/><internalId>1376</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Server_Service_Not_Configured</srcid><srcstatus/><internalId>1377</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Server_No_Data_Socket_UDP</srcid><srcstatus/><internalId>1378</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_ReportIssue_Server_No_Data_Socket_TCP</srcid><srcstatus/><internalId>1379</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>909</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1192</internalId></specobject>
    <specobject>
      <id>Sd.dsn.Func0003.Sd_ReportIssueContextType</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29066</sourceline>
      <version>1</version>
      <description>
        &lt;para&gt;Type name: Sd_ReportIssueContextType&lt;/para&gt;
        &lt;para&gt;Type kind: Structure&lt;/para&gt;
        &lt;para&gt;
          Elements:
          &lt;itemizedlist&gt;
            &lt;listitem&gt;
              &lt;para&gt;SecurityEventId&lt;/para&gt;
              &lt;para&gt;Type: uint16&lt;/para&gt;
              &lt;para&gt;Comment: ID of the security event associated with the reported issue.&lt;/para&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
              &lt;para&gt;ServiceId&lt;/para&gt;
              &lt;para&gt;Type: uint16&lt;/para&gt;
              &lt;para&gt;Comment: ServiceId contained in the dropped entry.&lt;/para&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
              &lt;para&gt;InstanceId&lt;/para&gt;
              &lt;para&gt;Type: uint16&lt;/para&gt;
              &lt;para&gt;Comment: InstanceId contained in the dropped entry.&lt;/para&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
              &lt;para&gt;RemoteAddrPtr&lt;/para&gt;
              &lt;para&gt;Type: const TcpIp_SockAddrInet6Type*&lt;/para&gt;
              &lt;para&gt;Comment: Pointer to the RemoteAddress from where the entry was sent.&lt;/para&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
              &lt;para&gt;CheckedAddrPtr&lt;/para&gt;
              &lt;para&gt;Type: const TcpIp_SockAddrInet6Type*&lt;/para&gt;
              &lt;para&gt;
                Comment: Only for EventType SD_REPORT_ID_ACL_CHECK_FAILED.
                         Pointer to the address that failed the ACL check.
              &lt;/para&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
              &lt;para&gt;Direction&lt;/para&gt;
              &lt;para&gt;Type: Sd_DirectionType&lt;/para&gt;
              &lt;para&gt;Comment: Whether the entry was dropped by a client (SD_CONSUMER) a server (SD_PROVIDER).&lt;/para&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
              &lt;para&gt;MajorVersion&lt;/para&gt;
              &lt;para&gt;Type: uint8&lt;/para&gt;
              &lt;para&gt;Comment: MajorVersion contained in the dropped entry.&lt;/para&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
              &lt;para&gt;MinorVersion&lt;/para&gt;
              &lt;para&gt;Type: uint32&lt;/para&gt;
              &lt;para&gt;Comment: MinorVersion contained in the dropped entry.&lt;/para&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
              &lt;para&gt;EndPointOptionPtr&lt;/para&gt;
              &lt;para&gt;Type: const Sd_EntryOptionType*&lt;/para&gt;
              &lt;para&gt;Comment: Pointer to Sd_EntryOptionType containing TcpEndpointOption, UdpEndpointOption
                      and MulticastOption of the dropped entry.&lt;/para&gt;
            &lt;/listitem&gt;
          &lt;/itemizedlist&gt;
        &lt;/para&gt;
        &lt;para&gt;Available via: Sd.h&lt;/para&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd_Types.h_160</srcid><srcstatus/><internalId>705</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>909</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1193</internalId></specobject>
    <specobject>
      <id>Sd.dsn.Func0003.Sd_EventType</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29141</sourceline>
      <version>1</version>
      <description>
        &lt;para&gt;Type name:          Sd_EventIdType&lt;/para&gt;
        &lt;para&gt;Type kind:          Enumeration&lt;/para&gt;
        &lt;para&gt;Derived from:       uint8&lt;/para&gt;
        &lt;para&gt;
          Range:
          &lt;itemizedlist&gt;
            &lt;listitem&gt;
              &lt;para&gt;SD_REPORT_ID_SERVICE_NOT_CONFIGURED 0    Entry dropped because the service is not configured.&lt;/para&gt;
              &lt;para&gt;
                Context data:
                &lt;itemizedlist&gt;
                  &lt;listitem&gt;
                    ServiceId
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    InstanceId
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    Direction
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    MajorVersion
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    MinorVersion
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    EndPointOptionPtr
                  &lt;/listitem&gt;
                &lt;/itemizedlist&gt;
              &lt;/para&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
              &lt;para&gt;SD_REPORT_ID_SERVICE_BLACKLISTED    1    Entry dropped because the service is blacklisted.&lt;/para&gt;
              &lt;para&gt;
                Context data:
                &lt;itemizedlist&gt;
                  &lt;listitem&gt;
                    ServiceId
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    InstanceId
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    Direction
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    MajorVersion
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    MinorVersion
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    EndPointOptionPtr
                  &lt;/listitem&gt;
                &lt;/itemizedlist&gt;
              &lt;/para&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
              &lt;para&gt;SD_REPORT_ID_NO_DATA_SOCKET         2    Entry because no data socket is available.&lt;/para&gt;
              &lt;para&gt;
                Context data:
                &lt;itemizedlist&gt;
                  &lt;listitem&gt;
                    ServiceId
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    InstanceId
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    RemoteAddrPtr
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    Direction
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    MajorVersion
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    MinorVersion
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    EndPointOptionPtr (for server services only)
                  &lt;/listitem&gt;
                &lt;/itemizedlist&gt;
              &lt;/para&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
              &lt;para&gt;SD_REPORT_ID_ACL_CHECK_FAILED       3    Entry dropped because the AccessControlList (ACL) check failed.&lt;/para&gt;
              &lt;para&gt;
                Context data:
                &lt;itemizedlist&gt;
                  &lt;listitem&gt;
                    ServiceId
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    InstanceId
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    RemoteAddrPtr
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    CheckedAddrPtr
                  &lt;/listitem&gt;
                  &lt;listitem&gt;
                    Direction
                  &lt;/listitem&gt;
                &lt;/itemizedlist&gt;
              &lt;/para&gt;
            &lt;/listitem&gt;
          &lt;/itemizedlist&gt;
        &lt;/para&gt;
        &lt;para&gt;Description:        Enumeration identifying reasons for a dropped entry.&lt;/para&gt;
        &lt;para&gt;Available via:      Sd.h&lt;/para&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Sd_Types.h_127</srcid><srcstatus/><internalId>704</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>909</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1194</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Access Control List">
    <specobject>
      <id>Sd.dsn.Func0004.Client.AccessControlList_RemoteAddr_Check</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29276</sourceline>
      <version>1</version>
      <description>
        SD shall check the IP address of the RemoteAddress of the sender of an offer against the
        ClientService ACL SdClientServiceAllowedProvider:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
            If the IP address of the RemoteAddress of the sender is not on this ClientService ACL
            SdClientServiceAllowedProvider, SD shall ignore the offer.
            If issue reporting is enabled, SD shall log the event SD_REPORT_ID_ACL_CHECK_FAILED.
          &lt;/listitem&gt;
          &lt;listitem&gt;
            SD shall further process the entry, if the IP address of the RemoteAddress
            of the sender is configured as SdClientServiceAllowedProvider on this ClientService.
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1311</srcid><srcstatus/><internalId>741</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_Check_Passed</srcid><srcstatus/><internalId>1368</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_RemoteAddr_Check_Failed</srcid><srcstatus/><internalId>1369</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_IPv6_Check_Failed</srcid><srcstatus/><internalId>1370</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>910</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1195</internalId></specobject>
    <specobject>
      <id>Sd.dsn.Func0004.Client.AccessControlList_Disable_RemoteAddr_Check</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29308</sourceline>
      <version>1</version>
      <description>
        There shall be a config parameter "SdDisableAclRemoteAddrCheck" that, if set to true,
        disables the ACL check for the IP address of the RemoteAddress of the sender of an offer.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Sd_Cfg.h.m4_55</srcid><srcstatus/><internalId>690</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Sd_ClientService.c_1304</srcid><srcstatus/><internalId>740</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_No_RemoteAddr_Check_Endpoint_Check_Failed</srcid><srcstatus/><internalId>1371</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>910</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1196</internalId></specobject>
    <specobject>
      <id>Sd.dsn.Func0004.Client.AccessControlList_Disable</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29329</sourceline>
      <version>1</version>
      <description>
        The API Sd_DisableAcl() shall disable the ACL check.
        If issue reporting is enabled ACL violations shall still be logged.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Sd.c.m4_595</srcid><srcstatus/><internalId>717</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_ConfTest_01_General_Client_ACL_Check_Disabled</srcid><srcstatus/><internalId>1372</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>910</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1197</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Sd.EB.Config.HandleId</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29473</sourceline>
      <version>1</version>
      <description>
The HandleIds
&amp;lt;itemizedlist&amp;gt;
  &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&amp;lt;parameter&amp;gt;SdServerServiceHandleId&amp;lt;/parameter&amp;gt;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
  &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&amp;lt;parameter&amp;gt;SdClientServiceHandleId&amp;lt;/parameter&amp;gt;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
  &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&amp;lt;parameter&amp;gt;SdEventHandlerHandleId&amp;lt;/parameter&amp;gt;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
  &amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&amp;lt;parameter&amp;gt;SdConsumedEventGroupHandleId&amp;lt;/parameter&amp;gt;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;
shall be 0-based and dense.
</description>
      <rationale>To allow fast, index based access to internal datastructures.</rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_62</srcid><srcstatus/><internalId>865</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00437</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>343</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00438</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>344</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00439</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>345</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1198</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.Server001</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29500</sourceline>
      <version>1</version>
      <description>
        The parameter &amp;lt;parameter&amp;gt;SdServerServiceUdpRef&amp;lt;/parameter&amp;gt; and/or the 
        &amp;lt;parameter&amp;gt;SdServerServiceTcpRef&amp;lt;/parameter&amp;gt; shall reference a SoAdSocketConnectionGroup.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1005</srcid><srcstatus/><internalId>887</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1199</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.Server002</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29516</sourceline>
      <version>1</version>
      <description>
        The parameter &amp;lt;parameter&amp;gt;SdServerServiceUdpRef&amp;lt;/parameter&amp;gt; and/or the &amp;lt;parameter&amp;gt;SdServerServiceTcpRef&amp;lt;/parameter&amp;gt; 
		shall reference a SoAdSocketConnectionGroup if SdEventHandlerUdp and/or SdEventHandlerTcp are used within the service.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1008</srcid><srcstatus/><internalId>888</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1200</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.Server003</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29529</sourceline>
      <version>2</version>
      <description>
        SoadSocketConnectionGroups referenced by parameters &amp;lt;parameter&amp;gt;SdServerServiceUdpRef&amp;lt;/parameter&amp;gt; and &amp;lt;parameter&amp;gt;SdServerServiceTcpRef&amp;lt;/parameter&amp;gt;
		shall have their option SoAdSocketAutomaticSoConSetup disabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_ServerService_Unicast_TCP_AutomaticSoConSetup</srcid><srcstatus/><internalId>1260</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_ServerService_Unicast_UDP_AutomaticSoConSetup</srcid><srcstatus/><internalId>1261</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1201</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.EventHandler001</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29543</sourceline>
      <version>1</version>
      <description>
        If &amp;lt;parameter&amp;gt;SdEventHandler/SdEventHandlerMulticastThreshhold&amp;lt;/parameter&amp;gt; is != 1
        the parameter &amp;lt;parameter&amp;gt;SdEventHandler/SdEventHandlerUDP/SdEventActivationRef&amp;lt;/parameter&amp;gt;
        must be configured.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1273</srcid><srcstatus/><internalId>896</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1202</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.EventHandler002</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29558</sourceline>
      <version>1</version>
      <description>
        If &amp;lt;parameter&amp;gt;SdEventHandler/SdEventHandlerMulticastThreshhold&amp;lt;/parameter&amp;gt; is != 0
        the parameter &amp;lt;parameter&amp;gt;SdEventHandler/SdEventHandlerMulticast/SdEventActivationRef&amp;lt;/parameter&amp;gt;
        must be configured.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1277</srcid><srcstatus/><internalId>897</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1203</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.EventHandler003</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29573</sourceline>
      <version>1</version>
      <description>
        If &amp;lt;parameter&amp;gt;SdEventHandler/SdEventHandlerMulticastThreshhold&amp;lt;/parameter&amp;gt; is != 0
        the parameter &amp;lt;parameter&amp;gt;SdEventHandler/SdEventHandlerMulticast/SdMulticastEventSoConRef&amp;lt;/parameter&amp;gt;
        must be configured.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1279</srcid><srcstatus/><internalId>898</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1204</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.Client001</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29588</sourceline>
      <version>1</version>
      <description>
        The parameter &amp;lt;parameter&amp;gt;SdClientServiceUdpRef&amp;lt;/parameter&amp;gt; shall reference a SoAdSocketConnectionGroup.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_363</srcid><srcstatus/><internalId>867</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1205</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.Client002</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29601</sourceline>
      <version>2</version>
      <description>
        All SoAdSocketRoutes and SoAdPduRoutes used within a SdClientService shall reference the
        SoAdSocketConnectionGroup referenced by SdClientServiceUdpRef.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/Sd.xgen_1093</srcid><srcstatus/><internalId>905</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_Different_SoAdSocketConnectionGroup</srcid><srcstatus/><internalId>1241</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1206</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.Client003</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29616</sourceline>
      <version>2</version>
      <description>
        SoadSocketConnectionGroups referenced by parameters &amp;lt;parameter&amp;gt;SdClientServiceUdpRef&amp;lt;/parameter&amp;gt; and &amp;lt;parameter&amp;gt;SdClientServiceTcpRef&amp;lt;/parameter&amp;gt;
		shall have their option SoAdSocketAutomaticSoConSetup disabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_ClientService_Unicast_TCP_AutomaticSoConSetup</srcid><srcstatus/><internalId>1258</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_ClientService_Unicast_UDP_AutomaticSoConSetup</srcid><srcstatus/><internalId>1259</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1207</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.ConsumedEventGroup001</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29630</sourceline>
      <version>1</version>
      <description>
        If SdConsumedEventGroup is used, at least one RoutingGroup must be referenced.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_478</srcid><srcstatus/><internalId>869</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1208</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.ConsumedEventGroup002</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29643</sourceline>
      <version>1</version>
      <description>
        If a SdConsumedEventGroup has one TCP RoutingGroup referenced,
        no UDP unicast RoutingGroup and no UDP Multicast RoutingGroup shall be referenced.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_479</srcid><srcstatus/><internalId>870</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1209</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.ConsumedEventGroup003</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29657</sourceline>
      <version>1</version>
      <description>
        If a SdConsumedEventGroup has one UDP unicast RoutingGroup referenced then parameter
        &amp;lt;parameter&amp;gt;SdClientServiceUdpRef&amp;lt;/parameter&amp;gt; shall reference a valid unicast UDP SoAdSocketConnectionGroup.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_480</srcid><srcstatus/><internalId>871</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1210</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.ConsumedEventGroup005</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29671</sourceline>
      <version>1</version>
      <description>
        If a SdConsumedEventGroup has one multicast RoutingGroup referenced then parameter 
        &amp;lt;parameter&amp;gt;SdConsumedEventGroupMulticastGroupRef&amp;lt;/parameter&amp;gt; shall reference a valid 
        multicast SoAdSocketConnectionGroup.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_481</srcid><srcstatus/><internalId>872</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1211</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.ConsumedEventGroup004</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29686</sourceline>
      <version>1</version>
      <description>
        The parameter &amp;lt;parameter&amp;gt;SdConsumedEventGroupAutoRequire&amp;lt;/parameter&amp;gt; shall not be enabled,
        if the parameter &amp;lt;parameter&amp;gt;SdClientServiceAutoRequire&amp;lt;/parameter&amp;gt; of the according
        ClientService is not enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_505</srcid><srcstatus/><internalId>873</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1212</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.Delay</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29701</sourceline>
      <version>1</version>
      <description>
        Every MaxDelay must be bigger than or equal to the corresponding MinDelay.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_680</srcid><srcstatus/><internalId>874</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_761</srcid><srcstatus/><internalId>875</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1557</srcid><srcstatus/><internalId>899</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1650</srcid><srcstatus/><internalId>900</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1213</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SoAd001</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29714</sourceline>
      <version>1</version>
      <description>
The HandleIds of SoConIds of SocketConnections in SocketConnectionGroups referenced by SdServerServiceTcpRef must be dense.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1168</srcid><srcstatus/><internalId>894</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1214</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SoAd002</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29727</sourceline>
      <version>1</version>
      <description>
The HandleIds of SoConIds of SocketConnections in SocketConnectionGroups referenced by SdServerServiceUdpRef must be dense.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_1198</srcid><srcstatus/><internalId>895</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1215</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance001</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29740</sourceline>
      <version>1</version>
      <description>
The SdInstanceMulticastRxPdu/SdRxPduId shall be set to (2 * Sd Instance Index).
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_885</srcid><srcstatus/><internalId>876</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1216</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance002</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29753</sourceline>
      <version>1</version>
      <description>
The SdInstanceUnicastRxPdu/SdRxPduId shall be set to (2 * Sd Instance Index) + 1.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_957</srcid><srcstatus/><internalId>883</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1217</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance003</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29766</sourceline>
      <version>1</version>
      <description>
The SdInstanceTxPdu/SdTxPduRef shall reference a valid SoAd transmit PDU.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_932</srcid><srcstatus/><internalId>880</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1218</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance006</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29779</sourceline>
      <version>1</version>
      <description>
The Pdu referenced by SdInstanceTxPdu/SdTxPduRef shall be referenced by exactly one SoAdPduRoute.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_MultipleReferences_SdInstanceTxPdu</srcid><srcstatus/><internalId>1242</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1219</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance004</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29792</sourceline>
      <version>1</version>
      <description>
The SdInstanceMulticastRxPdu/SdRxPduRef shall reference a valid and unique SoAd receive PDU.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_906</srcid><srcstatus/><internalId>877</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_MultipleReferences_SdInstanceMulticastRxPdu</srcid><srcstatus/><internalId>1244</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1220</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance007</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29806</sourceline>
      <version>1</version>
      <description>
The Pdu referenced by SdInstanceMulticastRxPdu/SdRxPduRef shall be referenced by exactly one multicast SoAdSocketRoute.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_UnicastPath_MulticastAddressType</srcid><srcstatus/><internalId>1250</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1221</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance005</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29819</sourceline>
      <version>1</version>
      <description>
The SdInstanceUnicastRxPdu/SdRxPduRef shall reference a valid and unique SoAd receive PDU.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Sd.xdm.m4_982</srcid><srcstatus/><internalId>884</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_MultipleReferences_SdInstanceUnicastRxPdu</srcid><srcstatus/><internalId>1243</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1222</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance008</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29833</sourceline>
      <version>1</version>
      <description>
The Pdu referenced by SdInstanceUnicastRxPdu/SdRxPduRef shall be referenced by exactly one unicast SoAdSocketRoute.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_MulticastPath_UnicastAddressType</srcid><srcstatus/><internalId>1249</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1223</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance009</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29846</sourceline>
      <version>1</version>
      <description>
The SoAdSocketConnectionGroup used for the unicast Sd control path and referenced by SdInstanceUnicastRxPdu/SdRxPduRef shall be configured for manual setup.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_Unicast_SoAdSocketAutomaticSoConSetup</srcid><srcstatus/><internalId>1245</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1224</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance010</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29859</sourceline>
      <version>1</version>
      <description>
The SoAdSocketConnectionGroup used for the unicast Sd control path and referenced by SdInstanceUnicastRxPdu/SdRxPduRef shall be configured for address assignment change notifications.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_Unicast_SoAdSocketIpAddrAssignmentChgNotification</srcid><srcstatus/><internalId>1246</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1225</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance011</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29872</sourceline>
      <version>1</version>
      <description>
The SoAdSocketConnectionGroup used for the multicast Sd control path and referenced by SdInstanceMulticastRxPdu/SdRxPduRef shall be configured for manual setup.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_Multicast_SoAdSocketAutomaticSoConSetup</srcid><srcstatus/><internalId>1247</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1226</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance012</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29885</sourceline>
      <version>1</version>
      <description>
The SoAdSocketConnectionGroup used for the multicast Sd control path and referenced by SdInstanceMulticastRxPdu/SdRxPduRef shall be configured for address assignment change notifications.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_Multicast_SoAdSocketIpAddrAssignmentChgNotification</srcid><srcstatus/><internalId>1248</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1227</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance013</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29898</sourceline>
      <version>1</version>
      <description>
SoAdSocketConnectionGroup used for unicast Sd control path and referenced by SdInstanceUnicastRxPdu/SdRxPduRef shall not have the option SoAdSocketUdpAliveSupervisionTimeout enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_Unicast_UdpAliveTimeout</srcid><srcstatus/><internalId>1262</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1228</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance014</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29911</sourceline>
      <version>1</version>
      <description>
SoAdSocketConnectionGroup used for multicast Sd control path and referenced by SdInstanceMulticastRxPdu/SdRxPduRef shall not have the option SoAdSocketUdpAliveSupervisionTimeout enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_Multicast_UdpAliveTimeout</srcid><srcstatus/><internalId>1263</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1229</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance015</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29924</sourceline>
      <version>1</version>
      <description>
SoAdPduRoute/SoAdPduRouteDest used for sending Sd control messages and referenced by SdInstanceTxPdu/SdTxPduRef shall have the option SoAdTxPduHeaderId set to the value 0xFFFF8100.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_TxPduRef_HeaderId</srcid><srcstatus/><internalId>1264</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1230</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance016</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29937</sourceline>
      <version>1</version>
      <description>
SoAdSocketConnectionGroup used for sending Sd control messages and referenced by SdInstanceTxPdu/SdTxPduRef shall not have the option SoAdSocketUdpRetryEnabled enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_TxPduRef_UdpRetryEnabled</srcid><srcstatus/><internalId>1265</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1231</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance017</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29950</sourceline>
      <version>1</version>
      <description>
SoAdSocketConnectionGroup used for sending Sd control messages and referenced by SdInstanceTxPdu/SdTxPduRef shall not have the option SoAdSocketUdpListenOnly enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_TxPduRef_UdpListenOnly</srcid><srcstatus/><internalId>1266</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1232</internalId></specobject>
    <specobject>
      <id>Sd.EB.Config.SdInstance018</id>
      <status>approved</status>
      <source>&lt;source/&gt;</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/doc/project/design/pdf/SD_Design-profiled.xml</sourcefile>
      <sourceline>29962</sourceline>
      <version>1</version>
      <description>
SoAdRxSocketConnOrSocketConnBundleRef of used unicast Tx and Rx Sd control path shall be configured to a socket connection.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_Sd_GenTest_01_TxPduRef_PduRouteDest_Ref_Group_Not_SingleConn</srcid><srcstatus/><internalId>1286</internalId></linkedfrom><linkedfrom><srcid>TS_Sd_GenTest_01_RxPduRef_SoAdRxSocketConnOrSocketConnBundleRef_Group_Not_SingleConn</srcid><srcstatus/><internalId>1287</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1233</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_DBGINST_001</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/common_req/Sd_DbgInst_Trace_APIs.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
   Test Dbg
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  VP: Successful compilation test.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.DBGINST001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.DBGINST002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.DBGINST003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.DBGINST004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>654</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.DBGINST005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>655</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1234</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_VerifyCodeStub</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/build/reqm/common_req/Sd_VerifyStub_testspec.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the code stub of the module is consistent with the
    implementation.
  
Test Object: 
    Relocatable post-build configuration macros generation.
  
Test Precondition: 
    Permutation [VerifyStub == true]:
      - Unit test contains its own code stub
      - Module is excluded from generation and compilation
    Permutation [VerifyStub == false]:
      - unit test excludes its own code stub
  
Test Execution: 
    01: Invoke all module APIs
    02: VP(Sd.EB.Interface.Consistency):
        Unit test compiles (implicitly tested)
  
Test Input: 
  
Test Output: 
    Test is correctly generated and compiled.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Interface.Consistency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>657</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1235</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_ComTest_02_SchM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_ComTest_02_SchM/source/application/Test.c</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   This test checks that the Sd module's generator generates a
   syntactically and semantically valid basic software module
   description (BSWMD) when the generator mode "generate_swcd" is
   invoked. It further tests that the SchM exclusive area API is
   correctly generated by the RTE generator based on the Sd module's
   generated BSWMD.

Test Object: 

Test Precondition: 

Test Execution: 
  Ts5 build environment steps:
    The module configuration generator produces the BSWMD containing
    the information on the required exclusive areas.  This information
    is then used by the RTE generator to create the required SchM API
    for these exclusive areas. This implicitly verifies that the BSWMD
    is syntactically and semantically correct.  Sd's static code
    makes use of this API (and the respective #defines) thus causing
    compile/link errors if the BSWMD does not contain the correct
    information.

Test Input: 
  Usage of a common ASR configuration having all adjacent ASR modules
  configured.

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.BSWMDGeneration_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>587</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.BSWMDGeneration_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>588</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.BSWMDGeneration_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>589</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1236</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_ComTest_03_HandleIdGenerator</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_ComTest_03_HandleIdGenerator/source/application/Test.c</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      This test checks that invoking the handle ID autocalc wizard
      creates a valid configuration (i.e., a configuration adhering to
      the constraints of the module's generator (e.g., zero-based,
      dense, and unique)) out of an invalid configuration (i.e., a
      configuration violating the constraints of the module's
      generator (e.g., not zero-based, not dense, and not unique)).

      The handle IDs for the following parameters are checked by this
      test:
        - SdServerServiceHandleId
        - SdEventHandlerHandleId
        - SdClientServiceHandleId
        - SdConsumedEventGroupHandleId
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: None.
Test Execution: 
      VP: The test is successful when the Sd compiles with all specified API functions.
  
Test Input: 
    Configuration with deliberately wrong handle IDs (non
    zero-based, not dense, and not unique).
  
Test Output: 
    Binary file.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.HandleIdGenerator</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>590</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1237</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_Com_01_PostBuildSelectable</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_ComTest_04_PostBuildSelectable/source/application/Sd_tests.c</sourcefile>
      <sourceline>15</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that when PostBuildSelectable is enabled the generated files are the same
  as expected. The expected files have been place in the directory reference and if there is
  no difference at all between the generated post build configuration files and those from the directory
  reference this test will be successful.

Test Object: PostBuildSelectable ServerService AutoAvailable
Test Precondition: 
  Expected postbuild configuration files have been placed in directory reference.
  Postbuild selectable is enabled.

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PBSelectable.FileName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>593</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBSelectable.Master</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1238</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Sd_ComTest_NoPBCfg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_ComTest_NoPBCfg/source/application/Sd_ComTest_NoPBCfg.c</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall prove that that Sd can compile without any post build information.
  
Test Object: 
    Compile test
  
Test Precondition: 
    * Set TS_SD_COMPILE_WITH_POSTBUILD to FALSE in the merged make file to prevent the
      compilation of the post build C file.
    * The merged make file holds a rule which removes all post build files after generation.
  
Test Execution: 
    The test run is successful when the Sd compiles under sticking to the precondition.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PostBuild_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1239</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Sd_Test_PBcfgM_Off</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_ComTest_PbcfgMOff/source/application/Sd_ComTest_PbcfgMOff.c</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Verify that if PbcfgM support is disabled then Sd_PBcfg.c shall define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
      SD_PBCFGM_SUPPORT_ENABLED shall be set to STD_OFF.
      SD_RELOCATABLE_CFG_ENABLE shall be set to STD_OFF.
    
Test Object: None.
Test Precondition: 
      - PbcfgM configuration does not refer to module Sd (or no config exists)
      - Include Sd_PBcfg.c only for step 01 and 02.
      - Include Sd_Cfg.h for step 03.
    
Test Execution: 
        01: VP(Sd.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exists.
        02: VP(Sd.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME has the value
            Sd_ConfigLayoutType and SD_CONFIG_NAME respectively.
        03: VP (Sd.EB.PBCFGM107):
            Verify that SD_PBCFGM_SUPPORT_ENABLED is set to STD_OFF.
        04: VP(Sd.EB.PBCFGM108, Sd.EB.RelocatablePBCfg):
            SD_RELOCATABLE_CFG_ENABLE shall be STD_OFF
    
Test Input: 
    
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>619</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>615</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>607</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1240</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_GenTest_01_Different_SoAdSocketConnectionGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>28</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If the Unicast PDUs are not in the same SoAdSocketConnectionGroup
    the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.Client002): The generator shall report a warning which says that the
    Unicast PDUs are not in same SoAdSocketConnectionGroup TcpIp address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Client002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1241</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_MultipleReferences_SdInstanceTxPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    If Pdu referenced by SdInstanceTxPdu/SdTxPduRef is referenced by more then one SoAdPduRoute
    the generator shall stop and raise an error message.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance006): The generator shall report an error which says that Pdu referenced by SdInstanceTxPdu
    must be referenced by exactly one SoAdPduRoute.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1242</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_MultipleReferences_SdInstanceUnicastRxPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    If Pdu referenced by SdInstanceUnicastRxPdu/SdRxPduRef is referenced by more then one
    SoAdSocketRoute the generator shall stop and raise an error message.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance005): The generator shall report an error which says that Pdu referenced by SdInstanceUnicastRxPdu
    must be referenced by exactly one SoAdSocketRoute.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1243</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_MultipleReferences_SdInstanceMulticastRxPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>89</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If Pdu referenced by SdInstanceMulticastRxPdu/SdRxPduRef is referenced by more then one
    SoAdSocketRoute the generator shall stop and raise an error message.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance004): The generator shall report an error which says that Pdu referenced by
    SdInstanceMulticastRxPdu must be referenced by exactly one SoAdSocketRoute.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1244</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Unicast_SoAdSocketAutomaticSoConSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>109</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If SoAdSocketAutomaticSoConSetup is not set to false for unicast Sd control path
    the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance009): The generator shall report a warning which says that the SoAdSocketConnectionGroup
    used for unicast Sd control path should be configured for manual setup.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1245</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Unicast_SoAdSocketIpAddrAssignmentChgNotification</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>129</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If SoAdSocketIpAddrAssignmentChgNotification is not set to true for unicast Sd control
    path the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance010): The generator shall report a warning which says that the SoAdSocketConnectionGroup
    used for unicast Sd control path should be configured for address assignment
    change notifications.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1246</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Multicast_SoAdSocketAutomaticSoConSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>150</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If SoAdSocketAutomaticSoConSetup is not set to false for multicast Sd control path
    the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance011): The generator shall report a warning which says that the SoAdSocketConnectionGroup
    used for multicast Sd control path should be configured for manual setup.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1247</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Multicast_SoAdSocketIpAddrAssignmentChgNotification</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If SoAdSocketIpAddrAssignmentChgNotification is not set to true for multicast Sd control
    path the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance012): The generator shall report a warning which says that the SoAdSocketConnectionGroup
    used for multicast Sd control path should be configured for address assignment
    change notifications.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1248</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_MulticastPath_UnicastAddressType</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>191</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If a SoAdSocketConnectionGroup used for a multicast Sd control path is configured as
    unicast, the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance008): The generator shall report a warning which says that the SoAdSocketConnectionGroup
    used for the multicast Sd control path should be configured with a multicast
    TcpIp address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1249</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_UnicastPath_MulticastAddressType</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>212</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If a SoAdSocketConnectionGroup used for a unicast Sd control path is configured as
    multicast, the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance007): The generator shall report a warning which says that the SoAdSocketConnectionGroup
    used for the unicast Sd control path should be configured with a unicast
    TcpIp address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1250</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ServerService_Unicast_UDP_RoutingGroup_Specific</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>233</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    UDP unicast Routing group reference used for a Server Service's event handler
    has to be a specific routing group. If the configured routing group is global, 
    the generator shall raise an error.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.SWS_SD_00454): The generator shall report a error to indicate that 
    the routing group referenced in SdEventActivationRef and SdEventTriggeringRef has to be specific.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1251</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ServerService_Unicast_TCP_RoutingGroup_Specific</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>254</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    TCP unicast Routing group reference used for a Server Service's event handler
    has to be a specific routing group. If the configured routing group is global, 
    the generator shall raise an error.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.SWS_SD_00454): The generator shall report a error to indicate that 
    the routing group referenced in SdEventActivationRef and SdEventTriggeringRef has to be specific.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1252</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ServerService_Multicast_RoutingGroup_Specific</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Multicast Routing group reference used for a Server Service's event handler
    has to be a specific routing group. If the configured routing group is global, 
    the generator shall raise an error.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.SWS_SD_00455): The generator shall report a error to indicate that 
    the routing group referenced in SdEventActivationRef has to be specific.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00455</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1253</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ClientService_Unicast_UDP_RoutingGroup_Specific</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>296</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    UDP unicast Routing group reference used for a Client Service's consumed event group
    has to be a specific routing group. If the configured routing group is global, 
    the generator shall raise an error.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.SWS_SD_00703): The generator shall report a error to indicate that 
    the routing group referenced in SdConsumedEventGroupTCPActivationRef has to be specific.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00703</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1254</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ClientService_Unicast_TCP_RoutingGroup_Specific</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>317</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    TCP unicast Routing group reference used for a Client Service's consumed event group
    has to be a specific routing group. If the configured routing group is global, 
    the generator shall raise an error.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.SWS_SD_00703): The generator shall report a error to indicate that 
    the routing group referenced in SdConsumedEventGroupTCPActivationRef has to be specific.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00703</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1255</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ClientService_Multicast_RoutingGroup_Specific</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>338</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Multicast Routing group reference used for a Client Service's consumed event group
    has to be a specific routing group. If the configured routing group is global, 
    the generator shall raise an error.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.SWS_SD_00704): The generator shall report a error to indicate that 
    the routing group referenced in SdConsumedEventGroupMulticastActivationRef has to be specific.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00704</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1256</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ClientService_Method_RoutingGroup_Specific</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>359</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Routing group reference used for a Client Service's consumed method
    has to be a specific routing group. If the configured routing group is global, 
    the generator shall raise an error.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.SWS_SD_00464): The generator shall report a error to indicate that 
    the routing group referenced in SdConsumedMethod/SdClientServiceActivationRef has to be specific.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1257</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ClientService_Unicast_TCP_AutomaticSoConSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>380</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Routing group reference used for a Client Service's consumed method
    has to be a specific routing group. If the configured routing group is global, 
    the generator shall raise an error.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.Client003): The generator shall report a error to indicate that 
    the option SoAdSocketAutomaticSoConSetup in the SoAdSocketConnectionGroup 
    referenced in SdClientServiceTcpRef has to be specific.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Client003</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1207</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1258</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ClientService_Unicast_UDP_AutomaticSoConSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>402</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Routing group reference used for a Client Service's consumed method
    has to be a specific routing group. If the configured routing group is global, 
    the generator shall raise an error.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.Client003): The generator shall report a error to indicate that 
    the option SoAdSocketAutomaticSoConSetup in the SoAdSocketConnectionGroup 
    referenced in SdClientServiceUdpRef has to be specific.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Client003</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1207</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1259</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ServerService_Unicast_TCP_AutomaticSoConSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>424</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Routing group reference used for a Client Service's consumed method
    has to be a specific routing group. If the configured routing group is global, 
    the generator shall raise an error.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.Server003): The generator shall report a error to indicate that 
    the option SoAdSocketAutomaticSoConSetup in the SoAdSocketConnectionGroup 
    referenced in SdServerServiceTcpRef has to be specific.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Server003</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1260</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ServerService_Unicast_UDP_AutomaticSoConSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>446</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Routing group reference used for a Client Service's consumed method
    has to be a specific routing group. If the configured routing group is global, 
    the generator shall raise an error.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.Server003): The generator shall report a error to indicate that 
    the option SoAdSocketAutomaticSoConSetup in the SoAdSocketConnectionGroup 
    referenced in SdServerServiceUdpRef has to be specific.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.Server003</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1261</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Unicast_UdpAliveTimeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>468</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If SoAdSocketUdpAliveSupervisionTimeout is not disabled for unicast Sd control
    path the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance013): The generator shall report a warning which says that SoAdSocketConnectionGroup 
    used for unicast Sd control path shall not have the option SoAdSocketUdpAliveSupervisionTimeout enabled.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1228</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1262</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Multicast_UdpAliveTimeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>488</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If SoAdSocketUdpAliveSupervisionTimeout is not disabled for multicast Sd control path
    the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance014): The generator shall report a warning which says that SoAdSocketConnectionGroup 
    used for multicast Sd control path shall not have the option SoAdSocketUdpAliveSupervisionTimeout enabled.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1263</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_TxPduRef_HeaderId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>508</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    If SoAdTxPduHeaderId is not enabled and set to the value 0xFFFF8100 for the SoAdPduRoute/SoAdPduRouteDest referenced by SdInstanceTxPdu/SdTxPduRef
    the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance015): The generator shall report a error to indicate that 
    the option SoAdTxPduHeaderId in the SoAdPduRoute/SoAdPduRouteDest referenced by SdInstanceTxPdu/SdTxPduRef
    has to be enabled and set to value 0xFFFF8100.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1264</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_TxPduRef_UdpRetryEnabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>529</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If SoAdSocketUdpRetryEnabled is enabled for the SoAdSocketConnectionGroup referenced by SdInstanceTxPdu/SdTxPduRef
    the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance016): The generator shall report an error to indicate that SoAdSocketConnectionGroup 
    referenced by SdInstanceTxPdu/SdTxPduRef shall have the option SoAdSocketUdpRetryEnabled disabled.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1265</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_TxPduRef_UdpListenOnly</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>549</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If SoAdSocketUdpListenOnly is enabled for the SoAdSocketConnectionGroup referenced by SdInstanceTxPdu/SdTxPduRef
    the generator shall raise a warning.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Config.SdInstance017): The generator shall report an error to indicate that SoAdSocketConnectionGroup 
    referenced by SdInstanceTxPdu/SdTxPduRef shall have the option SoAdSocketUdpListenOnly disabled.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1266</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Eventhandler_Unicast_UDP_RoutingGroup_Header_Id</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>569</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If an unicast UDP eventhandler routing group refers to a PDU route whose Pdu Header Id Service Id
    is not equal to the server service Id in which this event handler is contained, a warning to 
    indicate it shall be generated.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Consistency.SoAdHeaderId.SdServiceId): The generator shall report a warning which says that 
    the header id of at least one PDU of the routing group is not consistent with the service id.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Consistency.SoAdHeaderId.SdServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1267</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Eventhandler_TCP_RoutingGroup_Header_Id</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>590</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If a TCP eventhandler routing group refers to a PDU route whose Pdu Header Id Service Id
    is not equal to the server service Id in which this event handler is contained, a warning to 
    indicate it shall be generated.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Consistency.SoAdHeaderId.SdServiceId): The generator shall report a warning which says that 
    the header id of at least one PDU of the routing group is not consistent with the service id.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Consistency.SoAdHeaderId.SdServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1268</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Eventhandler_Multicast_RoutingGroup_Header_Id</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>611</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If a multicast eventhandler routing group refers to a PDU route whose Pdu Header Id Service Id
    is not equal to the server service Id in which this event handler is contained, a warning to 
    indicate it shall be generated.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Consistency.SoAdHeaderId.SdServiceId): The generator shall report a warning which says that 
    the header id of at least one PDU of the routing group is not consistent with the service id.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Consistency.SoAdHeaderId.SdServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1269</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Provided_Method_RoutingGroup_Header_Id</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>632</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If a provided method routing group refers to a PDU route whose Pdu Header Id Service Id
    is not equal to the server service Id in which this provided method is contained, 
    a warning to indicate it shall be generated.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Consistency.SoAdHeaderId.SdServiceId): The generator shall report a warning which says that 
	the header id of at least one PDU of the routing group is not consistent with the service id.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Consistency.SoAdHeaderId.SdServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1270</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Consumed_EventGroup_Unicast_UDP_RoutingGroup_Header_Id</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>653</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If an unicast UDP consumed event group routing group refers to a PDU route whose Pdu Header Id Service Id
    is not equal to the server service Id in which this event handler is contained, a warning to 
    indicate it shall be generated.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Consistency.SoAdHeaderId.SdServiceId): The generator shall report a warning which says that 
    the header id of at least one PDU of the routing group is not consistent with the service id.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Consistency.SoAdHeaderId.SdServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1271</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Consumed_EventGroup_TCP_RoutingGroup_Header_Id</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>674</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If a TCP consumed event group routing group refers to a PDU route whose Pdu Header Id Service Id
    is not equal to the server service Id in which this event handler is contained, a warning to 
    indicate it shall be generated.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Consistency.SoAdHeaderId.SdServiceId): The generator shall report a warning which says that 
    the header id of at least one PDU of the routing group is not consistent with the service id.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Consistency.SoAdHeaderId.SdServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1272</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Consumed_EventGroup_Multicast_RoutingGroup_Header_Id</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>695</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If a multicast consumed event group routing group refers to a PDU route whose Pdu Header Id Service Id
    is not equal to the server service Id in which this event handler is contained, a warning to 
    indicate it shall be generated.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Consistency.SoAdHeaderId.SdServiceId): The generator shall report a warning which says that 
    the header id of at least one PDU of the routing group is not consistent with the service id.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Consistency.SoAdHeaderId.SdServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1273</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_Consumed_Method_RoutingGroup_Header_Id</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>716</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If a consumed method routing group refers to a PDU route whose Pdu Header Id Service Id
    is not equal to the server service Id in which this provided method is contained, 
    a warning to indicate it shall be generated.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Consistency.SoAdHeaderId.SdServiceId): The generator shall report a warning which says that 
    the header id of at least one PDU of the routing group is not consistent with the service id.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Consistency.SoAdHeaderId.SdServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1274</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_MulticastThreshold_One_No_Unicast_UDP_Reference</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>737</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    If multicast threshold of an event handler is set to 1, then it is not necessary to configure an UDP unicast SdEventHandlerUdp/SdEventActivationRef 
    because this event handler is sent out over multicast only.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.MulticastThresholdOne.NoUnicastUDP_Ref): The generator shall report a warning which says that 
    the header id of at least one PDU of the routing group is not consistent with the service id.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.MulticastThresholdOne.NoUnicastUDP_Ref</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>627</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1275</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_ConsumedEventGroup_MulticastRef_No_Multicast_RoutingGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>757</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    If a consumed event group has a configured reference to a multicast SoAdSocketConnection it should also have a configured multicast routing group.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.ConsumedEventGroup_MulticastRef.NoMulticast_RoutingGroup): The generator shall report a warning which says that 
    a consumed event group which has a configured reference to a multicast SoAdSocketConnection it shall have a configured multicast routing group.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.ConsumedEventGroup_MulticastRef.NoMulticast_RoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1276</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_SD_Control_Unicast_TxRx_PDU_Reference</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>776</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    SoAdSocketConnectionGroup referenced by SdInstanceTxPdu/SdTxPduRef shall have only one socket connection.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Control.Unicast.TxRx_PDU.Reference): The generator shall report an error to indicate that 
    SoAdSocketConnectionGroup referenced by SdInstanceTxPdu/SdTxPduRef shall have only one socket connection.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Control.Unicast.TxRx_PDU.Reference</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>629</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1277</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_SD_Max_Instance_Count_Exceeded</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>795</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Number of defined instances in the configuration exceeds the value with maximum number of instances.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Maximum.Number.Instances): The generator shall report an error to indicate that 
    the total number of configured instances exceeds the maximum allowed number.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Maximum.Number.Instances</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>630</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1278</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_SD_Max_ClientService_Count_Exceeded</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>814</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Number of defined client services in the configuration exceeds the value with maximum number of client services.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Maximum.Number.Client.Services): The generator shall report an error to indicate that 
    the total number of configured client services exceeds the maximum allowed number.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Maximum.Number.Client.Services</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>631</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1279</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_SD_Max_ServerService_Count_Exceeded</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>833</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Number of defined server services in the configuration exceeds the value with maximum number of server services.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Maximum.Number.Server.Services): The generator shall report an error to indicate that 
    the total number of configured server services exceeds the maximum allowed number.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Maximum.Number.Server.Services</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>632</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1280</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_SD_Max_ClientServiceEventGroups_Count_Exceeded</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>852</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Number of defined client service event groups in the configuration exceeds the value with maximum number of client service eventgroups.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Maximum.Number.Client.Service.EventGroups): The generator shall report an error to indicate that 
    the total number of configured client service event groups exceeds the maximum allowed number.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Maximum.Number.Client.Service.EventGroups</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>633</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1281</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_SD_Max_ServerServiceEvents_Count_Exceeded</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>871</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Number of defined server service events in the configuration exceeds the value with maximum number of server service events.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Maximum.Number.Server.Service.Events): The generator shall report an error to indicate that 
    the total number of configured server services events exceeds the maximum allowed number.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Maximum.Number.Server.Service.Events</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1282</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_SD_Max_ConsumedEventGroupMulticastReferences_Exceeded</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>890</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Number of defined consumed event group multicast references in the configuration exceeds the number of consumed event groups.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Maximum.Number.Consumed.EventGroups.Multicast.References): The generator shall report an error to indicate that the number 
    of defined consumed event group multicast references in the configuration exceeds the number of consumed event groups.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Maximum.Number.Consumed.EventGroups.Multicast.References</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>635</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1283</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_SdSubscribeEventgroupRetryMax_Not_Zero_SdSubscribeEventgroupRetryDelay_Enabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>909</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Parameter SdSubscribeEventgroupRetryDelay shall be enabled if SdSubscribeEventgroupRetryMax has a value different to 0.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.Maximum.Number.Retries): The generator shall report an error to indicate that if the number
    of maximum retries is set to a value different to 0 then retry of subscription delay timer has to be enabled.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Maximum.Number.Retries</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1284</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_VersionDrivenFindBehavior_MinimumMinorVersion_MinorVersion_MaximumValue</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>928</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    If parameter SdVersionDrivenFindBehavior has the value MINIMUM_MINOR_VERSION Minor Version should not have the maximum value 4294967295.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(Sd.EB.VersionDrivenFindBehavior.MinimumMinorVersion.MinorVersion.MaximumValue): The generator shall report a warning to indicate that 
    if parameter SdVersionDrivenFindBehavior has the value MINIMUM_MINOR_VERSION then Minor Version should not have the maximum value 4294967295.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.VersionDrivenFindBehavior.MinimumMinorVersion.MinorVersion.MaximumValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1285</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_TxPduRef_PduRouteDest_Ref_Group_Not_SingleConn</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>947</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    If the SoAdSocketConnectionGroup referenced by SdInstanceTxPdu is not a socket connection the generator shall report an error: SoAdTxSocketConnOrSocketConnBundleRef of used unicast Tx and Rx Sd control path shall be configured to a socket connection.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(): The generator shall report a error:SoAdTxSocketConnOrSocketConnBundleRef of used unicast Tx and Rx Sd control path shall be configured to a socket connection. 
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1286</internalId></specobject>
    <specobject>
      <id>TS_Sd_GenTest_01_RxPduRef_SoAdRxSocketConnOrSocketConnBundleRef_Group_Not_SingleConn</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Compile/IN/Sd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>965</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    If the SoAdSocketConnectionGroup referenced by SdInstanceRxPdu is not a socket connection the generator shall report an error: SoAdRxSocketConnOrSocketConnBundleRef of used unicast Tx and Rx Sd control path shall be configured to a socket connection.
  
Test Object: config generator
Test Precondition: 
  
Test Execution: 
    VP(): The generator shall report a error:SoAdRxSocketConnOrSocketConnBundleRef of used unicast Tx and Rx Sd control path shall be configured to a socket connection. 
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Config.SdInstance018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1287</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_MainFctCall_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>66</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  verify Sd Main function call prior to Sd initialization triggers no Det entry
&lt;/para&gt;

Test Object: 
  Sd_MainFunction()

Test Precondition: 
  Sd_Init was not called before.

Test Execution: 
  01: call Sd_MainFunction
  02 VP(Sd.EB.ASCCCB1403): no Det entry

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.ASCCCB1403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>591</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1288</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>108</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of Sd_ServerServiceSetState() in development mode if the Sd module is not
  initialized. I.e.
  - if error code SD_E_NOT_INITALIZED is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  Sd_ServerServiceSetState()

Test Precondition: 
  Sd_Init was not called before.

Test Execution: 
  01: call Sd_ServerServiceSetState with valid parameters.
  02 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  03 VP(Sd.SWS_SD_00122): API call detects Sd is not initialized
  04 VP(Sd.SWS_SD_00407): Det is called with error code SD_E_NOT_INITALIZED.
  05 VP(Sd.SWS_SD_00407): Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00407</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>315</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1289</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>172</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of Sd_ClientServiceSetState() in development mode if the Sd module is not
  initialized. I.e.
  - if error code SD_E_NOT_INITALIZED is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  Sd_ClientServiceSetState()

Test Precondition: 
  Sd_Init was not called before.

Test Execution: 
  01: call Sd_ClientServiceSetState with valid parameters.
  02 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  03 VP(Sd.SWS_SD_00122): API call detects Sd is not initialized
  04 VP(Sd.SWS_SD_00410): Det is called with error code SD_E_NOT_INITALIZED.
  05 VP(Sd.SWS_SD_00410): Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00410</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>318</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1290</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>236</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of Sd_ConsumedEventGroupSetState() in development mode if the Sd module is not
  initialized. I.e.
  - if error code SD_E_NOT_INITALIZED is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  Sd_ConsumedEventGroupSetState()

Test Precondition: 
  Sd_Init was not called before.

Test Execution: 
  01: call Sd_ConsumedEventGroupSetState with valid parameters.
  02 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  03 VP(Sd.SWS_SD_00122): API call detects Sd is not initialized
  04 VP(Sd.SWS_SD_00469): Det is called with error code SD_E_NOT_INITALIZED.
  05 VP(Sd.SWS_SD_00469): Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00469</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>374</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1291</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>300</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of Sd_LocalIpAddrAssignmentChg() in development mode if the Sd module is not
  initialized. I.e.
  - if error code SD_E_NOT_INITALIZED is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  Sd_LocalIpAddrAssignmentChg()

Test Precondition: 
  Sd_Init was not called before.

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg with valid parameters.
  02 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  03 VP(Sd.SWS_SD_00122): API call detects Sd is not initialized.
  04 VP(Sd.SWS_SD_00471): Det is called with error code SD_E_NOT_INITALIZED.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00471</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>376</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1292</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_RxIndication_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>359</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of Sd_RxIndication() in development mode if the Sd module is not
  initialized. I.e.
  - if error code SD_E_NOT_INITALIZED is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  Sd_RxIndication()

Test Precondition: 
  Sd_Init was not called before.

Test Execution: 
  01: call Sd_RxIndication with valid parameters.
  02 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  03 VP(Sd.SWS_SD_00122): API call detects Sd is not initialized
  04 VP(Sd.SWS_SD_00473): Det is called with error code SD_E_NOT_INITALIZED.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00473</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1293</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Init_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>418</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  Sd_Init is called with parameter ConfigPtr equal to NULL_PTR. I.e.
  - if error code SD_E_INV_POINTER is reported to the Det_ReportError service
&lt;/para&gt;

Test Object: 
  Sd_Init()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_Init with ConfigPtr equal to NULL_PTR.
  02 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  03 VP(Sd.EB.Sd_Init_NULL_PTR): Det is called with error code SD_E_INV_POINTER.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Sd_Init_NULL_PTR</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>592</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1294</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_GetVersionInfo_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>473</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  Sd_GetVersionInfo is called with parameter versioninfo equal to NULL_PTR. I.e.
  - if error code SD_E_INV_POINTER is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  Sd_GetVersionInfo()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_GetVersionInfo with versioninfo equal to NULL_PTR.
  02 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  03 VP(Sd.SWS_SD_00497): Det is called with error code SD_E_INV_POINTER.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00497</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1295</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_RxIndication_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>524</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  Sd_RxIndication is called with parameter PduInfoPtr equal to NULL_PTR. I.e.
  - if error code SD_E_INV_POINTER is reported to the Det_ReportError service
&lt;/para&gt;

Test Object: 
  Sd_RxIndication()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_RxIndication with PduInfoPtr equal to NULL_PTR.
  02 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  03 VP(Sd.SWS_SD_00475): Det is called with error code SD_E_INV_POINTER.
  04: call Sd_RxIndication with PduInfoPtr.SduDataPtr member equal to NULL_PTR.
  05 VP(Sd.SWS_SD_00475): Det is called with error code SD_E_INV_POINTER.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00475</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1296</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_RxIndication_InvRxPduId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>597</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  Sd_RxIndication is called with parameter RxPduId undefined value. I.e.
  - if error code SD_E_INV_ID is reported to the Det_ReportError service
&lt;/para&gt;

Test Object: 
  Sd_RxIndication()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_RxIndication with RxPduId undefined value.
  02 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  03 VP(Sd.SWS_SD_00474): Det is called with error code SD_E_INV_ID.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00474</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>379</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1297</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_InvMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>668</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  Sd_ServerServiceSetState is called with parameter ServerServiceState equal to 0x1234U. I.e.
  - if error code SD_E_INV_MODE is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  Sd_ServerServiceSetState()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_ServerServiceSetState with ServerServiceState parameter equal to valid values
  02 VP(Sd.SWS_SD_00408): function call returns E_OK
  03 VP(Sd.SWS_SD_00408): if Det is enabled, function call does not triggers Det
  04: call Sd_ServerServiceSetState with ServerServiceState parameter equal to invalid values
  05 VP(Sd.SWS_SD_00408): function call returns E_NOT_OK
  06 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  07 VP(Sd.SWS_SD_00408): check function call triggers Det correctly

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00408</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>316</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1298</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_ServerServiceSetState_InvHandleId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>755</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  Sd_ServerServiceSetState is called with parameter SdServerServiceHandleId equal to invalid value
  I.e.:
  - if error code SD_E_INV_ID is reported to the Det_ReportError service and
  - with correct SVCID
&lt;/para&gt;

Test Object: 
  Sd_ServerServiceSetState()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_ServerServiceSetState with SdServerServiceHandleId equal to invalid values
  02 VP(Sd.SWS_SD_00607): Sd_ServerServiceSetState returns E_NOT_OK
  03 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  04 VP(Sd.SWS_SD_00607): Det is called with error code SD_E_INV_ID and correct SVCID

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00607</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>426</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1299</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_InvMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>833</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  Sd_ClientServiceSetState is called with parameter ClientServiceState equal to 0x1234U. I.e.
  - if error code SD_E_INV_MODE is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  Sd_ClientServiceSetState()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_ClientServiceSetState with ClientServiceMode parameter equal to valid values
  02 VP(Sd.SWS_SD_00411): function call returns E_OK
  03 VP(Sd.SWS_SD_00411): if Det is enabled, function call does not triggers Det
  04: call Sd_ClientServiceSetState with ClientServiceMode parameter equal to invalid values
  05 VP(Sd.SWS_SD_00411): function call returns E_NOT_OK
  06 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  07 VP(Sd.SWS_SD_00411): check function call triggers Det correctly

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00411</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>319</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1300</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_ClientServiceSetState_InvHandleId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>914</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  Sd_ClientServiceSetState is called with parameter ClientServiceInstanceId equal to SDTESTLIB_SD_CLIENT_SERVICE_INVALID_HANDLEID. I.e.
  - if error code SD_E_INV_ID is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  Sd_ClientServiceSetState()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_ClientServiceSetState with ClientServiceInstanceId equal to SDTESTLIB_SD_CLIENT_SERVICE_INVALID_HANDLEID.
  02 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  03 VP(Sd.SWS_SD_00608): Det is called with error code SD_E_INV_ID
  04 VP(Sd.SWS_SD_00608): Det is called with correct SVCID
  05 VP(Sd.SWS_SD_00608): Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00608</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1301</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_InvMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>979</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  Sd_ConsumedEventGroupSetState is called with parameter ConsumedEventGroupSetState equal to 0x1234U. I.e.
  - if error code SD_E_INV_MODE is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  Sd_ConsumedEventGroupSetState()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with ClientServiceState parameter SD_CLIENT_SERVICE_REQUESTED
  02: call Sd_ConsumedEventGroupSetState with ConsumedEventGroupState parameter equal to valid values
  03 VP(Sd.SWS_SD_00470): function call returns E_OK
  04 VP(Sd.SWS_SD_00470): if Det is enabled, function call does not triggers Det
  05: call Sd_ConsumedEventGroupSetState with ConsumedEventGroupState parameter equal to invalid values
  06 VP(Sd.SWS_SD_00470): function call returns E_NOT_OK
  07 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  08 VP(Sd.SWS_SD_00470): check function call triggers Det correctly

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00470</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>375</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1302</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_ConsumedEventGroupSetState_InvHandleId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>1064</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  Sd_ConsumedEventGroupSetState is called with parameter SdConsumedEventGroupHandleId equal to SDTESTLIB_SD_CLIENT_SERVICE_INVALID_HANDLEID. I.e.
  - if error code SD_E_INV_ID is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  Sd_ConsumedEventGroupSetState()

Test Precondition: 
  Sd_Init was called before.
  Client service #5 was requested.

Test Execution: 
  01: call Sd_ConsumedEventGroupSetState with SdConsumedEventGroupSetStateHandleId equal to SDTESTLIB_SD_CONSUMED_EVENTGROUP_INVALID_HANDLEID.
  02 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  03 VP(Sd.SWS_SD_00609): Det is called with error code SD_E_INV_ID
  04 VP(Sd.SWS_SD_00609): Det is called with correct SVCID
  05 VP(Sd.SWS_SD_00609): Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00609</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>428</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1303</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_InvState</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>1130</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if if error code SD_E_INV_MODE is reported to the Det_ReportError service in development
  mode when Sd_LocalIpAddrAssignmentChg is called with parameter State equal to invalid value
&lt;/para&gt;

Test Object: 
  Sd_LocalIpAddrAssignmentChg()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg with State parameter equal to valid values
  02 VP(Sd.SWS_SD_00472): function call does not triggers Det
  03: call Sd_ConsumedEventGroupSetState with EventGroupMode parameter equal to invalid values
  04 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  05 VP(Sd.SWS_SD_00472): check function call triggers Det correctly
  06 VP(Sd.SWS_SD_00472): check the Service Discovery module shall not store the requested
     mode (no call to Disable / enable routing from Sd to SoAd)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00472</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>377</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1304</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_LocalIpAddrAssignmentChg_InvSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Det_Tests.c.m4</sourcefile>
      <sourceline>1215</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  Sd_LocalIpAddrAssignmentChg is called with parameter SoConId equal to invalid value I.e.
  - if error code SD_E_INV_ID is reported to the Det_ReportError service
&lt;/para&gt;

Test Object: 
  Sd_LocalIpAddrAssignmentChg()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg with SoConId parameter equal to valid values
  02 VP(Sd.SWS_SD_00610): function call does not triggers Det
  03: call Sd_LocalIpAddrAssignmentChg with SoConId parameter equal to invalid values
  04 VP(Sd.SWS_SD_00108, Sd.SWS_SD_00109, Sd.SWS_SD_00110):
     The switch SdDevErrorDetect is set to TRUE enabling detection of development errors and API
     parameter checking. Detected development errors are reported to Det_ReportError service of DET.
  05 VP(Sd.SWS_SD_00610): check function call triggers Det correctly
  06 VP(Sd.SWS_SD_00610): check the Service Discovery module shall not store the requested
     mode (no call to Disable / enable routing from Sd to SoAd)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00610</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1305</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_GetVersionInfo</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>1586</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Test verifies that Sd_GetVersionInfo() returns version information.
&lt;/para&gt;

Test Object: 
  Sd_GetVersionInfo()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_GetVersionInfo with valid pointer.
  02: VP(Sd.SWS_SD_00124, Sd.SWS_SD_00125): version info structure shall be filled with current version information.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00125</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1306</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Init</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>1637</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that during intialization of Sd, SoAd_OpenSoCon() is called
  for all Socket Connections associated with SdInstanceTxPdu, SdInstanceUnicastRxPdu
  and SdInstanceMulticastRxPdu for each instance.
&lt;/para&gt;

Test Object: 
  Sd_GetVersionInfo()

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: call Sd_Init() with valid config.
  02: VP(Sd.SWS_SD_00723): Verify that SoAd_OpenSoCon() was called with the correct SoConId for each SoConId.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00723</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>523</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1307</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Random_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>1706</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Test verifies SD random number generator functionality.
&lt;/para&gt;

Test Object: 
  Random number generator.

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: Repeat steps 02-03 for test data sets.
  02: Call Sd_StartRandom() to set the random number generator seed.
  03: Repeat steps 04-05 for all values in test data set.
  04: Call Sd_GetRandom().
  05: VP(Sd.Design.Sd.Random.Get):
      Sd_GetRandom() shall return a random number equal to the pre-calculated value for the selected seed and range.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Sd.Random.Get</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>922</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1308</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Random_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>1777</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Test verifies SD random number generator initialization.
&lt;/para&gt;

Test Object: 
  Random number generator.

Test Precondition: 
  Sd_Init was called before.

Test Execution: 
  01: Call Sd_StartRandom() to set the random number generator initial state.
  02: Call Sd_GetRandom() to get the sequence of 10 random numbers.
  03: Call Sd_StartRandom() to set the same initial state for the random number generator as in step 01.
  04: Call Sd_GetRandom() to get the sequence of 10 random numbers.
  05: VP(Sd.Design.Sd.Random.Start):
      Test sequences from steps 02 and 04 shall be the same indicating
      that random number generator was initialized to same initial state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Sd.Random.Start</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>921</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1309</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_Sd_Client_Service_IP_Address_Not_Assigned</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>1853</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that if a Client Service receives a SD message before its IP assignment
  is fully completed, the message is ignored and a DET error is generated.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses only for the multicast RX socket connection of this client service
  02: Reception of an Multicast Udp offer message is simulated before this client service is requested
  03: DET error generated to indicate that a message had to be discarded because it arrived before the IP address
     of this client service has been assigned

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00658.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>656</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1310</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Different_Minor_Versions</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>1953</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that when parameter SdVersionDrivenFindBehavior is set to MINIMUM_MINOR_VERSION and
  its Minor Version value is set to 1, only OFFERs received with a Minor Version equal or bigger to 1 are processed.
  When parameter SdVersionDrivenFindBehavior is set to EXACT_OR_ANY_MINOR_VERSION then:
  if Minor Version value is set to 0xFFFFFFFF, then Minor Version of a received OFFER is not checked
  if Minor Version value is set to a value different to 0xFFFFFFFF, then Minor Version of a received OFFER has to match this value.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Call to Sd_MainFunction##
  03: Client Service #2 of instance #1 is requested
  04: Client service goes to state MAIN
#if (SD_CONF_TEST_PERMUTATION == 0)
  05: VP(Sd.SWS_SD_10503): If SdVersionDrivenFindBehavior is set to MINIMUM_MINOR_VERSION then Minor Version has to be set to 0xFFFFFFFF for a FIND entry
#else if (SD_CONF_TEST_PERMUTATION == 1) || (SD_CONF_TEST_PERMUTATION == 2)
  05: VP(Sd.SWS_SD_00503): If SdVersionDrivenFindBehavior is set to EXACT_OR_ANY_MINOR_VERSION then Minor Version has to be the one set in the configuration
#endif
  06: Reception of an Multicast Udp offer message with a minor version smaller than the minor version this client service has in its configuration
#if (SD_CONF_TEST_PERMUTATION == 0)
  07: VP(Sd.SWS_SD_04089): SdVersionDrivenFindBehavior is set to MINIMUM_MINOR_VERSION then as received minor version 0 is smaller than configured value 1,
     there is no call to SoAd_SetUniqueRemoteAddr on the trace, this indicates that this OFFER was discarded
#else if (SD_CONF_TEST_PERMUTATION == 1) || (SD_CONF_TEST_PERMUTATION == 2)
  07: VP(Sd.SWS_SD_00489): SdVersionDrivenFindBehavior is set to EXACT_OR_ANY_MINOR_VERSION then as received minor version 0 is different to configured value 1,
     there is no call to SoAd_SetUniqueRemoteAddr on the trace, this indicates that this OFFER was discarded
#endif
  08: VP(Sd.SWS_SD_04089, Sd.SWS_SD_00489): Client Service #2 remains in MAIN state, this indicates too that previous OFFER was not processed
  09: Reception of an Multicast Udp offer message with a minor version equal to the minor version this client service has in its configuration
  10: VP(Sd.SWS_SD_04089, Sd.SWS_SD_00489): in both cases when SdVersionDrivenFindBehavior is set to MINIMUM_MINOR_VERSION
	   and when SdVersionDrivenFindBehavior is set to EXACT_OR_ANY_MINOR_VERSION as received minor version 1 is equal to configured value 1,
	   there are calls to SoAd_SetUniqueRemoteAddr on the trace, this indicates that this OFFER has been processed.
  11: VP(Sd.SWS_SD_04089, Sd.SWS_SD_00489): Client Service #2 goes to AVAILABLE state, this indicates too that this OFFER was not discarded
  12: Reception of an Multicast Udp offer message with a minor version bigger than the minor version this client service has in its configuration
#if (SD_CONF_TEST_PERMUTATION == 0)
  13: VP(Sd.SWS_SD_04089): SdVersionDrivenFindBehavior is set to MINIMUM_MINOR_VERSION then as received minor version 101 is bigger than configured value 1,
	   there are calls to SoAd_SetUniqueRemoteAddr on the trace, this indicates that this OFFER was processed
#else if (SD_CONF_TEST_PERMUTATION == 1) || (SD_CONF_TEST_PERMUTATION == 2)
  13: VP(Sd.SWS_SD_00489): SdVersionDrivenFindBehavior is set to EXACT_OR_ANY_MINOR_VERSION then as received minor version 0 is bigger and therefore
     different to configured value 1, there are no calls to SoAd_SetUniqueRemoteAddr in the trace, this indicates that this OFFER was discarded
#endif

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00489</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>394</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_04089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_10503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>566</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1311</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Blacklisted_MinorVersions</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>2206</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that when parameter SdVersionDrivenFindBehavior is set to MINIMUM_MINOR_VERSION and
  its Minor Version value is set to 1, only OFFERs received with a Minor Version equal or bigger to 1 are processed.
  When parameter SdVersionDrivenFindBehavior is set to EXACT_OR_ANY_MINOR_VERSION then:
  if Minor Version value is set to 0xFFFFFFFF, then Minor Version of a received OFFER is not checked
  if Minor Version value is set to a value different to 0xFFFFFFFF, then Minor Version of a received OFFER has to match this value.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Call to Sd_MainFunction##
  03: Client Service #2 of instance #1 is requested
  04: Client service goes to state MAIN
#if (SD_CONF_TEST_PERMUTATION == 0)
  05: VP(Sd.SWS_SD_10503): If SdVersionDrivenFindBehavior is set to MINIMUM_MINOR_VERSION then Minor Version has to be set to 0xFFFFFFFF for a FIND entry
#else if (SD_CONF_TEST_PERMUTATION == 1) || (SD_CONF_TEST_PERMUTATION == 2)
  05: VP(Sd.SWS_SD_00503): If SdVersionDrivenFindBehavior is set to EXACT_OR_ANY_MINOR_VERSION then Minor Version has to be the one set in the configuration
#endif
  06: Reception of an Multicast Udp offer message with a minor version #2 which is in the black list of minor versions of this client service
  07: VP(Sd.SWS_SD_01503): Minor Version of the received OFFER is present in the black list of minor versions of this client,
     there is no call to SoAd_SetUniqueRemoteAddr on the trace,this indicates that this OFFER was discarded
  08: VP(Sd.SWS_SD_01503): Client Service #2 remains in MAIN state, this indicates too that previous OFFER was not processed
  09: Reception of an Multicast Udp offer message with a minor version #300 which is in the black list of minor versions of this client service
  10: VP(Sd.SWS_SD_01503): Minor Version of the received OFFER is present in the black list of minor versions of this client,
     there is no call to SoAd_SetUniqueRemoteAddr on the trace,this indicates that this OFFER was discarded
  11: VP(Sd.SWS_SD_01503): Client Service #2 remains in MAIN state, this indicates too that previous OFFER was not processed
  12: Reception of an Multicast Udp offer message with a minor version #0xFFFFFFFE which is in the black list of minor versions of this client service
  13: VP(Sd.SWS_SD_01503): Minor Version of the received OFFER is present in the black list of minor versions of this client,
     there is no call to SoAd_SetUniqueRemoteAddr on the trace,this indicates that this OFFER was discarded
  14: VP(Sd.SWS_SD_01503): Client Service #2 remains in MAIN state, this indicates too that previous OFFER was not processed

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_01503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>563</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1312</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Client_Service</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>2436</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested shall transmit
  a Find message and after it becomes Available it shall transmit a Subscribe message

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  00: VP(FrTp.EB.PDULENGTHTYPE001): Check that PduLengthType has the expected size (2 or 4 depending on permutation).
      Whole test sequence is then executed with expected PduLengthType and requirement thus covered.
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast Udp offer message is simulated before this client service is requested
  03: VP(Sd.SWS_SD_00464) Client service goes to state WAIT_SOCON.
  04: Check if Server service is in WAIT_SOCON state because socket connections are not open yet
  05: Call Sd_MainFunction is called, Client goes to state AVAILABLE
  06: Check if Server service is in AVAILABLE state because socket connections are already open
  07: A STOP OFFER and an OFFER are subsequently received within the same frame
  08: Call Sd_MainFunction is called, Client should remain in state AVAILABLE
  09: Client service is released and Sd_MainFunction is called
  10: Check if Server service is in DOWN state because it has been released
  11: Call Sd_MainFunction is called, Client goes to state MAIN
  12: VP(Sd.SWS_SD_00464): Check if Server service is in MAIN state and sockets connections
      of this client service have been opened.
      VP(Sd.SWS_SD_00039): Find message is transmitted.
  13: Verification Process that an unicast FIND message was sent correctly during MAIN state
  14: Set Client state to released and again within the same main cycle to requested
  15: Call Sd_MainFunction is called, Client remains in state MAIN
  16: Verification Process that an unicast FIND message was sent correctly during MAIN state
  17: Check if Server service is in MAIN state
  18: Request Consumed eventgroup
  19 Sd_MainFunction() is called
  20: SoCon = OFFLINE
  21: Reception of an Multicast Udp offer message is simulated
  22: Reception of an unicast Udp OFFER message is simulated
  23: Reception of an unicast Udp OFFER message with a wrong IP Adress is simulated
  24: Verification Process (Sd.SWS_SD_00039, Sd.SWS_SD_00658.UDP)
      Subscribe message is transmitted as response to the first received offer message

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00658.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>656</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1313</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Receive_OFFER_UDP_TCP_Endpoint</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>2888</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service with only a TCP configured reference, is able to process a received
  OFFER which contains both an UDP and a TCP endpoint. The UDP endpoint has to be ignored and the TCP reference is processed
  normally.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast Udp and Tcp OFFER message is simulated before this client service is requested
  03: VP(Sd.SWS_SD_00464) Client service goes to state AVAILABLE.
  04: VP(Sd.SWS_SD_00453) Check that client service is in state AVAILABLE state. Socket connections have been opened

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00453</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1314</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Server_Service_DOWN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>3020</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that when a Server Service is in the state SD_SERVER_SERVICE_DOWN
  Sd will not respond to incoming Find or Subscribe message.

Test Object: Server Service Down Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Assign IP addresses for Sd Instance 0
  02: Call Sd_MainFunction
  03: Server Service shall stay in DOWN state
  04: Find message is simulated
  05: Sd_MainFunction() is called
  06: VP(Sd.Design.ServerService.Find.002): Check that no Sd message response was sent
  07: Subscribe message is simulated
  08: VP(Sd.SWS_SD_00430): SUBSCRIBE NACK message in response to the SUBSCRIBE message was sent correctly
  09: Sd_MainFunction() is called
  10: VP(Sd.Design.ServerService.SubscribeEventgroup.006): Check that no Sd message response was sent

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Find.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1094</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1099</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1315</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Server_Service_INITIALWAIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>3162</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that when a Server Service is in the state SD_SERVER_SERVICE_INITIALWAIT
  Sd will not respond to incoming Find or Subscribe messages.

Test Object: Server Service Initialwait Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server state to AVAILABLE and assign IP addresses
  02: set server service #2 as available and then down
  03: event STOP is ignored since this service was still in state machine DOWN
  04: Two server services are switched, this way two timers server service will be running at the same time
  05: Both Server Services shall be in state INITIALWAIT
  06: switch a server OFF and then switch it ON right after to make sure it stays in INITIAL WAIT state after these two actions
  07: Find message is simulated
  08: Sd_MainFunction() is called
  08: VP(Sd.Design.ServerService.Find.002): Check that no Sd message response was sent
  09: Subscribe message is simulated
  10: VP(Sd.SWS_SD_00430): SUBSCRIBE NACK message in response to the SUBSCRIBE message was sent correctly
  11: Sd_MainFunction() is called
  12: VP(Sd.Design.ServerService.SubscribeEventgroup.006): Check that no Sd message response was sent

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Find.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1094</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1099</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1316</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Server_Service_REPETITION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>3335</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Server Service in the state SD_SERVER_SERVICE_REPETITION
  will send a Multicast Offer message and answer a Subscribe message with Subscribe Ack
  message

Test Object: Server Service Repetition Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server state to AVAILABLE and assign IP addresses
  02: Call Sd_MainFunction the number of times it takes for timer to expire
  03: Server Service shall be in state REPETITION
  04: Offer message response will be sent
  05: switch down and then right after on a sever service to make sure it stays in INITIAL WAIT state after these two actions
  06: Offer message response will be sent
  07: Server Service shall be in state REPETITION
  08: Subscription received with a Tcp Endpoint, this subscription is ignored because this event handler does not have a Tcp reference configured
  09: Subscription received with an Udp Endpoint from a remote node
  10: Subscribe message is simulated from 4 remote nodes with 4 different TTLs is simulated
  11: No datapath is enabled, it is not possible to receive a subscription from the same remote node with two different endpoints
  12: Subscribe message is simulated from still 3 other remote nodes with 3 different TTLs is simulated
  13: Sd_MainFunction() is called until the subscription from the client with the shortest TTL dies
  14: Sd_MainFunction() is called until the subscription from the client with the second shortest TTL dies
  15: One of the client whose previous subscription died, send a new subscription
  16:  VP(Sd.Design.ServerService.SubscribeEventgroup.009, Sd.SWS_SD_00660): Check that Subscribe Ack message response was sent
  17 Suscription message in which the setting from the remote address of the socket connection gives back an error is simulated

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00660</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1317</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>3781</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that when a Server Service is in the state SD_SERVER_SERVICE_MAIN
  Sd will respond to an incoming unicast FIND message with an unicast OFFER message and
  to a SUBSCRIBE message with SUBSCRIBE ACK message

Test Object: Server Service Down Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server state to AVAILABLE
  02: Call Sd_MainFunction. Server service goes into MAIN state.
  03: Check to make sure Server Service is in state MAIN
  04: Reception of an unicast FIND message is simulated
  05: Sd_MainFunction() is called
  06: VP(Sd.Design.ServerService.Main.Ev.005, Sd.SWS_SD_00417, Sd.SWS_SD_00418, Sd.SWS_SD_00660, Sd.SWS_SD_00656.UDP)
      Check that an unicast OFFER in response to the FIND message was sent correctly
  07: Reception of an unicast SUBSCRIBE message to the service offered is simulated
  08: Sd_MainFunction() is called
  09: Verification Process (Sd.Design.ServerService.SubscribeEventgroup.009, Sd.SWS_SD_00454, Sd.SWS_SD_00660, Sd.SWS_SD_00658.UDP)
      IPv4 Multicast:
      (Sd.SWS_SD_00216, Sd.SWS_SD_00217, Sd.SWS_SD_00218, Sd.SWS_SD_00219, Sd.SWS_SD_00220, Sd.SWS_SD_00221)
      IPv6 Multicast:
      (Sd.SWS_SD_00397, Sd.SWS_SD_00398, Sd.SWS_SD_00399, Sd.SWS_SD_00404, Sd.SWS_SD_00413, Sd.SWS_SD_00414)
      multicast SUBSCRIBE ACK message in response to the SUBSCRIBE message was sent correctly

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1081</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00218</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00397</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>307</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00398</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00399</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00404</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>313</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00413</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00414</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>322</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00418</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00660</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00656.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>572</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00658.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1318</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Tcp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>4019</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test is the same as the previous but in this case the server service to be tested
  is a Tcp configured one.
  This test case verifies that when a Server Service is in the state SD_SERVER_SERVICE_MAIN
  Sd will respond to an incoming unicast Tcp FIND message with an unicast Tcp OFFER message and
  to a Tcp SUBSCRIBE message with SUBSCRIBE NACK message since Tcp Service Discovery is not supported.

Test Object: Server Service Down Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server state to AVAILABLE
  02: Call Sd_MainFunction
  03: Server service goes into MAIN state
  04: Reception of an unicast Tcp FIND message is simulated
  05: Sd_MainFunction() is called
  06: VP(Sd.Design.ServerService.Main.Ev.005, Sd.SWS_SD_00417, Sd.SWS_SD_00418, Sd.SWS_SD_00660, Sd.SWS_SD_00656.UDP, Sd.SWS_SD_00656.TCP)
      an unicast Tcp OFFER in response to the FIND message was sent correctly
  07: Reception of an unicast Tcp SUBSCRIBE message to the service offered is simulated
  08: Verification Process (Sd.SWS_SD_00658.TCP): SUBSCRIBE NACK message in response to the Tcp SUBSCRIBE message was sent correctly
  09: Verification Process: SUBSCRIBE NACK message in response to the Tcp SUBSCRIBE message was sent correctly
  10: Verification Process: SUBSCRIBE ACK message in response to the Tcp SUBSCRIBE message was sent correctly
  11: The same client receives an unicast Tcp SUBSCRIBE message from the same remote node but with a different endpoint address option
  12: Verification Process: SUBSCRIBE NACK message in response to the wrong Tcp SUBSCRIBE message was sent correctly
  13: Reception of an unicast Udp SUBSCRIBE message from a different remote node is simulated
  14: Verification Process: SUBSCRIBE ACK message in response to the Udp SUBSCRIBE message was sent correctly
  15: The same client receives an unicast UDP SUBSCRIBE message from the same remote node but with a different endpoint address option
  16: Verification Process: SUBSCRIBE NACK message in response to the wrong  Udp SUBSCRIBE message was sent correctly
  17: Reception of an unicast Tcp SUBSCRIBE message to the service offered from a different remote node is simulated
  18: VP(Sd.SWS_SD_00453, Sd.SWS_SD_00658.TCP) SUBSCRIBE ACK message in response to the Tcp SUBSCRIBE message was sent correctly
  19: Reception of an unicast Tcp and Udp SUBSCRIBE message to the service offered from a different remote node is simulated
  20: Verification Process(Sd.SWS_SD_00658.TCP): SUBSCRIBE ACK message in response to the Udp and Tcp SUBSCRIBE message was sent correctly
  21: MainFuncion called so many times until the first TTL of all received subscriptions ends
  22: MainFuncion called so many times until the next TTL of all received subscriptions ends
  23: VP: the first two subscription have disabled their routing paths
  24: MainFuncion called so many times until the next TTL of all received subscriptions ends
  25: VP: next routing path has been disabled once the subscription died
  26: Reception of an unicast Tcp and Udp SUBSCRIBE message to an event handler which does not have an UDP referenced configured
  27: Verification Process (Sd.SWS_SD_00658.TCP): SUBSCRIBE ACK message in response to the Tcp SUBSCRIBE message was sent correctly
  28: MainFuncion called so many times until the next TTL of the just received subscription ends
  29: VP: only a routing path was enabled since there is not UDP reference configured, therefore here only one routing path is disabled
  30: A Tcp subscription to a event group from a remote node that was already subscribed is received
  31: Verification Process: SUBSCRIBE ACK message in response to the Tcp SUBSCRIBE message was sent correctly
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1081</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00418</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00660</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00656.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>572</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00656.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>571</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00453</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00658.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>573</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1319</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Subscribe_Nack</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>4752</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that when a Server Service is in the state SD_SERVER_SERVICE_MAIN
  An incoming Find message is recreated, a multicast offer message is sent as answer.
  The reception of subscribe message to the service offered is recreated. The function SetUniqueRemoteAddress can
  not set the subscriber's endpoint, therefore a Subscribe Nack message will be the answer.

Test Object: Server Service Down Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server state to AVAILABLE
  02: Call Sd_MainFunction. Server service goes into MAIN state.
  03: Check to make sure Server Service is in state MAIN
  04: (Sd.SWS_SD_00417, Sd.SWS_SD_00418, Sd.SWS_SD_00660, Sd.SWS_SD_00656.UDP)
      Verification Process that an unicast OFFER was sent correctly during MAIN state
  05: Reception of an unicast SUBSCRIBE message to the service offered is simulated
  06: Sd_MainFunction() is called
  07: 07: Verification Process: SUBSCRIBE NACK message in response to the SUBSCRIBE message was sent correctly

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1081</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00418</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00660</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00656.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>572</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1320</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Server_Service_MAIN_Subscribe_Unknown</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>4927</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that when a Server Service is in the state SD_SERVER_SERVICE_MAIN
  An incoming Find message is recreated, a multicast offer message is sent as answer.
  The reception of a subscribe message to service ID different of the service offered is recreated.
  Then the Subscribe unknown function is executed and received subscribe message ignored.

Test Object: Server Service Down Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server state to AVAILABLE
  02: Call Sd_MainFunction. Server service goes into MAIN state.
  03: Check to make sure Server Service is in state MAIN
  04: Verification Process that an unicast OFFER was sent correctly during MAIN state
  05: Reception of an unicast SUBSCRIBE message to the service offered is simulated
  06: Sd_MainFunction() is called
  07: Verification Process: SUBSCRIBE UNKNOWN message in response to the SUBSCRIBE message was sent correctly

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1081</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1321</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_Sd_Client_Service_RemoteAddr_Two_Remote_IP_Addr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>5068</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested shall transmit
  a Find message. Then the reception of an OFFER message is simulated once with a Remote IP Address.
  A SUBSCRIBE message is sent out as response to the OFFER received.
  Then the reception of another OFFER message with a different Remote IP Address is simulated.
  Another SUBSCRIBE message is sent out as response to the OFFER received.
  The test is executed twice, once with IPv4 domain addresses and then with IPv6 domain addresses.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Call Sd_MainFunction is called, Client goes to state MAIN.
  03: Check to make sure Client Service is in state MAIN
  04: Verification Process that an unicast FIND was sent correctly during MAIN state
  05: Request Consumed eventgroup
  06: Sd_MainFunction() is called
  07: SoCon = OFFLINE
  08: Reception of an unicast Udp offer message is simulated
  09: VP(Sd.SWS_SD_00039): Subscribe message is transmitted as response to the received offer message
  10: Release Client Service to make its consumed event groups to exit the available state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1322</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_Sd_Client_Service_WrongProtocol</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>5271</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested shall transmit
  a Find message. Then, the reception of an unicast offer message with a wrong sender IP protocol
  (neither Tcp nor Udp) is simulated.
  NO Subscribe message is transmitted as response to the received offer message
  because its protocol was discarded as unknown, so this OFFER message is discarded
  The test is executed twice, once with IPv4 domain addresses and then with IPv6 domain addresses.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Call Sd_MainFunction is called, Client goes to state MAIN.
  03: Check to make sure Client Service is in state MAIN
  04: VP(Sd.SWS_SD_00039): that an unicast FIND was sent correctly during MAIN state
  05: Request Consumed eventgroup
  06: Sd_MainFunction() is called
  07: SoCon = OFFLINE
  08: Reception of an unicast offer message with a wrong protocol (neither Tcp nor Udp) is simulated
  09: NO Subscribe message is transmitted as response to the received offer message
      because its protocol was discarded as unknown, so this OFFER message is discarded

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1323</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_Sd_Client_Service_Multicast_Udp_Tcp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>5415</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested shall transmit
  a Find message. Then the reception of an offer message is simulated once with the right
  sender endpoint data, once with a wrong sender domain and once with a wrong sender IP address.
  The test is executed twice, once with IPv4 domain addresses and then with IPv6 domain addresses.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Call Sd_MainFunction is called, Client goes to state MAIN.
  03: Check to make sure Client Service is in state MAIN
  04: VP(Sd.SWS_SD_00039): an unicast FIND was sent correctly during MAIN state
  05: Request Consumed eventgroup
  06: Sd_MainFunction() is called
  07: SoCon = OFFLINE
  08a: Reception of an unicast OFFER message with an unicast remote Endpoint is simulated
  08b: Reception of an unicast Udp offer message with a different Remote Endpoint's IP address is simulated
  09: Reception of an OFFER message from a Multicast remote Endpoint is simulated
  10: NO Subscribe message is transmitted as response to the received OFFER message because because
      its Response timer is bigger than 1 and because the 3rd OFFER has a multicast non valid Endpoint and is ignored
  11: Assign IP addresses and set Client state to requested
  12: Call Sd_MainFunction is called, Client goes to state MAIN.
  13: Check to make sure Client Service is in state MAIN
  14: Verification Process that an unicast FIND was sent correctly during MAIN state
  15: Request Consumed eventgroup
  16: Sd_MainFunction() is called
  17: SoCon = OFFLINE
  18: Reception of an OFFER message from a TCP remote Endpoint is simulated
  19: NO Subscribe message is transmitted as response to the received OFFER message
      because its Endpoint is a TCP, so this OFFER message is discarded

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1324</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_Sd_Client_Service_Multicast_WrongDomain</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>5730</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested shall transmit
  a FIND message. Then the reception of an OFFER message is simulated but with the wrong domain
  in the option field, that is,a domain different to the instance's local domain.
  This OFFER message is then discarded when processin the option field as the domain value is invalid.
  The test is executed twice, once with IPv4 domain addresses and then with IPv6 domain addresses.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Call Sd_MainFunction is called, Client goes to state MAIN.
  03: Check to make sure Client Service is in state MAIN
  04: VP(Sd.SWS_SD_00039): an unicast FIND was sent correctly during MAIN state
  05: Request Consumed eventgroup
  06: Sd_MainFunction() is called
  07: SoCon = OFFLINE
  08: Reception of an OFFER message from a Multicast remote Endpoint is simulated
  09: NO Subscribe message is transmitted as response to the received OFFER message because the domain in the option
      does not match the local domain of the instance, so this OFFER message is discarded

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1325</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_Sd_Client_Service_one_entry_two_options</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>5866</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested shall transmit
  a Find message. Then the reception of an offer message is simulated once with the right
  sender endpoint data, once with a wrong sender domain and once with a wrong sender IP address.
  The test is executed twice, once with IPv4 domain addresses and then with IPv6 domain addresses.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Sd_MainFunction() is called, Client goes to state MAIN
  03: VP(Sd.SWS_SD_00039): Find message is transmitted
  04: Request Consumed eventgroup
  05: Sd_MainFunction() is called
  06: SoCon = OFFLINE
  07: reception of an offer message is simulated with two endpoints of the same protocol
  which causes a conflict and the entry to be discarded.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1326</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_RemoteNodeReboot</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>6000</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Conf Test shall correctly detect the reboot
  of a remote node when the incoming multicast SD message reboot flag changes from '0' to '1'.
  Test also verifies that client service state remains available after the reboot.
 
Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  Remote note #1 state:
    - unicast session id = 0x100,
    - unicast reboot flag = 0,

Test Execution: 
  01: Assign IP addresses
  02: Reception of an Multicast Udp offer message is simulated before this client service is requested
  03: client service is requested
  04: Call Sd_MainFunction is called, Client goes to state AVAILABLE
  05: Reception of an Multicast Udp offer message is simulated to a different client before this client service is requested
  06: client service is requested
  07: Call Sd_MainFunction is called, Client goes to state AVAILABLE
  08: An OFFER ONLY to the first requested client (SD_TEST_CLIENT_2_HANDLE_ID) with a reboot flag set is received
  09: VP(Sd.Design.Receive.RebootDetection.Multicast, Sd.Design.Receive.RebootDetection.ResetConnection):
      Client (SD_TEST_CLIENT_2_HANDLE_ID) should remain in state AVAILABLE after the reboot
  10: VP(Sd.Design.Receive.RebootDetection.ResetState):
      Client (SD_TEST_CLIENT_1_HANDLE_ID) should remain in state MAIN after the reboot because this one did not receive an offer
  11: Reception of an Multicast Udp offer message is simulated to Client (SD_TEST_CLIENT_1_HANDLE_ID)
  12: Call Sd_MainFunction is called, Client goes to state AVAILABLE
  13: Client (SD_TEST_CLIENT_1_HANDLE_ID) should go to state AVAILABLE after having processed the OFFER
  14: An OFFER ONLY to the first requested client (SD_TEST_CLIENT_2_HANDLE_ID) with a reboot flag set is received
  15: Sd_MainFunction is called, Client (SD_TEST_CLIENT_2_HANDLE_ID) should remain in state AVAILABLE after the reboot
  16: Client (SD_TEST_CLIENT_1_HANDLE_ID) should go to state AVAILABLE because the reboot came from another remote node
  17: fourth client service is requested
  18: Sd_MainFunction is called, this Client (SD_TEST_CLIENT_3_HANDLE_ID) should go to state MAIN after having been requested
  19: Now this just requested client service receives an OFFER with a minor version smaller than the minimum accepted
  20: This OFFER is discarded, is not processed, no call to SoAd_SetUniqueRemoteAddr in the trace
  21: Now this just requested client service receives an OFFER
  22: Sd_MainFunction is called, this Client (SD_TEST_CLIENT_3_HANDLE_ID) should go to state AVAILABLE after having processed the OFFER

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.Multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1133</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.ResetConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1134</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.ResetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1327</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_ResponseTimerCounter</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>6392</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that after a reboot is detected in a remote node, the global counter with the number of response timers,
  will only be decremented if the rebooted remote node has a response timer active.
 
Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  Remote note #1 state:
    - unicast session id = 0x100,
    - unicast reboot flag = 0,

Test Execution: 
  01: Assign IP addresses
  02: Reception of an Multicast Udp offer message is simulated before this client service is requested
  03: client service #2 is requested
  04: Call Sd_MainFunction is called, Client goes to state AVAILABLE
  05: Request Consumed eventgroup #0 of client #2
  06: Reception of an Multicast Udp offer message is simulated to a different client before this client service is requested
  07: client service #1 is requested
  08: Call Sd_MainFunction is called, Client #1 goes to state AVAILABLE
  09: Request Consumed eventgroup #0 of client #1
  10: Call Sd_MainFunction is called until response time of client #2 dies out
  11: Response timer has timed out, therefore Client #2 sends a subscribe for the consumed eventgroup #0 just requested
  12: An OFFER ONLY to the first requested client (SD_TEST_CLIENT_2_HANDLE_ID) with a reboot flag set is received
  13: The number of active response timers counter remains unaffected by this detected reboot because the response time for client #2 had already finished
  14: VP(Sd.Design.Receive.RebootDetection.Multicast, Sd.Design.Receive.RebootDetection.ResetConnection):
      Sd_MainFunction is called, Client (SD_TEST_CLIENT_2_HANDLE_ID) shall remain in state AVAILABLE after the reboot
  15: Client #1 sends a subscribe for its consumed eventgroup #0 just requested
  16: Reception of an Multicast Udp offer message with reboot flat set to Client (SD_TEST_CLIENT_1_HANDLE_ID) is simulated
  17: The number of active response timers counter remains unaffected by this detected reboot becuse the response time for client #2 had already finished
  18: VP(Sd.Design.Receive.RebootDetection.Multicast, Sd.Design.Receive.RebootDetection.ResetConnection):
      Call Sd_MainFunction is called, Client #1 remains in state AVAILABLE after the reboot

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.Multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1133</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.ResetConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1134</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.ResetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1328</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_Client_Service_TCP_SoCon_ONLINE_OFFLINE_ONLINE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>6708</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and its TCP consumed group also requested
  shall enable the consumed evengroup's datapath and transmit a SUBSCRIBE message after it becomes Available
  and response timer is reached.
  Tt shall NOT transmit a Subscribe message when TCP socket connection is no loner ONLINE and the datapath
  shall be disabled until the socket connection is back ONLINE.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast Udp offer message is simulated before this client service is requested
  03: VP(Sd.SWS_SD_00464) Client service goes to state WAIT_SOCON.
  04: Check if Server service is in WAIT_SOCON state because socket connections are not open yet
  05: Call Sd_MainFunction is called, Client goes to state AVAILABLE
  06: Check if Server service is in AVAILABLE state because socket connections are already open
  07: Request TCP Consumed eventgroup
  08: VP(Sd.SWS_SD_00702) Once Consumed eventgroup has been requested its datapath is enabled
  09: Reception of an Multicast OFFER message with a TCP end point is simulated after this client service is requested
  10: Sd_MainFunction is called, Client Service remains state AVAILABLE
  11: Call Sd_MainFunction as many times until response time for a SUBSCRIBE is over
  12: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00658.TCP) A SUBSCRIBE message with a TCP end point is sent out
  13: Reception of an Multicast OFFER message with a TCP end point with socket connection no longer ONLINE
  14: Call Sd_MainFunction
  15: VP(Sd.SWS_SD_00731) Client Service goes down to state MAIN
  16: Client Service goes to WAIT_SOCON state after successive calls to Sd_MainFunction because socket connection is still not ONLINE
  17: Reception of an Multicast OFFER message with a TCP end point with socket connection back ONLINE
  18: Call Sd_MainFunction is called, Client Service goes to state AVAILABLE
  19: VP(Sd.SWS_SD_00702) Once Client Service is in AVAILABLE state its requested consumed eventgroup datapath is enabled

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00702</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00658.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>573</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00731</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>518</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1329</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_PENDING_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>7011</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service with only a TCP configured reference, is able to process a received
  OFFER which contains both an UDP and a TCP endpoint. The UDP endpoint has to be ignored and the TCP reference is processed
  normally.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast Udp and Tcp OFFER message is simulated before this client service is requested
  03: VP(Sd.SWS_SD_00464) Client service goes to state AVAILABLE.
  04: VP(Sd.SWS_SD_00453) Check that client service is in state AVAILABLE state. Socket connections have been opened
  05: Enable consumed event group #0 from client service #4 of this instance
  06: Call Main Function as many times as needed until response timer is reached
  07: VP(Sd.EB.ConnectionReady.Pending) Connection ready is PENDING, so no response to the received Multicast OFFER will be sent out
  08: VP(Sd.EB.ConnectionReady.OK) Connection ready returns OK, this means that a response to the received Multicast OFFER will be sent out

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00453</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.Pending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>621</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>622</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1330</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>7152</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service with only a TCP configured reference, is able to process a received
  OFFER which contains both an UDP and a TCP endpoint. The UDP endpoint has to be ignored and the TCP reference is processed
  normally.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast Udp and Tcp OFFER message is simulated before this client service is requested
  03: VP(Sd.SWS_SD_00464) Client service goes to state AVAILABLE.
  04: VP(Sd.SWS_SD_00453) Check that client service is in state AVAILABLE state. Socket connections have been opened
  05: Enable consumed event group #0 from client service #4 of this instance
  06: Call Main Function as many times as needed until response timer is reached
  07: Connection ready returned NOT_OK, this means that no transmission through this socket connection is allowed
  08: VP(Sd.EB.ConnectionReady.NOT_OK) Call Main Function, no response at all will be sent out
  09: Det Error generated to indicate that through the configured SD connection Socket Connection no transmission or reception is allowed

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00453</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1331</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Receive_Multiple_OFFER_ConnectionReady_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>7288</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service with only a TCP configured reference, is able to process a received
  OFFER which contains both an UDP and a TCP endpoint. The UDP endpoint has to be ignored and the TCP reference is processed
  normally.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast Udp and Tcp OFFER message is simulated before this client service is requested
  03: VP(Sd.SWS_SD_00464) Client service goes to state AVAILABLE.
  04: VP(Sd.SWS_SD_00453) Check that client service is in state AVAILABLE state. Socket connections have been opened
  05: Enable consumed event group #0 from client service #4 of this instance
  06: Call Main Function as many times as needed until response timer is reached
  07: Connection ready returned NOT_OK, this means that no transmission through this socket connection is allowed
  08: VP(Sd.EB.ConnectionReady.NOT_OK) Call Main Function, no response at all will be sent out
  09: Det Error generated to indicate that through the configured SD connection Socket Connection no transmission or reception is allowed

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00453</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1332</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Receive_OFFER_ConnectionReady_Timer</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>7441</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service with only a TCP configured reference, is able to process a received
  OFFER which contains both an UDP and a TCP endpoint. The UDP endpoint has to be ignored and the TCP reference is processed
  normally.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Set Server state to AVAILABLE and assign IP addresses
  02: set server service #2 as available and then down
  03: event STOP is ignored since this service was still in state machine DOWN
  04: Two server services are switched, this way two timers server service will be running at the same time
  05: Both Server Services shall be in state INITIALWAIT
  06: switch a server OFF and then switch it ON right after to make sure it stays in INITIAL WAIT state after these two actions
  07: Find message is simulated
  08: Sd_MainFunction() is called
  08: VP(Sd.EB.ConnectionReady.Pending): Check that no Sd message response was sent
  09: a new FIND message reception is simulated
  10: call main function as many times as needed until is connection ready timer is finished
  11: Call main function once again, function to check if connection is ready is called
  12: VP(Sd.EB.ConnectionReady.Timer): time to establish a connection is up, a DET ERROR shall be generated
      and the response message shall be sent anyway for security

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.Pending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>621</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.Timer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>624</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1333</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_FIND_Malformed_Invalid_MinorVersion</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>7617</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that if a Server Service receives a FIND message with a minor version that
  doesn't match the minor version of any server service of if the FIND message is malformed in both
  cases this FIND message is discarded and no subsequent action is carried out as an answer to this message.

Test Object: Server Service Down Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server state to AVAILABLE.
  02: Call to Sd Main function, Server service #8  goes into MAIN state.
  03: Server service goes into MAIN state.
  04: Reception of a Tcp FIND message with a wrong minor version is simulated.
  05: VP(Sd.SWS_SD_00486): FIND message was discarded, therefore check that no unicast Tcp OFFER in response to the FIND message was sent.
  06: Reception of a Tcp FIND malformed message.
  07: VP(Sd.Design.ServerService.Find.004) FIND message was discarded, therefore check that no unicast Tcp OFFER in response to the FIND message was sent
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00486</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Find.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1093</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1334</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_STOP_OFFER_Invalid_ID</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>7810</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and it receives a STOP OFFER,
  whose identification does not exists in this instance's client services then this entry
  shall be ignored.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses
  02: Call to Sd_MainFunction, Client #2 is requested
  03: Client service goes to state MAIN.
  04: Reception of a Udp and Tcp stop offer message with an unknown service ID
  05: VP (Sd.SWS_SD_00486) STOP OFFER is discarded.
  06: Call to Sd_Main function, client service remains in state MAIN because received OFFER was discarded.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00486</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1335</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_STOP_OFFER_Wilcard_ID</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>7930</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and it receives a STOP OFFER,
  whose identification contains a wildcard value. This STOP OFFER shall be discarded.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses
  02: Call to Sd_MainFunction, Client #2 is requested
  03: SoAd_OpenSoCon is called for all Socket Connections associated with this Client Service
      and client service goes to state MAIN.
  04: Reception of a Udp and Tcp  stop offer message with a wildcard service ID
  05: VP (Sd.SWS_SD_00486) STOP OFFER is discarded.
  06: Call to Sd_Main function, client service remains in state MAIN because received OFFER was discarded

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00486</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1336</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_ConsumedEventGroup_Multicast_Only_UDP_Ref</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>8048</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and one of Consumed Event Groups
  it is configured as Multicast Only it shall transmit a subscription event group entry without
  any option attached after the Client Service receives an OFFER.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast Udp offer message is simulated and client service #2 is requested
  03: VP(Sd.SWS_SD_00464) Client service goes to state SD_CLIENT_SERVICE_COMPHASE_WAIT_SOCON
  04: Check if Server service #2 is in SD_CLIENT_SERVICE_COMPHASE_WAIT_SOCON state
  05: Enable consumed event group #2 from client service #2 of this instance
  06: Call Main Function as many times as needed until response timer is reached
  07: VP (Sd.EB.ConnectionReady.OK) Connection ready returned OK, this means that transmission over this socket connection is allowed
  08: A call to SoAd_GetLocalAddr has to be in the call stack to indicate that the local UDP reference has been read to be sent as an option
  09: A SUBSCRIBE message is sent out for consumed event #4 of client service #2

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00658.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>622</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1337</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_ConsumedEventGroup_Multicast_Only_No_UDP_Ref</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>8197</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and one of Consumed Event Groups
  it is configured as Multicast Only it shall transmit a subscription event group entry without
  any option attached after the Client Service receives an OFFER.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast Udp offer message is simulated and client service #5 is requested
  03: Client service #5 goes to state AVAILABLE but as it is multicast only and it does not have any UDP reference then there
      there is not call to SoAd_OpenSoCon in the call stack
  04: Check if Server service #5 is in AVAILABLE state
  05: Enable consumed event group #0 from client service #5 of this instance
  06: Call Main Function as many times as needed until response timer is reached
  07: VP (Sd.EB.ConnectionReady.OK) Connection ready returned OK, this means that transmission over this socket connection is allowed
  08: A call to SoAd_GetLocalAddr shall NOT be in the call stack to indicate that no local UDP reference has been read to be sent as an option
  09: A SUBSCRIBE message is sent out for consumed event #4 of client service #5 without an appended option

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00658.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>622</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1338</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_Out_Of_Resources_OFFER</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>8338</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and it receives an OFFER,
  if there are not enough resources (socket connections) then a DEM error will be generated,
  ONLY if this DEM error is enabled in the configuration.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses
  02: Call to Sd_MainFunction, Client #2 is requested
  03: VP(Sd.SWS_SD_00464) Client service goes to state MAIN.
  04: Reception of an Multicast Udp and Tcp offer message
  05: SoAd_SetUniqueRemoteAddr is set to return NOT_OK to simulate the case OUT OF RESOURCES
  06: VP(Sd.ASR41.SWS_SD_00111) OFFER is processed but discarded,
      if DEM error is enabled then a DEM error is generated to indicate OUT OF RESOURCES
      if DET error is enabled then a Det error is generated, otherwise no error at all is generated
      and User_ReportIssueCallout() is called (if enabled).
  07: Call to Sd_Main function, client service remains in state MAIN because received OFFER was discarded due to not enough resources (socket connections)

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1339</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_Out_Of_Resources_SUBSCRIBE_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>8509</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that if a Server Service receives a subscribe and tries to write the address of
  the client service from which the OFFER arrived into his UDP reference remote address and not enough socket
  connections are configured on this UDP reference to hold this new address, then ONLY if out of resources DEM error
  is enabled in the configuration, a DEM error will be generated.
  will send a Multicast Offer message and answer a Subscribe message with Subscribe Ack
  message

Test Object: Server Service Repetition Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server #5 state to AVAILABLE and assign IP addresses
  02: Call Sd_MainFunction the number of times it takes for timer to expire, Server #5 sends out a multicast OFFER
  03: Server Service #5 shall be in state MAIN
  04: Server Service #5 receives a Subscription with an Udp Endpoint from a remote node
  05: VP(Sd.SWS_SD_00454, Sd.ASR41.SWS_SD_00111) Server Service #5 does not have enough resources (socket connections)
      for this client's event group Subscription, if DEM error out of resources is enabled in the configuration,
      then a DEM error report out of resources will be generated and User_ReportIssueCallout() is called (if enabled).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1340</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_Out_Of_Resources_SUBSCRIBE_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>8656</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that if a Server Service receives a subscribe and tries to write the address of
  the client service from which the OFFER arrived into his TCP reference remote address and not enough socket
  connections are configured on this UDP reference to hold this new address, then ONLY if out of resources DEM error
  is enabled in the configuration, a DEM error will be generated.

Test Object: Server Service Down Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server state to AVAILABLE
  02: Call to Sd Main function, Server service #8  goes into MAIN state
  03: Server service goes into MAIN state
  04: Reception of a Tcp FIND message is simulated
  05: Sd_MainFunction() is called
  06: unicast Tcp OFFER in response to the FIND message was sent correctly
  07: Reception of an unicast Tcp SUBSCRIBE message to the service offered is simulated
  08: VP(Sd.SWS_SD_00453, Sd.ASR41.SWS_SD_00111) Server Service #8 does not have enough resources (socket connections)
      for this client's event group Subscription, if DEM error out of resources is enabled in the configuration,
      then a DEM error report out of resources will be generated and User_RportIssue() will be called (if enabled).
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00453</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1341</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_Receive_Subscribe_Nack</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>8877</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and it received an OFFER,
  it responds with a SUBSCRIBE message and receives an SUBSCRIBE NACK message as an answer.
  A DEM error, DET error or no error at all will be generated depending on the configuration.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses
  02: Call to Sd_MainFunction, Client #2 is requested
  03: Client service goes to state MAIN.
  04: Consumed event group #1 of this Client Service #2 is requested
  05: Reception of an Multicast Udp and Tcp offer message
  06: Call to Sd_Main function, client service goes to state AVAILABLE
  07: call to main function as many times until the response time is reached
  08: consumed event group #1 sends a subscription message as a response to the received OFFER after response time is finished
  09: Client Service #1 Consumed event group #1 receives a Subscribe Nack message as a response to subscribe message sent previously
  10: VP (Sd.SWS_SD_00465, Sd.ASR41.SWS_SD_00111)
      A DEM production error SD_E_SUBSCR_NACK_RECV, a DET error or no error at all is generated after a Subscribe Nack message is received.
  11: VP (Sd.EB.CallBack.SubscribeNackReceived)
      If Sd_SendDataBackSubscribeNackReceived is activated Sd shall make a call to the function configured in this container after a Subscribe Nack message is received.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00465</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>370</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallBack.SubscribeNackReceived</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>604</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1342</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_Malformed_MSg_01</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>9096</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and it receives an OFFER,
  the number of options is not consecutive, therefore the function Sd_Receive_getEntryOptions()
  will detect the error and generate a DEM error, DET error or nothing depending on the configuration.
  ONLY if this DEM error is enabled in the configuration.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses
  02: Call to Sd_MainFunction, Client #2 is requested
  03: Client service goes to state MAIN.
  04: Reception of an Multicast Udp and Tcp offer message
  05: VP(Sd.SWS_SD_00708, Sd.Design.ClientService.eventOffer.005)
      OFFER is processed but discarded, if this DEM error, DET error or no error will be generated
      depending on the configuration  to indicate that a malformed message has been received.
  06: VP(Sd.EB.CallBack.MalformedMsg)
      If Sd_SendDataBackMalformedMsg is activated Sd shall make a call to the function configured in this container after a malformed frame is received

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1030</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallBack.MalformedMsg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>603</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1343</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_Malformed_MSg_02</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>9242</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and it receives an OFFER,
  the length of the message is corrupted and do not match the number of entries and options,
  therefore the function Sd_Receive_handleEntry()   will detect the error and generate
  a DEM error, DET error or nothing depending on the configuration.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses
  02: Call to Sd_MainFunction, Client #2 is requested
  03: Client service goes to state MAIN.
  04: Reception of an Multicast Udp and Tcp offer message
  05: VP(Sd.SWS_SD_00708, Sd.Design.ClientService.eventOffer.005)
      OFFER is processed but discarded, if this DEM error, DET error or no error will be generated
      depending on the configuration  to indicate that a malformed message has been received.
  06: VP(Sd.EB.CallBack.MalformedMsg)
      If Sd_SendDataBackMalformedMsg is activated Sd shall make a call to the function configured in this container after a malformed frame is received

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1030</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallBack.MalformedMsg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>603</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1344</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_Malformed_MSg_03</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>9389</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and it receives an OFFER,
  the entry type is unknown, therefore the function Sd_Receive_handleEntry()
  will detect the error and generate a DEM error, DET error or nothing depending on the configuration.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses
  02: Call to Sd_MainFunction, Client #2 is requested
  03: Client service goes to state MAIN.
  04: Reception of an Multicast Udp and Tcp offer message
  05: SoAd_SetUniqueRemoteAddr is set to return NOT_OK to simulate the case OUT OF RESOURCES
  06: VP(Sd.SWS_SD_00708) OFFER is processed but discarded,
      if this DEM error, DET error or no error will be generated depending
      on the configuration  to indicate that a malformed message has been received.
  07: VP(Sd.EB.CallBack.MalformedMsg)
      If Sd_SendDataBackMalformedMsg is activated Sd shall make a call to the function configured in this container after a malformed frame is received

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallBack.MalformedMsg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>603</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1345</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_STOP_OFFER</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>9533</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and it receives a STOP OFFER,
  with valid identification values, therefore no DEM error or DET error at all is generated.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses
  02: Call to Sd_MainFunction, Client #2 is requested
  03: Client service goes to state MAIN.
  04: Reception of an Multicast Udp and Tcp offer message
  05: Call to Sd_Main function, client service goes to state AVAILABLE
  06: Reception of a malformed STOP OFFER message
  07: VP(Sd.Design.ServerService.StopSubscribeEventgroup.004)
     Malformed STOP OFFER is discarded, a DEM, DET error or no error at all is generated (depending on the configuration)
  08: Call to Sd_Main function, client service remains state AVAILABLE
  09: Reception of a STOP OFFER message
  10: VP (Sd.SWS_SD_00487): STOP OFFER is processed, therefore no DEM, DET error at all is generated
  11: Call to Sd_Main function, client service goes back to state MAIN after processing the STOP OFFER

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00487</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>392</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.StopSubscribeEventgroup.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1346</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_Unicast_STOP_OFFER</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>9773</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and it receives a STOP OFFER,
  with valid identification value but through the unicast socket connection, this is not allowed
  therefore STOP OFFER message will be discarded and not processed.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses
  02: Call to Sd_MainFunction, Client #2 is requested
  03: Client service goes to state MAIN.
  04: Reception of an Multicast Udp and Tcp offer message
  05: Call to Sd_Main function, client service goes to state AVAILABLE
  06: Reception of an Unicast Udp and Tcp STOP OFFER
  07: STOP OFFER is not processed, therefore no DEM, DET error at all is generated
  08: Call to Sd_Main function, client service remains in state AVAILABE because received STOP OFFER was discarded

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1347</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_STOP_SUBSCRIBE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>9949</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that a Server Service that receives a STOP SUBSCRIBE message
  whose identification exists in this instance's server services then
  no error at all independent on the configuration will be generated.

Test Object: Server Service Repetition Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server #5 state to AVAILABLE and assign IP addresses
  02: Call Sd_MainFunction the number of times it takes for timer to expire, Server #5 sends out a multicast OFFER
  03: Server Service #5 shall be in state MAIN
  04: Server Service #5 receives a Stop Subscription with an Udp Endpoint from a remote node
  05: STOP SUBSCRIBE accepted therefore no DEM, DET error oat all is generated (independent on the configuration).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1348</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_SUBSCRIBE_ACK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>10073</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service receives a SUBSCRIBE ACKNOWLEDGE message
  whose identification exists in this instance's client services,
  then no a DEM error, DET error at all shall be generated independent on the configuration.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses
  02: Call to Sd_MainFunction, Client #2 is requested
  03: Client service goes to state MAIN.
  04: Consumed event group #1 of this Client Service #2 is requested
  05: Reception of an Multicast Udp and Tcp offer message
  06: Call to Sd_Main function, client service goes to state AVAILABLE
  07: call to main function as many times until the response time is reached
  08: consumed event group #1 sends a subscription message as a response to the received OFFER after response time is finished
  09: Client Service #1 Consumed event group #1 receives a Subscribe Ack message as a response to subscribe message sent previously
  10: SUBSCRIBE ACK is processed normally, no DEM. DET error at all is generated

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1349</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_ServerService_Not_Available_Multicast</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>10269</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that when a Client Service configured with Sd_SendDataBackServerNotAvailableMulticast
  receives an OFFER entry and then when this OFFER is no longer received before its TTL dies out Sd calls the callout
  function User_ServerNotAvailableMulticast(). This callout function is called for all active consumed event groups.

Test Object:  Client Service
Test Precondition: 
  A ClientService with a ConsumedEventGroup configured only with a multicast reference

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Reception of a UDP Multicast OfferService message is simulated
  03: Client goes to state Available
  04: ConsumedEventGroup #5 of client service #0 is requested
  05: Call Sd_MainFunction() until response timer runs out
  06: A Subscribe message is sent for consumed event #0 of client service #5
  07: Reception of SubscribeAck message is simulated
  08: Make the TTL run out on the service
  09: VP(Sd.EB.DEMReporting.ServerService_Not_Available): A DEM, DET error or no error at all is generated
  10: VP(Sd.EB.CallBack.ServerService_Not_Available) If Sd_SendDataBackServerNotAvailable is activated
     Sd shall make a call to the function configured in this container after a previously available server service is no longer available.
  11: VP(Sd.EB.CallBack.ServerService_Not_Available_Multicast): If Sd_SendDataBackServerNotAvailable_Multicast is activated Sd shall make
    a similar call as before, but this time send the information for all configured ConsumedEventGroups and their Multicast Socket Address
  12: Sd sends Find message

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.DEMReporting.ServerService_Not_Available</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>600</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallBack.ServerService_Not_Available</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallBack.ServerService_Not_Available_Multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1350</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Dem_ServerService_Not_Available</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>10500</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that when a Client Service receives an OFFER entry once or more times cyclically
  and then when this OFFER is no longer received before its TTL dies out
  then a DEM error, a DET error or no error at all shall be generated independent on the configuration.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast Udp offer message is simulated before this client service is requested
  03: Client service remains in state DOWN
  04: Call Sd_MainFunction is called several times, Client remains in state DOWN
  05: A renewed OFFER is again received
  06: Call Sd_MainFunction as many times as the previous OFFER TTL - 1 times, Client Service should remain in state DOWN
  07: Call Sd_MainFunction once more, TTL dies out and Client Service emains in DOWN state
  08: no error at all is generated indicate that a previously available Server Service is no longer available because this client service is not requested
  09: Reception of an Multicast Udp offer message is simulated after this client service is requested
  10: Client service goes to state AVAILABLE
  11: Call Sd_MainFunction is called several times, Client remains in state AVAILABLE
  12: A renewed OFFER is again received
  13: Call Sd_MainFunction as many times as the previous OFFER TTL - 1 times, Client Service should remain in state AVAILABLE
  14: Call Sd_MainFunction once more, TTL dies out and Client Service goes to INITIAL WAIT state
  15: (VP: Sd.EB.DEMReporting.ServerService_Not_Available)
     A DEM, DET error or no error at all is generated (depending on the configuration to indicate that a previously available Server Service is no longer available.
  16: (VP: Sd.EB.CallBack.ServerService_Not_Available) If Sd_SendDataBackServerNotAvailable is activated
     Sd shall make a call to the function configured in this container after a previously available server service is no longer available.
     Parameter sent back is the Udp IP Address.
  17: Reception of an Multicast Udp offer message with a TCP endpoint is simulated.
  18: Client service goes to state AVAILABLE
  19: Call Sd_MainFunction is called several times, Client remains in state AVAILABLE
  20: A renewed OFFER with a TCP endpoint is again received
  21: Call Sd_MainFunction as many times as the previous OFFER TTL - 1 times, Client Service should remain in state AVAILABLE
  22: Call Sd_MainFunction once more, TTL dies out and Client Service goes to INITIAL WAIT state
  23: A DEM, DET error or no error at all is generated (depending on the configuration to indicate that a previously available Server Service is no longer available
  24: (VP: Sd.EB.CallBack.ServerService_Not_Available) If Sd_SendDataBackServerNotAvailable is activated
     Sd shall make a call to the function configured in this container after a previously available server service is no longer available.
     Parameter sent back is the Tcp IP Address.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.DEMReporting.ServerService_Not_Available</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>600</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallBack.ServerService_Not_Available</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1351</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_RetryOfSubscription</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>10963</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and it receives an OFFER all its
  consumed event groups that have been requested will send a SUBSCRIBE.
  Although this OFFER does not have a TTL with infinite value retries are sent for all (cyclic) received OFFERs.
  therefore after the response time  the subscriptions will be sent out and then after the first retry timer the first retry will be sent out.
  Againg after a second retry time the second set of retries is sent out. Then after a third retry time is over as the maximum number
  is exceeded a DET error is generated for each consumed event group.
  Then after this first OFFER dies out, a second OFFER with a TTL infinite will arrive. After the response time
  the subscriptions will be sent out and then after the first retry timer the first retry will be sent out.
  Then one of the consumed event groups will be acknowledged, and therefore this consumed event group will not send
  any more retries but the other consumed event group will continue sending until the maximum number of retries is reached.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast OFFER message with TTL different to 0xFFFFFFFF is simulated
  03: Client Service is requested
  04: Sd_MainFunction is called, Client #2 goes to state AVAILABLE
  05: Both consumed event groups of this client service #2 are requested
  06: Client service #3 is requested
  07: Consumed event group of this client service #3 is requested
  08: Now this just requested client service #3 receives an OFFER
  09: After receiving an OFFER client service #3 goes to state AVAILABLE
  10: Run Sd Main function as many times as the response timer to the received OFFER
  11: Subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after the response time is over
  12: Run Sd Main function as many times as the retry timer of this instance
  13: Subscription messages from UDP consumed event group consumed event group of client service #2 is sent out after its response time is over
  14: Subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  15: Run Sd Main function as many times as the retry timer of this instance
  16: Client Service #2 Subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  17: Client Service #3 Subscription message from UDP consumed event group is sent out after retry time is over
  18: Run Sd Main function as many times as the retry timer of this instance
  19: VP(Sd.SWS_SD_00737): Number of retry messages has exceeded the maximum for both consumed event groups, two DET ERRORs to indicate it are generated
  20: Client Service #3 Subscription message from UDP consumed event group is sent out after retry time is over
  21: Run Sd Main function as many times as the retry timer of this instance
  22: VP(Sd.SWS_SD_00737): Number of retry messages has exceeded the maximum a DET ERRORs to indicate it is generated
  23: Run the TTL of the received OFFER until it dies out
  24: VP(Sd.SWS_SD_00735): verifies that after the subscriptions habe been sent no further subscription retries have been sent out
  25: Check if Server service goes to initial state and its underlying sockets and datapaths are disabled or closed
  26: Reception of an Multicast OFFER message with TTL equal to 0xFFFFFFFF is simulated
  27: Sd_MainFunction is called, Client goes to state AVAILABLE and all its socket connections are opened
  28: Run Sd Main function as many times as the response timer to the received OFFER
  29: Subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after the response time is over
  30: Run Sd Main function as many times as the retry timer of this instance
  31: Subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  32: UDP Consumed event group 1 (index 2) is acknowledged
  33: Run Sd Main function as many times as the response timer to the received OFFER
  34: VP(Sd.SWS_SD_00738): Subscription retry message is sent out only from UDP consumed event group
  35: Once more run Sd Main function as many times as the retry timer of this instance
  36: VP(Sd.SWS_SD_00737): Number of retry messages has exceeded the maximum, a DET ERROR to indicate is generated
  37: Once more run Sd Main function as many times as the retry timer of this instance
  38: VP(Sd.SWS_SD_00738): retry of subscription has stopped because the number of maximum retries has exceeded

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00735</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>533</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00737</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>535</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00738</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00742</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>540</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1352</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_STOP_OFFER</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>11464</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  The client service receives an OFFER with a TTL infinite. After the response time
  the subscriptions will be sent out and then after the first retry timer the first retry will be sent out.
  Then, the client service receives a STOP OFFER which cancel the previous OFFER. The client service goes back
  to main state, its datapaths are closed and the retry of subscription pattern is also stopped.
  Then to verify that really the retry of subscriptions has been stopped a new retry cycle of calls to Sd main function
  is carried out and after that the call stack remains empty to really indicate that no further retries have been sent out.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Both consumed event groups of this client service are requested
  03: Reception of an Multicast Udp offer message with TTL 0xFFFFFFFF is simulated
  04: Sd_MainFunction is called, Client goes to state AVAILABLE
  05: Run Sd Main function as many times as the response timer to the received OFFER
  06: Subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after the response time is over
  07: Run Sd Main function as many times as the retry timer of this instance
  08: Retries of subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  09: Reception of an STOP OFFER message is simulated
  10: Check if Server service goes to initial state and its underlying sockets and datapaths are disabled or closed
  11: Run Sd Main function as many times as the retry timer of this instance
  12: VP(Sd.SWS_SD_00367): No calls on the stack, no retries have been sent after retry time is exceeded.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00367</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>287</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1353</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_Release_ClientService</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>11683</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  The client service receives an OFFER with a TTL infinite. After the response time
  the subscriptions will be sent out and then after the first retry timer the first retry will be sent out.
  Then, the client service receives a STOP OFFER which cancel the previous OFFER. The client service goes back
  to main state, its datapaths are closed and the retry of subscription pattern is also stopped.
  Then to verify that really the retry of subscriptions has been stopped a new retry cycle of calls to Sd main function
  is carried out and after that the call stack remains empty to really indicate that no further retries have been sent out.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Both consumed event groups of this client service are requested
  03: Reception of an Multicast Udp offer message with TTL 0xFFFFFFFF is simulated
  04: Sd_MainFunction is called, Client goes to state AVAILABLE
  05: Run Sd Main function as many times as the response timer to the received OFFER
  06: Subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after the response time is over
  07: Run Sd Main function as many times as the retry timer of this instance
  08: Retries of subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  09: Now Client Service #2 of instance #1 is no longer requested
  10: VP(Sd.SWS_SD_00381) Client service goes to DOWN state, STOPSUBSCRIBEs are sent for all both consumed eventgroups
  11: Run Sd Main function as many times as the retry timer of this instance
  12: VP(Sd.SWS_SD_00381): No calls on the stack, no retries have been sent after retry counter was reset.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00381</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1354</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_Release_ConsumedEventGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>11882</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  The client service receives an OFFER with a TTL infinite. After the response time
  the subscriptions will be sent out and then after the first retry timer the first retry will be sent out.
  Then, the client service receives a STOP OFFER which cancel the previous OFFER. The client service goes back
  to main state, its datapaths are closed and the retry of subscription pattern is also stopped.
  Then to verify that really the retry of subscriptions has been stopped a new retry cycle of calls to Sd main function
  is carried out and after that the call stack remains empty to really indicate that no further retries have been sent out.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Both consumed event groups of this client service are requested
  03: Reception of an Multicast Udp offer message with TTL 0xFFFFFFFF is simulated
  04: Sd_MainFunction is called, Client goes to state AVAILABLE
  05: Now TCP Consumed EventGroup #1 of Client Service #2 of instance #1 is released before a subscription to this consumed event group was sent out
  06: no stop subscription to this consumed event group #1 has been sent out because its subscription had not been sent
  07: Run Sd Main function as many times until response timer to the received OFFER is over
  08: Subscription messages from UDP consumed event group is sent out after the response time is over
  09: Run Sd Main function as many times as the retry timer of this instance
  10: Retries of subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  11: Now UDP Consumed EventGroup #0 of Client Service #2 of instance #1 is no longer requested
  12: VP(Sd.SWS_SD_00713) STOPSUBSCRIBE are sent for UDP consumed eventgroup #0
  13: Run Sd Main function as many times as the retry timer of this instance
  14: VP(Sd.SWS_SD_00713):
      No Retry of subscription messages from the TCP consumed event group is sent out after retry time is over because this consumed event group is no longer requested

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00713</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1355</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_Instance_Unassigned</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>12097</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  The client service receives an OFFER with a TTL infinite. After the response time
  the subscriptions will be sent out and then after the first retry timer the first retry will be sent out.
  Then, the client service receives a STOP OFFER which cancel the previous OFFER. The client service goes back
  to main state, its datapaths are closed and the retry of subscription pattern is also stopped.
  Then to verify that really the retry of subscriptions has been stopped a new retry cycle of calls to Sd main function
  is carried out and after that the call stack remains empty to really indicate that no further retries have been sent out.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Both consumed event groups of this client service are requested
  03: Reception of an Multicast Udp offer message with TTL 0xFFFFFFFF is simulated
  04: Sd_MainFunction is called, Client goes to state AVAILABLE
  05: Run Sd Main function as many times as the response timer to the received OFFER
  06: Subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after the response time is over
  07: Run Sd Main function as many times as the retry timer of this instance
  08: Retries of subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  09: Now instance #1 is unassigned
  10: VP(Sd.SWS_SD_00712): Check if Client service goes to DOWN state and its underlying sockets and datapaths are disabled or closed
  11: Run Sd Main function as many times as the retry timer of this instance
  12: VP(Sd.SWS_SD_00712): No calls on the stack, no retries have been sent after retry counter was reset.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00712</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1356</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_TTL_too_Short</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>12288</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  The client service receives an OFFER with a TTL infinite. After the response time
  the subscriptions will be sent out and then after the first retry timer the first retry will be sent out.
  Then, the client service receives a STOP OFFER which cancel the previous OFFER. The client service goes back
  to main state, its datapaths are closed and the retry of subscription pattern is also stopped.
  Then to verify that really the retry of subscriptions has been stopped a new retry cycle of calls to Sd main function
  is carried out and after that the call stack remains empty to really indicate that no further retries have been sent out.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Both consumed event groups of this client service are requested
  03: Reception of an Multicast Udp offer message with a short TTL is simulated
  04: VP(Sd.EB.DET.Error.Retry.Process.Bigger.Than.TTL):
      A Det error is generated to indicate that the TTL of the received OFFER is smaller than the respond time plus the retry time
  05: Sd_MainFunction is called, Client goes to state AVAILABLE
  06: Run Sd Main function as many times as the response timer to the received OFFER
  07: VP(Sd.SWS_SD_00600): As the TTL of the received OFFER is shorter than the response time the OFFER dies before its response time ends,
      client service goes back to INITIAL WAIT phase and  and indicate the state SD_CLIENT_SERVICE_DOWN to the BswM by calling the API BswM_Sd_ClientServiceCurrentState().
  08: Run Sd Main function as many times as the retry timer of this instance
  09: No retries of subscription messages from any consumed event group is seen on the trace because the original OFFERs has died out
  10: Run Sd Main function again as many times as the retry timer of this instance
  11: No retries of subscription messages from any consumed event group is seen on the trace because the original OFFERs has died out

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>421</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00367</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>287</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.DET.Error.Retry.Process.Bigger.Than.TTL</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>638</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1357</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_SECOND_OFFER</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>12469</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  The client service receives an OFFER with a TTL infinite. After the response time
  the subscriptions will be sent out and then after the first retry timer the first retry will be sent out.
  After the second retry timer the second retry will be sent out for both consumed event groups.
  Then, the client service receives a second OFFER
  Then to verify that really the retry of subscriptions has been stopped a new retry cycle of calls to Sd main function
  is carried out and after that the call stack remains empty to really indicate that no further retries have been sent out.
  Then after response times is over and the subscriptions are sent out again for the two consumed event groups then the retry sequence
  starts again. In this case two retry timers are waited and both retries are sent out twice, after each retry time.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Both consumed event groups of this client service are requested
  03: Reception of an Multicast Udp offer message is simulated
  04: Sd_MainFunction is called, Client goes to state AVAILABLE
  05: Run Sd Main function as many times as the response timer to the received OFFER
  06: Subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after the response time is over
  07: Run Sd Main function as many times as the retry timer of this instance
  08: Retries of subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  09: Run Sd Main function as many times as the retry timer of this instance
  10: Retries of subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  11: Reception of a second OFFER message with TTL is simulated
  12: Run Sd Main function as many times as the retry timer of this instance
  13: VP(Sd.SWS_SD_00738): No calls on the stack, no retries have been sent after retry time is exceeded.
  14: Run Sd Main function as many times as the response timer to the received OFFER
  15: Subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after the response time is over
  16: Run Sd Main function as many times as the retry timer of this instance
  17: Retries of subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  18: Run Sd Main function as many times as the retry timer of this instance
  19: Retries of subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00738</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00740</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>538</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1358</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_CEVG_LATE_REQUEST</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>12763</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Client service is requested and ONLY its UDP consumed event groups is requested, TCP consumed event group remains OFF.
  The client service receives an OFFER with a TTL infinite. After the response time
  the UDP consumed event group subscription will be sent out and then after the first retry timer
  the first UDP consumed event group retry of subscription will be sent out.
  Then the TCP consumed event group is requested. This consumed event group will have to start its retry sequence from the beginning.
  After a new retry time both consumed event groups, UDP and TCP retries of subscription will be sent out.
  After a new retry time as the UDP consumed event group has not been acknowledged and it has not been acknowledged then a DET ERROR is
  generated because it has exceeded the maximum number of retries. But the TCP consumed event group will sent its next retry of subscription.
  After a new retry time as the TCP consumed event group has not been acknowledged and it has not been acknowledged then a DET ERROR is generated.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Only the UDP consumed event groups of this client service is requested
  03: Reception of an Multicast Udp offer message with TTL 0xFFFFFFFF is simulated
  04: Sd_MainFunction is called, Client goes to state AVAILABLE
  05: Run Sd Main function as many times as the response timer to the received OFFER
  06: Subscription message from UDP consumed event group is sent out after the response time is over
  07: Run Sd Main function as many times as the retry timer of this instance
  08: Retry of subscription message from UDP consumed event group is sent out after retry time is over
  09: Consumed event group is requested now that the retry of subscription sequence is already running
  10: Run Sd Main function as many times as the retry timer of this instance
  11: VP(Sd.SWS_SD_00741, Sd.SWS_SD_00736):
      Retries of subscription message from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  12: Run Sd Main function as many times as the retry timer of this instance
  13: VP(Sd.SWS_SD_00737): Number of retry messages has exceeded the maximum, a DET ERROR to indicate is generated
  14: Retry of subscription message from TCP consumed event group is sent out after retry time is over
  15: Run Sd Main function as many times as the retry timer of this instance
  16: VP(Sd.SWS_SD_00737): Number of retry messages has exceeded the maximum, a DET ERROR to indicate is generated

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00741</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>539</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00737</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>535</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00736</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>534</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1359</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_CEVG_LATE_REQUEST_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>12985</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Client service is requested and ONLY its UDP consumed event groups is requested, TCP consumed event group remains OFF.
  The client service receives an OFFER. After the response time
  the UDP consumed event group subscription will be sent out and then after the first retry timer
  the first UDP consumed event group retry of subscription will be sent out.
  Then the TCP consumed event group is requested. This consumed event group will have to start its retry sequence from the beginning.
  After a new retry time both consumed event groups, UDP and TCP retries of subscription will be sent out.
  After a new retry time as the UDP consumed event group has not been acknowledged and it has not been acknowledged then a DET ERROR is
  generated because it has exceeded the maximum number of retries. But the TCP consumed event group will sent its next retry of subscription.
  After a new retry time as the TCP consumed event group has not been acknowledged and it has not been acknowledged then a DET ERROR is generated.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast Udp offer message is simulated
  03: Sd_MainFunction is called, Client goes to state AVAILABLE.
  04: Run Sd Main function as many times as the response timer to the received OFFER
  05: No Subscription message is sent out after the response time is over because no consumed event group has been requested
  06: Only the UDP consumed event groups of this client service is requested
  07: Run Sd Main function as many times as the retry timer of this instance
  08: Retry of subscription message from UDP consumed event group is sent out after retry time is over
  09: Consumed event group is requested now that the retry of subscription sequence is already running
  10: Run Sd Main function as many times as the retry timer of this instance
  11: VP(Sd.SWS_SD_00741, Sd.SWS_SD_00736):
      Retries of subscription message from UDP consumed event group and from the TCP consumed event group are sent out after retry time is over
  12: Run Sd Main function as many times as the retry timer of this instance
  13: VP(Sd.SWS_SD_00737): Number of retry messages has exceeded the maximum, a DET ERROR to indicate is generated
  14: Retry of subscription message from TCP consumed event group is sent out after retry time is over
  15: Run Sd Main function as many times as the retry timer of this instance
  16: VP(Sd.SWS_SD_00737): Number of retry messages has exceeded the maximum, a DET ERROR to indicate is generated

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00741</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>539</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00737</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>535</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00736</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>534</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1360</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_REBOOT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>13204</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested shall transmit
  a Find message and after it becomes Available it shall transmit a Subscribe message

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  00: VP(FrTp.EB.PDULENGTHTYPE001): Check that PduLengthType has the expected size (2 or 4 depending on permutation).
      Whole test sequence is then executed with expected PduLengthType and requirement thus covered.
  01: Assign IP addresses and set Client state to requested
  02: Reception of an Multicast Udp offer message is simulated before this client service is requested
  03: Both consumed event groups of this client service are requested
  04: Check if Server service is in MAIN state because socket connections are not open yet
  05: Call Sd_MainFunction is called, Client goes to state AVAILABLE
  06: Check if Server service is in AVAILABLE state because socket connections are already open
  07: A STOP OFFER and an OFFER are subsequently received within the same frame
  08: Call Sd_MainFunction is called, Client should remain in state AVAILABLE
  09: Client service is released and Sd_MainFunction is called
  10: Check if Server service is in DOWN state because it has been released
  11: Call Sd_MainFunction is called, Client goes to state MAIN
  12: VP(Sd.SWS_SD_00464): Check if Server service is in MAIN state and sockets connections
      of this client service have been opened.
      VP(Sd.SWS_SD_00039): Find message is transmitted.
  13: Verification Process that an unicast FIND message was sent correctly during MAIN state
  14: Set Client state to released and again within the same main cycle to requested
  15: Call Sd_MainFunction is called, Client remains in state MAIN
  16: Verification Process that an unicast FIND message was sent correctly during MAIN state
  17: Check if Server service is in MAIN state
  18: Request Consumed eventgroup
  19 Sd_MainFunction() is called
  20: SoCon = OFFLINE
  21: Reception of an Multicast Udp offer message is simulated
  22: Reception of an unicast Udp OFFER message is simulated
  23: Reception of an unicast Udp OFFER message with a wrong IP Adress is simulated
  24: Verification Process (Sd.SWS_SD_00039, Sd.SWS_SD_00658.UDP)
      Subscribe message is transmitted as response to the first received offer message

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00658.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>656</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1361</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_INFINITE_RETRY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>13525</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service when requested and it receives an OFFER all its
  consumed event groups that have been requested will send a SUBSCRIBE.
  If no acknowledges to the subscription sent are received and the instance where this client service is contained
  is configured to send retries indefinitely (SdSubscribeEventgroupRetryMax set to 255) then retries of subscription
  from each consumed event groups will be sent until a subscribe acknowledge for both consumed event groups is received.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Both consumed event groups of this client service are requested
  03: Reception of an Multicast Udp offer message with TTL 0xFFFFFFFF is simulated
  04: Sd_MainFunction is called, Client goes to state AVAILABLE
  05: VP(Sd.EB.CallOut.EventMapping_AVAILABLE): client state goes AVAILABLE, event mapping callout is executed to indicate the external application
  06: Run Sd Main function as many times as the response timer to the received OFFER
  07: Subscription messages from UDP consumed event group and from the TCP consumed event group are sent out after the response time is over
  08: Send as many retries as the maximum value of the retry variable minus one
  09: once the maximum number of retries is reaches the counter variable overflows and start at 1 again
  10: VP(Sd.SWS_SD_00739): once the maximum number of retries is exceeded the retries continue to be sent
  11: SUBSCRIBE ACK for both consumed event groups are received
  12: Retry sequence for both consumed event groups should be stopped, no more retries shall be sent out after retry timer.
  13: VP(Sd.SWS_SD_00738): No calls on the stack, no retries have been sent after retry time is exceeded.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00738</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00739</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>537</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallOut.EventMapping_AVAILABLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1362</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_RetryOfSubscription_INFINITE_RETRY_TTL_NOT_INFINITE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>13780</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that a Client Service from an instance with a retry timer configured to be infinite,
  if the OFFER received does not have a TTL infinite then a Det error to indicate this incoherence will be generated.
  When this happens the response-retry mechanism is not stopped, it continues normally despite this incoherence.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Both consumed event groups of this client service are requested
  03: Reception of an Multicast Udp offer message with TTL 0xFFFFFFFF is simulated
  04: VP (Sd.EB.DET.Error.Retry.Infinite.TTL.Not.Infinite):
      A Det error is generated to indicate that the TTL of the received OFFER is not infinite and the retry of subscription timer is infinite
  05: Sd_MainFunction is called, Client goes to state AVAILABLE
  06: VP(Sd.EB.CallOut.EventMapping_AVAILABLE): client state goes AVAILABLE, event mapping callout is executed to indicate the external appication
  07: Sd_MainFunction is called, Client goes to state AVAILABLE and all its socket connections are opened
  08: VP(Sd.SWS_SD_00600): As the TTL of the received OFFER is shorter than the response time the OFFER dies before its response time ends,
      client service goes back to INITIAL WAIT phase and  and indicate the state SD_CLIENT_SERVICE_DOWN to the BswM by calling the API BswM_Sd_ClientServiceCurrentState()
  09: VP(Sd.EB.CallOut.EventMapping_DOWN): client state goes back to state DOWN, event mapping callout is executed to indicate the external appication
  10: Retry sequence for both consumed event groups should be stopped, no more retries shall be sent out after retry timer
  11: VP(Sd.SWS_SD_00738): No calls on the stack, no retries have been sent after retry time is exceeded

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00738</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>421</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.DET.Error.Retry.Infinite.TTL.Not.Infinite</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>637</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallOut.EventMapping_AVAILABLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallOut.EventMapping_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1363</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_CallOut_EventMapping_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>13957</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that when the option SdCallOutEventMapping is enabled and a Client Service receives an OFFER with a TCP endpoint,
  when this OFFER is processed and the client service goes to state AVAILABLE a call-out to a external SWC with the client service Id,
  client service instance Id and the IP address is found on the functions call trace.
  When a STOP OFFER is received and the client service goes back to DOWN then, a call-out to a external SWC with the client service Id,
  client service instance Id and a NULL pointer as IP address is found on the functions call trace.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Both consumed event groups of this client service are requested
  03: Reception of an Multicast Tcp offer message with TTL 0xFFFFFFFF is simulated
  04: Sd_MainFunction is called, Client goes to state AVAILABLE
  05: VP(Sd.EB.CallOut.EventMapping_AVAILABLE): client state goes AVAILABLE, event mapping callout is executed to indicate the external appication
  06: A STOP OFFER to cancel the previously received OFFER is received
  07: VP(Sd.EB.CallOut.EventMapping_DOWN): client state goes back to state DOWN, event mapping callout is executed to indicate the external appication

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.CallOut.EventMapping_AVAILABLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallOut.EventMapping_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1364</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_CallOut_EventMapping_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>14125</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that when the option SdCallOutEventMapping is enabled and a Client Service receives an OFFER with an UDP endpoint,
  when this OFFER is processed and the client service goes to state AVAILABLE a call-out to a external SWC with the client service Id,
  client service instance Id and the IP address is found on the functions call trace.
  When a STOP OFFER is received and the client service goes back to DOWN then, a call-out to a external SWC with the client service Id,
  client service instance Id and a NULL pointer as IP address is found on the functions call trace.

Test Object:  Client Service 
Test Precondition: 
  Service is configured with SdClientServiceAutoRequire = FALSE

Test Execution: 
  01: Assign IP addresses and set Client state to requested
  02: Both consumed event groups of this client service are requested
  03: Reception of an Multicast Tcp offer message with TTL 0xFFFFFFFF is simulated
  04: Sd_MainFunction is called, Client goes to state AVAILABLE
  05: VP(Sd.EB.CallOut.EventMapping_AVAILABLE): client state goes AVAILABLE, event mapping callout is executed to indicate the external appication
  06: A STOP OFFER to cancel the previously received OFFER is received
  07: VP(Sd.EB.CallOut.EventMapping_DOWN): client state goes back to state DOWN, event mapping callout is executed to indicate the external appication

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.CallOut.EventMapping_AVAILABLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.CallOut.EventMapping_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1365</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Handle_Offer_After_ConnectionReadyTimer_Running_Out</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>14291</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that after an offer from a ServerService A to a ClientService A
  is received and processed, and another offer from a ServerService B to a ClientService B
  runs into a timeout and is handled after the ConnectionReadyTimer of the client runs out,
  a third offer from ServerService B to ClientService B is handled correctly.

Test Object:  Client Service 
Test Precondition: 

Test Execution: 
  01: ClientServices A and B go into state available.
  02: SoAd_IsConnectionReady_Stub is configured to return E_OK.
  03: ClientService A gets offer from ServerService A.
  04: VP(): Offer gets handled and subscribe message is sent.
  05: ClientService B gets offer from Server B.
  06: SoAd_IsConnectionReady_Stub is configured to return TCPIP_E_PENDING.
  07: Call Sd_MainFunction() until ResponseTimer is finished.
  08: Call Sd_MainFunction() until ConnectionReadyTimer is finished.
  09: VP(Sd.EB.ConnectionReady.Pending): SoAd_IsConnectionReady() is called each cycle and nothing is sent.
  10: Call Sd_MainFunction() after timers ran out.
  11: VP(Sd.EB.ConnectionReady.Timer): A DET error shall be reported because ConnectionReadyTimer ran out.
  12: VP(): ClientService B is in SD_CLIENT_SERVICE_COMPHASE_WAIT_SOCON phase.
  13: SoAd_IsConnectionReady_Stub is configured to return E_OK.
  14: VP(Sd.EB.ConnectionReady.Ok): After Sd_MainFunction() call, the offer gets handled and subscribe message is sent.
  15: ClientService B gets another offer from Server B.
  16: Call Sd_MainFunction() until ResponseTimer is finished.
  17: Call Sd_MainFunction() after timers ran out.
  18 VP(): Offer gets handled and subscribe message is sent.

Test Input: 
  ClientServices A is in state AVAILABLE
  ClientServices B is in state WAIT_SOCON

Test Output: 
  ClientServices A is in state AVAILABLE
  ClientServices B is in state AVAILABLE
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>622</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.Pending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>621</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConnectionReady.Timer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>624</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1366</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_Sd_Linkdown_LinkUp_TTL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>14697</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test shall verify that for a client service the TTL of an received offer
  is reset after the local address is unassigned.
  If a second client of the same instance receives an offer, the TTL timeout shall not be
  influenced by the first client's TTL.

Test Object:  Client Service 
Test Precondition: 
  - Service is configured with SdClientServiceAutoRequire = FALSE
  - Local IP addresses assigned and consumed event groups of this client service is requested.

Test Execution: 
  01: Call Sd_RxIndication() to receive a multicast Udp offer message with TTL 0xFFFFFFFF.
  02: Call Sd_MainFunction() to bring the client to state AVAILABLE.
  03: Send a subscribe.
  04: Call Sd_LocalIpAddrAssignmentChg() to unassigned local IP address and
      bringing the service instance to DOWN.
  05: VP(Sd.SWS_SD_00712): Check that the client service is DOWN and
      its underlying sockets and data paths are disabled and closed.
  06: Call Sd_LocalIpAddrAssignmentChg() to assign local IP address again and request another
      client service.
  07: Call Sd_RxIndication() to receive an offer for another client service of the same
      service instance.
  08: Call Sd_MainFunction() to bring the another client to state AVAILABLE.
  09: VP(Sd.SWS_SD_00712): No calls on the stack,
      no retries have been sent after retry counter was reset.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00712</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1367</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Client_ACL_Check_Passed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>14979</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test case verifies that SD_REPORT_ID_ACL_CHECK_FAILED is not reported and
  SoAd_SetUniqueRemoteAddr() gets called, if a Client Service receives an offer from
  a remoteAddress and with an endpoint that are configured as an allowed provider for this service.

Test Object:  Client Service 
Test Precondition: 
  Issue reporting and ACLPolicyCheck must be enabled in the config.
  SdDisableAclRemoteAddrCheck must be set to false in the config.

Test Execution: 
  01: Assign IP addresses and set Client state to requested.
  02: Reception of an Multicast Udp offer message is simulated.
  03: Configure an endpoint with an address that is configured as allowed provider for this service.
  04: VP(SWS_SD_00785) SoAd_SetUniqueRemoteAddr() is called.
  05: VP(SWS_SD_00785, Sd.dsn.Func0004.Client.AccessControlList_RemoteAddr_Check) User_ReportIssueCallout is not called.
  06: Call Sd_MainFunction().
  07: VP() Client service is in state AVAILABLE.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList_RemoteAddr_Check</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1195</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>583</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00764</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>584</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00785</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1368</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Client_ACL_RemoteAddr_Check_Failed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>15097</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that SD_REPORT_ID_ACL_CHECK_FAILED is reported
  if a Client Service receives an offer from a remoteAddr that is not configured as an
  allowed provider for this service.

Test Object:  Client Service 
Test Precondition: 
  Issue reporting and ACLPolicyCheck must be enabled in the config.
  SdDisableAclRemoteAddrCheck must be set to false in the config.
  Client service must have at least one IP configured as AllowedProvider.
  User_ReportIssue_Stub.Callout is set to ReportIssue_GetContexData_Callout()

Test Execution: 
  01: Assign IP addresses and set Client state to requested.
  02: Call Sd_MainFunction().
  03: VP() Client service goes to state MAIN and find message is sent.
  04: Reception of an Multicast Udp offer message from not allowed remote address is simulated.
  05: VP(Sd.dsn.Func0003.ReportIssueCallout_Reporting, Sd.dsn.Func0004.Client.AccessControlList_Check)
      User_ReportIssueCallout is called with eventType SD_REPORT_ID_ACL_CHECK_FAILED and the failed
      address was the remoteAddr.
  06: Call Sd_MainFunction().
  07 VP(): Client service is still in state MAIN.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList_RemoteAddr_Check</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1195</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>583</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00764</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>584</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1369</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Client_ACL_IPv6_Check_Failed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>15230</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that SD_REPORT_ID_ACL_CHECK_FAILED is reported
  if a Client Service receives an offer from a an IPv6 remoteAddr as IPv6
  is currently not supported.

Test Object:  Client Service 
Test Precondition: 
  Issue reporting and ACLPolicyCheck must be enabled in the config.
  SdDisableAclRemoteAddrCheck must be set to false in the config.
  Client service must have at least one IP configured as AllowedProvider.
  User_ReportIssue_Stub.Callout is set to ReportIssue_GetContexData_Callout()
  Parameters ptr is set to IPv6

Test Execution: 
  01: Assign IP addresses and set Client state to requested.
  02: Call Sd_MainFunction().
  03: VP() Client service goes to state MAIN and find message is sent.
  04: Reception of an Multicast Udp offer message from IPv6 remote address is simulated.
  05: VP(Sd.dsn.Func0003.ReportIssueCallout_Reporting, Sd.dsn.Func0004.Client.AccessControlList_Check)
      User_ReportIssueCallout is called with eventType SD_REPORT_ID_ACL_CHECK_FAILED.
  06: Call Sd_MainFunction().
  07 VP(): Client service is still in state MAIN.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList_RemoteAddr_Check</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1195</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>583</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1370</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Client_ACL_No_RemoteAddr_Check_Endpoint_Check_Failed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>15355</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that SD_REPORT_ID_ACL_CHECK_FAILED is not reported for an
  offer from a remote address that is not configured as an allowed provider if the
  remote address check was disabled.
  Additionally it is verified that SD_REPORT_ID_ACL_CHECK_FAILED is reported for both
  UDP and TCP endpoints if a Client Service receives an offer with UDP and TCP
  endpoints that are not configured as an allowed provider for this service.

Test Object:  Client Service 
Test Precondition: 
  Issue reporting and ACLPolicyCheck must be enabled in the config.
  SdDisableAclRemoteAddrCheck must be set to true in the config.
  Client service must have at least one IP configured as AllowedProvider.
  User_ReportIssue_Stub.Callout is set to ReportIssue_GetContexData_Callout()

Test Execution: 
  01: Assign IP addresses and set Client state to requested.
  02: Call Sd_MainFunction().
  03 VP(): Client service goes to state MAIN and find message is sent.
  04: Reception of an Multicast Udp offer message from a not allowed provider is simulated.
  05: Configure UDP and TCP endpoints that are not configured as an allowed provider.
  06: VP(Sd.dsn.Func0003.ReportIssueCallout_Reporting, Sd.dsn.Func0004.Client.AccessControlList_Check,
         Sd.dsn.Func0004.Client.AccessControlList_Disable_RemoteAddr_Check)
      User_ReportIssueCallout is called with eventType SD_REPORT_ID_ACL_CHECK_FAILED for the UDP and TCP
      endpoints. The invalid remote address is not reported as the check is disabled.
  07: Call Sd_MainFunction().
  08 VP(): Client service is still in state MAIN.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList_Disable_RemoteAddr_Check</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1196</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>583</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00764</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>584</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00785</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1371</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Client_ACL_Check_Disabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>15511</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that after calling Sd_DisableAcl() SD_REPORT_ID_ACL_CHECK_FAILED is still
  reported if a Client Service receives an offer from an remoteAddr + endpoint adddresses that are not
  configured as an allowed provider for this service.

Test Object:  Client Service 
Test Precondition: 
  Issue reporting and ACLPolicyCheck must be enabled in the config.

Test Execution: 
  01: Call Sd_DisableAcl().
  02: Assign IP addresses and set Client state to requested.
  03: Reception of an Multicast Udp offer message is simulated.
  04: VP(Sd.dsn.Func0004.Client.AccessControlList_Disable, Sd.dsn.Func0003.ReportIssueCallout_Reporting)
      User_ReportIssueCallout is called with eventType SD_REPORT_ID_ACL_CHECK_FAILED for the remoteAddr as
      well as the endpoint addresses. The check of the endpoints shows that the result of the ACL check is
      ignored but still logged, otherwise the failed remote address check would skip the endpoint checks.
  05: Call Sd_MainFunction()
  06: VP() Client service is in state AVAILABLE.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0004.Client.AccessControlList_Disable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1372</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_ReportIssue_Client_Blacklisted_MinorVersion</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>15641</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that SD_REPORT_ID_SERVICE_BLACKLISTED is reported
  if a Client Service receives an offer with a blacklisted MinorVersion.

Test Object:  Client Service 
Test Precondition: 
  Issue reporting must be enabled in the config.

Test Execution: 
  01: Assign IP addresses and set Client state to requested.
  02: Reception of an Multicast Udp offer message is simulated.
  03: VP(Sd.dsn.Func0003.User_ReportIssueCallout, Sd.dsn.Func0003.ReportIssueCallout_Reporting)
      User_ReportIssueCallout is called with eventType SD_REPORT_ID_SERVICE_BLACKLISTED.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1373</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_ReportIssue_Client_No_Match_Found</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>15738</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that User_ReportIssueCallout() is not called, if a Client Service receives an offer
  from a service that is not blacklisted but for which no match was found because of any other reason.

Test Object:  Client Service 
Test Precondition: 
  Issue reporting must be enabled in the config.

Test Execution: 
  01: Assign IP addresses and set Client state to requested.
  02: Reception of an Multicast Udp offer message is simulated.
  03: VP(Sd.dsn.Func0003.User_ReportIssueCallout)
      User_ReportIssueCallout is not called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1374</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_ReportIssue_Client_No_Data_Socket_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>15833</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that SD_REPORT_ID_NO_DATA_SOCKET is reported
  if no data socket is found after ClientService receives an offer for a
  TCP endpoint.

Test Object:  Client Service 
Test Precondition: 
  Issue reporting must be enabled in the config.

Test Execution: 
  01: Assign IP addresses and set Client state to requested.
  02: Set SoAd_SetUniqueRemoteAddr_Stub to return E_NOT_OK.
  03: Reception of an Multicast Udp offer message is simulated.
  04: VP(Sd.dsn.Func0003.User_ReportIssueCallout, Sd.dsn.Func0003.ReportIssueCallout_Reporting)
      User_ReportIssueCallout is called with eventType SD_REPORT_ID_NO_DATA_SOCKET.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1375</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_ReportIssue_Client_No_Data_Socket_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>15938</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that SD_REPORT_ID_NO_DATA_SOCKET is reported
  if no data socket is found after ClientService receives an offer for a
  UDP endpoint.

Test Object:  Client Service 
Test Precondition: 
  Issue reporting must be enabled in the config.

Test Execution: 
  01: Assign IP addresses and set Client state to requested.
  02: Set SoAd_SetUniqueRemoteAddr_Stub to return E_NOT_OK.
  03: Reception of an Multicast Udp offer message is simulated.
  04: VP(Sd.dsn.Func0003.User_ReportIssueCallout, Sd.dsn.Func0003.ReportIssueCallout_Reporting)
      User_ReportIssueCallout is called with eventType SD_REPORT_ID_NO_DATA_SOCKET.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1376</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_ReportIssue_Server_Service_Not_Configured</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>16044</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that SD_REPORT_ID_SERVICE_NOT_CONFIGURED is reported
  if a Server Service receives a subscribe entry for a service that is not configured.

Test Object: Server Service
Test Precondition: 
  Issue reporting must be enabled in the config.

Test Execution: 
  01: Set Server state to AVAILABLE
  02: Call Sd_MainFunction. Server service goes into MAIN state.
  03: Check to make sure Server Service is in state MAIN
  04: Verification Process that an unicast OFFER was sent correctly during MAIN state
  05: Reception of an unicast SUBSCRIBE message to the service offered is simulated
  06: VP(Sd.dsn.Func0003.User_ReportIssueCallout, Sd.dsn.Func0003.ReportIssueCallout_Reporting)
      User_ReportIssueCallout is called with eventType SD_REPORT_ID_SERVICE_NOT_CONFIGURED.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1377</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_ReportIssue_Server_No_Data_Socket_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>16161</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that SD_REPORT_ID_NO_DATA_SOCKET is reported
  if no data socket is found after a ServerService receives a subscribe entry for a
  UDP endpoint.

Test Object: Server Service Down Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server state to AVAILABLE
  02: Call Sd_MainFunction. Server service goes into MAIN state.
  03: Check to make sure Server Service is in state MAIN
  04: Reception of an unicast SUBSCRIBE message to the service offered is simulated
  05: VP(Sd.dsn.Func0003.User_ReportIssueCallout, Sd.dsn.Func0003.ReportIssueCallout_Reporting)
      User_ReportIssueCallout is called with eventType SD_REPORT_ID_NO_DATA_SOCKET.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1378</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_General_ReportIssue_Server_No_Data_Socket_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>16282</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: Server Service Down Phase
Test Precondition: 
  Service is configured with SdServerServiceAutoAvailable = FALSE

Test Execution: 
  01: Set Server state to AVAILABLE
  02: Call Sd_MainFunction
  03: Reception of an unicast Tcp SUBSCRIBE message to the service offered is simulated
  04: VP(Sd.dsn.Func0003.User_ReportIssueCallout, Sd.dsn.Func0003.ReportIssueCallout_Reporting)
      User_ReportIssueCallout is called with eventType SD_REPORT_ID_NO_DATA_SOCKET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.dsn.Func0003.User_ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1192</internalId></provcov>
        <provcov>
          <linksto>Sd.dsn.Func0003.ReportIssueCallout_Reporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1379</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_ConfTest_01_Rx_Read_Config_Option</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_ConfTest_64K/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>478</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that the loop that is used for reading a config option
  string can not get stuck in an endless loop, caused by an integer overflow.
  Such an overflow would occur in Sd_Receive_readConfigOption() when the loop 
  increases the iterator by the current value of the string + 1. In a scenario where
  the iterator already has the value 65280 and the current value of the string is 255,
  256 would be added to 65280, causing the iterator to overflow and trigger an endless loop.

Test Object:  Sd_RxIndication() 
Test Precondition: 

Test Execution: 
  01: Build a string that could cause an integer overflow when reading it as config options
  02: Assign IP addresses
  03: Call to Sd_MainFunction, Client #2 is requested
  04: SoAd_OpenSoCon is called for all Socket Connections associated with this Client Service
      and client service goes to state MAIN.
  05: Reception of an offer message
  06: VP(): The Sd_RxIndication() call returned and did not get stuck.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1380</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_ConfTest_01_General_Sd_Server_Service_AutoAvailable</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_PostBuildTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>718</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that whe Server Service Auto Request option is activated (server service #2),
  it goes directly into INITIAL_WAIT after receiving an IP address but stays in state DOWN in case
  Auto Request is not activated (server service #5).
  In two of the variants Server Service #2 has Auto Request activated and in the other two deactivated.

Test Object: PostBuildSelectable ServerService AutoAvailable
Test Precondition: 
  Service #2 is configured with SdServerServiceAutoAvailable = TRUE in two variants
  and SdServerServiceAutoAvailable = FALSE in the other two variants.

Test Execution: 
  01: Assign IP addresses
  02: Both server service #2 and server service #5 shall be in down state
  03: Call to Main Function
  04: Server service #2 shall be in INITIAL WAIT state in the variants where Auto Request is activated and in DOWN
      state in the variatns where Auto Request is not activated.
      Server service #5 shall be in DOWN state in all variants
  05: Both server service #2 and #5 are requested.
  06: Call to Main Function
  07: Server service #2 shall be in INITIAL WAIT state for all variants after it has been requested.
      Server service #5 shall be in MIAN state in all variants after it has been requested.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PBSelectable.ServerServiceAutoAvailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1381</internalId></specobject>
    <specobject>
      <id>TS_Sd_ConfTest_01_PostBuild_Sd_Server_Service_Parameters</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_PostBuildTest/source/application/Sd_tests.c.m4</sourcefile>
      <sourceline>833</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test case verifies that whe Server Service Auto Request option is activated (server service #2),
  it goes directly into INITIAL_WAIT after receiving an IP address but stays in state DOWN in case
  Auto Request is not activated (server service #5).
  In two of the variants Server Service #2 has Auto Request activated and in the other two deactivated.

Test Object: PostBuildSelectable ServerService Identification Parameters
Test Precondition: 

Test Execution: 
  01: Assign IP addresses
  02:  Server service goes into MAIN state
  03:  Check if Server service is in MAIN state
  04:  Reception of an unicast FIND message is simulated
      Server service #5 shall be in DOWN state in all variants
  05: Sd Main function called
  06: VP: an unicast OFFER in response to the FIND message was sent correctly
  07: VP: Server Service is correctly identified for each variant
  08: Reception of an unicast SUBSCRIBE message to the service offered is simulated
  09: Sd Main function called
  10: VP: multicast SUBSCRIBE ACK message in response to the SUBSCRIBE message was sent correctly
  11: VP: Server Service is correctly identified for each variant

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.PBSelectable.ServerServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBSelectable.ServerServiceInstanceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBSelectable.ServerServiceMajorVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.PBSelectable.ServerServiceMinorVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1382</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_INITIALWAIT_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>1300</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service will change states correct for
  a requested ClientService when the TX Ip-address is assigned before the RX IP-address.

Test Object: 
  SdInstance_ClientOnlyAuto\SdClientService_5_Auto

Test Precondition: 
  Sd module is initialized.
  No IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to assign TX IP address and call Sd_MainFunction.
  02: VP(Sd.Design.ClientService.Down.Ev.009): Client Service shall stay in DOWN state.
  03: Call Sd_LocalIpAddrAssignmentChg() to assign RX multicast IP address and call Sd_MainFunction.
  04: VP(Sd.Design.ClientService.Down.Ev.007):
      Client service shall change to INITIALWAIT state.

Test Input: ClientService with SdClientServiceAutoRequire is configured to TRUE.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>941</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1383</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_INITIALWAIT_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>1372</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service will change states correct
  when the TX and RX Ip-addresses are assigned before Client Service is requested.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  No IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to assign TX IP address and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Down.Ev.004):
      Client service shall stay in DOWN state.
  03: Call Sd_LocalIpAddrAssignmentChg() to assign RX multicast IP address and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Down.Ev.004): Client service shall stay in DOWN state.
  05: Request client service and call Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.Down.Ev.019, Sd.Design.ClientService.SetState.001):
      Client service shall be in INITIALWAIT state and SoAd_OpenSoCon() shall be called for UDP-Unicast
      and for all socket connections of this client's group.

Test Input: ClientService with SdClientServiceAutoRequire is configured to FALSE.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>940</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.SetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1022</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1384</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_INITIALWAIT_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>1459</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service will change states correct for
  a requested ClientService when the RX Ip-address is assigned before the TX IP-address.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffMajor

Test Precondition: 
  Sd module is initialized.
  No IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Request ClientService and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Down.Ev.018, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.
  03: Call Sd_LocalIpAddrAssignmentChg() to assign RX multicast IP address and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Down.Ev.011, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.
  05: Call Sd_LocalIpAddrAssignmentChg() to assign TX IP address and call Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.Down.Ev.008):
      Client service shall be in INITIALWAIT state:

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>942</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>945</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1385</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_INITIALWAIT_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>1545</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service will change states correct for
  a requested ClientService when the TX Ip-address is assigned before the RX IP-address.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffMinor

Test Precondition: 
  Sd module is initialized.
  No IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Request ClientService and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Down.Ev.018, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.
  03: Call Sd_LocalIpAddrAssignmentChg() to assign TX IP address and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Down.Ev.009, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.
  05: Call Sd_LocalIpAddrAssignmentChg() to assign RX multicast IP address and call Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.Down.Ev.010):
      Client service shall be in INITIALWAIT state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>944</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1386</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_INITIALWAIT_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>1633</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service will change states correct for
  a requested ClientService when the TX Ip-address is assigned before the RX IP-address.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_2

Test Precondition: 
  Sd module is initialized.
  No IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to assign TX IP address and call Sd_MainFunction.
  02: VP(Sd.Design.ClientService.Down.Ev.009): Client Service shall stay in DOWN state.
  03: Call Sd_LocalIpAddrAssignmentChg() to assign RX multicast IP address and call Sd_MainFunction.
  04: VP(Sd.Design.ClientService.Down.Ev.007):
      Client service shall change to INITIALWAIT state and no calls to SoAd_OpenSoCon() should be 
      present on the trace since this client has TCP data path configured.

Test Input: ClientService with SdClientServiceAutoRequire is configured to TRUE.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>941</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1387</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_INITIALWAIT_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>1707</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service will change states correct for
  a requested ClientService when the TX Ip-address is assigned before the RX IP-address.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_3

Test Precondition: 
  Sd module is initialized.
  No IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to assign TX IP address and call Sd_MainFunction.
  02: VP(Sd.Design.ClientService.Down.Ev.009): Client Service shall stay in DOWN state.
  03: Call Sd_LocalIpAddrAssignmentChg() to assign RX multicast IP address and call Sd_MainFunction.
  04: VP(Sd.Design.ClientService.Down.Ev.007):
      Client service shall change to INITIALWAIT state and no calls to SoAd_OpenSoCon() should be
      present on the trace since this client has TCP data path configured.

Test Input: ClientService with SdClientServiceAutoRequire is configured to TRUE.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>941</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1388</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_WAIT_SOCON_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>1781</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall correctly change state to
  WAIT_SOCON if client service was requested after receiving an unicast OfferService
  entry and the UDP-Unicast socket connection is not online.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Tx and Multicast Rx IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.Down.Ev.001, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.
  03: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Down.Ev.020):
      Client service shall be in WAIT_SOCON state.
  05: VP(Sd.Design.ClientService.Down.Ev.020):
      SoAd_GetSoConMode shall be called for UDP-Unicast.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>937</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1389</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_AVAILABLE_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>1885</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall correctly change state
  if client service was requested after receiving an unicast OfferService entry
  and the UDP-Unicast socket connection is online.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Tx and Multicast Rx IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.Down.Ev.001, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.
  03: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Client service shall be in AVAILABLE state.
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_GetSoConMode and SoAd_OpenSoCon shall be called for UDP-Unicast.
  06: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  07: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroups #0 - #4

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>937</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1390</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_AVAILABLE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>2034</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall correctly change state
  if client service was requested after receiving a multicast OfferService entry
  and the UDP-Unicast socket connection is online.
  Test also verifies that an eventgroup cannot be requested while in DOWN state.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Tx and Multicast Rx IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: Call Sd_Instance_MainFunction().
  03: VP(Sd.Design.ClientService.Down.Ev.001, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.
  04: Call Sd_ConsumedEventGroupSetState() to request eventgroup #0
  05: VP(Sd.SWS_SD_00442):
      Sd_ConsumedEventGroupSetState() shall fail and return E_NOT_OK
  06: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call Sd_Instance_MainFunction().
  07: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Client service shall be in AVAILABLE state.
  08: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_GetSoConMode and SoAd_OpenSoCon shall be called for UDP-Unicast.
  09: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>937</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00442</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>347</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1391</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_REPETITION_NoInitialFindDelay</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>2177</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD client service will correctly change state when requested.

Test Object: 
  SdInstance_ClientOnly\SdClientService_65534_0

Test Precondition: 
  Sd module is initialized.
  Tx and Multicast Rx IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.InitialWait.Ev.100):
      ClientService shall immediately exit state INITIALWAIT: Sd_Send_queueFindService() shall be called with correct arguments.
  03: VP(Sd.Design.ClientService.InitialWait.Ev.100):
      Client service shall be in REPETITION state.

Test Input: ClientService with initial find delay configured to 0
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>954</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1392</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_MAIN_NoInitialFindDelayNoRepetition</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>2246</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD client service will correctly change state when requested.

Test Object: 
  SdInstance_ClientOnly\SdClientService_65534_0

Test Precondition: 
  Sd module is initialized.
  Tx and Multicast Rx IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.InitialWait.Ev.100):
      ClientService shall immediately exit state INITIALWAIT: Sd_Send_queueFindService() shall be called with correct arguments.
  03: VP(Sd.Design.ClientService.Repetition.Ev.201):
      ClientService shall immediately exit state REPETITION: Client service shall be in MAIN state.

Test Input: ClientService with initial find delay and find repetitions configured to 0
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>954</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>967</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1393</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_OfferReceived</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>2319</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a released ClientService shall not change state when received an OfferService,
  and that the Offer shall not be valid after its TTL expired.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Tx and Multicast Rx IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer
      and call Sd_ClientService_mainFunction() until Service Offer TTL expired.
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.Down.Ev.001, Sd.Design.ClientService.Down.Ev.003, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.
  03: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Down.Ev.019):
      OfferService shall not be active: client service shall change state to INITIALWAIT 
      and call SoAd_OpenSoCon for UDP-Unicast for all socket connections of the group.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>937</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>939</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1394</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_StopOfferReceived</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>2421</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that a released ClientService with active Offer shall not change state when received StopOfferService,
  and that the Offer shall not be active after it was stopped.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Tx and Multicast Rx IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer.
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be se
      and that SoAd_OpenSoCon() is called.
  02: Call Sd_MainFunction().
  03: VP(Sd.Design.ClientService.Down.Ev.001, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.
  04: Call Sd_ClientService_EventOfferService() to simulate reception of Service StopOffer and call Sd_ClientService_mainFunction().
  05: VP(Sd.Design.ClientService.Down.Ev.002, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.
  06: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call Sd_ClientService_mainFunction().
  07: VP(Sd.Design.ClientService.Down.Ev.019):
      OfferService shall not be active: client service shall change state to INITIALWAIT.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>937</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>938</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1395</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_ReleaseRequest</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>2532</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a released ClientService shall ignore a release request.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Tx and Multicast Rx IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_RELEASED and call Sd_ClientService_mainFunction()
  02: VP(Sd.Design.ClientService.Down.Ev.016, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>953</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1396</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_TX_NotAssigned</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>2591</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD client while in state DOWN shall not change state
  if Tx IP address is unassigned or onhold.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Tx and Multicast Rx IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to UNASSIGNED and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Down.Ev.012, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.
  03: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to ONHOLD and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Down.Ev.014, Sd.Design.ClientService.Ignore):
      Client service shall stay in DOWN state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>951</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1397</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_DOWN_RX_NotAssigned</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>2663</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client while in state DOWN shall not change state
  if Multicast Rx IP address is unassigned or onhold.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Tx and Multicast Rx IP address assigned
  Client service is in state DOWN

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change Multicast RxPdu IP address state to UNASSIGNED,
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Down.Ev.013, Sd.Design.ClientService.Ignore): Client service shall stay in DOWN state.
  03: Call Sd_LocalIpAddrAssignmentChg() to change Multicast RxPdu IP address state to ONHOLD,
      and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Down.Ev.015, Sd.Design.ClientService.Ignore): Client service shall stay in DOWN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>950</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>952</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1398</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_DOWN_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>2734</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase will correctly change state
  after being released.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_RELEASED and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.InitialWait.Ev.103, Sd.Design.ClientService.SetState.002):
      Client service shall be in DOWN state.
  03: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_RELEASED and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.InitialWait.Ev.103, Sd.Design.ClientService.SetState.002):
      Client service shall be in DOWN state and no calls SoAd_CloseSoCon() shall be present on the trace
      since this client has a TCP datapath configured
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>957</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.SetState.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1023</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00463</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>368</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1399</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_DOWN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>2894</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase will correctly change state
  after being released.

Test Object: 
  SdInstance_ClientOnlyAuto\SdClientService_5_Auto

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_RELEASED to stop the client service and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.InitialWait.Ev.111): Client service shall be in DOWN state.

Test Input: ClientService with SdClientServiceAutoRequire is configured to TRUE.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>958</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1400</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_TX_Unassign</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>2950</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase will correctly change state
  after IP address associated with the SdInstanceTxPdu changes state to other that ASSIGNED.
  Test also verifies that the ClientService will correctly change state if IP address assignment
  is restored.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to ONHOLD and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.InitialWait.Ev.104, Sd.SWS_SD_00712):
      Client service shall be in DOWN state.
  03: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to ASSIGNED and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Down.Ev.008):
      Client service shall be in INITIALWAIT state:
  05: VP(Sd.SWS_SD_00712):
      Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to UNASSIGNED and call Sd_ClientService_mainFunction() to update the client service state.
  06: VP(Sd.Design.ClientService.InitialWait.Ev.104):
      Client service shall be in DOWN state.
  07: VP(Sd.SWS_SD_00712):
      Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to ONHOLD and call Sd_ClientService_mainFunction().
  08: VP(Sd.Design.ClientService.InitialWait.Ev.104):
      Client service shall be in DOWN state. No calls to SoAd_CloseSoCon() should be on the trace since this client doesn't have
      an UDP unicast reference configured.
  09: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to ASSIGNED and call Sd_ClientService_mainFunction().
  10: VP(Sd.Design.ClientService.Down.Ev.008):
      Client service shall be in INITIALWAIT state and no calls to SoAd_OpenSoCon() shall be on the trace since
      this cliend doesn't have UDP Unicast reference configured.
  11: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to UNASSIGNED and call Sd_ClientService_mainFunction() to update the client service state.
  12: VP(Sd.Design.ClientService.InitialWait.Ev.104):
      Client service shall be in DOWN state and no calls to SoAd_CloseSoCon() should be on the trace since this client doesn't have
      an UDP unicast reference configured.
  13: VP(Sd.SWS_SD_00712):
      Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to ONHOLD and call Sd_ClientService_mainFunction().
  14: VP(Sd.Design.ClientService.InitialWait.Ev.104):
      Client service shall be in DOWN state. No calls to SoAd_CloseSoCon() should be on the trace since this client doesn't have
      an UDP unicast reference configured, this client is a multicast only.
  15: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to ASSIGNED and call Sd_ClientService_mainFunction().
  16: VP(Sd.Design.ClientService.Down.Ev.008):
      Client service shall be in INITIALWAIT state and no calls to SoAd_OpenSoCon() shall be on the trace since
      this cliend doesn't have UDP Unicast reference configured, this client is a multicast only.
  17: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to UNASSIGNED and WITHIN the same cycle back to ASSIGNED
      and call Sd_ClientService_mainFunction() to update the client service state.
  18: VP(Sd.Design.ClientService.Down.Ev.008):
      Client service shall be in INITIALWAIT state and no calls to SoAd_OpenSoCon() shall be on the trace since
      this cliend doesn't have UDP Unicast reference configured, this client is a multicast only.
  19: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to UNASSIGNED and call Sd_ClientService_mainFunction() to update the client service state.
  20: VP(Sd.Design.ClientService.InitialWait.Ev.104):
      Client service shall be in DOWN state andNo calls to SoAd_CloseSoCon() should be on the trace since this client doesn't have
      an UDP unicast reference configured, this client is a multicast only.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>942</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>959</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00712</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1401</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_RX_Unassign</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>3152</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase will correctly change state
  after IP address associated with the SdInstanceRxMultiCastPdu changes state to other that ASSIGNED.
  Test also verifies that the ClientService will correctly change state if IP address assignment
  is restored.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffMajor

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: VP(Sd.SWS_SD_00712):
      Call Sd_LocalIpAddrAssignmentChg() to change IP address state to ONHOLD call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.InitialWait.Ev.105):
      Client service shall be in DOWN state.
  03: Call Sd_LocalIpAddrAssignmentChg() to change IP address state to ASSIGNED and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Down.Ev.010):
      Client service shall be in INITWAIT state.
  05: VP(Sd.SWS_SD_00712):
      Call Sd_LocalIpAddrAssignmentChg() to change IP address state to UNASSIGNED and all Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.InitialWait.Ev.105):
      Client service shall be in DOWN state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>944</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00712</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1402</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_REPETITION_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>3240</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase will correctly change state
  after initial find delay timer expired.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientService_mainFunction() until SdClientTimerInitialFindDelay timer expires.
  02: VP(Sd.Design.ClientService.InitialWait.Ev.100):
      Client service shall be in REPETITION state.
      Sd_Send_queueFindService() shall be called with correct arguments.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>954</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1403</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_MAIN_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>3309</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase will correctly change state
  after an OfferService is received and UDP-Unicast socket connection is offline.

Test Object: 
  SdInstance_ClientEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.InitialWait.Ev.113):
      SoAd_GetSoConMode shall be called for UDP-Unicast.
  03: VP(Sd.Design.ClientService.InitialWait.Ev.113, Sd.SWS_SD_00352):
      Client service shall be in WAIT_SOCON state.
  04: Call to Sd Main Function so many times until the TTL of the received OFFER dies out
  05: Once the received OFFER is no longer valid, client service #1 goes back to INITIAL WAIT state
  06: Previously set socket connection is released now

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00352</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1404</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_TCP_INITIALWAIT_AVAILABLE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>3439</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that a TCP only SD ClientService in Initial Wait Phase will not change state
  after an OfferService is received. TCP is not supported.

Test Object: 
  SdInstance_ClientEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      directed to a client service which doesn't have an unicast UDP data path configured, only a TCP data path.
  02: call Sd_MainFunction().
  03: VP Client service shall be still in INITIAL WAIT state. SoAd_SetUniqueRemoteAddr returned E_NOT_OK.
  04: request TCP consumed event group.
  05: VP: consumed event group has change it state to REQUESTED.
  06: Call Sd_ClientService_EventOfferService() to simulate reception of a Service Stop Offer from remote node #3
      directed to a client service which doesn't have an unicast UDP data path configured, only a TCP data path.
      This STOP OFFER is received just before an OFFER is going to be received (see next point) to simulate the case
      where an OFFER comes right after an STOP OFFER within the same frame.
  07: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      directed to a client service which doesn't have an unicast UDP data path configured, only a TCP data path.
  08: VP (Sd.EB.ConsumedEventgroup.RoutingTCP): as this client service has a TCP reference configured, then a TCP datapath has been opened
  09: VP: SoAd_SetUniqueRemoteAddr returned OK, client service goes to AVAILABLE
  10: Now SoAd_SetUniqueRemoteAddr will return OK but the assigned Socket Connection will be a different one
     because the endpoint contained in the OFFER is a different one even if the remote node from which the OFFER is
     received is the same one, this is not allowed
  11: call Sd_MainFunction().
  12: VP: no action, socket connection Id obtained from SoAd_SetUniqueRemoteAddr is invalid.
  13: Release TCP consumed event group.
  14: VP (Sd.EB.ConsumedEventgroup.RoutingTCP, Sd.SWS_SD_00713):
      consumed event group has change its state to RELEASED and the TCP datapath has been disabled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingTCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1020</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00713</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1405</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_MAIN_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>3642</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that a Multicast only SD ClientService in Initial Wait Phase will correctly change state
  to AVAILABLE after an OfferService is received.

Test Object: 
  SdInstance_ClientEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      directed to a client service which doesn't have an unicast UDP data path configured, only a multicast data path..
  02: call Sd_ClientService_mainFunction().
  03 VP:
    Client service shall be in AVAILABLE state and all sockets of its multicast socket connection reference should be open.
    In the case of multicast only client services it goes from initial wait to main and then to available because
    there is not unicast socket connection to be verified if they are ONLINE.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1406</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>3874</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase will correctly change state
  after an OfferService is received.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_GetSoConMode shall be called for UDP-Unicast.
  03: VP(Sd.Design.ClientService.WaitSoCon.Ev.502, Sd.Design.ClientService.eventOffer.006):
      Client service shall be in AVAILABLE state.
  04: VP(Sd.EB.ClientService.ConsumedMethodRouting):
      SoAd_EnableRouting() shall be called for client service activation group
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
      Check that socket connection index from function SoAd_EnableSpecificRouting() specifying 
      the socket connection on which the routing group shall be enabled is the same 
      socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  06: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      and call Sd_ClientService_mainFunction().
      SoAd_SetUniqueRemoteAddr()has been set to return NOT_OK to indicate that there are currently 
      not available free socket connections.
      As no socket connection can be used offer is discarded, no further action is executed.

Test Input: UDP-Unicast socket connection is online
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1031</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1407</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>4021</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase will correctly change state
  after an OfferService is received in the same cycle when the initial wait delay expires.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientService_mainFunction() until the end of initial wait delay.
      Simulate a reception of a subscribe server service that does not exist in this instance.
  02: VP: subscribe received by and instance that does not have server services is ignored and answered with an not acknowledge/unknown message.
  03: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  04: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_GetSoConMode shall be called for UDP-Unicast.
  05: VP(Sd.EB.ClientService.ConsumedMethodRouting):
      SoAd_EnableSpecificRouting() shall be called for client service activation group but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  06: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Client service shall be in AVAILABLE state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments.
  07: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer and call Sd_ClientService_mainFunction().
  08: VP(Sd.Design.ClientService.WaitSoCon.Ev.503):
      SoAd_SetUniqueRemoteAddr returned OK, client service goes to WAIT_SOCON state.
  09: Client #3 of this instance is requested
  10: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer and call Sd_ClientService_mainFunction().
  11: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Client service shall be in AVAILABLE state.
       Check that no call SoAd_SetUniqueRemoteAddr() is on the trace since this client has only a multicast Datapath configured.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments.

Test Input: UDP-Unicast socket connection is online
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1408</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>4275</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase will correctly change state
  after a Consumed Eventgroup is requested and an OfferService is received.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.
  Consumed Eventgroup is in state DOWN.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState to request eventgroup #1 and call Sd_Instance_MainFunction().
  02: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK
  03: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #1 and call Sd_Instance_MainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  04: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Client service shall be in AVAILABLE state and SoAd_GetSoConMode shall be called for UDP-Unicast.
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  06: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #0
  07: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #1
  08: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #2
  09: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #4
  10: VP(Sd.Design.ConsumedEventgroup.DOWN_MAIN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_EnableSpecificRouting() shall be called for client service activation group #1 but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  11: Call Sd_Instance_MainFunction() for remote node #1
      the number of times it takes to reach SdClientTimerRequestResponseMinDelay
  12: VP(Sd.SWS_SD_00491.ClientService) Sd_Send_queueSubscribeEventgroup() shall not be called
  13: Call Sd_Instance_MainFunction() for remote node #1
      number of times it takes for random timer to expire
  14: VP(Sd.Design.ClientService.WaitSoCon.Ev.502, Sd.SWS_SD_00491.ClientService):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (subscribe)

Test Input: UDP-Unicast socket connection is online; ClientService's SdConsumedEventGroup container is configured
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.DOWN_MAIN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1013</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ConsumedEventGroupSetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1024</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00491.ClientService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1409</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_MAIN_NoRepetition</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>4452</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase will correctly change state
  after initial find delay timer expired.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffMinor

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientService_mainFunction() until initial find delay expired
  02: VP(Sd.Design.ClientService.InitialWait.Ev.101):
      Sd_Send_queueFindService() shall be called with correct arguments.
  03: VP(Sd.Design.ClientService.InitialWait.Ev.101):
      Client service shall be in MAIN state and SoAd_GetSoConMode shall be called for UDP-Unicast.

Test Input: ClientService with find repetitions configured to 0
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>955</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1410</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_Ignore_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>4530</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase shall not change state
  after Tx or Multicast Rx Pdu is assigned an IP address.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffMajor

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() for Tx Pdu with TCPIP_IPADDR_STATE_ASSIGNED and call Sd_ClientService_mainFunction()
  02: VP(Sd.Design.ClientService.InitialWait.Ev.108, Sd.Design.ClientService.Ignore):
      Client service shall be in INITIALWAIT state.
  03: Call Sd_LocalIpAddrAssignmentChg() for Multicast Rx Pdu with TCPIP_IPADDR_STATE_ASSIGNED and all Sd_ClientService_mainFunction()
  04: VP(Sd.Design.ClientService.InitialWait.Ev.109, Sd.Design.ClientService.Ignore):
      Client service shall be in INITIALWAIT state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>961</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1411</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_Ignore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>4602</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase shall not change state
  after it is requested.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffMajor

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call Sd_ClientService_mainFunction()
  02: VP(Sd.Design.ClientService.InitialWait.Ev.110, Sd.Design.ClientService.Ignore):
      Client service shall be in INITIALWAIT state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>963</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1412</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_Ignore_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>4661</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase shall not change state
  after StopOfferservice is received.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service StopOffer and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.InitialWait.Ev.112, Sd.Design.ClientService.Ignore):
      Client service shall stay in INITIALWAIT state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>964</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1413</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_REPETITION_MAIN_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>4729</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service changes state to MAIN
  if Service offer was not received while in REPETITION state, and
  that configured number of Find service requests are sent with correct interval between two requests.

Test Object: 
  SdInstance_ClientOnly/SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state REPETITION.

Test Execution: 
  01: Call Sd_ClientService_mainFunction() for RepetitionsBaseDelay times
  02: VP(Sd.Design.ClientService.Repetition.Ev.200):
      Client shall be in REPETITION state.
      Sd_Send_queueFindService() shall be called with correct arguments.
  03: Call Sd_ClientService_mainFunction() for RepetitionsBaseDelay*2 times
  04: VP(Sd.Design.ClientService.Repetition.Ev.200):
      Client shall be in REPETITION state.
      Sd_Send_queueFindService() shall be called with correct arguments.
  05: Call Sd_ClientService_mainFunction() for RepetitionsBaseDelay*4 times
  06: VP(Sd.Design.ClientService.Repetition.Ev.201):
      Client shall be in MAIN state.
      Sd_Send_queueFindService() shall be called with correct arguments.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>967</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1414</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_REPETITION_WAIT_SOCON_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>4851</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Repetition Phase will correctly change state to
  WAIT_SOCON after an OfferService is received.

Test Object: 
  SdInstance_ClientOnlyEG/SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state REPETITION.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.Repetition.Ev.212):
      SoAd_GetSoConMode shall be called for UDP-Unicast.
  03: VP(Sd.Design.ClientService.Repetition.Ev.212, Sd.SWS_SD_00365):
      Client service shall be in WAIT_SOCON state.

Test Input: UDP-Unicast socket connection is offline
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>968</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00365</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1415</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_REPETITION_AVAILABLE_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>4940</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to AVAILABLE and
  open socket connections related to SdClientServiceActivationRef,
  if valid OfferService entry has been received while in REPETITION state.

Test Object: 
  SdInstance_ClientOnlyEG/SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state REPETITION.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      and call Sd_ClientService_mainFunction()
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.WaitSoCon.Ev.502, Sd.Design.ClientService.eventOffer.006):
  03: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_GetSoConMode shall be called for UDP-Unicast
      Client service shall be in AVAILABLE state.
  04: VP(Sd.EB.ClientService.ConsumedMethodRouting):
      SoAd_EnableSpecificRouting() shall be called for client service activation group but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1031</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1416</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_REPETITION_AVAILABLE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>5048</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Repetition Phase will correctly change state
  to Available after an OfferService is received and repetition timer has expired

Test Object: 
  SdInstance_ClientOnlyEG/SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state REPETITION.

Test Execution: 
  01: Call Sd_ClientService_mainFunction() for (RepetitionsBaseDelay - 1) times
  02: VP(Sd.Design.ClientService.Repetition.Ev.200):
      Client shall be in REPETITION state.
  03: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer
      and call Sd_ClientService_mainFunction()
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
      SoAd_EnableSpecificRouting() shall be called for client service activation group but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  04: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Client service shall be in AVAILABLE state
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1417</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_REPETITION_AVAILABLE_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>5166</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to AVAILABLE,
  open socket connections related to data path and enable requested EventGroups,
  if service Offer was received via multicast while in REPETITION state.
  Test also verifies that Consumed Eventgroup changes state to MAIN if started while in state DOWN.

Test Object: 
  SdInstance_ClientOnlyEG/SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state REPETITION
  Consumed Eventgroup is in state DOWN.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState to request eventgroup #2
      and call Sd_Instance_MainFunction()
  02: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK
  03: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #1
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  04: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Client service shall be in AVAILABLE state.
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  06: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #0
  07: Call Sd_Instance_MainFunction() for remote node #1
      the number of times it takes to reach SdClientTimerRequestResponseMinDelay
  08: VP(Sd.SWS_SD_00491.ClientService) Sd_Send_queueSubscribeEventgroup() shall not be called
  09: Call Sd_Instance_MainFunction() for remote node #1
      number of times it takes for random timer to expire
  10: VP(Sd.Design.ClientService.WaitSoCon.Ev.502, Sd.SWS_SD_00491.ClientService):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #2 (subscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.DOWN_MAIN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1013</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ConsumedEventGroupSetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1024</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00491.ClientService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1418</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_REPETITION_DOWN_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>5324</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service changes state to DOWN
  if stopped while in REPETITION phase.

Test Object: 
  SdInstance_ClientOnly/SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state REPETITION

Test Execution: 
  01: Call Sd_ClientServiceSetState() with with SD_CLIENT_SERVICE_RELEASED to stop the client service.
      and call Sd_ClientService_mainFunction() to update the client service state.
  02: VP(Sd.Design.ClientService.Repetition.Ev.203, Sd.Design.ClientService.SetState.002):
      Client service shall be in DOWN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>969</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.SetState.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1023</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1419</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_REPETITION_DOWN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>5383</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service changes state to DOWN
  if IP address associated with the SdInstanceTxPdu changes state to other than ASSIGNED,
  while the Service is in REPETITION phase.

Test Object: 
  SdInstance_ClientOnly/SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state REPETITION

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to ONHOLD.
      and call Sd_ClientService_mainFunction() to update the client service state.
  02: VP(Sd.Design.ClientService.Repetition.Ev.206):
      Client service shall be in DOWN state.
  03: Change service state to REPETITION.
  04: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to UNASSIGNED.
      and call Sd_ClientService_mainFunction() to update the client service state.
  05: VP(Sd.Design.ClientService.Repetition.Ev.204):
      Client service shall be in DOWN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>972</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1420</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_REPETITION_DOWN_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>5461</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service changes state to DOWN
  if IP address associated with the SdInstanceRxMultiCastPdu changes state to other than ASSIGNED,
  while the Service is in REPETITION phase.

Test Object: 
  SdInstance_ClientOnly/SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state REPETITION

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change RxPdu IP address state to ONHOLD.
      and call Sd_ClientService_mainFunction() to update the client service state.
  02: VP(Sd.Design.ClientService.Repetition.Ev.207):
      Client service shall be in DOWN state.
  03: Change service state to REPETITION.
  04: Call Sd_LocalIpAddrAssignmentChg() to change RxPdu IP address state to UNASSIGNED.
      and call Sd_ClientService_mainFunction() to update the client service state.
  05: VP(Sd.Design.ClientService.Repetition.Ev.205):
      Client service shall be in DOWN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>971</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>973</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1421</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_REPETITION_Ignore_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>5539</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service while in REPETITION, shall not change state
  if Tx or Multicast Rx Pdu is assigned an IP address.

Test Object: 
  SdInstance_ClientOnly/SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized
  Client service is in state REPETITION

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() for Tx Pdu with TCPIP_IPADDR_STATE_ASSIGNED.
      and call Sd_ClientService_mainFunction()
  02: VP(Sd.Design.ClientService.Repetition.Ev.208, Sd.Design.ClientService.Ignore):
      Client service shall be in REPETITION state.
  03: Call Sd_LocalIpAddrAssignmentChg() for Multicast Rx Pdu with TCPIP_IPADDR_STATE_ASSIGNED.
      and call Sd_ClientService_mainFunction()
  04: VP(Sd.Design.ClientService.Repetition.Ev.209, Sd.Design.ClientService.Ignore):
      Client service shall be in REPETITION state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>974</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>975</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1422</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_REPETITION_Ignore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>5613</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service while in REPETITION, shall not change state
  if Sd_ClientServiceSetState() is called with SD_CLIENT_SERVICE_REQUESTED.

Test Object: 
  SdInstance_ClientOnly/SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized
  Client service is in state REPETITION

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED
      and call Sd_ClientService_mainFunction()
  02: VP(Sd.Design.ClientService.Repetition.Ev.210, Sd.Design.ClientService.Ignore):
      Client service shall be in REPETITION state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>976</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1423</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_REPETITION_Ignore_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>5673</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall not change state
  if Service StopOffer was received while in REPETITION state.

Test Object: 
  SdInstance_ClientOnly/SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized
  Client service is in state REPETITION

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service StopOffer
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Repetition.Ev.211, Sd.Design.ClientService.Ignore):
      Client service shall stay in REPETITION state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Repetition.Ev.211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>977</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1424</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_AVAILABLE_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>5742</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService shall correctly change state
  after an OfferService entry has been received.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_GetSoConMode shall be called for UDP-Unicast.
  03: VP(Sd.Design.ClientService.WaitSoCon.Ev.502, Sd.Design.ClientService.eventOffer.006):
      Client service shall be in AVAILABLE state.
  04: VP(Sd.EB.ClientService.ConsumedMethodRouting):
      SoAd_EnableSpecificRouting() shall be called for client service activation group but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: UDP-Unicast socket connection is online
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1031</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1425</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_AVAILABLE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>5854</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a SD ClientService in Main phase and a requested Consumed Eventgroup
  shall correctly change state after a multicast OfferService has been received.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.
  Consumed Eventgroup is in state DOWN.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState to request eventgroup #0
  02: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK
  03: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #0
      and call Sd_Instance_MainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  04: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Client service shall be in AVAILABLE state and SoAd_GetSoConMode shall be called for UDP-Unicast.
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  06: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #0
  07: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #1
  08: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #2
  09: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #4
  10: VP(Sd.Design.ConsumedEventgroup.DOWN_MAIN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_EnableSpecificRouting() shall be called for client service activation group (#0) but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  11: Call Sd_Instance_MainFunction() for remote node #0
      the number of times it takes to reach SdClientTimerRequestResponseMinDelay
  12: VP(Sd.SWS_SD_00491.ClientService) Sd_Send_queueSubscribeEventgroup() shall not be called
  13: Call Sd_Instance_MainFunction() for remote node #0
      number of times it takes for random timer to expire
  14: VP(Sd.Design.ClientService.WaitSoCon.Ev.502, Sd.SWS_SD_00491.ClientService):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (subscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.DOWN_MAIN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1013</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ConsumedEventGroupSetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1024</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00491.ClientService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1426</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_AVAILABLE_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6024</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a SD ClientService in Main phase and a requested Consumed Eventgroup
  shall correctly change state after an unicast OfferService has been received.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.
  Consumed Eventgroup is in state DOWN.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState to request eventgroup #1
  02: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK
  03: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #2
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  04: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Client service shall be in AVAILABLE state and SoAd_GetSoConMode shall be called for UDP-Unicast.
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  07: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #1
  08: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #1
  09: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast socket connection of eventgroup #4
  10: Call Sd_Instance_MainFunction()
  11: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (subscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.DOWN_MAIN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1013</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ConsumedEventGroupSetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1024</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1427</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_DOWN_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6184</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a SD ClientService in Main phase shall correctly change state
  after it has been released.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with with SD_CLIENT_SERVICE_RELEASED and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Main.Ev.301, Sd.Design.ClientService.SetState.002):
      Client service shall be in DOWN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.301</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>981</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.SetState.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1023</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1428</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_DOWN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6242</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that a SD ClientService in Main phase shall correctly change state
  after IP address associated with the SdInstanceTxPdu changes state to other than ASSIGNED.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to ONHOLD, and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Main.Ev.304):
      Client service shall be in DOWN state.
  03: Change service state to MAIN.
  04: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to UNASSIGNED and call Sd_ClientService_mainFunction().
  05: VP(Sd.Design.ClientService.Main.Ev.302):
      Client service shall be in DOWN state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.302</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>982</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.304</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>984</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1429</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_DOWN_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6316</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that a SD ClientService in Main phase shall correctly change state
  after IP address associated with the SdInstanceRxMultiCastPdu changes state to other than ASSIGNED.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change RxPdu IP address state to ONHOLD and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Main.Ev.305):
      Client service shall be in DOWN state.
  03: Change service state to MAIN.
  04: Call Sd_LocalIpAddrAssignmentChg() to change RxPdu IP address state to UNASSIGNED and call Sd_ClientService_mainFunction().
  05: VP(Sd.Design.ClientService.Main.Ev.303):
      Client service shall be in DOWN state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.303</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>983</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.305</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>985</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1430</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_Ignore_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6390</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that a SD ClientService in Main phase shall not change state
  after Tx or Multicast Rx Pdu is assigned an IP address.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() for Tx Pdu with TCPIP_IPADDR_STATE_ASSIGNED and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Main.Ev.306, Sd.Design.ClientService.Ignore):
      Client service shall be in MAIN state.
  03: Call Sd_LocalIpAddrAssignmentChg() for Multicast Rx Pdu with TCPIP_IPADDR_STATE_ASSIGNED and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Main.Ev.307, Sd.Design.ClientService.Ignore):
      Client service shall be in MAIN state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.306</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>986</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.307</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>987</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1431</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_Ignore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6459</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a SD ClientService in Main phase shall not change state
  after it has been requested.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Main.Ev.308, Sd.Design.ClientService.Ignore):
      Client service shall be in MAIN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.308</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>988</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1432</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_Ignore_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6515</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
 This test verifies that a SD ClientService in Main phase shall not change state
 after a StopOfferService has been received.

Test Object: 
  SdInstance_ClientOnly\SdClientService_0_DiffInstance

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service StopOffer and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Main.Ev.309, Sd.Design.ClientService.Ignore):
      Client service shall be in MAIN state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.309</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>989</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1433</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_INITIALWAIT_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6578</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
 This test verifies that a SD ClientService in Main phase shall correctly change state
 after an OfferService has expired.

Test Object: 
  SdInstance_ClientOnlyEG/SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.
  Client service received an OfferService.
  UDP-Unicast socket connection is offline.

Test Execution: 
  01: Call Sd_ClientService_mainFunction() until OfferService expires.
  02: VP(Sd.Design.ClientService.Main.Ev.314):
      Client service shall be in INITIALWAIT state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.314</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>980</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1434</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_OfferReceived</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6649</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService shall correctly change state
  after an OfferService entry has been received.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.Main.Ev.310):
      SoAd_GetSoConMode shall be called for UDP-Unicast.
  03: VP(Sd.Design.ClientService.Main.Ev.310):
      Client service shall be in WAIT_SOCON state.

Test Input: UDP-Unicast socket connection is offline
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.310</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>978</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1435</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_SoConModeOnline_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6736</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a SD ClientService in MAIN Phase shall not change state
  after UDP-Unicast socket connection changed mode to ONLINE.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.

Test Execution: 
  01: Set SoConMode to OFFLINE and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Main.Ev.312):
      Client service shall be in MAIN state.
  03: Set SoConMode to ONLINE and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Main.Ev.312):
      Client service shall be in MAIN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Main.Ev.312</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>979</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1436</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_MAIN_SoConModeOnline_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6805</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that an offered SD ClientService in MAIN Phase shall correctly change state
  after UDP-Unicast socket connection changed mode to ONLINE.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state MAIN.

Test Execution: 
  01: Set SoConMode to ONLINE and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_GetSoConMode shall be called for UDP-Unicast.
  03: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Client service shall be in AVAILABLE state.
  04: VP(Sd.EB.ClientService.ConsumedMethodRouting):
      SoAd_EnableSpecificRouting() shall be called for client service activation group but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: UDP-Unicast socket connection is offline; Service is offered
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1437</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_self_AVAILABLE_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>6891</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service stays in AVAILABLE state if service offer
  was received while in that state.
  Test also verifies that the TTL timer is reset after service offer is received.

Test Object: 
  Client Service state machine

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.

Test Execution: 
  01: Call Sd_ClientService_mainFunction() for TTL/2 times
  02: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  03: VP(Sd.Design.ClientService.Available.Ev.400):
      Client service shall be in AVAILABLE state.
  04: Call Sd_ClientService_mainFunction() for TTL times
  05: VP(Sd.Design.ClientService.Available.Ev.402): Client service shall be in INITIALWAIT state.
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.400</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>990</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.402</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>992</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1438</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_MAIN_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>7013</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to MAIN
  if a service StopOffer is received via unicast and SdClientServiceActivationRef is configured.

Test Object: 
  Client Service state machine

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received via unicast from remote node #1; eventgroup #2 enabled.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service StopOffer
      and call Sd_ClientService_mainFunction()
  02: VP(Sd.Design.ClientService.Available.Ev.401):
      Client service shall be in MAIN state.
  03: VP(Sd.Design.ClientService.Available.Ev.401):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  04: VP(Sd.EB.ClientService.ConsumedMethodRouting):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: VP(Sd.Design.ClientService.Available.Ev.401):
      SoAd_GetSoConMode() shall be called for UDP-Unicast.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.401</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>991</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1439</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_MAIN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>7104</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to MAIN,
  close socket connections related to data path and disable all enabled EventGroups
  if a service StopOffer is received via multicast.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received from remote node #2; eventgroup #1 enabled.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service StopOffer.
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Available.Ev.401):
      Client service moves back to state MAIN after a STOP OFFER has been received.
  03: VP(Sd.Design.ConsumedEventgroup.MAIN_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group #1 but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  04: VP(Sd.Design.ClientService.Available.Ev.401):
      SoAd_CloseSoCon() shall be called for multicast socket connection of eventgroup #1
  05: VP(Sd.Design.ClientService.Available.Ev.401):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  06: VP(Sd.ASR42.SWS_SD_00705, Sd.SWS_SD_00481):
      Every socket connection shall be reset to wildcard using SoAd_ReleaseRemoteAddr().
  07: Call Sd_Instance_MainFunction()

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.401</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>991</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1015</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR42.SWS_SD_00705</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00481</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1440</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_INITIALWAIT_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>7223</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to INITIALWAIT
  if TTL of a service Offer had expired and SdClientServiceActivationRef is configured.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received via unicast from remote node #1; eventgroup #2 enabled.

Test Execution: 
  01: Call Sd_ClientService_mainFunction() until service offer TTL timer expires.
  02: VP(Sd.Design.ClientService.Available.Ev.402):
      Client service shall be in INITIALWAIT state.
  03: VP(Sd.Design.ClientService.Available.Ev.402):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  04: VP(Sd.Design.ClientService.Available.Ev.402, Sd.EB.ClientService.ConsumedMethodRouting):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.402</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>992</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1441</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_INITIALWAIT_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>7311</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to INITIALWAIT,
  close socket connections related to data path and disable all enabled EventGroups,
  if TTL of a service Offer received via multicast had expired.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via unicast from remote node #1; eventgroup #2 enabled.

Test Execution: 
  01: Call Sd_Instance_MainFunction() until service offer TTL timer expires.
  02: VP(Sd.Design.ClientService.Available.Ev.402):
      Client service shall be in INITIALWAIT state.
  03: VP(Sd.Design.ConsumedEventgroup.MAIN_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group #2 but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().  
  04: VP(Sd.Design.ClientService.Available.Ev.402):
      SoAd_CloseSoCon() shall be called for multicast socket connection 0 of eventgroup #2
  05: VP(Sd.Design.ClientService.Available.Ev.402):
      SoAd_CloseSoCon() shall be called for multicast socket connection 1 of eventgroup #2
  06: VP(Sd.Design.ClientService.Available.Ev.402):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  07: VP(Sd.ASR42.SWS_SD_00705, Sd.SWS_SD_00481):
      Every socket connection shall be reset to wildcard using SoAd_ReleaseRemoteAddr().

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.402</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>992</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1015</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR42.SWS_SD_00705</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00481</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1442</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>7403</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path if client service was stopped with Sd_ClientServiceSetState()
  and SdClientServiceActivationRef is configured.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>993</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1443</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>7479</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path
  if IP address associated with the SdInstanceTxPdu changes state to ONHOLD
  and SdClientServiceActivationRef is configured.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to ONHOLD.
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Available.Ev.406):
      Client service shall be in DOWN state.
  03: VP(Sd.Design.ClientService.Available.Ev.406):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  04: VP(Sd.EB.ClientService.ConsumedMethodRouting):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: VP(Sd.Design.ClientService.Available.Ev.406): SoAd_CloseSoCon() shall be called.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.406</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>996</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1444</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>7560</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path
  if IP address associated with the SdInstanceTxPdu changes state to UNASSIGNED
  and SdClientServiceActivationRef is configured.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to UNASSIGNED.
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Available.Ev.404):
      Client service shall be in DOWN state.
  03: VP(Sd.Design.ClientService.Available.Ev.404):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  04: VP(Sd.EB.ClientService.ConsumedMethodRouting):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: VP(Sd.Design.ClientService.Available.Ev.404): SoAd_CloseSoCon() shall be called.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.404</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>994</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1445</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>7640</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path
  if IP address associated with the SdInstanceMulticastRxPdu changes state to ONHOLD
  and SdClientServiceActivationRef is configured.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change MulticastRxPdu IP address state to ONHOLD.
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Available.Ev.407):
      Client service shall be in DOWN state.
  03: VP(Sd.Design.ClientService.Available.Ev.407):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  04: VP(Sd.EB.ClientService.ConsumedMethodRouting):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: VP(Sd.Design.ClientService.Available.Ev.407): SoAd_CloseSoCon() shall be called.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.407</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>997</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1446</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>7720</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path
  if IP address associated with the SdInstanceMulticastRxPdu changes state to UNASSIGNED
  and SdClientServiceActivationRef is configured.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change MulticastRxPdu IP address state to UNASSIGNED.
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Available.Ev.405):
      Client service shall be in DOWN state.
  03: VP(Sd.Design.ClientService.Available.Ev.405):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  04: VP(Sd.EB.ClientService.ConsumedMethodRouting):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: VP(Sd.Design.ClientService.Available.Ev.405): SoAd_CloseSoCon() shall be called.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.405</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>995</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1447</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>7800</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path and disable all enabled EventGroups,
  if client service was stopped with Sd_ClientServiceSetState()
  while in AVAILABLE state and an Eventgroup was requested.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received from remote node #0; eventgroup #0 enabled.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_RELEASED
  02: Call Sd_Instance_MainFunction().
  03: VP(Sd.Design.ClientService.Available.Ev.403):
      Client service shall be in DOWN state.
  04: VP(Sd.Design.ConsumedEventgroup.MAIN_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group but with a socket
      connection index specifying the socket connection on which the routing group #0 shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: VP(Sd.Design.ClientService.Available.Ev.403):
      SoAd_CloseSoCon shall be called for multicast socket connection of all eventgroups
  06: VP(Sd.Design.ClientService.Available.Ev.403):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN, the remote address
      is released and the socket connection is closed.
  07: VP(Sd.Design.ClientService.Available.Ev.403, Sd.SWS_SD_00443):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #0 (unsubscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>993</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1015</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00443</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>348</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1448</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>7908</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path and disable all enabled EventGroups,
  if IP address associated with the SdInstanceTxPdu changes state to ONHOLD
  while in AVAILABLE state and an Eventgroup was requested.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received from remote node #0; eventgroup #0 enabled.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to ONHOLD.
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.Available.Ev.406):
      Client service shall be in DOWN state.
  03: VP(Sd.Design.ConsumedEventgroup.MAIN_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group #0 but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  04: VP(Sd.Design.ClientService.Available.Ev.406):
      SoAd_CloseSoCon shall be called for multicast socket connection of all eventgroups
  05: VP(Sd.Design.ClientService.Available.Ev.406):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  06: VP(Sd.Design.ClientService.Available.Ev.406): SoAd_CloseSoCon() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.406</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>996</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1015</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1449</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_7</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>8003</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path and disable all enabled EventGroups,
  if IP address associated with the SdInstanceTxPdu changes state to UNASSIGNED
  while in AVAILABLE state and an Eventgroup was requested.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received from remote node #0; eventgroup #0 enabled.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to UNASSIGNED.
      and call Sd_ClientService_mainFunction().
  02: Call Sd_Instance_MainFunction()
  03: VP(Sd.Design.ClientService.Available.Ev.404):
      Client service shall be in DOWN state.
  04: VP(Sd.Design.ConsumedEventgroup.MAIN_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group #0 but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: VP(Sd.Design.ClientService.Available.Ev.404):
      SoAd_CloseSoCon shall be called for multicast socket connection of all eventgroups
  06: VP(Sd.Design.ClientService.Available.Ev.404):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  07: VP(Sd.Design.ClientService.Available.Ev.404): SoAd_CloseSoCon() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.404</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>994</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1015</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1450</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_8</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>8101</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path and disable all enabled EventGroups,
  if IP address associated with the SdInstanceMulticastRxPdu changes state to ONHOLD
  while in AVAILABLE state and an Eventgroup was requested.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received from remote node #0; eventgroup #0 enabled.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change MilticastRxPdu IP address state to ONHOLD.
      and call Sd_ClientService_mainFunction()
  02: Call Sd_Instance_MainFunction()
  03: VP(Sd.Design.ClientService.Available.Ev.407):
      Client service shall be in DOWN state.
  04: VP(Sd.Design.ConsumedEventgroup.MAIN_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group #0 but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: VP(Sd.Design.ClientService.Available.Ev.407):
      SoAd_CloseSoCon shall be called for multicast socket connection of all eventgroups
  06: VP(Sd.Design.ClientService.Available.Ev.407):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  07: VP(Sd.Design.ClientService.Available.Ev.407): SoAd_CloseSoCon() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.407</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>997</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1015</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1451</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_9</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>8199</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path and disable all enabled EventGroups,
  if IP address associated with the SdInstanceMulticastRxPdu changes state to UNASSIGNED
  while in AVAILABLE state and an Eventgroup was requested.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received from remote node #0; eventgroup #0 enabled.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to change MilticastRxPdu IP address state to UNASSIGNED.
      and call Sd_Instance_MainFunction().
  02: VP(Sd.Design.ClientService.Available.Ev.405):
      Client service shall be in DOWN state.
  03: VP(Sd.Design.ConsumedEventgroup.MAIN_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group #0 but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  04: VP(Sd.Design.ClientService.Available.Ev.405):
      SoAd_CloseSoCon shall be called for multicast socket connection of all eventgroups
  05: VP(Sd.Design.ClientService.Available.Ev.405):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  06: VP(Sd.Design.ClientService.Available.Ev.405): SoAd_CloseSoCon() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.405</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>995</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1015</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1452</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_10</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>8294</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path and disable all enabled EventGroups,
  if client service was stopped with Sd_ClientServiceSetState()
  while in AVAILABLE state and an Eventgroup was subscribed.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received via unicast from remote node #3; eventgroup #1 subscribed.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_RELEASED
  02: Call Sd_Instance_MainFunction().
  03: VP(Sd.Design.ClientService.Available.Ev.403):
      Client service shall be in DOWN state.
  04: VP(Sd.Design.ClientService.Available.Ev.403):
      SoAd_CloseSoCon shall be called for multicast socket connection of all eventgroups
  05: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN):
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_DOWN
  06: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN, Sd.EB.ConsumedEventgroup.RoutingMulticast)
        (Sd.SWS_SD_00706):
      SoAd_DisableSpecificRouting() shall be called for multicast activation group with the socket connection
      that had been previously used to enable this routing with function SoAd_EnableSpecificRouting
  07: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group #1 but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  08: VP(Sd.Design.ClientService.Available.Ev.403): SoAd_CloseSoCon() shall be called for UDP-Unicast.
      to close all socket connections of the socket connection group configured for this client.
  09: VP(Sd.Design.ClientService.Available.Ev.403):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN, the remote address
      is released and the socket connection is closed
  10: VP(Sd.Design.ClientService.Available.Ev.403):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (stop subscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>993</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1017</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00706</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>491</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1453</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_Ignore_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>8503</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service while in AVAILABLE, shall not change state
  if Tx or Multicast Rx Pdu is assigned an IP address.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() for Tx Pdu with TCPIP_IPADDR_STATE_ASSIGNED.
      and call Sd_ClientService_mainFunction()
  02: VP(Sd.Design.ClientService.Available.Ev.408, Sd.Design.ClientService.Ignore):
      Client service shall be in AVAILABLE state.
  03: Call Sd_LocalIpAddrAssignmentChg() for Multicast Rx Pdu with TCPIP_IPADDR_STATE_ASSIGNED.
      and call Sd_ClientService_mainFunction()
  04: VP(Sd.Design.ClientService.Available.Ev.409, Sd.Design.ClientService.Ignore):
      Client service shall be in AVAILABLE state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.408</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>998</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.409</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>999</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1454</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_Ignore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>8571</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service while in AVAILABLE, shall not change state
  if Sd_ClientServiceSetState() is called with SD_CLIENT_SERVICE_REQUESTED.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED
      and call Sd_ClientService_mainFunction()
  02: VP(Sd.Design.ClientService.Available.Ev.410, Sd.Design.ClientService.Ignore):
      Client service shall be in AVAILABLE state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.410</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1000</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1455</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_EG_self_AVAILABLE_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>8629</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall correctly handles reception of
  ServiceOffer entry received via unicast while in AVAILABLE state if a requested eventgroup was acknowledged
  and last ServiceOffer entry has been received via unicast.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received via unicast from remote node #3; eventgroup #1 enabled.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate unicast reception of Service Offer.
  02: VP(Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
  03: Call Sd_Instance_MainFunction().
  04: VP(Sd.Design.ClientService.Available.Ev.400):
      Client service shall be in AVAILABLE state.
  05: VP(Sd.SWS_SD_00376):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (subscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.400</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>990</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00376</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1456</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_EG_self_AVAILABLE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>8745</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall correctly handles reception of
  ServiceOffer entry received via unicast while in AVAILABLE state if a requested eventgroup was not acknowledged,
  and last ServiceOffer entry has been received via unicast.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received via unicast from remote node #2; eventgroup #1 is requested.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate unicast reception of Service Offer.
  02: VP(Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
  03: Call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.Available.Ev.400):
      Client service shall be in AVAILABLE state.
  05: VP(Sd.SWS_SD_00376):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (subscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.400</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>990</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00376</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1457</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_EG_self_AVAILABLE_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>8858</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall correctly handles reception of
  ServiceOffer entries received via multicast while in AVAILABLE state if the requested eventgroups were acknowledged,
  and last ServiceOffer entry has been received via multicast.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received via multicast from remote node #1; eventgroup #1 subscribed.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate multicast reception of Service Offer for 1st remote node
  02: VP(Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
  03: Call Sd_Instance_MainFunction().
  04: VP(Sd.Design.ClientService.Available.Ev.400):
      Client service shall be in AVAILABLE state.
  05: Call Sd_ConsumedEventGroupSetState() to request eventgroup #2
      SoAd_EnableSpecificRouting() shall be called for client service activation group (#2) but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  06: Call Sd_ClientService_EventOfferService() twice to simulate reception of a Service Offer right after a Stop Offer
      (both within the same frame) from 2nd remote node
  07: VP(Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set. 
  08: Call Sd_Instance_MainFunction() for remote node #1
      the number of times it takes to reach SdClientTimerRequestResponseMinDelay
  09: VP(Sd.SWS_SD_00491.ClientService) Sd_Send_queueSubscribeEventgroup() shall not be called
  10: Call Sd_Instance_MainFunction() the number of times it takes for random timer to expire
  11: VP(Sd.SWS_SD_00376, Sd.SWS_SD_00491.ClientService):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroups #1 &amp; #2 (subscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.400</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>990</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00376</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00491.ClientService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1458</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_EG_self_AVAILABLE_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>9047</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall correctly handles reception of
  ServiceOffer entry received via multicast while in AVAILABLE state if a requested eventgroup was not acknowledged,
  and last ServiceOffer entry has been received via multicast.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received via multicast from remote node #1; eventgroup #1 enabled.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate multicast reception of Service Offer.
  02: VP(Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
  03: Call Sd_Instance_MainFunction().
  04: VP(Sd.Design.ClientService.Available.Ev.400):
      Client service shall be in AVAILABLE state.
  05: Call Sd_Instance_MainFunction() for remote node #1
      the number of times it takes to reach SdClientTimerRequestResponseMinDelay
  06: VP(Sd.SWS_SD_00491.ClientService) Sd_Send_queueSubscribeEventgroup() shall not be called
  07: Call Sd_Instance_MainFunction() for remote node #2
      number of times it takes for random timer to expire
  08: VP(Sd.SWS_SD_00376, SWS_SD_00721, Sd.SWS_SD_00491.ClientService):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (unsubscribe)
  09: VP(Sd.SWS_SD_00376, SWS_SD_00721,Sd.SWS_SD_00491.ClientService):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (subscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.400</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>990</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00376</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00491.ClientService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00721</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>515</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1459</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_EG_self_AVAILABLE_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>9185</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall correctly handles reception of
  ServiceOffer entry received via multicast while in AVAILABLE state if a requested eventgroup was not acknowledged,
  and last ServiceOffer entry was received via unicast.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received via unicast from remote node #2; eventgroup #1 enabled.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate multicast reception of Service Offer.
  02: VP(Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
  03: Call Sd_Instance_MainFunction().
  04: VP(Sd.Design.ClientService.Available.Ev.400):
      Client service shall be in AVAILABLE state.
  05: Call Sd_Instance_MainFunction() for remote node #0
      the number of times it takes to reach SdClientTimerRequestResponseMinDelay
  06: VP(Sd.SWS_SD_00491.ClientService) Sd_Send_queueSubscribeEventgroup() shall not be called
  07: Call Sd_Instance_MainFunction() for remote node #0
      number of times it takes for random timer to expire
  08: VP(Sd.SWS_SD_00376, Sd.SWS_SD_00491.ClientService):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (subscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.400</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>990</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00376</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00491.ClientService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1460</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_EG_self_AVAILABLE_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>9358</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall correctly handles reception of
  ServiceOffer entry received via unicast while in AVAILABLE state if a requested eventgroup was not acknowledged,
  and last ServiceOffer entry was received via unicast.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received via multicast from remote node #2; eventgroup #1 enabled.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate unicast reception of Service Offer.
  02: VP(Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
  03: Call Sd_Instance_MainFunction().
  04: VP(Sd.Design.ClientService.Available.Ev.400):
      Client service shall be in AVAILABLE state.
  05: VP(Sd.SWS_SD_00376):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (subscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.400</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>990</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00376</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1461</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>9472</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that Consumed Eventgroup shall change state to MAIN if started while in state DOWN.

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Consumed Eventgroup is in state DOWN.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState to request eventgroup #1
  02: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK
  03: VP(Sd.Design.ConsumedEventgroup.DOWN_MAIN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_EnableSpecificRouting() shall be called for client service activation group (#1) but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.DOWN_MAIN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1013</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ConsumedEventGroupSetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1024</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1462</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>9544</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a Consumed Eventgroup shall correctly change state after
  an OfferService has been received.

Test Object: 
  SdInstance_ClientOnlyAutoEg\SdClientService_8_Auto_EG_Auto

Test Precondition: 
  Sd module is initialized.
  Tx and Multicast Rx IP address assigned.
  ClientService is in state INITIALWAIT
  COnsumed Eventgroup is in state DOWN

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #2
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      Client service shall be in AVAILABLE state.
  03: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  04: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast SoCon of eventgroup #0
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
      SoAd_OpenSoCon() shall be called for multicast SoCon of eventgroup #1
  06: VP(Sd.Design.ConsumedEventgroup.DOWN_MAIN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_EnableSpecificRouting() shall be called for client service activation group (#1) but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  07: VP(Sd.Design.ClientService.WaitSoCon.Ev.502, Sd.SWS_SD_00440):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (subscribe)

Test Input: 
  UDP-Unicast socket connection is online
  ClientService configured with SdClientServiceAutoRequire=TRUE
  Consumed Eventgroup configured with SdConsumedEventGroupAutoRequire=TRUE

Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Down.Ev.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>941</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.DOWN_MAIN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1013</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00440</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>346</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1463</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_DOWN_MAIN_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>9756</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that after initialization all configured Eventgroups shall have the state
  SD_CONSUMED_EVENTGROUP_RELEASED

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Consumed Eventgroup is in state DOWN.

Test Execution: 
  01: Call Sd_Instance_MainFunction() for Instance 3
      the number of times it takes for random timer to expire
  02: VP(Sd.SWS_SD_00440):
      All eventgroups shall be initialized to state SD_CONSUMED_EVENTGROUP_RELEASED after Sd_Init()
      Sd_Send_queueSubscribeEventgroup() shall not be called for any of eventgroups.
  03: Call Sd_ConsumedEventGroupSetState to request eventgroup #1
  04: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK
  05: VP(Sd.Design.ConsumedEventgroup.DOWN_MAIN, Sd.EB.ConsumedEventgroup.RoutingUDP):
       SoAd_EnableSpecificRouting() shall be called for client service activation group (#1) but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  06: Call Sd_Instance_MainFunction() for Instance 3
  07: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #0
  08: VP(Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
  09: Call Sd_Instance_MainFunction() for remote node #3
      the number of times it takes to reach SdClientTimerRequestResponseMinDelay
  10: VP(Sd.SWS_SD_00491.ClientService) Sd_Send_queueSubscribeEventgroup() shall not be called
  11: Call Sd_Instance_MainFunction() for Instance 3
      number of times it takes for random timer to expire
  12: VP(Sd.SWS_SD_00491.ClientService):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (subscribe)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.DOWN_MAIN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1013</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ConsumedEventGroupSetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1024</internalId></provcov>
        <provcov>
          <linksto>Sd.ClientService.API.Sd_ClientService_init</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>928</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00440</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>346</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00491.ClientService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1464</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_DOWN_Ignore_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>9924</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that Consumed Eventgroup shall ignore SubscribeEventgroupAck entry
  received while while in state DOWN.

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via unicast from remote node #3; eventgroup #1 in state DOWN.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeAck() for eventgroup #1.
  02: VP(Sd.Design.ConsumedEventgroup.Ignore):
      Eventgroup shall stay in state DOWN - no visible actions.
  03: Call Sd_Instance_MainFunction().
  04: VP(Sd.Design.ConsumedEventgroup.Ignore):
      No additional actions visible in trace.
  05: Client #2 of Instance #3 is requested and goes to state INITIAL WAIT.
  06: Simulate the reception of an OFFER.
  07: Call to main function.
  08: Client goes to AVAILABLE state.
  09: request TCP consumed event group.
  10: VP: consumed event group has change it state to REQUESTED.
  11: Call Sd_ClientService_eventSubscribeAck() for eventgroup #5.
      to simulate reception of SubscribeEventgroupAck entry without referencing a multicast endpoint
      to a consumed event group which only has a TCP data path configured.
  12: Consumed event group goes to state AVAILABLE.
  13: Simulate the reception of a STOP offer and an OFFER right after within the same SD frame.
  14: Call to main function.
  15: client service leaves the available state when STOP OFFER is processed
  16: client service goes back to available state when STOP OFFER is processed
  17: release service to go to INITIALWAIT state
  18: Call to main function.
  19: VP: client service is switched off, all previously set datapaths are disabled, all remote addresses previously set with SoAd_SetUniqueRemoteAddr are released
      and all its socket connections are closed.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1012</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventSubscribeEventgroupAck.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1035</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1465</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_DOWN_Ignore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>10147</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that Consumed Eventgroup shall ignore SubscribeEventgroupNack entry
  received while while in state DOWN.

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via unicast from remote node #3; eventgroup #1 in state DOWN.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeNack() for eventgroup #1.
  02: VP(Sd.Design.ConsumedEventgroup.Ignore):
      Eventgroup shall stay in state DOWN - no visible actions.
  03: Call Sd_Instance_MainFunction().
  04: VP(Sd.Design.ConsumedEventgroup.Ignore):
      No additional actions visible in trace.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1012</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1466</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_MAIN_AVAILABLE_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>10212</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that Consumed Eventgroup shall change state to AVAILABLE when it
  receives SubscribeEvengroupAck entry while in state MAIN;
  the related OfferService entry has been received via unicast.

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via unicast from remote node #3; eventgroup #1 in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeAck() simulate reception of SubscribeEventgroupAck entry for EG #1
  02: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      SoAd_RequestIpAddrAssignment() shall be called for a IP address
  03: Call to Sd_MainFunction
  04: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      Once Local IP address has been set after a main cycle has been executed the socket connection state is
      checked in function SoAd_GetSoConMode.
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
      SoAd_RequestIpAddrAssignment() shall be called for a IP address
  05: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE, Sd.EB.ConsumedEventgroup.RoutingMulticast):
      SoAd_EnableSpecificRouting() shall be called for multicast activation group with the socket connection
	  that had been previously recieved as available socket connection with function SoAd_SetUniqueRemoteAddr()
  06: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_AVAILABLE

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1014</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1021</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1467</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_MAIN_AVAILABLE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>10328</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that Consumed Eventgroup shall change state to AVAILABLE when it
  receives SubscribeEvengroupAck entry while in state MAIN;
  the related OfferService entry has been received via multicast.

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via multicast from remote node #2; eventgroup #1 in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeAck() simulate reception of SubscribeEventgroupNack entry for EG #1
  02: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      SoAd_RequestIpAddrAssignment() shall be called for a IP address
  03: Call to Sd_MainFunction
  04: Once Local IP address has been set after a main cycle has been executed the socket connection state is
      checked in function SoAd_GetSoConMode.
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
      SoAd_RequestIpAddrAssignment() shall be called for a IP address
  05: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE, Sd.EB.ConsumedEventgroup.RoutingMulticast):
      SoAd_EnableSpecificRouting() shall be called for multicast activation group with the socket connection
	  that had been previously recieved as available socket connection with function SoAd_SetUniqueRemoteAddr()
  06: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_AVAILABLE

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1014</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1021</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1468</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_self_AVAILABLE_MAIN_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>10446</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Consumed Eventgroup shall correctly handle
  SubscribeEventgroupAck event and timeout event while in state AVAILABLE.

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via unicast from remote node #2; eventgroup #1 subscribed.

Test Execution: 
  01: Call Sd_Instance_MainFunction() for SubscribeEventgroupAck TTL/2 timer times.
  02: Call Sd_ClientService_eventSubscribeAck() simulate reception of SubscribeEventgroupAck entry for EG #1
  03: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      SoAd_RequestIpAddrAssignment() shall be called for a IP address
  04: Call to Sd_MainFunction
  05: Once Local IP address has been set after a main cycle has been executed the socket connection state is
      checked in function SoAd_GetSoConMode.
      SoAd_SetUniqueRemoteAddr() shall be called for both consumend event groups with correct arguments:
      Socket connection ID must be part of the socket connection group from which a socket connection's
      remote address is to be set.
  06: Call Sd_Instance_MainFunction() until
      SubscribeEventgroupAck TTL timer expires
  07: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_MAIN):
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_DOWN

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.self_AVAILABLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1018</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.AVAILABLE_MAIN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1016</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1469</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_MAIN_Ignore_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>10608</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that Consumed Eventgroup shall ignore
  SubscribeEvengroupNack entry while in state MAIN.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via unicast from remote node #2; eventgroup #1 in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeNack() simulate reception of SubscribeEventgroupNack entry for EG #1
  02: VP(Sd.Design.ConsumedEventgroup.Ignore):
      Eventgroup shall stay in state MAIN - no visible actions.
  03: Call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ConsumedEventgroup.Ignore):
      No additional actions visible in trace.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1012</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1470</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_MAIN_Ignore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>10678</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that Consumed Eventgroup shall ignore the request of an already requested eventgroup.

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  All client services are initialized and requested.
  Service offer received via unicast from remote node #3; eventgroup #1 in state MAIN.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState() to request eventgroup #1
  02: VP(Sd.Design.ConsumedEventgroup.Ignore):
      Trace is empty.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1012</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1471</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_MAIN_DOWN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>10723</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD ConsumedEventgroup shall change state
  to DOWN if released with Sd_ConsumedEventGroupSetState() while in state MAIN

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Consumed Eventgroup #0 is in state MAIN.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState() with SD_CONSUMED_EVENTGROUP_RELEASED
  02: Call Sd_Instance_MainFunction()
  03: VP(Sd.Design.ConsumedEventgroup.MAIN_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP, Sd.Design.ClientService.ConsumedEventGroupSetState.002, Sd.SWS_SD_00713):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group #0 but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  04: Sd_Send_queueSubscribeEventgroup shall be called

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1015</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ConsumedEventGroupSetState.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1025</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00713</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1472</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_AVAILABLE_DOWN_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>10806</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD ConsumedEventgroup shall change state
  to DOWN if released with Sd_ConsumedEventGroupSetState() while in state AVAILABLE.

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Consumed Eventgroup #1 is in state AVAILABLE.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState() with SD_CONSUMED_EVENTGROUP_RELEASED
  02: Call Sd_Instance_MainFunction()
  03: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN, Sd.SWS_SD_00713):
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_DOWN
  04: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN, Sd.EB.ConsumedEventgroup.RoutingMulticast, Sd.Design.ClientService.ConsumedEventGroupSetState.002)
        (Sd.SWS_SD_00706, SWS_SD_00734):
      SoAd_DisableSpecificRouting() shall be called for multicast activation routing group reference to deactivate the
	    routing previsously activated with the socket connection used as parameter.
	    Socket Connection itself is released and the whole socket connection group Ip address assigment is released as well.
  05: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group #1 but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  06: Sd_Send_queueSubscribeEventgroup shall be called

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1017</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ConsumedEventGroupSetState.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1025</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00706</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>491</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00713</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00734</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>532</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1473</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_AVAILABLE_DOWN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>10912</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD ConsumedEventgroup shall change state
  to DOWN if released with Sd_ConsumedEventGroupSetState() while in state AVAILABLE and
  SdConsumedEventGroupUdpActivationRef is not configured.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Consumed Eventgroup #1 is in state AVAILABLE.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState() with SD_CONSUMED_EVENTGROUP_RELEASED
  02: Call Sd_Instance_MainFunction()
  03: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN):
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_DOWN
  04: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN, Sd.EB.ConsumedEventgroup.RoutingMulticast, Sd.Design.ClientService.ConsumedEventGroupSetState.002):
      SoAd_DisableRouting() shall be called for multicast activation routing group reference to deactivate the
	  routing previsously activated with the socket connection used as parameter.
  05: Sd_Send_queueSubscribeEventgroup() shall be called

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1017</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ConsumedEventGroupSetState.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1025</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1474</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_AVAILABLE_DOWN_CEvg_Unicast</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>11003</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall change state to DOWN,
  close socket connections related to data path and disable all enabled EventGroups,
  if client service was stopped with Sd_ClientServiceSetState() while in AVAILABLE state and
  an Eventgroup with only SdConsumedEventGroupUdpActivationRef set was requested.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_0

Test Precondition: 
  Sd module is initialized.
  Client service is in state AVAILABLE.
  Service offer received from remote node #0; eventgroup #3 enabled.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_RELEASED.
  02: Call Sd_Instance_MainFunction().
  03: VP(Sd.Design.ClientService.Available.Ev.403):
      Client service shall be in DOWN state.
  04: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN):
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_DOWN.
  05: VP(Sd.Design.ConsumedEventgroup.MAIN_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group #3 but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled.
  06: VP(Sd.Design.ClientService.Available.Ev.403):
  07: VP(Sd.Design.ClientService.Available.Ev.403):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN, the remote address
      is released and the socket connection is closed.
  08: VP(Sd.Design.ClientService.Available.Ev.403, Sd.SWS_SD_00443):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #3 (unsubscribe).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>993</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1015</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00443</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>348</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1475</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>11122</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore an OfferService entry where the ServiceID, InstanceID
  or MajorVersion is set to Wildcard.

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  All client services are initialized and requested.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry with
      ServiceID set to wildcard and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.eventOffer.001):
      OfferService entry shall be rejected - none of services shall change state to AVAILABLE nor DOWN.
  03: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry with
      InstanceID set to wildcard and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.eventOffer.001):
      OfferService entry shall be rejected - none of services shall change state to AVAILABLE nor DOWN.
  05: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry with a
      MajorVersion set to wildcard and call Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.eventOffer.001):
      OfferService entry shall be rejected - none of services shall change state to AVAILABLE nor DOWN.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1026</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1476</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>11248</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall remember all valid OfferService received within a same loop cycle.

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  All client services are initialized and requested.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry
      for client instance #0.
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group thas is configured for this client.
  02: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry
      for client instance #1.
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group thas is configured for this client.
  03: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry
      for client instances #2.
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group thas is configured for this client.
  04: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry
      for client instances #3.
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group thas is configured for this client.
  05: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry
      for client instances #4.
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group thas is configured for this client.
  06: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry
      for client instances #5.
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group thas is configured for this client.
  06b: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry
      for client instances #0 but with a Service ID/Instance ID that is smaller than the
      smallest in this client instance to make sure that the binary search goes to the
      bottom end of the algorithm.
  07: Call Sd_ClientService_mainFunction().
  08: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      Client instance #0 shall go to AVAILABLE state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  09: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      Client instance #1 shall go to AVAILABLE state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  10: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      Client instance #2 shall go to AVAILABLE state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  11: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.004):
      Client instance #3 shall go to AVAILABLE state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  12: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      Client instance #4 shall go to AVAILABLE state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  13: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      Client instance #5 shall go to AVAILABLE state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1027</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1028</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1029</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1477</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>11549</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore an StopOfferService entry received via unicast
  where the ServiceID, InstanceID or MajorVersion is set to Wildcard.

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  All client services are initialized and in state AVAILABLE.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService entry with
      ServiceID set to wildcard.
  02: Call Sd_ClientService_mainFunction().
  03: VP(Sd.Design.ClientService.eventOffer.001):
      StopOfferService entry shall be rejected - all service shall stay in AVAILABLE state.
  04: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService entry with
      InstanceID set to wildcard.
  05: Call Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.eventOffer.001):
      StopOfferService entry shall be rejected - all service shall stay in AVAILABLE state.
  07: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService entry with a
      MajorVersion set to wildcard.
  08: Call Sd_ClientService_mainFunction().
  09: VP(Sd.Design.ClientService.eventOffer.001):
      StopOfferService entry shall be rejected - all service shall stay in AVAILABLE state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1026</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1478</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>11674</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall remember all valid StopOfferService received within a same loop cycle.

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  All client services are initialized and in state AVAILABLE.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService entry
      for client instance #0.
  02: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService entry
      for client instance #1.
  03: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService entry
      for client instances #2.
  04: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService entry
      for client instances #3.
  05: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService entry
      for client instances #4.
  06: Call Sd_ClientService_mainFunction().
  07: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      Client instance #0 shall go to MAIN state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  08: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      Client instance #1 shall go to MAIN state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  09: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      Client instance #2 shall go to MAIN state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  10: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.004):
      Client instance #3 shall go to MAIN state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments
  11: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      Client instance #4 shall go to MAIN state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1027</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1028</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1029</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1479</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>11866</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD shall accept OfferService entry
  with exactly matching ServiceID, InstanceID and MajorVersion, and non-matching MinorVersion,
  if SdClientServiceMinorVersion is set to Wildcard (0xFFFFFFFF).

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  All client services are initialized and requested.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall be accepted: service shall go to AVAILABLE state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1027</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1028</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1480</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>11958</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall accept StopOfferService entry
  with exactly matching ServiceID, InstanceID and MajorVersion, and non-matching MinorVersion,
  if SdClientServiceMinorVersion is set to Wildcard (0xFFFFFFFF).

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
   All client services are initialized and in state AVAILABLE.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      StopOfferService entry shall be accepted: service shall go to MAIN state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1027</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1028</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1481</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>12036</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall accept OfferService entry
  with exactly matching ServiceID, InstanceID, MajorVersion and MinorVersion,
  if SdClientServiceMinorVersion is set different to Wildcard (0xFFFFFFFF).

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  All client services are initialized and requested.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall be accepted: service shall go to AVAILABLE state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1027</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1028</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1482</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_7</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>12129</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall accept StopOfferService entry
  with exactly matching ServiceID, InstanceID, MajorVersion and MinorVersion,
  if SdClientServiceMinorVersion is set different to Wildcard (0xFFFFFFFF).

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
   All client services are initialized and in state AVAILABLE.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService
  02: Call Sd_ClientService_mainFunction().
  03: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      StopOfferService entry shall be accepted: service shall go to MAIN state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1027</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1028</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1483</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_8</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>12209</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall not accept OfferService entry
  with not exactly matching ServiceID, InstanceID, MajorVersion and MinorVersion,
  if SdClientServiceMinorVersion is not set to Wildcard (0xFFFFFFFF).

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  All client services are initialized and requested.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService
      with non-matching ServiceId and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall not be accepted: service shall not go to AVAILABLE state.
  03: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService
      with non-matching InstanceId and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall not be accepted: service shall not go to AVAILABLE state.
  05: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService
      with non-matching MajorVersion and call Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall not be accepted: service shall not go to AVAILABLE state.
  07: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService
      with non-matching Instance ID and MinorVersion and call Sd_ClientService_mainFunction().
  08: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall not be accepted: service shall not go to AVAILABLE state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1027</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1029</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1484</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_9</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>12361</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall not accept StopOfferService entry
  with not exactly matching ServiceID, InstanceID, MajorVersion and MinorVersion,
  if SdClientServiceMinorVersion is not set to Wildcard (0xFFFFFFFF).

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
   All client services are initialized and in state AVAILABLE.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService
      with non-matching ServiceId and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall not be accepted: service shall stay in AVAILABLE state.
  03: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService
      with non-matching InstanceId and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall not be accepted: service shall stay in AVAILABLE state.
  05: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService
      with non-matching Major version and call Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall not be accepted: service shall stay in AVAILABLE state.
  07: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService
      with non-matching Instance ID and MinorVersion and call Sd_ClientService_mainFunction().
  08: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall not be accepted: service shall stay in AVAILABLE state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1027</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1028</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1485</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_10</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>12504</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall not accept OfferService entry
  with not exactly matching ServiceID, InstanceID and MajorVersion,
  if SdClientServiceMinorVersion is set to Wildcard (0xFFFFFFFF).

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  All client services are initialized and requested.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService
      with non-matching ServiceId and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall not be accepted: service shall not go to AVAILABLE state.
  03: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService
      with non-matching InstanceId and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall not be accepted: service shall not go to AVAILABLE state.
  05: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService
      with non-matching Major Version and call Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      OfferService entry shall not be accepted: service shall not go to AVAILABLE state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1027</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1029</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1486</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_11</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>12630</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall reject StopOfferService entry
  with not exactly matching ServiceID, InstanceID and MajorVersion,
  if SdClientServiceMinorVersion is set to Wildcard (0xFFFFFFFF).

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
   All client services are initialized and in state AVAILABLE.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService
      with non-matching ServiceId and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      StopOfferService entry shall not be accepted: service shall stay in AVAILABLE state.
  03: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService
      with non-matching InstanceId and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      StopOfferService entry shall not be accepted: service shall stay in AVAILABLE state.
  05: Call Sd_ClientService_EventOfferService() to simulate reception of StopOfferService
      with non-matching Major version and call Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.eventOffer.002, Sd.Design.ClientService.eventOffer.003):
      StopOfferService entry shall not be accepted: service shall stay in AVAILABLE state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1027</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1028</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1487</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_12</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>12748</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall ignore OfferService entries which reference
  no IPv4 endpoint options.

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  Client service is initialized and in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry which references no endpoint options
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.ClientService.eventOffer.006):
      Client service shall stay in MAIN state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1031</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1488</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_13</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>12815</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall ignore OfferService entries which reference
  a configuration option sent to a client service with no capability records configured.

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  Client service is initialized and in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry which references an endpoint and configuration options.
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match003):
      OfferService shall be rejected; client service shall stay in MAIN state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>925</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1489</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_14</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>12883</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD shall correctly match an OfferService entry to a client service
  configured with a configuration option and ServiceId!=0xFFFE.

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  Client service is initialized and in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService with no configuration option
      and call Sd_ClientService_mainFunction().
  02: VP(Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match003):
      OfferService entry shall not be accepted: service shall stay in state MAIN.
  03: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService with non-matching configuration option
      and call Sd_ClientService_mainFunction().
  04: VP(Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match003):
      OfferService entry shall not be accepted: service shall stay in state MAIN.
  05: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService with matching configuration option
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  06: VP(Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match002, Sd.SWS_SD_00715):
      OfferService entry shall be accepted: service shall go to AVAILABLE state.
      BswM_Sd_ClientServiceCurrentState() shall be called with correct arguments

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>924</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>925</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00715</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>509</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1490</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_15</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>13018</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall correctly match an OfferService entry to a client service
  configured with ServiceId=0xFFFE and a configuration option containing otherserv value.

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  All client services are initialized and requested.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService
      with no configuration option, and call Sd_ClientService_mainFunction().
  02: VP(Sd.SWS_SD_00293):
      OfferService entry shall not be accepted: service's shall not go to AVAILABLE state.
  03: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService
      with configuration option that doesn't reference a valid otherserv value,
      and call Sd_ClientService_mainFunction().
  04: VP(Sd.SWS_SD_00293, Sd.SWS_SD_00715):
      OfferService entry shall not be accepted: service's shall not go to AVAILABLE state.
  05: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService
      with configuration option that references otherserv value of client service,
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  06: VP(Sd.SWS_SD_00293, Sd.SWS_SD_00715, Sd.SWS_SD_00717):
      OfferService entry shall be accepted: service #5 shall go to AVAILABLE state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00293</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00715</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>509</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00717</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>511</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1491</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventOfferService_17</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>13160</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD client service shall consider the configuration string as matching when
  no configuration string is received and no configuration string is configured.

Test Object: 
  Sd_ClientService_EventOfferService() API

Test Precondition: 
  Client service is initialized and in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of OfferService entry which references an endpoint and configuration options.
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: VP(Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match001):
      OfferService shall be accepted; client service shall go to AVAILABLE state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>923</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1492</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>13248</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore an SubscribeEventgroupAck entry where the ServiceID, InstanceID
  or MajorVersion is set to Wildcard.

Test Object: 
  Sd_ClientService_eventSubscribeAck() API

Test Precondition: 
  All client services are initialized and requested.
  Consumed Eventgroup #2 is in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeAck() to simulate reception of SubscribeEventgroupAck entry with
      ServiceID set to wildcard.
  02: Call Sd_ClientService_mainFunction().
  03: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.001):
      SubscribeEventgroupAck entry shall be rejected - no actions visible in trace.
  04: Call Sd_ClientService_eventSubscribeAck() to simulate reception of SubscribeEventgroupAck entry with
      InstanceID set to wildcard.
  05: Call Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.001):
      SubscribeEventgroupAck entry shall be rejected - no actions visible in trace.
  07: Call Sd_ClientService_eventSubscribeAck() to simulate reception of SubscribeEventgroupAck entry with a
      MajorVersion set to wildcard.
  08: Call Sd_ClientService_mainFunction().
  09: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.001):
      SubscribeEventgroupAck entry shall be rejected - no actions visible in trace.
  10: Call Sd_ClientService_eventSubscribeAck() to simulate reception of SubscribeEventgroupAck entry with a
      Eventgroup ID set to wildcard.
  11: Call Sd_ClientService_mainFunction().
  12: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.001):
      SubscribeEventgroupAck entry shall be rejected - no actions visible in trace.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventSubscribeEventgroupAck.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1033</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1493</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>13392</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore an SubscribeEventgroupAck entry if it references a multicast endpoint
  option and SdConsumedEventGroupMulticastActivationRef is not configured.

Test Object: 
  Sd_ClientService_eventSubscribeAck() API

Test Precondition: 
  All client services are initialized and requested.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState to request eventgroup #3
  02: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK
  03: Call Sd_Instance_MainFunction()
  04: VP(Sd.Design.ConsumedEventgroup.DOWN_MAIN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_EnableSpecificRouting() shall be called for client service activation group (#3) but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: Call Sd_ClientService_eventSubscribeAck() to simulate reception of SubscribeEventgroupAck entry referencing a multicast endpoint
      to a consumed event group which does not have a multicast data path configured.
  06: Call Sd_ClientService_mainFunction().
  07: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.003):
      SubscribeEventgroupAck entry will be ignored.
  08: Simulate OFFER message to client 3 of instance 3.
  09: Call Sd_Instance_MainFunction()
  10: Client Service #3 from instance #3 should be in state available. As it is a client service without unicast data path
      no call to SoAd_EnableSpecificRouting to activate an unicast data path should be on the trace.
      Multicast socket connection(s) should be opened at this stage.
  11: a subscribe acknowledge is received by a multicast only consumed event group
         but without multicast endpoint
  12: VP: no trace of action, subscribe acknowledge has been ignored
  13: This available client is now released (switched off) temporarily
  14: VP: Client unicast socket connection is closed and its state changes to DOWN.
  15: Client service shall change to DOWN state.
  16: A subscription acknowledge is now received even if in between this client service is no longer available
  17: no trace of fucntion calls, this subscribe acknowledge is ignored because the client service is no longer available
  18: Now client service is switched ON again, but subscription acknoledge was missed
  19: Client service shall change to AVAILABLE state because the previous OfferReceive flag is still active.
  20: Call Sd_ConsumedEventGroupSetState to request eventgroup #6
  21: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK
  22: Call Sd_Instance_MainFunction()
  23: Call Sd_ClientService_eventSubscribeAck() to simulate reception of SubscribeEventgroupAck entry to consumed event group #6
      referencing a multicast endpoint. This consumed event group is a Multicast only event group.
  24: Call Sd_ClientService_mainFunction().
  25: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.008):
      SubscribeEventgroupAck entry will not be ignored, in this case there is no multicast end-point in the offer

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventSubscribeEventgroupAck.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1035</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ConsumedEventGroupSetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1024</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventSubscribeEventgroupAck.008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1039</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1494</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>13689</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore an SubscribeEventgroupAck entry if it references no multicast endpoint
  option and SdConsumedEventGroupUdpActivationRef is not configured.

Test Object: 
  Sd_ClientService_eventSubscribeAck() API

Test Precondition: 
  All client services are initialized and requested.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState to request eventgroup #4
  02: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK
  03: Call Sd_ClientService_eventSubscribeAck() to simulate reception of SubscribeEventgroupAck entry
      which references no multicast endpoint option.
  04: Call Sd_ClientService_mainFunction().
  05: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.004):
      SubscribeEventgroupAck entry shall be ignored - no actions visible in trace.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventSubscribeEventgroupAck.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1036</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ConsumedEventGroupSetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1024</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1495</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>13772</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore an SubscribeEventgroupAck entry if it references invalid
  ConsumedEventGroup group id.

Test Object: 
  Sd_ClientService_eventSubscribeAck() API

Test Precondition: 
  All client services are initialized and requested.
  Consumed Eventgroup #1 is in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeAck() with EventgroupID parameter set to invalid
  ConsumedEventGroup group id.
  02: Call Sd_ClientService_mainFunction().
  03: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.001):
      SubscribeEventgroupAck entry shall be ignored - no actions visible in trace.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventSubscribeEventgroupAck.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1033</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1496</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>13838</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore an SubscribeEventgroupAck entry if it referenced
  service ServiceId, InstanceID or MajorVersion that don't match the configuration.

Test Object: 
  Sd_ClientService_eventSubscribeAck() API

Test Precondition: 
  All client services are initialized and requested.
  Consumed Eventgroup #1 is in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeAck() with ServiceInfoPtr.ServiceID parameter set to invalid
      value.
  02: Call Sd_ClientService_mainFunction().
  03: VP(Sd.SWS_SD_00490):
      SubscribeEventgroupAck entry shall be ignored - no actions visible in trace.
  04: Call Sd_ClientService_eventSubscribeAck() with ServiceInfoPtr.InstanceID parameter set to invalid
      value.
  05: Call Sd_ClientService_mainFunction().
  06: VP(Sd.SWS_SD_00490):
      SubscribeEventgroupAck entry shall be ignored - no actions visible in trace.
  07: Call Sd_ClientService_eventSubscribeAck() with ServiceInfoPtr.MajorVersion parameter set to invalid
      value.
  08: Call Sd_ClientService_mainFunction().
  09: VP(Sd.SWS_SD_00490):
      SubscribeEventgroupAck entry shall be ignored - no actions visible in trace.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00490</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>395</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1497</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>13949</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall process an SubscribeEventgroupAck entry if it references multicast endpoint
  option and SdConsumedEventGroupUdpActivationRef is not configured.

Test Object: 
  Sd_ClientService_eventSubscribeAck() API

Test Precondition: 
  All client services are initialized and requested.
  Consumed Eventgroup #4 is in state MAIN.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState to request eventgroup #4
  02: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK
  03: Call Sd_ClientService_mainFunction()
  04: Call Sd_ClientService_eventSubscribeAck() to simulate reception of SubscribeEventgroupAck entry
      which references multicast endpoint option.
  05: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
      SoAd_RequestIpAddrAssignment() shall be called for a IP address
  06: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE, Sd.EB.ConsumedEventgroup.RoutingMulticast):
      SoAd_EnableSpecificRouting() shall be called for multicast activation group with the socket connection
	  that had been previously recieved as available socket connection with function SoAd_SetUniqueRemoteAddr()
  07: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE, Sd.Design.ClientService.eventSubscribeEventgroupAck.006):
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_AVAILABLE
  08: Call Sd_ClientService_mainFunction().

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventSubscribeEventgroupAck.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1038</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1498</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>14071</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore a SubscribeEventgroupAck entry marked as erroneous.

Test Object: 
  Sd_ClientService_eventSubscribeAck() API

Test Precondition: 
  All client services are initialized and requested.
  Consumed Eventgroup #1 is in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeAck() with SD_OPTION_STATUSFLAG_ERROR
      bit set in EntryOptionInfo's OptionStatus field.
  02: Call Sd_ClientService_mainFunction().
  03: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.002):
      SubscribeEventgroupAck entry shall be ignored - no actions visible in trace.
  04: Call Sd_ClientService_eventSubscribeAck() with SD_OPTION_STATUSFLAG_CONFLICT
      bit set in EntryOptionInfo's OptionStatus field
  05: Call Sd_ClientService_mainFunction().
  06: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.002):
      SubscribeEventgroupAck entry shall be ignored - no actions visible in trace.
  07: Call Sd_ClientService_eventSubscribeAck() with SD_OPTION_STATUSFLAG_INVALIDENDPOINT
      bit set in EntryOptionInfo's OptionStatus field
  08: Call Sd_ClientService_mainFunction().
  09: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.002):
      SubscribeEventgroupAck entry shall be ignored - no actions visible in trace.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventSubscribeEventgroupAck.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1034</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1499</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_7</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>14184</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD shall accept an SubscribeEventgroupAck entry if it references no multicast endpoint
  option and SdConsumedEventGroupUdpActivationRef is configured.

Test Object: 
  Sd_ClientService_eventSubscribeAck() API

Test Precondition: 
  All client services are initialized and requested.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState to request eventgroup #3
  02: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK
  03: Call Sd_Instance_MainFunction()
  04: VP(Sd.Design.ConsumedEventgroup.DOWN_MAIN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_EnableSpecificRouting() shall be called for client service activation group (#3) but with 
      a socket connection index specifying the socket connection on which the routing group shall be
      enabled that has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().
  05: Call Sd_ClientService_eventSubscribeAck() to simulate reception of SubscribeEventgroupAck entry referencing no multicast endpoint.
  06: Call Sd_Instance_MainFunction().
  07: VP(Sd.Design.ClientService.eventSubscribeEventgroupAck.005):
      BswM_Sd_ConsumedEventGroupCurrentState shall be called with SD_CONSUMED_EVENTGROUP_AVAILABLE

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventSubscribeEventgroupAck.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1037</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1500</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_TTL_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>14291</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test performs a range check on TTL parameter of SubscribeEventgroupAck entry.

Test Object: 
  Sd_ClientService_eventSubscribeAck() API

Test Precondition: 
  Client service is initialized and in state AVAILABLE, service offer is valid until reboot.

Test Execution: 
  01: Call Sd_ConsumedEventGroupSetState() to request eventgroup #1
  02: VP(Sd.Design.ClientService.ConsumedEventGroupSetState.001):
      Sd_ConsumedEventGroupSetState() shall return E_OK.
  03: Call Sd_Instance_MainFunction().
  04: Call Sd_ClientService_eventSubscribeAck() once to simulate reception of SubscribeEventgroupAck entry.
  05: Repeat steps 06 - 11 for all test TTL values.
  06: Call Sd_ClientService_eventSubscribeAck() to simulate reception of SubscribeEventgroupAck entry.
  07: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      ConsumedEventgroup shall be in state AVAILABLE:
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_AVAILABLE.
  08: Call Sd_ClientService_mainFunction() for (TTL*LOOPS_PER_SECOND - 1) times.
  09: VP(Sd.Design.ConsumedEventgroup.Ignore):
      ConsumedEventgroup shall be in state AVAILABLE.
  10: Call Sd_ClientService_mainFunction().
  11: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_MAIN):
      ConsumedEventgroup shall be in state MAIN:
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_DOWN.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00652</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1012</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1014</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.AVAILABLE_MAIN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1016</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1501</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_eventSubscribeEventgroupAck_TTL_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>14443</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies SubscribeEventgroupAck entry received in MAIN phase for Infinite ConsumedEventGroup-TTL

Test Object: 
  Sd_ClientService_eventSubscribeAck() API

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via unicast from remote node #0; eventgroup #1 in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeAck() simulate reception of SubscribeEventgroupAck entry for EG #1 with infinite TTL
  02: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
      SoAd_RequestIpAddrAssignment() shall be called for a IP address
  03: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE, Sd.EB.ConsumedEventgroup.RoutingMulticast):
      SoAd_EnableSpecificRouting() shall be called for multicast activation group with the socket connection
	  that had been previously recieved as available socket connection with function SoAd_SetUniqueRemoteAddr()
  04: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_AVAILABLE
  05: Call Sd_Instance_MainFunction() 50 times
  06: VP(Sd.Design.ConsumedEventgroup.Ignore):
      Consumed eventgroup shall remain in state AVAILABLE
  07: Call Sd_ClientService_EventOfferService() to simulate reception of multicast Service Offer
  08: SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part 
      of the socket connection group from which a socket connection's remote address is to be set.
  09: Call Sd_Instance_MainFunction() for SdClientTimerRequestResponseMinDelay times
  10: VP(Sd.SWS_SD_00491.ClientService) Sd_Send_queueSubscribeEventgroup() shall not be called
  11: Call Sd_Instance_MainFunction() until reached SdClientTimerRequestResponseMaxDelay
  12: VP(Sd.Design.ClientService.Main.Ev.300):
      Sd_Send_queueSubscribeEventgroup() shall be called for eventgroup #1 (subscribe)
  13: Call Sd_ClientService_eventSubscribeAck() for eventgroup #1
  14: VP(Sd.Design.ConsumedEventgroup.Ignore):
      Consumed eventgroup shall remain in state AVAILABLE

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1014</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1021</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00491.ClientService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1502</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_resetRemoteConnection_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>14636</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that the ClientService unit shall handle the detected reboot
  as if a StopOfferService entry was received.

Test Object: 
  Sd_ClientService_resetRemoteConnection() API

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via unicast from remote node #3; eventgroup #1 subscribed.

Test Execution: 
  01: Call Sd_ClientService_resetRemoteConnection().
  02: Call Sd_ClientService_mainFunction().
  03: VP(Sd.Design.ClientService.Available.Ev.401):
      Client service shall be in MAIN state.
  04: VP(Sd.Design.ClientService.Available.Ev.401):
      SoAd_CloseSoCon() shall be called for multicast socket connection of eventgroup #0
  05: VP(Sd.Design.ClientService.Available.Ev.401):
      SoAd_CloseSoCon() shall be called for multicast socket connection of eventgroup #1
  06: VP(Sd.Design.ClientService.Available.Ev.401):
      SoAd_CloseSoCon() shall be called for multicast socket connection of eventgroup #2
  07: VP(Sd.Design.ClientService.Available.Ev.401):
      SoAd_CloseSoCon() shall be called for multicast socket connection of eventgroup #4
  08: VP(Sd.Design.ClientService.Available.Ev.401):
      BswM_Sd_ClientServiceCurrentState() shall be called with SD_CLIENT_SERVICE_DOWN
  09: VP(Sd.Design.ClientService.Available.Ev.401):
      SoAd_GetSoConMode() shall be called for UDP-Unicast
  10: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN):
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_DOWN
  11: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN, Sd.EB.ConsumedEventgroup.RoutingMulticast):
 	  SoAd_DisableSpecificRouting() shall be called for multicast activation group with the socket connection
	  that had been previously used to enable this routing with function SoAd_EnableSpecificRouting
  12: VP(Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN, Sd.EB.ConsumedEventgroup.RoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for client service deactivation group #1 but with a socket
      connection index specifying the socket connection on which the routing group shall be disabled,
      and which has to be the same socket connection index assigned in the function SoAd_SetUniqueRemoteAddr().

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.401</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>991</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.AVAILABLE_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1017</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1021</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.ResetRemoteConnection.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1040</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1503</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_resetRemoteConnection_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>14762</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that the ClientService unit shall ignore Sd_ClientService_resetRemoteConnection()
  if RemoteNodeIndex parameter is invalid.

Test Object: 
  Sd_ClientService_resetRemoteConnection() API

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via unicast from remote node #3; eventgroup #1 subscribed.

Test Execution: 
  01: Call Sd_ClientService_resetRemoteConnection().
  02: Call Sd_ClientService_mainFunction().
  03: VP(Sd.Design.ClientService.ResetRemoteConnection.001):
      Sd_ClientService_resetRemoteConnection() shall be ignored; client service shall stay in state AVAILABLE.
  04: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu IP address state to UNASSIGNED and call Sd_MainFunction()
  05: All consumed eventgroups and client services, including the ones that were in state AVAILABLE, are brought down to state DOWN

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.ResetRemoteConnection.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1040</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1504</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_OfferService_TTL_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>14839</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test performs a range check on TTL parameter of OfferService entry.

Test Object: 
  Client Service state machine

Test Precondition: 
  Client service is initialized and in state MAIN.

Test Execution: 
  01: Repeate steps 02 - 07 for all TTL test values.
  02: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  03: VP(Sd.Design.ClientService.WaitSoCon.Ev.502, Sd.Design.ClientService.eventOffer.006):
      Client service shall be in AVAILABLE state.
  04: Call Sd_ClientService_mainFunction() for (TTL*LOOPS_PER_SECOND -2) times.
  05: VP(Sd.Design.ClientService.Ignore):
      Client service shall be in AVAILABLE state.
  06: Call Sd_ClientService_mainFunction().
  07: VP(Sd.Design.ClientService.Available.Ev.402):
      Client service shall be in INITIALWAIT state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.402</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>992</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1031</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1505</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_INITIALWAIT_AVAILABLE_No_RemoteSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>14964</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD ClientService in Initial Wait Phase will correctly change state
  after an OfferService is received.

Test Object: 
  SdInstance_ClientOnlyEG\SdClientService_1

Test Precondition: 
  Sd module is initialized.
  Client service is in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() to simulate reception of Service Offer from remote node #3
      and call Sd_ClientService_mainFunction().
      Check that SoAd_SetUniqueRemoteAddr()is called with a Socket connection ID that is part 
      of the socket connection group from which a socket connection's remote address is to be set.
  02: As SoAd_SetUniqueRemoteAddr() can not set the remote addres and returns NOT_OK, offer is discardet
      and subsequently nothing else happens, there are no further actions.

Test Input: UDP-Unicast socket connection is online
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.eventOffer.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1031</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ClientService.ConsumedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1506</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_MAIN_AVAILABLE_TWO_EVENTGROUPS_TWO_SERVERS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>15043</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that Consumed Eventgroup shall change state to AVAILABLE when it
  receives SubscribeEvengroupAck entry while in state MAIN;
  the related OfferService entry has been received via unicast.

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via unicast from remote node #3; eventgroup #1 in state MAIN.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeAck() simulate reception of SubscribeEventgroupAck entry for EG #1
  02: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments: Socket connection ID must be part
      of the socket connection group from which a socket connection's remote address is to be set.
      SoAd_RequestIpAddrAssignment() shall be called for a IP address
  03: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE, Sd.EB.ConsumedEventgroup.RoutingMulticast):
      SoAd_EnableSpecificRouting() shall be called for multicast activation group with the socket connection
    that had been previously recieved as available socket connection with function SoAd_SetUniqueRemoteAddr()
  04: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE):
      BswM_Sd_ConsumedEventGroupCurrentState() shall be called with SD_CONSUMED_EVENTGROUP_AVAILABLE
  05: Call Sd_ClientService_eventSubscribeAck() simulate reception of SubscribeEventgroupAck entry for EG #0
      EG#0 and EG#1 are configured to have the same Multicast Socket Connection reference.
  06: VP(Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE): SoAd_EnableSpecificRouting() is called.


Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ConsumedEventgroup.MAIN_AVAILABLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1014</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.ConsumedEventgroup.RoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1021</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1507</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_UDP_RemoteNode_Not_Found_For_SetUniqueRemoteAddr_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>15185</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies, that if SoAd_SetUniqueRemoteAddr() returns NOT_OK,
  Sd_ClientService_EventOfferService() returns that no entry was found
  for the passed remote node after calling it with a UDP endpoint.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.

Test Execution: 
  01: Set SoAd_SetUniqueRemoteAddr_Stub() to return NOT_OK.
  02: Call Sd_ClientService_EventOfferService() with UDP endpoint to simulate reception of Service Offer.
  03: VP(): Verify that SoAd_OpenSoCon() and SoAd_SetUniqueRemoteAddr() were called and that Sd_ClientService_EventOfferService()
            returned that no entry was found for the remote node.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Remote.Node.Address.Not.Stored</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1508</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_TCP_RemoteNode_Not_Found_For_SetUniqueRemoteAddr_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>15258</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies, that if SoAd_SetUniqueRemoteAddr() returns NOT_OK,
  Sd_ClientService_EventOfferService() returns that no entry was found
  for the passed remote node after calling it with a TCP endpoint.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.

Test Execution: 
  01: Set SoAd_SetUniqueRemoteAddr_Stub() to return NOT_OK.
  02: Call Sd_ClientService_EventOfferService() with TCP endpoint to simulate reception of Service Offer.
  03: VP(): Verify that SoAd_OpenSoCon() and SoAd_SetUniqueRemoteAddr() were called and that Sd_ClientService_EventOfferService()
            returned that no entry was found for the remote node.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Remote.Node.Address.Not.Stored</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1509</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_RemoteNode_For_Duplicated_Service_Not_Stored</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>15331</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that if a ClientService is already provided by another remote node,
  Sd_ClientService_EventOfferService() returns that no entry was found, so that this remote
  node does not get stored in the remoteNode array later, taking up space unnecessarily.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.

Test Execution: 
  01: Call Sd_ClientService_EventOfferService() with UDP endpoint to simulate reception of Service Offer.
  02: VP(): Verify that Sd_ClientService_EventOfferService() returned that an entry was found for the remote node.
  03: Call Sd_ClientService_eventStopOfferService() so that in the next step, the offer from a different remote node
  	  for the same service will be handled.
  04: Call Sd_ClientService_EventOfferService() again with the same service but different remote node.
  05: VP(): Verify that Sd_ClientService_EventOfferService() set bEntryFound to false, meaning that this
            remoteNode shall not be stored as the service is already provided by another remote node.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.Remote.Node.Address.Not.Stored</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1510</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Dynamic_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>15423</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that if two ClientServices (A and B) have the same TCP datapath
  with a dynamic IP configured, and ClientService B is in DOWN state, while ClientService A
  is in MAIN state, no connection gets opened when ClientService B gets an offer.
  This means that SoAd_OpenSoCon() shall not be called for any ClientService after
  ClientService B exits the DOWN phase. Additionally it verifies that ClientService B goes into
  state WAIT_SOCON after it was requested and SoAdGetSoConMode() returns
  SOAD_SOCON_OFFLINE. When SoConMode is set to SOAD_SOCON_ONLINE again, ClientService B shall
  enter the AVAILABLE state after the next main function.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.
  Two services have the same TCP endpoint configured.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call
      Sd_ClientService_mainFunction() for ClientService A
      to bring it to MAIN state.
  02: VP(): ClientService A shall be in MAIN state while ClientService B shall still be in DOWN state.
  03: Call Sd_ClientService_EventOfferService() for ClientService B with TCP endpoint to simulate
      reception of a Service Offer.
  04: Call MainFunction().
  05: VP(): Verify that no connection was established and that SoAd_SetUniqueRemoteAddr()
      was not called.
  06: Set GetSoConMode_Stub to SOAD_SOCON_OFFLINE.
  07: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call
      Sd_ClientService_mainFunction() for ClientService B
      to bring it to MAIN state.
  08: VP(Sd.Design.ClientService.WaitSoCon.Ev.501, Sd.Design.ClientService.WaitSoCon.Ev.503):
        ClientService B exits down phase and goes to WAIT_SOCON phase.
  09: Call MainFunction.
  10: VP(Sd.Design.ClientService.WaitSoCon.Ev.505): ClientService B stays in WAIT_SOCON phase.
  11: Set GetSoConMode_Stub to SOAD_SOCON_ONLINE and call MainFunction().
  12: VP(Sd.Design.ClientService.WaitSoCon.Ev.502): ClientService B goes to AVAILABLE state.
  13: Service B receives stop offer and MainFunction() is called.
  14: Release Service B.
  15: VP(Sd.Design.ClientService.Available.Ev.403): ClientService B shall be in DOWN state again.
  16: VP(): ClientService A is still in state MAIN.

Test Input: 
  ClientService A is in state MAIN.
  ClientService B is in state DOWN.
  SoAd_GetSoConMode is configured to return SOAD_SOCON_OFFLINE.

Test Output: 
  ClientService B is in state DOWN.
  ClientService A is still in state MAIN and OpenSoCon() was not called for it.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.501</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1001</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1003</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.505</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1005</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>993</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1511</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_Do_Not_Open_SoCon_After_Exit_Down_Static_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>15684</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that if two ClientServices (A and B) have the same TCP datapath
  with a static IP configured, and ClientService B is in DOWN state, while ClientService A
  is in MAIN state, no connection gets opened when ClientService B gets an offer.
  This means that SoAd_OpenSoCon() shall not be called for any ClientService after
  ClientService B exits the DOWN phase. Additionally it verifies that ClientService B goes into
  state WAIT_SOCON after it was requested and SoAdGetSoConMode() returns
  SOAD_SOCON_OFFLINE. When SoConMode is set to SOAD_SOCON_ONLINE again, ClientService B shall
  enter the AVAILABLE state after the next main function.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.
  Two services have the same TCP datapath with a static IP configured.

Test Execution: 
  01: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call
      Sd_ClientService_mainFunction() for ClientService A
      to bring it to MAIN state.
  02: VP(): ClientService A shall be in MAIN state while ClientService B shall still be in DOWN state.
  03: Call Sd_ClientService_EventOfferService() for ClientService B with TCP endpoint to simulate
      reception of Service Offer.
  04: Call MainFunction().
  05: VP(): Verify that no connection was established and that SoAd_SetUniqueRemoteAddr()
      was not called.
  06: Set GetSoConMode_Stub to SOAD_SOCON_OFFLINE.
  07: Call Sd_ClientServiceSetState() with SD_CLIENT_SERVICE_REQUESTED and call
      Sd_ClientService_mainFunction() for ClientService B
      to bring it to MAIN state.
  08: VP(Sd.Design.ClientService.WaitSoCon.Ev.501, Sd.Design.ClientService.WaitSoCon.Ev.503):
        ClientService B exits down phase and goes to WAIT_SOCON phase.
  09: Call MainFunction.
  10: VP(Sd.Design.ClientService.WaitSoCon.Ev.505): ClientService B stays in WAIT_SOCON phase.
  11: Set GetSoConMode_Stub to SOAD_SOCON_ONLINE and call MainFunction().
  12: VP(Sd.Design.ClientService.WaitSoCon.Ev.502):
        Service B goes to AVAILABLE state.
  13: Service B receives stop offer and MainFunction() is called.
  14: Release Service B.
  15: VP(Sd.Design.ClientService.Available.Ev.403): Service B shall be in DOWN state again.
  16: VP(): ClientService A is still in state MAIN.

Test Input: 
  ClientService A is in state MAIN.
  ClientService B is in state DOWN.
  SoAd_GetSoConMode is configured to return SOAD_SOCON_OFFLINE.

Test Output: 
  ClientService B is in state DOWN.
  ClientService A is still in state MAIN and OpenSoCon() was not called for it.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.501</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1001</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1003</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.505</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1005</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>993</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1512</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_WAIT_SOCON_To_AVAILABLE_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>15948</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a ClientService with a UDP connection that is in state WAIT_SOCON
  because SoAd_IsConnectionReady() returned TCPIP_E_PENDING, will go to state AVAILABLE
  as soon as SoAd_IsConnectionReady() returns E_OK. Additionally it is verfied that
  the ClientService goes to the DOWN state after being released.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.

Test Execution: 
  01: Request ClientService.
  02: Call Sd_ClientService_EventOfferService() for ClientService.
  03: Set SoAdIsConnectionReady_Stub() to TCPIP_E_PENDING.
  04: Call MainFunction().
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.501; Sd.Design.ClientService.WaitSoCon.Ev.503):
        ClientService exits DOWN phase and goes to WAIT_SOCON phase.
  06: Call MainFunction()
  07: VP(Sd.Design.ClientService.WaitSoCon.Ev.505, Sd.Design.ClientService.WaitSoCon.Ev.503):
        ClientService stays in WAIT_SOCON state.
  08: Set SoAdIsConnectionReady_Stub() to E_OK.
  09: Call MainFunction().
  10: VP(Sd.Design.ClientService.WaitSoCon.Ev.502): ClientService goes to AVAILABLE state.
  11: Release ClientService.
  12: VP(Sd.Design.ClientService.Available.Ev.403): ClientService goes to DOWN state.

Test Input: 
  SoAd_IsConnectionReady is configured to return E_OK.

Test Output: 
  ClientService is in state DOWN.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1003</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.505</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1005</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.Available.Ev.403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>993</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1513</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_From_WAIT_SOCON_to_INITIAL_WAIT_Two_Clients</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>16157</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that two ClientServices go into state WAIT_SOCON after them
  receiving an offer from the same remoteNode and SoAdIsConnectionReady() returning
  TCPIP_E_PENDING. It is also verified that, when SoAdIsConnectionReady() is set to
  return E_NOT_OK, both ClientServices will go into the INITIALWAIT state.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.

Test Execution: 
  01: Request ClientServices 0 and 1.
  02: Call Sd_ClientService_EventOfferService() for ClientService 0.
  03: Call Sd_ClientService_EventOfferService() for ClientService 1.
  04: Set SoAdIsConnectionReady_Stub() to TCPIP_E_PENDING.
  05: Call MainFunction().
  06: VP(Sd.Design.ClientService.WaitSoCon.Ev.503): Both ClientServices exit down phase and
      go to WAIT_SOCON phase.
  07: Set SoAdIsConnectionReady_Stub to return E_NOT_OK.
  08: Call MainFunction().
  09: VP(Sd.Design.ClientService.WaitSoCon.Ev.504): Both ClientServices go to INITIALWAIT phase.

Test Input: 
  Both ClientServices are in state DOWN.

Test Output: 
  Both ClientServices are in state INITIALWAIT.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.504</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1004</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1003</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1514</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_From_WAIT_SOCON_To_MAIN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>16368</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a ClientService that is in state WAIT_SOCON
  goes to state MAIN after it receives a stopOffer.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.

Test Execution: 
  01: Request ClientService.
  02: Call Sd_ClientService_EventOfferService() for ClientService.
  03: Set SoAdIsConnectionReady_Stub() to TCPIP_E_PENDING.
  04: Call MainFunction().
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.503): ClientService exits down phase and
      goes to WAIT_SOCON phase.
  06: Call Sd_ClientService_eventStopOfferService() for ClientService.
  07: Call MainFunction().
  08: VP(Sd.Design.ClientService.WaitSoCon.Ev.508): ClientService goes to MAIN phase.

Test Input: 
  SoAd_IsConnectionReady is configured to return TCPIP_E_PENDING.

Test Output: 
  ClientService is in state MAIN.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1003</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.508</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1008</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1515</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_StopOffer_Followed_By_Offer_in_WAIT_SOCON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>16512</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a ClientService that is in state WAIT_SOCON
  remains in state WAIT_SOCON after it receives a stopOffer that is immediatly followed by
  another offer.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.

Test Execution: 
  01: Request ClientService.
  02: Call Sd_ClientService_EventOfferService() for ClientService.
  03: Set SoAdIsConnectionReady_Stub() to TCPIP_E_PENDING.
  04: Call MainFunction().
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.503): ClientService exits down phase and
      goes to WAIT_SOCON phase.
  06: Call Sd_ClientService_eventStopOfferService() for ClientService.
  07: Call Sd_ClientService_EventOfferService() again.
  08: Call MainFunction().
  09: VP(Sd.Design.ClientService.WaitSoCon.Ev.503): ClientService is in
      WAIT_SOCON phase.

Test Input: 
  SoAd_IsConnectionReady is configured to return TCPIP_E_PENDING.

Test Output: 
  ClientService is in state WAITSOCON.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1003</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1516</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_Release_in_WAIT_SOCON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>16682</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a ClientService that is in state WAIT_SOCON
  goes to state DOWN after it is released.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.

Test Execution: 
  01: Request ClientService.
  02: Call Sd_ClientService_EventOfferService() for ClientService.
  03: Set SoAdIsConnectionReady_Stub() to TCPIP_E_PENDING.
  04: Call MainFunction().
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.503): ClientService exits down phase and
      goes to WAIT_SOCON phase.
  06: Release ClientService.
  07: Call MainFunction().
  08: VP(Sd.Design.ClientService.WaitSoCon.Ev.507): ClientService goes to DOWN phase.

Test Input: 
  SoAd_IsConnectionReady is configured to return TCPIP_E_PENDING.

Test Output: 
  ClientService is in state DOWN.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1003</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.507</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1007</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1517</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_Offer_TTL_Runs_Out_in_WAIT_SOCON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>16818</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a ClientService that is in state WAIT_SOCON goes to state INITIALWAIT
  after the TTL of the offer runs out.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.

Test Execution: 
  01: Request ClientService.
  02: Call Sd_ClientService_EventOfferService() for ClientService.
  03: Set SoAdIsConnectionReady_Stub() to TCPIP_E_PENDING.
  04: Call MainFunction().
  05: VP(Sd.Design.ClientService.WaitSoCon.Ev.503): ClientService exits down phase and
      goes to WAIT_SOCON phase.
  06: Call MainFunction until TTL of offer runs out.
  07: VP(Sd.Design.ClientService.WaitSoCon.Ev.506): ClientService is in INITIALWAIT phase.

Test Input: 
  SoAd_IsConnectionReady is configured to return TCPIP_E_PENDING.

Test Output: 
  ClientService is in state INITIALWAIT.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1003</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.WaitSoCon.Ev.506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1006</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1518</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_Offer_Handling_In_WAIT_SOCON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>16981</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a ClientService that received another multicast offer while
  already in WAIT_SOCON phase, goes to state AVAILABLE when the SocketConnection is ready
  and the MainFunction() is called.

Test Object: 
  Sd_ClientService_EventOfferService()

Test Precondition: 
  Sd module is initialized.

Test Execution: 
  01: Request ClientService.
  02: Call Sd_ClientService_EventOfferService() for ClientService.
  03: Set SoAdIsConnectionReady_Stub() to TCPIP_E_PENDING.
  04: Call MainFunction().
  05: VP(): ClientService exits down phase and
      goes to WAIT_SOCON phase.
  06: Client gets another multicast offer
  07: Set SoAdIsConnectionReady_Stub() to E_OK.
  08: Call Sd_MainFunction()
  09: Client goes to state AVAILABLE

Test Input: 
  SoAd_IsConnectionReady is configured to return TCPIP_E_PENDING.

Test Output: 
  ClientService is in state INITIALWAIT.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1519</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_Check_SoConMode_Before_Sending_Find_In_INITIALWAIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>17135</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that a ClientService that is in the state INITIALWAIT does
    not send a find message if the state machine timer runs out and SoAd_GetSoconMode()
    returns OFFLINE.

Test Object: 
  Client Service state machine

Test Precondition: 
  Sd module is initialized.

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>954</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>965</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1520</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_Exit_AVAILABLE_If_UDP_SoCon_NOT_ONLINE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>17255</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies, that on reception of an offer for a ClientService
  that is in state AVAILABLE, the ClientService shall enter the MAIN
  state if the UDP SocketConnection is not ONLINE anymore.

Test Object: 
  Client Service state machine

Test Precondition: 
  Sd module is initialized.

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.CheckUDPConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>640</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1521</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_Exit_AVAILABLE_If_UDP_IsConnectionReady_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>17340</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies, that on reception of an offer for a ClientService
  that is in state AVAILABLE, the ClientService shall enter the MAIN
  state if SoAd_GetSoConMode() returned ONLINE but SoAd_IsConnectionReady()
  does not return TCPIP_OK for a UDP connection. After the return to the
  MAIN phase the already received offer shall be processed again.

Test Object: 
  Client Service state machine

Test Precondition: 
  Sd module is initialized.

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.EB.CheckUDPConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>640</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1522</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_Send_Find_After_TTL_And_FindDelayMax_Run_Out</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>17445</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies, that after the TTL of an offer a ClientService received
  ran out, a FIND message is sent by the ClientService after the
  SdClientTimerInitialFindDelayMax delay passes.

Test Object: 
  Client Service state machine

Test Precondition: 
  Sd module is initialized.

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ClientService.InitialWait.Ev.100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>954</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1523</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Client_CEvg_ACL_CHECK_WRONG_MULTICAST_ENDPOINT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ClientService_tests.c.m4</sourcefile>
      <sourceline>17597</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD_REPORT_ID_ACL_CHECK_FAILED will be reported if
  a SubscribeEvengroupAck entry contains a multicast endpoint that is not
  configured as an allowed provider for this service.

Test Object: 
  Consumed Eventgroup state machine

Test Precondition: 
  Client service is initialized and in state AVAILABLE.
  Service offer received via multicast from remote node #2; eventgroup #1 in state MAIN.
  Issue reporting and ACLPolicyCheck must be enabled in the config.
  Client service must have an IP address configured as AllowedProvider.

Test Execution: 
  01: Call Sd_ClientService_eventSubscribeAck() with a multicast endpoint that is not configured as 
      allowed provider.
  02: VP(Sd.SWS_SD_00785):
      User_ReportIssueCallout() is called with eventType SD_REPORT_ID_ACL_CHECK_FAILED.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00785</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1524</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_Unit_Server_InitState</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>314</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Services shall be in correct state after initialization.
&lt;/para&gt;

Test Object: 
SD Server service initialization.

Test Precondition: 
SD module initialized

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() to simulate Tx and MulticastRx socket connections assignment for instance #1
  02: call Sd_MainFunction() to update Server Service instance #1 state
  03: VP(Sd.SWS_SD_00020): All instance #1 server services shall be in DOWN state
  04: call Sd_LocalIpAddrAssignmentChg() to simulate Tx and MulticastRx socket connections assignment for instance #4
  05: call Sd_MainFunction() to update Server Service instance #4 state
  06: VP(Sd.SWS_SD_00020): All instance #4 server services shall be in DOWN state
  07: call Sd_LocalIpAddrAssignmentChg() to simulate Tx and MulticastRx socket connections assignment for instance #5
  08: call Sd_MainFunction() to update Server Service instance #5 state
  09: VP(Sd.SWS_SD_00020):
      Server service with SdServerServiceAutoAvailable = TRUE shall be in INITIALWAIT state, other shall be in state DOWN
  10: VP(Sd.SWS_SD_00020): instance #5 TCP server service shall be in DOWN state

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1525</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_INITIALWAIT_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>421</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from DOWN to INITIALWAIT
  when Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE and
  Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED has been called
&lt;/para&gt;

Test Object: 
State machine transition DOWN to INITIALWAIT

Test Precondition: 
SD module initialized
After initialization Server Service is in state DOWN

Test Execution: 
  01: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE
  02: call Sd_MainFunction() to update Server service state
  03: VP(Sd.Design.ServerService.Down.Ev.001): Server Service shall stay in DOWN state
  04: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign TX ip address
  05: call Sd_MainFunction() to update Server service state
  06: VP(Sd.Design.ServerService.Down.Ev.001): Server Service shall stay in DOWN state
  07: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign RX multicast ip address
  08: call Sd_MainFunction() to update Server service state
  09: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service Instance
  10: VP(Sd.Design.ServerService.Down.Ev.002) &amp; (Sd.Design.ServerService.StartServices):
      Sd_ServerService_getComphase() shall return state INITIALWAIT


Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1052</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1053</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.StartServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1090</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1526</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_INITIALWAIT_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>526</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from DOWN to INITIALWAIT
  when Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED and
  Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE has been called
  for server service with SdServerServiceUdpRef configured
&lt;/para&gt;

Test Object: 
State machine transition DOWN to INITIALWAIT

Test Precondition: 
Initialize SD module
After initialization Server Service is in state DOWN

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign TX ip address
  02: call Sd_MainFunction() to update server service state
  03: VP(Sd.Design.ServerService.Down.Ev.005): Server Service shall stay in DOWN state
  04: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign RX multicast ip address
  05: call Sd_MainFunction() to update server service state
  06: VP(Sd.Design.ServerService.Down.Ev.005): Server Service shall stay in DOWN state
  07: VP(Sd.Design.ServerService.SetState.001):
      call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE
  08: call Sd_MainFunction() shall be called to update state to INITIALWAIT
  09: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service Instance
  10: VP(Sd.Design.ServerService.Down.Ev.006): Sd_ServerService_getComphase() shall return state INITIALWAIT

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1057</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1058</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1527</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_INITIALWAIT_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>631</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed to INITIALWAIT
  for Server Service with SdServerServiceAutoAvailable = true
&lt;/para&gt;

Test Object: 
State machine transition DOWN to INITIALWAIT

Test Precondition: 
SdServerServiceAutoAvailable is configured to TRUE

Test Execution: 
  01: Call Sd_Init() to initialize server service.
  02: Call Sd_MainFunction() to update Server service
  03: VP(Sd.Design.ServerService.Down.Ev.007): Server Service shall stay in DOWN state
  04: Call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign TX ip address
  05: Call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign RX multicast ip address
  06: Call Sd_MainFunction() to update Server service state
  07: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service Instance
  08: VP(Sd.Design.ServerService.Down.Ev.007): Server service shall change to INITIALWAIT

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1059</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1528</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_INITIALWAIT_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>715</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from DOWN to INITIALWAIT
  for Server service with SdServerServiceActivationRef configured
  when Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE and
  Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED has been called
&lt;/para&gt;

Test Object: 
State machine transition DOWN to INITIALWAIT

Test Precondition: 
SD module initialized
After initialization Server Service is in state DOWN

Test Execution: 
  01: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE
  02: call Sd_MainFunction() to update Server service state
  03: VP(Sd.Design.ServerService.Down.Ev.001): Server Service shall stay in DOWN state
  04: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign TX ip address
  05: call Sd_MainFunction() to update Server service state
  06: VP(Sd.Design.ServerService.Down.Ev.001): Server Service shall stay in DOWN state
  07: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign RX multicast ip address
  08: call Sd_MainFunction() to update Server service state
  09: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service Instance
  10: VP(Sd.EB.ProvidedMethodRouting):
      SoAd_EnableRouting() shall be called with correct parameters
  11: VP(Sd.Design.ServerService.Down.Ev.002):
      Sd_ServerService_getComphase() shall return state INITIALWAIT

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1052</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1053</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.ProvidedMethodRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1085</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1529</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_INITIALWAIT_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>825</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that when the InitialWait phase of a Service shall be entered, Sd looks up
  other Services that are also in InitialWait and checks if the timings of the Services are compatible,
  so that Offer entries can be sent simultaneously.
&lt;/para&gt;

Test Object: 
State machine transition DOWN to INITIALWAIT

Test Precondition: 
  SD module initialized
  After initialization Server Service is in state DOWN

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() to assign TX &amp; RX multicast ip address.
  02: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE for the first service.
  03: call Sd_MainFunction() to update Server service state.
  04: VP(Sd.Design.ServerService.Down.Ev.002):
      First Server Service shall enter INITIALWAIT state.
  05: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service Instance.
  06: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE for the second service.
  07: call Sd_MainFunction() to update Server service state.
  08: VP(Sd.Design.ServerService.Down.Ev.002):
      Second Server Service shall enter INITIALWAIT state.
  09: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service Instance.
  10: Call Sd_MainFunction() the number of times it takes to reach SdServerTimerInitialOfferDelayMin.
  11: Call Sd_MainFunction() until the random timer expires.
  12: VP(Sd.SWS_SD_00318):
      Sd_Send_queueOfferService() shall be called for both Server Services within the same Mainfunction call.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1053</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00318</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1530</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_INITIALWAIT_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>993</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that when the InitialWait phase of a Service shall be entered,
  Sd does NOT synchronize the state transissions if the timing are incompatible.
&lt;/para&gt;

Test Object: 
State machine transition DOWN to INITIALWAIT

Test Precondition: 
  SD module initialized
  After initialization Server Service is in state DOWN

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() to assign TX &amp; RX multicast ip address.
  02: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE for the first service.
  03: call Sd_MainFunction() to update Server service state.
  04: VP(Sd.Design.ServerService.Down.Ev.002):
      First Server Service shall enter INITIALWAIT state.
  05: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service Instance.
  06: Call Sd_MainFunction() 5 times so the first service timer
      drops below InitialOfferDelayMin of a second service. As a consequence first and second service
      timers will not synchronize.
  07: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE for the second service.
  08: call Sd_MainFunction() to update Server service state.
  09: VP(Sd.Design.ServerService.Down.Ev.002):
      Second Server Service shall enter INITIALWAIT state.
  10: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with the second Server Service Instance.
  11: Call Sd_MainFunction() until the random timer of the first Server Service expires.
  12: VP(Sd.SWS_SD_00318): Sd_Send_queueOfferService shall be called only for the first Server Service.
  13: Call Sd_MainFunction() until the random timer of the second Server Service expires.
  14: VP(Sd.SWS_SD_00318): Sd_Send_queueOfferService shall be called only for the second Server Service.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1053</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00318</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1531</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_Ignore_evFind</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>1193</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that Find service entry received in DOWN phase is ignored

Test Object: 
State machine DOWN - no transition

Test Precondition: 
SD module initialized
After initialization Server Service is in state DOWN

Test Execution: 
  01: Call Sd_ServerService_eventFind()
  02: Call Sd_MainFunction() to update Server service state.
  03: VP(Sd.Design.ServerService.Down.Ev.008): Server service shall remain in DOWN state.
      A FIND event while in down state is ignored, Sd_Send_queueOfferService() is not called
  04: call Sd_MainFunction() to update Server service state.
  05: An OFFER message is received by a Server Service
  06: VP: This OFFER message is just ignored by the server and no action is carried out.
      Trace buffer remains empty

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1060</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Find.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1094</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1532</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_Ignore_evSubs</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>1293</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Subscribe eventgroup entry received in DOWN phase

Test Object: 
  State machine DOWN - no transition

Test Precondition: 
  Server service is initialized and in state DOWN.

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe()
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Down.Ev.009) &amp; VP(Sd.Design.ServerService.SubscribeEventgroup.006)
      Server service shall remain in DOWN state
  04: Call Sd_ServerService_eventSubscribe() with server #0
  05: Call Sd_MainFunction()
  06: VP(Sd.Design.ServerService.Down.Ev.009) &amp; VP(Sd.Design.ServerService.SubscribeEventgroup.006)
      Server service shall remain in DOWN state
  07: Call Sd_ServerService_eventSubscribe() with server #0 but a false (non existing) instance ID
  08: Call Sd_MainFunction()
  09: VP(Sd.Design.ServerService.Down.Ev.009) &amp; VP(Sd.Design.ServerService.SubscribeEventgroup.006)
      No action whatsoever since server service was not matched.
	  Server service shall remain in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1061</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1099</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1533</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_Ignore_evStopSub</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>1430</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Stop Subscribe eventgroup entry received in DOWN phase

Test Object: 
  Sd.Design.ServerService.Ignore

Test Precondition: 
  Server service is initialized and in state DOWN.

Test Execution: 
  01: Call Sd_ServerService_eventStopSubscribe()
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Ignore):
      Server service shall remain in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1534</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_Ignore_evFind</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>1497</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Find service entry received in INITIALWAIT phase

Test Object: 
  State machine INITIALWAIT - no transition

Test Precondition: 
SD module initialized
After initialization Server Service is in state INITIALWAIT

Test Execution: 
  01: Call Sd_ServerService_eventFind()
  02: Call Sd_MainFunction() - no response delay configured for this Server
  03: VP(Sd.Design.ServerService.InitialWait.Ev.006): Server service shall remain in INITIALWAIT state
  04: VP(Sd.Design.ServerService.Find.002): Find entry shall be ignored

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.InitialWait.Ev.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1067</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Find.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1094</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1535</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_Ignore_evSubs</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>1577</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Subscribe eventgroup entry received in INITIALWAIT phase

Test Object: 
  State machine INITIALWAIT - no transition

Test Precondition: 
  Server service is initialized and in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe()
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.InitialWait.Ev.007) &amp; (Sd.Design.ServerService.SubscribeEventgroup.006):
      Server service shall remain in INITIALWAIT state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.InitialWait.Ev.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1068</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1099</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1536</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_Ignore_evStopSubs</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>1650</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Stop Subscribe eventgroup entry received in INITIALWAIT phase

Test Object: 
  State machine INITIALWAIT - no transition

Test Precondition: 
  Server service is initialized and in state INITIALWAIT.

Test Execution: 
  01: Call Sd_ServerService_eventStopSubscribe()
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Ignore):
      Server service shall remain in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1537</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_DOWN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>1717</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from INITIALWAIT to DOWN
  when Sd_ServerServiceSetState() with SD_SERVER_SERVICE_DOWN has been called
&lt;/para&gt;

Test Object: 
  State machine transition INITIALWAIT - DOWN

Test Precondition: 
Server service is initialized and in state INITIALWAIT

Test Execution: 
  01: Call Sd_ServerServiceSetState() to stop server service.
  02: Call Sd_MainFunction() to update server service state.
  03: VP(Sd.Design.ServerService.InitialWait.Ev.001): Server service shall be in DOWN state
  04: VP(Sd.Design.ServerService.InitialWait.Ev.001) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.InitialWait.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1062</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1538</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_DOWN_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>1783</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from INITIALWAIT to DOWN when
  Sd_LocalIpAddrAssignmentChg() has been called to change TxPdu ip state to state other then TCPIP_IPADDR_STATE_ASSIGNED
  i.e. TCPIP_IPADDR_STATE_ONHOLD &amp; TCPIP_IPADDR_STATE_UNASSIGNED while being in INITIALWAIT state
&lt;/para&gt;

Test Object: 
  State machine transition INITIALWAIT - DOWN

Test Precondition: 
Server service is initialized and in state INITIALWAIT

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip state to TCPIP_IPADDR_STATE_ONHOLD
  02: call Sd_MainFunction() to update Server service state
  03: VP(Sd.Design.ServerService.InitialWait.Ev.002): Server Service shall be in DOWN state
  04: VP(Sd.Design.ServerService.InitialWait.Ev.002) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections
  05: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip address state to TCPIP_IPADDR_STATE_ASSIGNED.
  06: call Sd_MainFunction() to update the server service state
  07: VP(Sd.Design.ServerService.Down.Ev.002): Server Service shall be in INITIALWAIT state
  08: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with both activated Server Services
  09: call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip state to TCPIP_IPADDR_STATE_UNASSIGNED
  10: Call Sd_MainFunction() to update the Server service state.
  11: VP(Sd.Design.ServerService.InitialWait.Ev.002): Server service shall be in DOWN state.
  12: VP(Sd.Design.ServerService.InitialWait.Ev.002) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections for both Server Services

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.InitialWait.Ev.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1063</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1539</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_DOWN_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>1909</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from INITIALWAIT to DOWN when
  Sd_LocalIpAddrAssignmentChg() has been called for RxMulticast ip with the state other then
  TCPIP_IPADDR_STATE_ASSIGNED i.e. TCPIP_IPADDR_STATE_ONHOLD while being in INITIALWAIT state
&lt;/para&gt;

Test Object: 
  State machine transition INITIALWAIT - DOWN

Test Precondition: 
Server service is initialized and in state INITIALWAIT

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() to change RxMulticast ip state to TCPIP_IPADDR_STATE_ONHOLD
  02: call Sd_MainFunction() to update Server service state
  03: VP(Sd.Design.ServerService.InitialWait.Ev.003): Server Service shall be in DOWN state
  04: VP(Sd.Design.ServerService.InitialWait.Ev.003) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections
  05: Call Sd_LocalIpAddrAssignmentChg() to change RxMulticast ip address state to TCPIP_IPADDR_STATE_ASSIGNED.
  06: call Sd_MainFunction() to update the server service state
  07: VP(Sd.Design.ServerService.Down.Ev.006): Server Service shall be in INITIALWAIT state
  08: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service
  09: call Sd_LocalIpAddrAssignmentChg() to change RxMulticast ip state to TCPIP_IPADDR_STATE_UNASSIGNED
  10: Call Sd_MainFunction() to update the Server service state.
  11: VP(Sd.Design.ServerService.InitialWait.Ev.003): Server service shall be in DOWN state.
  12: VP(Sd.Design.ServerService.InitialWait.Ev.003) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.InitialWait.Ev.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1064</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1540</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_DOWN_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2022</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from INITIALWAIT to DOWN
  when Sd_ServerServiceSetState() with SD_SERVER_SERVICE_DOWN has been called
  for Server service with SdServerServiceUdpRef configured
&lt;/para&gt;

Test Object: 
  State machine transition INITIALWAIT - DOWN

Test Precondition: 
Server service is initialized and in state INITIALWAIT

Test Execution: 
  01: Call Sd_ServerServiceSetState() to stop server service.
  02: Call Sd_MainFunction() to update server service state.
  03: VP(Sd.Design.ServerService.InitialWait.Ev.001) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for UDP Unicast &amp; Multicast
  04: VP(Sd.Design.ServerService.InitialWait.Ev.001): Server service shall be in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.InitialWait.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1062</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Sd_ServerService_ComSM_entry_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1541</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_DOWN_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2089</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from INITIALWAIT to DOWN
  when Sd_ServerServiceSetState() with SD_SERVER_SERVICE_DOWN has been called
  for Server service with SdServerServiceActivationRef configured
&lt;/para&gt;

Test Object: 
  State machine transition INITIALWAIT - DOWN

Test Precondition: 
Server service is initialized and in state INITIALWAIT

Test Execution: 
  01: Call Sd_ServerServiceSetState() to stop server service.
  02: Call Sd_MainFunction() to update server service state.
  03: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_DisableRouting() shall be called with correct parameters
  04: VP(Sd.Design.ServerService.InitialWait.Ev.001): Server service shall be in DOWN state
  05: VP(Sd.Design.ServerService.InitialWait.Ev.001) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.InitialWait.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1062</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Sd_ServerService_ComSM_entry_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1114</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1542</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_MAIN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2163</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from DOWN to MAIN
  when Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE and
  Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED has been called
  if initial offer delay and initial find repetitions are configured as 0
&lt;/para&gt;

Test Object: 
  State machine transition DOWN - MAIN

Test Precondition: 
SD module initialized
After initialization Server Service is in state DOWN

Test Execution: 
  01: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE
  02: call Sd_MainFunction() to update Server service state
  03: VP(Sd.Design.ServerService.Down.Ev.001): Server Service shall stay in DOWN state
  04: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign TX ip address
  05: call Sd_MainFunction() to update Server service state
  06: VP(Sd.Design.ServerService.Down.Ev.001): Server Service shall stay in DOWN state
  07: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign RX multicast ip address
  08: call Sd_MainFunction() to update Server service state
  09: VP(Sd.Design.ServerService.Down.Ev.010): Sd_ServerService_getComphase() shall return state MAIN
  10: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service
  11: VP(Sd.Design.ServerService.Down.Ev.010):
      Sd_Send_queueOfferService() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1052</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1056</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1543</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_MAIN_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2278</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from DOWN to MAIN
  when Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED and
  Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE has been called
  for Server Service with SdServerTimerOfferCyclicDelay set
  if initial find delay and initial find repetitions are configured as 0
&lt;/para&gt;

Test Object: 
  State machine transition DOWN - MAIN

Test Precondition: 
Initialize SD module
After initialization Server Service is in state DOWN

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign TX ip address
  02: call Sd_MainFunction() to update server service state
  03: VP(Sd.Design.ServerService.Down.Ev.005): Server Service shall stay in DOWN state
  04: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign RX multicast ip address
  05: call Sd_MainFunction() to update server service state
  06: VP(Sd.Design.ServerService.Down.Ev.005): Server Service shall stay in DOWN state
  07: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE
  08: VP(Sd.Design.ServerService.SetState.001):
      Sd_ServerServiceSetState() shall return E_OK
  09: Sd_MainFunction() shall be called to update state to MAIN
  10: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service
  11: VP(Sd.Design.ServerService.Down.Ev.004): Sd_ServerService_getComphase() shall return state MAIN
  12: VP(Sd.Design.ServerService.Down.Ev.004):
      Sd_Send_queueOfferService() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1055</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1057</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1088</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1544</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_Ignore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2402</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that SD Server while in state DOWN shall not change state
  if Service is stopped with Sd_ServerServiceSetState().
&lt;/para&gt;

Test Object: 
  State machine DOWN - no transition

Test Precondition: 
SD module initialized
After initialization Server Service is in state DOWN

Test Execution: 
  01: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE
  02: call Sd_MainFunction() to update Server service state
  03: VP(Sd.Design.ServerService.Down.Ev.001): Server Service shall stay in DOWN state
  04: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_DOWN
  05: call Sd_MainFunction()
  06: VP(Sd.Design.ServerService.Ignore): Server service shall stay in DOWN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1052</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1545</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_Ignore_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2478</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that SD Server while in state DOWN shall not change state
  if Tx Pdu IP address is unassigned or onhold
&lt;/para&gt;

Test Object: 
  State machine DOWN - no transition

Test Precondition: 
SD module initialized
After initialization Server Service is in state DOWN

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip address state to ASSIGNED.
  02: call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Down.Ev.005): Server service shall stay in DOWN state
  04: call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip address state to UNASSIGNED
  05: call Sd_MainFunction()
  06: VP(Sd.Design.ServerService.Down.Ev.005): Server service shall stay in DOWN state.
  07: call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip address state to ONHOLD.
  08: call Sd_MainFunction().
  09: VP(Sd.Design.ServerService.Down.Ev.005): Server service shall stay in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1057</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1546</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_Ignore_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2564</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that SD Server while in state DOWN shall not change state
  if Multicast Rx Pdu IP address is unassigned or onhold
&lt;/para&gt;

Test Object: 
  State machine DOWN - no transition

Test Precondition: 
SD module initialized
After initialization Server Service is in state DOWN

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() to change  Multicast RxPdu ip address state to ASSIGNED.
  02: call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Down.Ev.005): Server service shall stay in DOWN state
  04: call Sd_LocalIpAddrAssignmentChg() to change  Multicast RxPdu ip address state to UNASSIGNED
  05: call Sd_MainFunction()
  06: VP(Sd.Design.ServerService.Ignore): Server service shall stay in DOWN state.
  07: call Sd_LocalIpAddrAssignmentChg() to change  Multicast RxPdu ip address state to ONHOLD.
  08: call Sd_MainFunction().
  09: VP(Sd.Design.ServerService.Down.Ev.001): Server service shall stay in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1052</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1057</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1547</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_self_MAIN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2656</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that first OfferService is sent SdServerTimerOfferCyclicDelay after the beginning of
  the Main Phase while server stays in that phase
&lt;/para&gt;

Test Object: 
  State machine MAIN - no transition

Test Precondition: 
Server Service initialised and in state MAIN

Test Execution: 
  01: call Sd_MainFunction() for SdServerTimerOfferCyclicDelay times
  02: VP(Sd.Design.ServerService.Ignore):
      Server shall be in MAIN state
  03: VP(Sd.Design.ServerService.Main.Ev.004):
      when SdServerTimerOfferCyclicDelay timer expires Sd_Send_queueOfferService() shall be called
      with correct arguments
  04: call Sd_MainFunction() again for SdServerTimerOfferCyclicDelay times
  05: VP(Sd.Design.ServerService.Ignore):
      Server shall be in MAIN state
  06: VP(Sd.Design.ServerService.Main.Ev.004):
      when SdServerTimerOfferCyclicDelay timer expires again Sd_Send_queueOfferService() shall be called
      with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1080</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1548</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_self_MAIN_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2752</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that OfferService shall not be sent in Main Phase for Server Service Instance
  with SdServerTimerOfferCyclicDelay=0
&lt;/para&gt;

Test Object: 
  State machine MAIN - no transition

Test Precondition: 
Server Service with SdServerTimerOfferCyclicDelay=0 initialised and in state MAIN

Test Execution: 
  01: Call Sd_MainFunction() for LOOPS_PER_SECOND times
  02: VP(Sd.Design.ServerService.Ignore):
      Server shall be in MAIN state
  03: VP(Sd.SWS_SD_00451):
      Sd_Send_queueOfferService() shall not be called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00451</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>356</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1549</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_MAIN_Ignore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2815</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD server service while in MAIN, shall not change state
  if Tx or Multicast Rx Pdu is assigned an IP address.

Test Object: 
  State machine MAIN - no transition

Test Precondition: 
  Server service is initialized and in state MAIN.

Test Execution: 
    01: call Sd_LocalIpAddrAssignmentChg() for Tx Pdu with TCPIP_IPADDR_STATE_ASSIGNED.
    02: call Sd_MainFunction()
    03: VP(Sd.Design.ServerService.Ignore):
        Server service shall be in MAIN state.
    04: call Sd_LocalIpAddrAssignmentChg() for Multicast Rx Pdu with TCPIP_IPADDR_STATE_ASSIGNED.
    05: call Sd_MainFunction()
    06: VP(Sd.Design.ServerService.Ignore):
        Server service shall be in MAIN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1550</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_MAIN_Ignore_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2884</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD server service while in MAIN, shall not change state
  if Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE has been called

Test Object: 
  State machine MAIN - no transition

Test Precondition: 
  Server service is initialized and in state MAIN.

Test Execution: 
    01: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE
    02: call Sd_MainFunction()
    03: VP(Sd.Design.ServerService.Ignore):
        Server service shall be in MAIN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1551</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_MAIN_DOWN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>2939</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from MAIN to DOWN
  for Server Service with SdServerServiceUdpRef configured
  when Sd_ServerServiceSetState() with SD_SERVER_SERVICE_DOWN has been called
  while the IP address is still assigned (i.e. Sd_LocalIpAddrAssignmentChg
  has been called with state TCPIP_IPADDR_STATE_ASSIGNED)
&lt;/para&gt;

Test Object: 
  State machine transition MAIN - DOWN

Test Precondition: 
Server service is initialized and in state MAIN with Tx &amp; RX multicast ip address ASSIGNED

Test Execution: 
  01: Call Sd_ServerServiceSetState() to stop server service.
  02: Call Sd_MainFunction() to update server service state.
  O3: VP(Sd.Design.ServerService.Main.Ev.001): Sd_Send_queueOfferService() shall be called with correct arguments
  04: VP(Sd.Design.ServerService.Main.Ev.001): SoAd_CloseSoCon() shall be called with correct arguments
  05: VP(Sd.Design.ServerService.Main.Ev.001): Server service shall be in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1077</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1552</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_MAIN_DOWN_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>3014</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from MAIN to DOWN
  if ip address associated with the SdInstanceTxPdu changes state to other than ASSIGNED,
  i.e. TCPIP_IPADDR_STATE_ONHOLD &amp; TCPIP_IPADDR_STATE_UNASSIGNED while Service is in MAIN state
&lt;/para&gt;

Test Object: 
  State machine transition MAIN - DOWN

Test Precondition: 
Server service is initialized and in state MAIN

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip state to UNASSIGNED and then right to ASSIGNED
      within the same cycle.
  02: call Sd_MainFunction() server service goes from MAIN to DOWN and then directly to INTIAL_WAIT, therefore
      a multicast OFFER is sent out.
  03: call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip state to TCPIP_IPADDR_STATE_ONHOLD
  04: call Sd_MainFunction() to update Server service state
  05: VP(Sd.Design.ServerService.Main.Ev.002): Server Service shall be in DOWN state
  06: VP(Sd.Design.ServerService.Main.Ev.002) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections
  07: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip address state to TCPIP_IPADDR_STATE_ASSIGNED.
  08: call Sd_MainFunction() to update the server service state
  09: VP(Sd.Design.ServerService.Down.Ev.004): Server Service shall be in MAIN state
  10: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service
  11: VP(Sd.Design.ServerService.Down.Ev.004): Sd_Send_queueOfferService() shall be called with correct arguments
  12: call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip state to TCPIP_IPADDR_STATE_UNASSIGNED
  13: Call Sd_MainFunction() to update the Server service state.
  14: VP(Sd.Design.ServerService.Main.Ev.002): Server service shall be in DOWN state.
  15: VP(Sd.Design.ServerService.Main.Ev.002) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1078</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1553</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_MAIN_DOWN_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>3143</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from MAIN to DOWN
  when ip address associated with the SdInstanceRxMultiCastPdu changes state to other than ASSIGNED,
  i.e. TCPIP_IPADDR_STATE_ONHOLD &amp; TCPIP_IPADDR_STATE_UNASSIGNED while being in MAIN state
&lt;/para&gt;

Test Object: 
  State machine transition MAIN - DOWN

Test Precondition: 
Server service is initialized and in state MAIN

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() to change RxMulticast ip state to TCPIP_IPADDR_STATE_ONHOLD
  02: call Sd_MainFunction() to update Server service state
  03: VP(Sd.Design.ServerService.Main.Ev.003): Server Service shall be in DOWN state
  04: VP(Sd.Design.ServerService.Main.Ev.003) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections
  05: Call Sd_LocalIpAddrAssignmentChg() to change RxMulticast ip address state to TCPIP_IPADDR_STATE_ASSIGNED.
  06: call Sd_MainFunction() to update the server service state
  07: VP(Sd.Design.ServerService.Main.Ev.003): Server Service shall be in MAIN state
  08: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with this Server Service
  09: VP(Sd.Design.ServerService.Main.Ev.003):
      Sd_Send_queueOfferService() shall be called with correct arguments
  10: call Sd_LocalIpAddrAssignmentChg() to change RxMulticast ip state to TCPIP_IPADDR_STATE_UNASSIGNED
  11: Call Sd_MainFunction() to update the Server service state.
  12: VP(Sd.Design.ServerService.Main.Ev.003): Server service shall be in DOWN state.
  13: VP(Sd.Design.ServerService.Main.Ev.003) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1079</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1554</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_MAIN_DOWN_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>3263</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from MAIN to DOWN
  for Server service with SdServerServiceActivationRef configured
  when Sd_ServerServiceSetState() with SD_SERVER_SERVICE_DOWN has been called
  while the IP address is still assigned (i.e. Sd_LocalIpAddrAssignmentChg
  has been called with state TCPIP_IPADDR_STATE_ASSIGNED)
&lt;/para&gt;

Test Object: 
  State machine transition MAIN - DOWN

Test Precondition: 
Server service is initialized and in state MAIN with Tx &amp; RX multicast ip address ASSIGNED

Test Execution: 
  01: Call Sd_ServerServiceSetState() to stop server service.
  02: Call Sd_MainFunction() to update server service state.
  O3: VP(Sd.Design.ServerService.Main.Ev.001):
      Sd_Send_queueOfferService() shall be called with correct arguments
  O4: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_DisableRouting() shall be called with correct arguments
  05: VP(Sd.Design.ServerService.Main.Ev.001) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections
  06: VP(Sd.Design.ServerService.Main.Ev.001): Server service shall be in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1077</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1555</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_MAIN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>3349</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from INITIALWAIT to MAIN
  when server timer expires and the parameter SdServerTimerInitialOfferRepetitionsMax = 0
&lt;/para&gt;

Test Object: 
  State machine transition INITIALWAIT - MAIN

Test Precondition: 
Server service is initialized and in state INITIALWAIT

Test Execution: 
  01: Call Sd_MainFunction() the number of times it takes before timer expires
      i.e. (SdServerTimerInitialOfferDelay/SdMainFunctionCycleTime)-1 and check that state is
      still INITIALWAIT
  02: Call Sd_MainFunction() one more time
  03: VP(Sd.Design.ServerService.InitialWait.Ev.005): Server service shall be in MAIN state
  04: VP(Sd.Design.ServerService.InitialWait.Ev.005):
      Sd_Send_queueOfferService() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.InitialWait.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1066</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1556</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_REPETITION_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>3430</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from INITIALWAIT to REPETITION
  when server timer expires and the parameter SdServerTimerInitialOfferRepetitionsMax != 0
&lt;/para&gt;

Test Object: 
  State machine transition INITIALWAIT - REPETITION

Test Precondition: 
Server service is initialized and in state INITIALWAIT

Test Execution: 
  01: Call Sd_MainFunction() the number of times before the timer would expire
      i.e. /SdServerTimerInitialOfferDelay / SdMainFunctionCycleTime) -1 and check that state is
      still INITIALWAIT
  02: Call Sd_MainFunction() one more time
  03: VP(Sd.Design.ServerService.InitialWait.Ev.004):
      Sd_Send_queueOfferService() shall be called with correct arguments
  04: VP(Sd.Design.ServerService.InitialWait.Ev.004):
      Server service shall be in REPETITION state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.InitialWait.Ev.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1065</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1557</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_Ignore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>3515</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD server service while in INITIALWAIT, shall not change state
  if Tx or Multicast Rx Pdu is assigned an IP address.

Test Object: 
  State machine INITIALWAIT - no transition

Test Precondition: 
  Server service is initialized and in state INITIALWAIT.

Test Execution: 
    01: call Sd_LocalIpAddrAssignmentChg() for Tx Pdu with TCPIP_IPADDR_STATE_ASSIGNED.
    02: call Sd_MainFunction()
    03: VP(Sd.Design.ServerService.Ignore):
        Server service shall be in INITIALWAIT state.
    04: call Sd_LocalIpAddrAssignmentChg() for Multicast Rx Pdu with TCPIP_IPADDR_STATE_ASSIGNED.
    05: call Sd_MainFunction()
    06: VP(Sd.Design.ServerService.Ignore):
        Server service shall be in INITIALWAIT state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1558</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_INITIALWAIT_Ignore_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>3588</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Server service while in INITIALWAIT, shall not change state
  if Sd_ServerServiceSetState() is called with SD_Server_SERVICE_REQUESTED

Test Object: 
  State machine INITIALWAIT - no transition

Test Precondition: 
  Server service is initialized and in state INITIALWAIT

Test Execution: 
  01: Call Sd_ServerServiceSetState() with SD_CLIENT_SERVICE_REQUESTED
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Ignore)
      Server service shall be in INITIALWAIT state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1559</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_REPETITION_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>3647</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from DOWN to REPETITION
  when Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED and
  Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE has been called
  used for server service with parameter SdServerTimerInitialOfferRepetitionsMax &gt; 0
  and SdServerTimerInitialFindDelay set to 0
&lt;/para&gt;

Test Object: 
  State machine transition DOWN - REPETITION

Test Precondition: 
Initialize SD module
After initialization Server Service is in state DOWN

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign TX ip address
  02: call Sd_MainFunction() to update server service state
  03: VP(Sd.Design.ServerService.Down.Ev.005): Server Service shall stay in DOWN state
  04: call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign RX multicast ip address
  05: call Sd_MainFunction() to update server service state
  06: VP(Sd.Design.ServerService.Down.Ev.005): Server Service shall stay in DOWN state
  07: call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE
  08: VP(Sd.Design.ServerService.SetState.001):
      Sd_ServerServiceSetState() shall return E_OK
  09: call Sd_MainFunction() shall be called to update state to REPETITION
  10: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for the connection
  11: VP(Sd.Design.ServerService.Down.Ev.003):
      Sd_Send_queueOfferService() shall be called with correct arguments
  12: VP(Sd.Design.ServerService.Down.Ev.003):
    Sd_ServerService_getComphase() shall return state REPETITION

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1054</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1057</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1088</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1560</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_REPETITION_DOWN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>3773</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from REPETITION to DOWN
  when Sd_ServerServiceSetState() with SD_SERVER_SERVICE_DOWN has been called
&lt;/para&gt;

Test Object: 
  State machine transition REPETITION - DOWN

Test Precondition: 
Server Service initialised and in state REPETITION

Test Execution: 
  01: Call Sd_ServerServiceSetState() to stop server service.
  02: Call Sd_MainFunction() to update server service state.
  03: VP(Sd.Design.ServerService.Repetition.Ev.001):
      Sd_Send_queueOfferService(idx, TRUE) will be sent
  04: VP(Sd.Design.ServerService.Repetition.Ev.001):
      SoAd_CloseSoCon will be sent for socket connection
  05: VP(Sd.Design.ServerService.Repetition.Ev.001): Server service shall be in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1069</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1561</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_REPETITION_DOWN_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>3847</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from REPETITION to DOWN when
  Sd_LocalIpAddrAssignmentChg() has been called to change TxPdu ip state to state other then TCPIP_IPADDR_STATE_ASSIGNED
  i.e. TCPIP_IPADDR_STATE_ONHOLD &amp; TCPIP_IPADDR_STATE_UNASSIGNED while being in REPETITION state
&lt;/para&gt;

Test Object: 
  State machine transition REPETITION - DOWN

Test Precondition: 
Server service is initialized and in state REPETITION

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip state to TCPIP_IPADDR_STATE_ONHOLD
  02: call Sd_MainFunction() to update Server service state
  03: VP(Sd.Design.ServerService.Repetition.Ev.002): Server Service shall be in DOWN state
  04: VP(Sd.Design.ServerService.Repetition.Ev.002):
      SoAd_CloseSoCon will be sent for socket connection
  05: Call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip address state to TCPIP_IPADDR_STATE_ASSIGNED.
  06: call Sd_MainFunction() to update the server service state
  07: VP(Sd.Design.ServerService.Repetition.Ev.002): Server Service shall be in REPETITION state
  08: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for the connection
  09: call Sd_LocalIpAddrAssignmentChg() to change TxPdu ip state to TCPIP_IPADDR_STATE_UNASSIGNED
  10: Call Sd_MainFunction() to update the Server service state.
  11: VP(Sd.Design.ServerService.Repetition.Ev.002):
      Sd_Send_queueOfferService will be sent with correct parameters
  12: VP(Sd.Design.ServerService.Repetition.Ev.002):
      SoAd_CloseSoCon will be sent for socket connection
  13: VP(Sd.Design.ServerService.Repetition.Ev.002): Server service shall be in DOWN state.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1070</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1562</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_REPETITION_DOWN_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>3965</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from REPETITION to DOWN when
  Sd_LocalIpAddrAssignmentChg() has been called for RxMulticast ip with the state other then
  TCPIP_IPADDR_STATE_ASSIGNED i.e. TCPIP_IPADDR_STATE_ONHOLD while being in REPETITION state
&lt;/para&gt;

Test Object: 
  State machine transition REPETITION - DOWN

Test Precondition: 
Server service is initialized and in state REPETITION

Test Execution: 
  01: call Sd_LocalIpAddrAssignmentChg() to change RxMulticast ip state to TCPIP_IPADDR_STATE_ONHOLD
  02: call Sd_MainFunction() to update Server service state
  03: VP(Sd.Design.ServerService.Repetition.Ev.008): Server Service shall be in DOWN state
  04: VP(Sd.Design.ServerService.Repetition.Ev.008):
      SoAd_CloseSoCon() will be called for socket connection
  05: Call Sd_LocalIpAddrAssignmentChg() to change RxMulticast ip address state to TCPIP_IPADDR_STATE_ASSIGNED.
  06: call Sd_MainFunction() to update the server service state
  07: VP(Sd.Design.ServerService.Repetition.Ev.008): Server Service shall be in REPETITION state
  08: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() will be called
  09: call Sd_LocalIpAddrAssignmentChg() to change RxMulticast ip state to TCPIP_IPADDR_STATE_UNASSIGNED
  10: Call Sd_MainFunction() to update the Server service state
  11: VP(Sd.Design.ServerService.Repetition.Ev.008):
      Sd_Send_queueOfferService will be called with correct parameters
  12: VP(Sd.Design.ServerService.Repetition.Ev.008):
      SoAd_CloseSoCon() will be called with correct parameters
  13: VP(Sd.Design.ServerService.Repetition.Ev.008): Server service shall be in DOWN state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1071</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1563</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_REPETITION_DOWN_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>4087</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from REPETITION to DOWN
  for Server service with SdServerServiceActivationRef configured
  when Sd_ServerServiceSetState() with SD_SERVER_SERVICE_DOWN has been called
&lt;/para&gt;

Test Object: 
  State machine transition REPETITION - DOWN

Test Precondition: 
Server Service initialised and in state REPETITION

Test Execution: 
  01: Call Sd_ServerServiceSetState() to stop server service.
  02: Call Sd_MainFunction() to update server service state.
  03: VP(Sd.Design.ServerService.Repetition.Ev.001):
      Sd_Send_queueOfferService(idx, TRUE) will be sent
  04: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_DisableRouting() shall be called
  05: VP(Sd.Design.ServerService.Repetition.Ev.001) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated UDP Socket Connections
  06: VP(Sd.Design.ServerService.Repetition.Ev.001): Server service shall be in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1069</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1564</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_self_REPETITION_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>4168</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that first OfferService is sent RepetitionsBaseDelay after the beginning of
  the Repetition Phase while server stays in that phase
&lt;/para&gt;

Test Object: 
  State machine REPETITION - no transition

Test Precondition: 
Server Service initialised and in state REPETITION

Test Execution: 
  01: call Sd_MainFunction() for RepetitionsBaseDelay times
  02: VP(Sd.Design.ServerService.Repetition.Ev.003):
      Server shall be in REPETITION state
  03: VP(Sd.Design.ServerService.Repetition.Ev.003):
      Sd_Send_queueOfferService() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1072</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1565</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_REPETITION_MAIN_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>4241</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed from REPETITION to MAIN
  when RepetitionsBaseDelay timer expires for SdServerTimerInitialOfferRepetitionsMax times
&lt;/para&gt;

Test Object: 
  State machine transition REPETITION - MAIN

Test Precondition: 
Server Service initialised and in state REPETITION

Test Execution: 
  01: call Sd_MainFunction() for RepetitionsBaseDelay*2 times
  02: VP(Sd.Design.ServerService.Repetition.Ev.004):
      Server shall be in state MAIN
  03: VP(Sd.Design.ServerService.Repetition.Ev.004):
      Sd_Send_queueOfferService() shall be called with correct arguments

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1073</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1566</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_REPETITION_Ignore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>4313</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Server service while in REPETITION, shall not change state
  if Tx or Multicast Rx Pdu is assigned an IP address.

Test Object: 
  State machine REPETITION - no transition

Test Precondition: 
  Server service is initialized and in state REPETITION.

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() for Tx Pdu with TCPIP_IPADDR_STATE_ASSIGNED.
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Ignore):
      Server service shall be in REPETITION state.
  04: Call Sd_LocalIpAddrAssignmentChg() for Multicast Rx Pdu with TCPIP_IPADDR_STATE_ASSIGNED.
  05: Call Sd_MainFunction()
  06: VP(Sd.Design.ServerService.Ignore):
      Server service shall be in REPETITION state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1567</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_REPETITION_Ignore_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>4385</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Server service while in REPETITION, shall not change state
  if Sd_ServerServiceSetState() is called with SD_SERVER_SERVICE_AVAILABLE.

Test Object: 
  State machine REPETITION - no transition

Test Precondition: 
  Server service is initialized and in state REPETITION.

Test Execution: 
  01: Call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Ignore):
      Server service shall be in REPETITION state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1568</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_eventFind_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>4442</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that Sd module shall ignore Find entries if no matching ServerService is configured
  for this SdInstance or major version is non-matching

Test Object: 
  State machine MAIN - no transition

Test Precondition: 
  Server service is initialized and in state MAIN

Test Execution: 
  01: Call Sd_ServerService_eventFind() with non maching ServerServiceID
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Find.001) &amp; (Sd.Design.ServerService.Main.Ev.005):
      Server service shall remain in MAIN state
  04: VP(Sd.Design.ServerService.Find.001) &amp; (Sd.Design.ServerService.Main.Ev.005):
      Find entry shall be ignored
  05: Call Sd_ServerService_eventFind() with non-matching major version
  06: Call Sd_MainFunction().
  07: VP(Sd.Design.ServerService.Find.001) &amp; (Sd.Design.ServerService.Main.Ev.005):
      Server service shall stay in MAIN state
  08: VP(Sd.Design.ServerService.Find.001) &amp; (Sd.Design.ServerService.Main.Ev.005):
      Find entry shall be ignored
  09: Call Sd_ServerService_eventFind() with non maching InstanceID
  10: Call Sd_MainFunction()
  11: VP(Sd.Design.ServerService.Find.001) &amp; (Sd.Design.ServerService.Main.Ev.005):
      Server service shall remain in MAIN state
  12: VP(Sd.Design.ServerService.Find.001) &amp; (Sd.Design.ServerService.Main.Ev.005):
      Find entry shall be ignored

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1081</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Find.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1092</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1569</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_REPETITION_eventFind</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>4581</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies Find service entry received in REPETITION phase

Test Object: 
  State machine REPETITION - no transition

Test Precondition: 
  Server service is initialized and in state REPETITION.

Test Execution: 
  01: Call Sd_ServerService_eventFind()
  02: Call Sd_MainFunction() the number of times it takes to reach SdServerTimerRequestResponseMinDelay
  03: VP(Sd.Design.ServerService.Operation_eventFind):
      Sd_Send_queueOfferService() shall not be called
  04: Call Sd_MainFunction() the number of times it takes for random timer to expire
  05: VP(Sd.Design.ServerService.Operation_eventFind):
      Server service shall remain in REPETITION state
  06: VP(Sd.Design.ServerService.Repetition.Ev.005) &amp; (Sd.Design.ServerService.Find.003), Sd.SWS_SD_00491.ServerService:
      Sd_Send_queueOfferService() shall be called with correct arguments

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1074</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Find.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1095</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00491.ServerService</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>581</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1570</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_Multiple_eventFind</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>4677</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies Find service entries received in MAIN &amp; REPETITION phase. If multiple ServerServices are configured
  that match the Find entry (i.e. Wildcards in the Find entry), Sd shall send multiple Offer entries

Test Object: 
  State machine REPETITION &amp; MAIN - no transitions

Test Precondition: 
  3 Server Services are in state MAIN or REPETITION

Test Execution: 
  01: Call Sd_ServerService_eventFind() with wildcards
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Operation_eventFind):
      Server services shall remain in their previous states
  04: VP(Sd.Design.ServerService.Main.Ev.005) &amp; (Sd.Design.ServerService.Find.003):
      Sd_Send_queueOfferService() shall be called with correct arguments for 3 matching Services
  05: Call Sd_ServerService_eventFind() with wildcard Instance ID and incorrect or not mathing minor version
  06: Call Sd_MainFunction()
  07: VP(Sd.Design.ServerService.Find.001)
      This message shall be ignored, no action is carried out

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1074</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1081</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Find.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1095</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1571</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>4819</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Subscribe eventgroup entries received in REPETITION phase

Test Object: 
  State machine REPETITION - no transition

Test Precondition: 
  Server service is initialized and in state REPETITION.

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe()
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Repetition.Ev.006):
      Server service shall remain in REPETITION state
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr shall be called with correct parameters
  05: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_IfSpecificRoutingGroupTransmit shall be called with correct parameters
  06: VP(Sd.SWS_SD_00333)
      VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      BswM_Sd_EventHandlerCurrentState shall be called with SD_EVENT_HANDLER_REQUESTED
  07: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_EnableRouting shall be called with correct parameters
  08: VP(Sd.SWS_SD_00333):
      VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called with correct parameters
  09: Call Sd_ServerService_eventSubscribe()
  10: Call Sd_MainFunction()
  11: VP(Sd.Design.ServerService.Repetition.Ev.006):
      Server service shall remain in REPETITION state
  12: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr shall be called with correct parameters
  13: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called with correct parameters

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1075</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00333</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
        
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1572</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>4978</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that Sd_Send_queueSubscribeEventgroupNack shall be called for Subscribe eventgroup entry
  that references no UDP endpoint option received in REPETITION phase

Test Object: 
  Sd_ServerService_eventSubscribe() API

Test Precondition: 
  Server service is initialized and in state REPETITION.

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe() with entry that references a non existing eventgroup
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Repetition.Ev.006):
      Server service shall remain in REPETITION state
  04: Subscribe Nack is generated for an event handler that does not exist
  05: Call Sd_ServerService_eventSubscribe() with entry that references no UDP endpoint option
  06: VP(Sd.SWS_SD_00333)
      VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      BswM_Sd_EventHandlerCurrentState shall be called with SD_EVENT_HANDLER_REQUESTED
  07: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_EnableRouting shall be called with correct parameters
  08: VP(Sd.Design.ServerService.SubscribeEventgroup.011):
      Sd_Send_queueSubscribeEventgroupAck shall be called with correct parameters
  09: Call Sd_ServerService_eventSubscribe() with entry that references no UDP endpoint option and with TTL = 0
  10: Call Sd_MainFunction()
  11: VP(Sd.Design.ServerService.Repetition.Ev.006):
      Server service shall remain in REPETITION state
  12: VP(Sd.Design.ServerService.SubscribeEventgroup.011):
      Sd_Send_queueSubscribeEventgroupAck shall be called with correct parameters

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1075</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1103</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1573</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_REPETITION_eventSubscribe_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>5124</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that when TTL of a last subscribed client expires SD_EVENT_HANDLER_RELEASED
  will be reported to the BswM

Test Object: 
  State machine REPETITION - no transition

Test Precondition: 
  Server service is initialized and in state REPETITION.

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe()
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Repetition.Ev.006):
      Server service shall remain in REPETITION state
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr shall be called with correct parameters
  05: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_IfSpecificRoutingGroupTransmit shall be called with correct parameters
  06: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      BswM_Sd_EventHandlerCurrentState shall be called with SD_EVENT_HANDLER_REQUESTED
  07: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_EnableRouting shall be called with correct parameters
  08: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called with correct parameters
  09: Call Sd_MainFunction() for (TTL*LOOPS_PER_SECOND - 2) times
  10: Event Group shall stay in state requested
  11: Call Sd_MainFunction()
  12: VP(Sd.Design.ServerService.Repetition.Ev.003)
      Sd_Send_queueOfferService() shall be called with correct arguments
  13: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_DisableRouting() shall be called for server service activation group
  14: VP(Sd.Design.ServerService.SubscribeEventgroup.012, Sd.SWS_SD_00458):
      BswM_Sd_EventHandlerCurrentState shall be called with SD_EVENT_HANDLER_RELEASED

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1075</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1100</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00458</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>363</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1574</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>5286</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Subscribe eventgroup entry received in MAIN phase

Test Object: 
  Sd_ServerService_eventSubscribe() API

Test Precondition: 
  Server service is initialized and in state MAIN

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe() to subscribe EventGroup_1
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Main.Ev.006):
      Server service shall remain in MAIN state
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr() shall be called
  05: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      BswM_Sd_EventHandlerCurrentState shall be called
  06: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_EnableRouting shall be called
  07: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called
  08: Call Sd_ServerService_eventSubscribe() to subscribe EventGroup_3
  09: Call Sd_MainFunction()
  10: VP(Sd.Design.ServerService.Main.Ev.006):
      Server service shall remain in MAIN state
  11: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      BswM_Sd_EventHandlerCurrentState shall be called
  12: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_EnableSpecificRouting shall be called
  13: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called
  14: Call Sd_ServerService_eventSubscribe() to subscribe EventGroup_3
      from a different remote node
  15: Call Sd_MainFunction()
  16: VP(Sd.Design.ServerService.Main.Ev.006):
      Server service shall remain in MAIN state
  17: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called
  18: Call Sd_ServerService_eventSubscribe() to subscribe EventGroup_3
      from a third different remote node
  19: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called
  20: Call Sd_MainFunction()
  21: Call Sd_ServerService_eventStopSubscribe() to unsubscribe EventGroup_3
      from the 2nd remote node
  22: Sd_Send_queueSubscribeEventgroupAck shall not be called
  23: Call Sd_MainFunction()

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1082</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1575</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>5523</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Subscribe eventgroup entry received in MAIN phase when the TTL timer
  expires in state SD_EVENT_HANDLER_REQUESTED.

Test Object: 
  Sd_ServerService_eventSubscribe() API

Test Precondition: 
  Server service is initialized and in state MAIN

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe() to subscribe EventGroup_2
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Main.Ev.006):
      Server service shall remain in MAIN state
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments
  05: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_IfSpecificRoutingGroupTransmit() shall be called with correct arguments
  06: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      BswM_Sd_EventHandlerCurrentState shall be called with state requested
  07: VP(Sd.EB.EventhandlerRoutingUDP):
      SoAd_EnableSpecificRouting shall be called for server service activation group
  08: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called with correct arguments
  09: Call Sd_MainFunction() for (TTL*LOOPS_PER_SECOND - 2) times
  10: Event Group shall be in state requested
  11: Call Sd_MainFunction()
  12: Sd_Send_queueOfferService() shall be called with correct arguments
  13: VP(Sd.EB.EventhandlerRoutingUDP):
      SoAd_DisableSpecificRouting() shall be called for server service activation group
  14: VP(Sd.ASR41.SWS_SD_00569):
      A previously set socket connection is set to initial value using SoAd_ReleaseRemoteAddr()
  15: VP(Sd.SWS_SD_00403):
      BswM_Sd_EventHandlerCurrentState shall be called with SD_EVENT_HANDLER_RELEASED

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1082</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1087</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1576</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>5687</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies handling of subscribed clients per Event Handler and removing the clients
  from fan out.

Test Object: 
  Sd_ServerService_eventSubscribe() API

Test Precondition: 
  Server service is initialized and in state MAIN

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe() to subscribe 1. client to EventHandler_2
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Main.Ev.006):
      Server service shall remain in MAIN state
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments
  05: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_IfSpecificRoutingGroupTransmit() shall be called with correct arguments
  06: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      BswM_Sd_EventHandlerCurrentState shall be called with state requested
  07: VP(Sd.EB.EventhandlerRoutingUDP):
      SoAd_EnableSpecificRouting shall be called for server service activation group
  08: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called with correct arguments
  09: Call Sd_ServerService_eventSubscribe() to subscribe 2. client to EventHandler_2
  10: Call Sd_MainFunction()
  11: VP(Sd.Design.ServerService.Main.Ev.006):
      Server service shall remain in MAIN state
  12: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr() shall be called
  13: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_IfSpecificRoutingGroupTransmit() shall be called
  14: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_EnableSpecificRouting() shall be called
  15: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called
  16: Call Sd_MainFunction() for (TTL*LOOPS_PER_SECOND - 3) times
  17: VP(Sd.SWS_SD_00452):
      EventHandler_2 shall be in state requested
  18: Call Sd_MainFunction()
  19: Sd_Send_queueOfferService() shall be called with correct arguments
  20: VP(Sd.SWS_SD_00452):
      SoAd_DisableSpecificRouting shall be called
  21: VP(Sd.ASR41.SWS_SD_00569):
      A previously set socket connection is set to initial value using SoAd_ReleaseRemoteAddr()
  22: Call Sd_MainFunction()
  23: VP(Sd.SWS_SD_00452):
      SoAd_DisableSpecificRouting shall be called
  24: VP(Sd.SWS_SD_00452):
      BswM_Sd_EventHandlerCurrentState shall be called with state released

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1082</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1087</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.ASR41.SWS_SD_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00452</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>357</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1577</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_MAIN_multipleMulticastSubscribers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>5920</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Subscribe Multicast only eventgroup entry received in MAIN phase

Test Object: 
  Sd_ServerService_eventSubscribe() API

Test Precondition: 
  Server service is initialized and in state MAIN

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe() to subscribe EventGroup_3 with 1.RemoteNode
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Main.Ev.006):
      Server service shall remain in MAIN state
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      BswM_Sd_EventHandlerCurrentState shall be called
  05: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_EnableSpecificRouting shall be called
  06: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called
  07: Call Sd_ServerService_eventSubscribe() to subscribe EventGroup_3 with 2.RemoteNode
  08: Call Sd_MainFunction()
  09: VP(Sd.Design.ServerService.Main.Ev.006):
      Server service shall remain in MAIN state
  10: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called
  11: Call Sd_ServerService_eventSubscribe() to subscribe EventGroup_3 with 2.RemoteNode
  12: Call Sd_MainFunction()
  13: VP(Sd.Design.ServerService.Main.Ev.006):
      Server service shall remain in MAIN state
  14: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called
  15: Call Sd_ServerService_eventStopSubscribe() to stop subscription for 1.RemoteNode
  16: Call Sd_MainFunction()
  17: Call Sd_ServerService_eventStopSubscribe() to stop subscription for 2.RemoteNode
  18: VP(Sd.SWS_SD_00403):
      BswM_Sd_EventHandlerCurrentState shall be called with SD_EVENT_HANDLER_RELEASED
  19: VP(Sd.SWS_SD_00455):
      SoAd_DisableSpecificRouting() shall be called
  20: Call Sd_MainFunction()
  21: Call Sd_ServerService_eventStopSubscribe() to stop subscription for 2.RemoteNode
  22: Call Sd_MainFunction()

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1082</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00455</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1578</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_MAIN_multipleSubscribers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>6147</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies multiple subscribers in MAIN phase.

Test Object: 
  Sd_ServerService_eventSubscribe() API &amp; Sd_ServerService_eventStopSubscribe() API
  in case of multiple subscribers

Test Precondition: 
  Server service is initialized and in state MAIN with Multicastthreshold = 3

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe() to subscribe 1. client to EventHandler_2
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments
  04: VP(Sd.SWS_SD_00455):
      SoAd_IfSpecificRoutingGroupTransmit() shall be called
  05: VP(Sd.SWS_SD_00455):
      BswM_Sd_EventHandlerCurrentState shall be called with state requested
  06: VP(Sd.SWS_SD_00455):
      SoAd_EnableSpecificRouting shall be called for server service activation group
  07: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called with correct arguments
  08: Call Sd_ServerService_eventSubscribe() to subscribe 2. client to EventHandler_2
  09: Call Sd_MainFunction()
  10: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments
  11: VP(Sd.SWS_SD_00455):
      SoAd_IfSpecificRoutingGroupTransmit() shall be called
  12: VP(Sd.SWS_SD_00455):
      SoAd_EnableSpecificRouting shall be called
  13: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called with correct arguments
  14: Call Sd_ServerService_eventSubscribe() to subscribe 3. client to EventHandler_2
  15: Call Sd_MainFunction()
  16: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments
  17: VP(Sd.SWS_SD_00455):
      SoAd_IfSpecificRoutingGroupTransmit() shall be called
  18: VP(Sd.SWS_SD_00455):
      SoAd_DisableSpecificRouting() shall be called to disable unicast routing for 1. &amp; 2. client
  19: VP(Sd.SWS_SD_00455):
      SoAd_EnableRouting() is called to enable multicast routing
  20: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called with correct arguments
  21: Call Sd_ServerService_eventSubscribe() to subscribe 4. client to EventHandler_2
  22: Call Sd_MainFunction()
  23: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr() shall be called with correct arguments
  24: VP(Sd.SWS_SD_00455):
      SoAd_IfSpecificRoutingGroupTransmit() shall be called
  25: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called with correct arguments
  26: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      no routing is enabled or disabled
  27: Call Sd_ServerService_eventStopSubscribe() to stop subscription for 4. client
  28: Call Sd_MainFunction()
  29: VP(Sd.Design.ServerService.Ignore):
      no further actions taken
  30: Call Sd_ServerService_eventStopSubscribe() to stop subscription for 2. client
      without the correct option.
  31: VP(Sd.SWS_SD_00427) Call Sd_MainFunction() no action at all, stop subscription is ignored
  32: Call Sd_ServerService_eventStopSubscribe() to stop subscription for 2. client
  33: Call Sd_MainFunction()
  34: VP(Sd.SWS_SD_00455):
      SoAd_DisableRouting() shall be called for multicast routing
  35: VP(Sd.SWS_SD_00455):
      SoAd_EnableSpecificRouting() shall be called for 2 clients
  36: Call Sd_ServerService_eventStopSubscribe() to stop subscription for 1. client
  37: Call Sd_MainFunction()
  38: VP(Sd.SWS_SD_00455):
      SoAd_DisableSpecificRouting() shall be called
  39: Call Sd_ServerService_eventStopSubscribe() to stop subscription for 3. client
  40: Call Sd_MainFunction()
  41: VP(Sd.SWS_SD_00455):
      SoAd_DisableSpecificRouting() shall be called
  42: VP(Sd.SWS_SD_00403):
      BswM_Sd_EventHandlerCurrentState shall be called with SD_EVENT_HANDLER_RELEASED

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.StopSubscribeEventgroup.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1108</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00455</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00427</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>335</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1579</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_MAIN_eventMulticastSubscribe_infiniteTTL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>6559</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Subscribe Multicast eventgroup entry received in MAIN phase for Inifinite ConsumedEventGroup-TTL

Test Object: 
  Sd_ServerService_eventSubscribe() API

Test Precondition: 
  Server service is initialized and in state MAIN

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe() to subscribe EventGroup_3 with infinite TTL
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Main.Ev.006):
      Server service shall remain in MAIN state
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      BswM_Sd_EventHandlerCurrentState shall be called with SD_EVENT_HANDLER_REQUESTED
  05: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_EnableSpecificRouting shall be called
  06: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called
  07: Call Sd_MainFunction() for SDTEST_LOOPS_PER_SECOND-2 times
  08: Event Group shall stay in state requested
  09: Call Sd_MainFunction() again
  10: Sd_Send_queueOfferService() shall be called after SdServerTimerOfferCyclicDelay timer expired
  11: Call Sd_MainFunction() for SDTEST_LOOPS_PER_SECOND-2 times
  12: Event Group shall stay in state requested

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1082</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1580</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_MAIN_eventSubscribe_infiniteTTL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>6694</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Subscribe eventgroup entry received in MAIN phase for Inifinite ConsumedEventGroup-TTL

Test Object: 
  Sd_ServerService_eventSubscribe() API

Test Precondition: 
  Server service is initialized and in state MAIN

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe() to subscribe EventGroup_1 with infinite TTL
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Main.Ev.006):
      Server service shall remain in MAIN state
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      SoAd_SetUniqueRemoteAddr() shall be called
  05: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      BswM_Sd_EventHandlerCurrentState shall be called with SD_EVENT_HANDLER_REQUESTED
  06: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_EnableSpecificRouting shall be called
  07: VP(Sd.Design.ServerService.SubscribeEventgroup.009):
      Sd_Send_queueSubscribeEventgroupAck shall be called
  08: Call Sd_MainFunction() for SDTEST_LOOPS_PER_SECOND-2 times
  09: Event Group shall stay in state requested
  10: Call Sd_MainFunction() again
  11: Sd_Send_queueOfferService() shall be called after SdServerTimerOfferCyclicDelay timer expired
  12: Call Sd_MainFunction() for SDTEST_LOOPS_PER_SECOND-2 times
  13: Event Group shall stay in state requested

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1082</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1581</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_REPETITION_eventStopSubscribe</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>6837</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies Stop Subscribe eventgroup entry received in REPETITION phase.
  Sd module shall process received valid StopSubscribeEventgroup entries, and remove the client from the
  fan-out if the Eventgroup is subscribed by the client.

Test Object: 
  State machine REPETITION - no transition

Test Precondition: 
  Server service is initialized and in state REPETITION with EG subscribed

Test Execution: 
  01: Call Sd_ServerService_eventStopSubscribe()
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Repetition.Ev.007):
      Server service shall remain in REPETITION state
  04: VP(Sd.Design.ServerService.StopSubscribeEventgroup.002) &amp; VP(Sd.Design.ServerService.EventhandlerRoutingMulticast):
      SoAd_DisableRouting() shall be called
  05: VP(Sd.SWS_SD_00334):
      BswM_Sd_EventHandlerCurrentState() shall be called

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Repetition.Ev.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1076</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.StopSubscribeEventgroup.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1108</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00334</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1582</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_MAIN_eventStopSubscribe_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>6929</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies Stop Subscribe eventgroup entry received in MAIN phase

Test Object: 
  State machine MAIN - no transition

Test Precondition: 
  Server service is initialized and in state MAIN with EventGroup_0 subscribed

Test Execution: 
  01: Call Sd_ServerService_eventStopSubscribe()
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Main.Ev.007):
      Server service shall remain in MAIN state
  04: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast) &amp; (Sd.Design.ServerService.StopSubscribeEventgroup.002):
      SoAd_DisableRouting() shall be called
  05: VP(Sd.Design.ServerService.StopSubscribeEventgroup.002):
      BswM_Sd_EventHandlerCurrentState() shall be called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1083</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.StopSubscribeEventgroup.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1108</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1583</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_MAIN_eventStopSubscribe_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>7018</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore an Stop Subscribe eventgroup entry if it referenced
  MajorVersion, endpoint option or EventgroupID that don't match the configuration

Test Object: 
  State machine MAIN - no transition

Test Precondition: 
  Server service is initialized and in state MAIN with EventGroup_0 subscribed

Test Execution: 
  01: Call Sd_ServerService_eventStopSubscribe() with non matching major version
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Ignore):
      Sd_ServerService_eventStopSubscribe entry shall be ignored - no actions visible in trace
  04: simulate stop subscription without unicast Endpoint to an event group with a multicast threshold bigger than 1
  05: Call Sd_MainFunction()
  06: VP: the stop subscription has no effect at all because a non multicast only server has to receive an unicast
     endpoint in a subscrition or stop subscription message
  07: no function left in the funcion call trace
  08: Call Sd_ServerService_eventStopSubscribe() with neither UDP not TCP endpoint option
  09: Call Sd_MainFunction()
  10: VP(Sd.Design.ServerService.StopSubscribeEventgroup.005):
      Sd_ServerService_eventStopSubscribe without unicast endpoint then it means that
      this stop subscription entry comes from a multicast only eventgroup.
  11  This stop subscriptionentry will set this eventgroup to RELEASED and its multicast
      data-path will be disabled.
  12: Call Sd_ServerService_eventStopSubscribe() with invalid EventgroupID
  13: Call Sd_MainFunction()
  14: VP(Sd.Design.ServerService.Ignore):
      Sd_ServerService_eventStopSubscribe entry shall be ignored - no actions visible in trace

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.StopSubscribeEventgroup.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1584</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_MAIN_DOWN_stop</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>7176</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies STOP Event flag received in MAIN phase when client was subscribed to the Eventhandler

Test Object: 
  State machine transition MAIN - DOWN

Test Precondition: 
  Server service is initialized and in state MAIN with EventGroup 1 subscribed

Test Execution: 
  01: Call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_DOWN to stop server service.
  02: Call Sd_MainFunction() to update server service state.
  03: VP(Sd.Design.ServerService.SetState.002): Sd_Send_queueOfferService(idx,TRUE) shall be called
  04: VP(Sd.Design.Sd_ServerService_ComSM_entry_DOWN): SoAd_CloseSoCon() shall be called for sockets used
  05: VP(Sd.Design.Sd_ServerService_ComSM_entry_DOWN): SoAd_DisableRouting() shall be called
  06: VP(Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      BswM_Sd_EventHandlerCurrentState() shall be called
  07: VP(Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      BswM_Sd_EventHandlerCurrentState() shall be called
  08: VP(Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_DisableRouting() shall be called
  09: VP(Sd.Design.ServerService.SetState.002): Server service shall be in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.SetState.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1089</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Sd_ServerService_ComSM_entry_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1585</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_REPETITION_DOWN_stop</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>7280</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies STOP Event flag received in REPETITION phase when client was subscribed to the Eventhandler

Test Object: 
  State machine transition REPETITION - DOWN

Test Precondition: 
  Server service is initialized and in state REPETITION with EventGroup 0 subscribed

Test Execution: 
  01: Call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_DOWN to stop server service.
  02: Call Sd_MainFunction() to update server service state.
  03: VP(Sd.Design.ServerService.Find.003): Sd_Send_queueOfferService(idx,TRUE) shall be called
  04: VP(Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for sockets used
  05: VP(Sd.Design.Sd_ServerService_ComSM_entry_DOWN): SoAd_DisableRouting() shall be called
  06: VP(Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      BswM_Sd_EventHandlerCurrentState() shall be called
  07: VP(Sd.Design.ServerService.SetState.002): Server service shall be in DOWN state

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.SetState.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1089</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Sd_ServerService_ComSM_entry_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1586</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_REPETITION_DOWN_halt</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>7375</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies HALT Event flag received in REPETITION phase when client was subscribed to the Eventhandler

Test Object: 
  State machine transition REPETITION - DOWN

Test Precondition: 
  Server service is initialized and in state REPETITION

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to assign TX ip address
  02: Call Sd_LocalIpAddrAssignmentChg() to assign RX multicast ip address
  03: Call Sd_MainFunction()
  04: Request server service #11
  05: Call Sd_MainFunction()
  06: Server service #11 goes to state INITIAL WAIT
  07: Open socket connection and enable global routing group method datapath
  08: let INIT WAIT timer for both server service #9 and #11 run out
  09: Call to main function
  10: VP: Server service #9 sends its initial multicast OFFER
  11: Call to main function
  12: VP: Server service #11 sends its initial multicast OFFER
  13: VP: Server service #9 goes to MAIN state and Server service #11 remains in REPETITION state
  14: Call Sd_ServerService_eventSubscribe() to simulate that server service #11 receives a SUBSCRIBE
  15: Event group #0 of Server Service #11 is set to state REQUESTED
  16: Datapath of Event group #0 of Server Service #11 is enabled
  17: Subscribe ACK as answer to SUBSCRIBE received is sent out
  18: Call Sd_MainFunction()
  19: Server Service #11 remains in REPETITION state
  20: Call Sd_MainFunction()
  21: All services of instance #5 are halted
  22: Call Sd_MainFunction()
  23: VP: both server services go to DOWN state
  24: VP: Socket connections of server service #9 are closed
  25: VP: Socket connections of server service #9 are closed
  26: On processing received SUBSCRIBE set socket connection remote address is now released
  27: Event group #0 of Server Service #11 is set back to state RELEASED

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.HaltServices.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1091</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1587</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_REPETITION_SUBSCRIBE_RUN_OUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>7607</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that a server service when in REPETITION can still process a SUBSCRIBE and enable its
  datapath for methods and event.
  When TTL of the SUBSCRIBE runs out the server service remains in REPTETITION
  and all previously enabled datapaths are disabled

Test Object: 
  State machine transition REPETITION - DOWN

Test Precondition: 
  Server service is initialized and in state REPETITION

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() to assign TX ip address
  02: Call Sd_LocalIpAddrAssignmentChg() to assign RX multicast ip address
  03: Call Sd_MainFunction()
  04: Request server service #11
  05: Call Sd_MainFunction()
  06: Server service #11 goes to state INITIAL WAIT
  07: Open socket connection and enable global routing group method datapath
  08: let INIT WAIT timer for both server service #9 and #11 run out
  09: Call to main function
  10: VP: Server service #9 sends its initial multicast OFFER
  11: Call to main function
  12: VP: Server service #11 sends its initial multicast OFFER
  13: VP: Server service #9 goes to MAIN state and Server service #11 remains in REPETITION state
  14: Call Sd_ServerService_eventSubscribe() to simulate that server service #11 receives a SUBSCRIBE
  15: Event group #0 of Server Service #11 is set to state REQUESTED
  16: Datapath of Event group #0 of Server Service #11 is enabled
  17: Subscribe ACK as answer to SUBSCRIBE received is sent out
  18: let TTL of received SUBSCRIBE run out
  19: Server Service #11 remains in REPETITION state
  20: Call Sd_MainFunction()
  21: VP: Server service #11 sends its second multicast OFFER
  22: As SUBSCRIBE is no longer valid Datapath of Event group #0 of Server Service #11 is disabled
  23: previously occupied socket is now release once SUBSCRIBE has died
  24: Event group #0 of Server Service #11 is set back to state RELEASED
  25: VP: both server services remain in the same state
  26: Call Sd_MainFunction()

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.HaltServices.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1091</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1588</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_EG_MAIN_DOWN_halt</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>7832</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies HALT Event flag received in MAIN phase when clients were subscribed to the Eventhandler

Test Object: 
  State machine transition MAIN - DOWN

Test Precondition: 
  Server service is initialized and in state MAIN

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe() to subscribe event group 1
  02: Call Sd_MainFunction()
  03: Server service shall remain in MAIN state
  04: SoAd_SetUniqueRemoteAddr() shall be called
  05: BswM_Sd_EventHandlerCurrentState() shall be called
  06: SoAd_EnableRouting() shall be called
  07: Sd_Send_queueSubscribeEventgroupAck() shall be called
  08: Call Sd_ServerService_eventSubscribe() to subscribe event group 0
  09: Call Sd_MainFunction()
  10: Server service shall remain in MAIN state
  11: SoAd_SetUniqueRemoteAddr() shall be called
  12: Call Sd_ServerService_haltServices() to halt server service.
  13: Call Sd_MainFunction() to update server service state.
  14: VP(Sd.Design.ServerService.HaltServices.001): Server service shall be in DOWN state
  15: VP(Sd.Design.Sd_ServerService_ComSM_entry_DOWN): SoAd_CloseSoCon() shall be called for sockets used
  16: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast): SoAd_DisableRouting() shall be called
  17: VP(Sd.Design.ServerService.HaltServices.001): BswM_Sd_EventHandlerCurrentState() shall be called
  18: VP(Sd.Design.ServerService.EventhandlerRoutingMulticast): SoAd_DisableRouting() shall be called
  19: BswM_Sd_EventHandlerCurrentState() shall be called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.HaltServices.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1091</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Sd_ServerService_ComSM_entry_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1114</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.EventhandlerRoutingMulticast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1589</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_Subscribe_EG_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>8016</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore SubscribeEventgroup entries where the ServiceID, InstanceID,
  MajorVersion or EventgroupID is set to a Wildcard value

Test Object: 
  State machine MAIN - no transition

Test Precondition: 
  Server service is initialized and in state MAIN

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe() with ServiceID set to wildcard
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.SubscribeEventgroup.001):
      service shall not change state
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.001):
      Sd_Send_queueSubscribeEventgroupNack() shall not be called
  05: Call Sd_ServerService_eventSubscribe() with InstanceID set to wildcard
  06: Call Sd_MainFunction()
  07: VP(Sd.Design.ServerService.SubscribeEventgroup.001):
      service shall not change state
  08: VP(Sd.Design.ServerService.SubscribeEventgroup.001):
      Sd_Send_queueSubscribeEventgroupNack() shall not be called
  09: Call Sd_ServerService_eventSubscribe() with a MajorVersion set to wildcard
  10: Call Sd_MainFunction()
  11: VP(Sd.Design.ServerService.SubscribeEventgroup.001):
      service shall not change state
  12: VP(Sd.Design.ServerService.SubscribeEventgroup.001):
      Sd_Send_queueSubscribeEventgroupNack() shall not be called
  13: Call Sd_ServerService_eventSubscribe() with an EventgroupID set to wildcard
  14: Call Sd_MainFunction()
  15: VP(Sd.Design.ServerService.SubscribeEventgroup.001):
      service shall not change state
  16: VP(Sd.Design.ServerService.SubscribeEventgroup.001):
      Sd_Send_queueSubscribeEventgroupNack() shall not be called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1096</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1590</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_Subscribe_EG_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>8187</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall call Sd_Send_queueSubscribeEventgroupNackUnknown for SubscribeEventgroup
  entries that do not match to a configured service in this SdInstance

Test Object: 
  Sd_ServerService_eventSubscribe() API

Test Precondition: 
  Server service is initialized and in state MAIN

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe()
      with InstanceID that does not match a configured service in this SdInstance
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.SubscribeEventgroup.005):
      service shall not change state
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.005, Sd.Design.ServerService.SubscribeEventgroup.013):
      Sd_Send_queueSubscribeEventgroupNackUnknown() shall be called
  05: Call Sd_ServerService_eventSubscribe()
      with MajorVersion that does not match to a configured service in this SdInstance
  06: Call Sd_MainFunction()
  07: VP(Sd.Design.ServerService.SubscribeEventgroup.005):
      service shall not change state
  08: VP(Sd.Design.ServerService.SubscribeEventgroup.005, Sd.Design.ServerService.SubscribeEventgroup.013):
      Sd_Send_queueSubscribeEventgroupNackUnknown() shall be called
  09: Call Sd_ServerService_eventSubscribe()
      with ServiceID that does not match a configured service in this SdInstance
  10: Call Sd_MainFunction()
  11: VP(Sd.Design.ServerService.SubscribeEventgroup.005):
      service shall not change state
  12: VP(Sd.Design.ServerService.SubscribeEventgroup.005):
      Sd_Send_queueSubscribeEventgroupNackUnknown() shall be called
  13: Call Sd_ServerService_eventSubscribe()
      with configuration option that does not match a configured service in this SdInstance
  14: Call Sd_MainFunction()
  15: VP(Sd.Design.ServerService.SubscribeEventgroup.005):
      service shall not change state
  16: VP(Sd.Design.ServerService.SubscribeEventgroup.005):
      Sd_Send_queueSubscribeEventgroupNackUnknown() shall be called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.005</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1098</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.013</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1097</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1591</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_Subscribe_EG_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>8423</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall respond with a SubscribeEventgroupNack entry to SubscribeEventgroup entries
  where the EventgroupID does not match to a configured EventHandler in the according Service

Test Object: 
  State machine REPETITION - no transition

Test Precondition: 
  Server service is initialized and in state REPETITION

Test Execution: 
  01: Call Sd_ServerService_eventSubscribe()
      with InstanceID that don't match to a configured service in this SdInstance
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.SubscribeEventgroup.007):
      service shall not change state
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.007):
      Sd_Send_queueSubscribeEventgroupNack() shall be called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1101</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1592</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_Subscribe_EG_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>8509</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall process received valid SubscribeEventgroup entries, and send a
  SubscribeEventgroup-Nack entry if the necessary resources are not available

Test Object: 
  State machine MAIN - no transition

Test Precondition: 
  Server service is initialized and in state MAIN

Test Execution: 
  01: Set SoAd_SetUniqueRemoteAddr_Stub() return value to NOT_OK to simulate resources are not available in
      Sd_ServerService_addEventGroupSubscriber() called from Sd_ServerService_eventSubscribe()
  02: Call Sd_ServerService_eventSubscribe() with correct parameters
  03: Call Sd_MainFunction()
  04: VP(Sd.Design.ServerService.SubscribeEventgroup.008):
      service shall not change state
  05: VP(Sd.Design.ServerService.SubscribeEventgroup.008):
      Sd_Send_queueSubscribeEventgroupNack() shall be called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1593</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_StopSubscribe_EG_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>8591</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore StopSubscribeEventgroup entries where the ServiceID, InstanceID,
  MajorVersion or EventgroupID is set to a Wildcard value

Test Object: 
  State machine REPETITION - no transition

Test Precondition: 
  Server service is initialized and in state REPETITION with EG subscribed

Test Execution: 
  01: Call Sd_ServerService_eventStopSubscribe() with ServiceID set to wildcard
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.Operation_eventStopSubscribe):
      service shall not change state
  04: VP(Sd.Design.ServerService.StopSubscribeEventgroup.001):
      StopSubscribeEventgroup entry shall be ignored
  05: Call Sd_ServerService_eventStopSubscribe() with InstanceID set to wildcard
  06: Call Sd_MainFunction()
  07: VP(Sd.Design.ServerService.SubscribeEventgroup.001):
      service shall not change state
  08: VP(Sd.Design.ServerService.StopSubscribeEventgroup.001):
      StopSubscribeEventgroup entry shall be ignored
  09: Call Sd_ServerService_eventStopSubscribe() with a MajorVersion set to wildcard
  10: Call Sd_MainFunction()
  11: VP(Sd.Design.ServerService.SubscribeEventgroup.001):
      service shall not change state
  12: VP(Sd.Design.ServerService.StopSubscribeEventgroup.001):
      StopSubscribeEventgroup entry shall be ignored
  13: Call Sd_ServerService_eventStopSubscribe() with an EventgroupID set to wildcard
  14: Call Sd_MainFunction()
  15: VP(Sd.Design.ServerService.SubscribeEventgroup.001):
      service shall not change state
  16: VP(Sd.Design.ServerService.StopSubscribeEventgroup.001):
      StopSubscribeEventgroup entry shall be ignored

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.StopSubscribeEventgroup.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1594</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_StopSubscribe_EG_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>8761</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD shall ignore received valid StopSubscribeEventgroup entries, if the Eventgroup
  is not subscribed by the client

Test Object: 
  State machine REPETITION - no transition

Test Precondition: 
  Server service is initialized and in state REPETITION with EG_0 subscribed

Test Execution: 
  01: Call Sd_ServerService_eventStopSubscribe() for EG_1 which was not subscribed previously
  02: Call Sd_MainFunction()
  03: VP(Sd.Design.ServerService.StopSubscribeEventgroup.003):
      service shall not change state
  04: VP(Sd.Design.ServerService.StopSubscribeEventgroup.003):
      StopSubscribeEventgroup entry shall be ignored

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.StopSubscribeEventgroup.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1595</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_ResetRemoteConnection_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>8835</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that ServerService unit shall handle the detected reboot as if a
  StopSubscribeEventgroup entry was received

Test Object: 
  Test of reset remote connection functionality

Test Precondition: 
  Server service with SdServerServiceUdpRef set is initialized and in state MAIN
  Eventgroup is subscribed

Test Execution: 
  01: Call Sd_ServerService_resetRemoteConnection() with valid RemoteNodeIndex parameter.
  02: Call Sd_MainFunction() to update Server service.
  03: VP(Sd.Design.ServerService.ResetRemoteConnection.001):
      No additional actions visible in trace.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.ResetRemoteConnection.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1596</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_ResetRemoteConnection_ManyEventHandlers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>8919</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that the algorithm of resetting remote notes can handle many EventHandlers and
  does not lead to out of bounds access or endless loop.

Test Object: 
  Sd_ServerService_resetRemoteConnection()

Test Precondition: 

Test Execution: 
  01: Call Sd_ServerService_resetRemoteConnection() with an Instance that has a
  ServerService which containing many EventHandlers.
  02 VP: Verify that the test reaches the end and does not lead to endless loops or out of bound
  accesses (visible on lead platform builds).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.ResetRemoteConnection.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1597</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>8968</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed to MAIN and back to DOWN
  for Server Service with SdServerServiceTcpRef set and that Sd_Send_queueSubscribeEventgroupNack is called
  when the SubscribeEventgroup entry references a TCP endpoint option
&lt;/para&gt;

Test Object: 
  State machine transitions DOWN - MAIN - DOWN &amp; Sd_ServerService_eventSubscribe() API

Test Precondition: 
Server service with SdServerServiceTcpRef set is initialized

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign TX ip address
  02: Call Sd_MainFunction() to update Server service state
  03: Call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign RX multicast ip address
  04: Call Sd_MainFunction() to update Server service state
  05: VP(Sd.Design.ServerService.SetState.001):
      Call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE
  06: Call Sd_MainFunction() to update Server service state
  07: VP(Sd.Design.ServerService.Down.Ev.004) &amp; (Sd.Design.ServerService.StartServices):
      Server service shall change to MAIN
  08: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with these Server Services
  09: Call Sd_ServerService_eventSubscribe() with entry that references TCP endpoint option
  10: Call Sd_MainFunction() to update Server service state
  11: VP(Sd.Design.ServerService.Main.Ev.004):
      Sd_Send_queueOfferService() shall be called with correct arguments
  12: VP(Sd.Design.ServerService.SubscribeEventgroup.010):
      Sd_Send_queueSubscribeEventgroupNack() shall be called
  13: Call Sd_ServerServiceSetState() to stop server service.
  14: Call Sd_MainFunction() to update server service state.
  15: VP(Sd.Design.ServerService.Main.Ev.001): Server service shall be in DOWN state
  16: VP(Sd.Design.ServerService.Main.Ev.001):
      Sd_Send_queueOfferService() shall be called with correct arguments
  17: VP(Sd.Design.ServerService.Main.Ev.001) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated Socket Connections

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.SetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1088</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1055</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.StartServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1090</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1080</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1102</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1077</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1598</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_DOWN_MAIN_SubsEG_DOWN_TCP_receive_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>9138</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that Server Service state is changed to MAIN and back to DOWN
  for Server Service with SdServerServiceTcpRef set and that no out of boundary access occurs
  when the SubscribeEventgroup entry references a UDP endpoint option
&lt;/para&gt;

Test Object: 
  State machine transitions DOWN - MAIN - DOWN &amp; Sd_ServerService_eventSubscribe() API

Test Precondition: 
Server service with SdServerServiceTcpRef set is initialized

Test Execution: 
  01: Call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign TX ip address
  02: Call Sd_MainFunction() to update Server service state
  03: Call Sd_LocalIpAddrAssignmentChg() with TCPIP_IPADDR_STATE_ASSIGNED to assign RX multicast ip address
  04: Call Sd_MainFunction() to update Server service state
  05: VP(Sd.Design.ServerService.SetState.001):
      Call Sd_ServerServiceSetState() with SD_SERVER_SERVICE_AVAILABLE
  06: Call Sd_MainFunction() to update Server service state
  07: VP(Sd.Design.ServerService.Down.Ev.004) &amp; (Sd.Design.ServerService.StartServices):
      Server service shall change to MAIN
  08: VP(Sd.SWS_SD_00606):
      SoAd_OpenSoCon() shall be called for Socket Connections associated with these Server Services
  09: Call Sd_ServerService_eventSubscribe() with entry that references TCP endpoint option
  10: Call Sd_MainFunction() to update Server service state
  11: VP(Sd.Design.ServerService.Main.Ev.004):
      Sd_Send_queueOfferService() shall be called with correct arguments
  12: VP(Sd.Design.ServerService.SubscribeEventgroup.010):
      Sd_Send_queueSubscribeEventgroupNack() shall be called
  13: Call Sd_ServerServiceSetState() to stop server service.
  14: Call Sd_MainFunction() to update server service state.
  15: VP(Sd.Design.ServerService.Main.Ev.001): Server service shall be in DOWN state
  16: VP(Sd.Design.ServerService.Main.Ev.001):
      Sd_Send_queueOfferService() shall be called with correct arguments
  17: VP(Sd.Design.ServerService.Main.Ev.001) &amp; (Sd.Design.Sd_ServerService_ComSM_entry_DOWN):
      SoAd_CloseSoCon() shall be called for associated Socket Connections

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.SetState.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1088</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Down.Ev.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1055</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.StartServices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1090</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1080</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.SubscribeEventgroup.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1102</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.ServerService.Main.Ev.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1077</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1599</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Server_ResetRemoteConnection_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/ServerService_tests.c.m4</sourcefile>
      <sourceline>9307</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that ServerService unit shall handle the detected reboot for Server Service
  with SdServerServiceTcpRef set as if a StopSubscribeEventgroup entry was received.

Test Object: 
  Test of reset remote connection functionality

Test Precondition: 
  Server service with SdServerServiceTcpRef set is initialized and in state MAIN

Test Execution: 
  01: Call Sd_ServerService_eventFind().
  02: Call Sd_ServerService_resetRemoteConnection() with valid RemoteNodeIndex parameter.
  03: Call Sd_MainFunction() and Sd_ServerService_sendEntriesUnicast.
  04: VP(Sd.Design.ServerService.ResetRemoteConnection.002):
      Sd_Send_queueOfferService() is not called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.ServerService.ResetRemoteConnection.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1600</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_Unit_Client_InitState</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_ClientServerService/source/application/TestSpec_Generated.h</sourcefile>
      <sourceline>4</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: This test verifies that SD client services shall be in correct state after initialization.
Test Object: Software
Test Precondition: 
  Init module

Test Execution: 
  AP: Call Sd_LocalIpAddrAssignmentChg() to simulate Tx and MulticastRx socket connections IP address assignment for instance #0.
  AP: Call Sd_ClientService_mainFunction() to update the client service state.
  VP: (Sd.SWS_SD_00021,1) All instance #0 client services shall be in state DOWN.
  AP: Call Sd_LocalIpAddrAssignmentChg() to simulate Tx and MulticastRx socket connections IP address assignment for instance #2.
  AP: Call Sd_ClientService_mainFunction() to update the client service state
  VP: (Sd.SWS_SD_00021,1) All instance #2 client services with SdClientServiceAutoRequire=TRUE shall shall be in state INITIALWAIT.

Test Input: .
Test Output: .</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.SWS_SD_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1601</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_Unit_Receive_FindService_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>488</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall correctly handle
  a FindService entry that references no options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_GetRemoteAddr() shall be called for Rx multicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477):
      Sd_ServerService_eventFind() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_SetRemoteAddr() shall be called for Rx multicast socket, with address parameter set to wildcard.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00477</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1602</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_FindService_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>606</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a FindService entry that
  references redundant options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry referencing
      an IPv4 Endpoint and an IPv4 Multicast option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called..
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00662):
      Sd_ServerService_eventFind() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00662</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1603</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_FindService_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>724</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a FindService entry that
  references unknown option and that the unknown option shall be ignored.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry referencing an unknown option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called..
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00661, Sd.SWS_SD_00484):
      Sd_ServerService_eventFind() shall be called with none of EntryOptionInfoPtr argument's members set.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00484</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00661</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1604</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_RemoteNode_NotStored</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>841</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  SD receives an OFFER entry from a remote node, but this entry is not matched in the SD configuration
  and therefore the entry is ignored and not processed.
  SD receives another OFFER entry from another remote node, the entry is processed and the IP address from the sender is stored.
  This test verifies that the IP address of the sender is not cleared and it also verifies that the IP address of the sender
  of the second received OFFER is stored in the first position of the remote nodes array to indicate that the IP Address of
  the first sender was not stored.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and IPv4 Tcp and Udp Endpoint.
  02: Call Sd_RxIndication() to simulate reception of a SD message OFFER multicast message from IP Address_0
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      Soad_GetRemoteAddr() is called to read the IP Address/Port of the remote node sender of this SD message.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.EB.Remote.Node.Address.Not.Stored) Domain has been set to unspecified because the remote address has been cleared.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477, Sd.Design.Receive.Message.ByteOrder, Sd.SWS_SD_00662):
      Sd_ClientService_EventOfferService() shall be called with correct Udp and Tcp Endpoint option information.
  07: Assemble a SD message containing an OfferService entry and IPv4 Tcp and Udp Endpoint.
  08: Call Sd_RxIndication() to simulate reception of a SD message OFFER multicast message from IP Address_1
  09: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      Soad_GetRemoteAddr() is called to read the IP Address/Port of the remote node sender of this SD message.
  10: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  11: VP(Sd.EB.Remote.Node.Address.Not.Stored) Domain has NOT been cleared
  12: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477, Sd.Design.Receive.Message.ByteOrder, Sd.SWS_SD_00662):
      Sd_ClientService_EventOfferService() shall be called with correct Udp and Tcp Endpoint option information.
  13: VP(Sd.EB.Remote.Node.Address.Not.Stored) To verify that previous discarded OFFER did not take up any position in the remote node array,
         check that Sd_ClientService_EventOfferService() has been called with the very first remote node index (0)

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Message.ByteOrder</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1117</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00477</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00662</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.Remote.Node.Address.Not.Stored</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1605</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_RemoteNode_NotCleared</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>1028</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  SD receives an OFFER entry from a remote node, the entry is processed and the IP address from the sender is stored.
  SD received another OFFER entry from the same remote node, but this entry is not matched in the SD configuration
  and therefore the entry is ignored and not processed. This test verifies that the IP address of the sender is not cleared
  from the array of the stored remote nodes addresses because there was already a valid entry from this remote node.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and IPv4 Tcp and Udp Endpoint.
  02: Call Sd_RxIndication() to simulate reception of a SD multicast message from IP Address_0,
     with an OFFER entry. The received Service Id, Instance Id and Major version are present in the configuration,
     therefore the OFFER is processed.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      Soad_GetRemoteAddr() is called to read the IP Address/Port of the remote node sender of this SD message.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.EB.Remote.Node.Address.Not.Stored) Domain field remains with value aTCPIP_AF_INET because the remote address is stored.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477, Sd.Design.Receive.Message.ByteOrder, Sd.SWS_SD_00662):
      Sd_ClientService_EventOfferService() shall be called with correct Udp and Tcp Endpoint option information.
  07: Assemble a SD message containing an OfferService entry and IPv4 Tcp and Udp Endpoint.
  08: Call Sd_RxIndication() to simulate reception of a SD multicast message from IP Address_0,
     with an OFFER entry. The received Service Id, Instance Id and Major version are not present in the configuration,
     therefore this OFFER entry is not processed.
  09: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      Soad_GetRemoteAddr() is called to read the IP Address/Port of the remote node sender of this SD message.
  10: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  11: VP(Sd.EB.Remote.Node.Address.Not.Stored) Domain field remains with value TCPIP_AF_INET, remote address has not been cleared
     because already an entry from this remote node had been processed.
  12: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477, Sd.Design.Receive.Message.ByteOrder, Sd.SWS_SD_00662):
      Sd_ClientService_EventOfferService() shall be called with correct Udp and Tcp Endpoint option information.
  13: Assemble a SD message containing an OfferService entry and IPv4 Tcp and Udp Endpoint.
  14: Call Sd_RxIndication() to simulate reception of a SD multicast message from IP Address_1,
     with an OFFER entry. The received Service Id, Instance Id and Major version are present in the configuration,
     therefore the OFFER is processed.
  15: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      Soad_GetRemoteAddr() is called to read the IP Address/Port of the remote node sender of this SD message.
  16: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  17: VP(Sd.EB.Remote.Node.Address.Not.Stored) Domain field remains with value aTCPIP_AF_INET because the remote address is stored.
  18: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477, Sd.Design.Receive.Message.ByteOrder, Sd.SWS_SD_00662):
      Sd_ClientService_EventOfferService() shall be called with correct Udp and Tcp Endpoint option information.
  19: VP(Sd.EB.Remote.Node.Address.Not.Stored) To verify that previous discarded OFFER did not clear any position in the remote node array,
      check that second call to Sd_ClientService_EventOfferService() has been called with the second remote node index (1)

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Message.ByteOrder</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1117</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00477</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00662</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
        <provcov>
          <linksto>Sd.EB.Remote.Node.Address.Not.Stored</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1606</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OfferService_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>1285</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process an OfferService entry
  that references valid Endpoint and Multicast options and was received via multicast.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and IPv4 Tcp and Udp Endpoint and IPv4 Multicast option;
      message data is written in network byte order.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_GetRemoteAddr() shall be called for Rx multicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477, Sd.Design.Receive.Message.ByteOrder, Sd.SWS_SD_00662):
      Sd_ClientService_EventOfferService() shall be called with correct Udp and Tcp Endpoint and Multicast option information;
      all parameters shall be extracted from SD message fields by reading them in Network Byte Order.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_SetRemoteAddr() shall be called for Rx multicast socket, with address parameter set to wildcard.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Message.ByteOrder</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1117</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00477</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00662</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1607</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OfferService_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>1443</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies that SD Receive unit shall process an OfferService entry
  that references valid Endpoint and Multicast options and was received via unicast.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and an IPv4 Endpoint option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_GetRemoteAddr() shall be called for Rx unicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477, Sd.SWS_SD_00662):
      Sd_ClientService_EventOfferService() shall be called with correct Udp and Tcp Endpoint and Multicast option information.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_SetRemoteAddr() shall be called for Rx unicast socket, with address parameter set to wildcard.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00477</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00662</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1608</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OfferService_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>1601</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the conflicting options flag
  when the OfferService entry references two endpointoptions of the same type that are in conflict.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry referencing two different IPv4 Endpoint options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.SWS_SD_00663, Sd.Design.Receive.Entry.ConflictingOptions):
      Sd_ClientService_EventOfferService() shall be called with option status conflicting options.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Entry.ConflictingOptions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1138</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00663</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1609</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OfferService_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>1718</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process an OfferService entry
  that references an IPv4 Endpoint and an unknown option, and that the unknown option shall be ignored.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry referencing an IPv4 Endpoint and unknown options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00661, Sd.SWS_SD_00484):
      Sd_ClientService_EventOfferService() shall be called with only UdpEndpointOption member of EntryOptionInfoPtr not set
	    because the option status is set to SD_OPTION_STATUSFLAG_ERROR.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00484</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00661</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1610</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OfferService_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>1840</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the error flag
  when the OfferService entry references non-existing options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry referencing non-existing option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.SWS_SD_00708, Sd.Design.Receive.Entry.InvalidOptionRun):
      Sd_ClientService_EventOfferService() shall be called with option status error.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Entry.InvalidOptionRun</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1611</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OfferService_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>1955</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the invalid endpoint flag
  when the OfferService entry references option with address from different address family.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry referencing
      an IPv4 and IPv6 Udp Endpoint.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.Design.Receive.EndpointOption.InvalidAddrFamily):
      Sd_ClientService_EventOfferService() shall be called with option status invalid endpoint.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.EndpointOption.InvalidAddrFamily</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1612</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OfferService_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>2077</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test performs a range check on TTL parameter of OfferService entry.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a StopOfferService entry (TTL=0) referencing an IPv4 Endpoint option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called with correct TTL argument.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.
  08: Assemble a SD message containing a OfferService entry (TTL= max value) referencing an IPv4 Endpoint option.
  09: Call Sd_RxIndication() to simulate reception of a SD message.
  10: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  11: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  12: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called with correct TTL argument.
  13: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  14: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1613</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OfferService_7</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>2271</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the invalid endpoint flag
  when the OfferService entry references an IPv4 Endpoint Option with the Layer 4 Protocol field
  set to neither UDP nor TCP.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and an IPv4 Endpoint option with unknown protocol type.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.EndpointOption.IPv4InvalidProtocol, Sd.SWS_SD_00214):
      Sd_ClientService_EventOfferService() shall be called with option status invalid endpoint.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.EndpointOption.IPv4InvalidProtocol</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1141</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1614</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroup_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>2380</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a SubscribeEventgroup entry
  that references an IPv4 Endpoint option and redundant options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroup entry referencing IPv4 Udp and Tcp Endpoint and Multicast option;
      message data is written in network byte order.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_GetRemoteAddr() shall be called for Rx unicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477, Sd.Design.Receive.Message.ByteOrder, Sd.SWS_SD_00662):
      Sd_ServerService_eventSubscribe() shall be called; all parameters shall be extracted from SD message fields
      by reading them in Network Byte Order.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_SetRemoteAddr() shall be called for Rx unicast socket, with address parameter set to wildcard.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Message.ByteOrder</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1117</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00477</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00662</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1615</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroup_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>2536</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall call Sd_ServerService_eventSubscribe()
  with option error flag set to '1' when processing a SubscribeEventgroup entry
  that references two conflicting IPv4 Endpoint options.
  If Malformed Message DEM error is enabled a DEM error will be generated.
  If Malformed Message Det error is enabled a DEM error will be generated.
  The second part of the test verifies that when the call Sd_ServerService_eventSubscribe()
  is made with the correct parameters, then the subscribe message is processed correctly.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an SubscribeEventgroup entry
      referencing two conflicting IPv4 Endpoint options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq,
         Sd.Design.Receive.Entry.ConflictingOptions,
         Sd.SWS_SD_00430, Sd.SWS_SD_00663, Sd.SWS_SD_00708):
      Check that DEM error, DET error to indicate a Malformed message is generated if these options are enabled
      otherwise no error at all shall be generated.
  07: Assemble a SD message containing an SubscribeEventgroup entry
      referencing one IPv4 Endpoint options.
  08: Call Sd_RxIndication() to simulate reception of a SD message.
  09: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  10: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  11: VP(Sd.SWS_SD_00430): Check that not DEM error, DET error to indicate a Malformed message is generated because receiving a
         SUBSCRIBE eventroup message over multicast is allowed.
  12: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Entry.ConflictingOptions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1138</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00663</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00333</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1616</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroup_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>2705</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall call Sd_ServerService_eventSubscribe()
  with option error flag set to '1' when processing a SubscribeEventgroup entry
  that references IPv4 Endpoint option with invalid port or IP address.
  If Malformed Message DEM error is enabled a DEM error will be generated.
  If Malformed Message Det error is enabled a DEM error will be generated.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an SubscribeEventgroup entry
      referencing an IPv4 Endpoint option with port set to 0.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.Design.Receive.EndpointOption.InvalidAddr):
      Sd_ServerService_eventSubscribe() shall be called with option error flag set to '1'.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.SWS_SD_00708):
      Check that DEM error, DET error to indicate a Malformed message is generated if these options are enabled
      otherwise no error at all shall be generated.
  08: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.
  09: Assemble a SD message containing an SubscribeEventgroup entry
      referencing an IPv4 Endpoint option with address set to 0.
  10: Call Sd_RxIndication() to simulate reception of a SD message.
  11: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  12: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  13: VP(Sd.Design.Receive.RxIndication.Seq, Sd.Design.Receive.EndpointOption.InvalidAddr):
      Sd_ServerService_eventSubscribe() shall be called with option error flag set to '1'.
  14: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  15: VP(Sd.SWS_SD_00708):
      Check that DEM error, DET error to indicate a Malformed message is generated if these options are enabled
      otherwise no error at all shall be generated.
  16: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.EndpointOption.InvalidAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1617</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroup_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>2884</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall call Sd_ServerService_eventSubscribe()
  with option error flag set to '1' when processing a SubscribeEventgroup entry
  that references non-existing option.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an SubscribeEventgroup entry
      referencing valid IPv4 Endpoint and a non-existing option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.Design.ServerService.SubscribeEventgroup.002, Sd.SWS_SD_00708):
      Sd_ServerService_eventSubscribe() shall be called with option error flag set to '1'.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1618</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroup_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>2997</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a SubscribeEventgroup entry
  that references an IPv4 Endpoint and an unknown option, and that the unknown option shall be ignored.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroup entry referencing
      an IPv4 Endpoint and an unknown option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00661, Sd.SWS_SD_00484):
      Sd_ServerService_eventSubscribe() shall be called with only UdpEndpointOption member of EntryOptionInfoPtr not set
	  because the option status is set to SD_OPTION_STATUSFLAG_ERROR.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00484</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00661</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1619</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroup_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>3120</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
 This test verifies that SD Receive unit shall call Sd_ServerService_eventSubscribe()
  with option error flag set to '1' when processing a SubscribeEventgroup entry
  that references option with address from different address family.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an SubscribeEventgroup entry
      referencing IPv4 and IPv6 Udp Endpoint options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.Design.Receive.EndpointOption.InvalidAddrFamily):
      Sd_Send_queueSubscribeEventgroup() shall be called with the invalid endpoint flag set.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.EndpointOption.InvalidAddrFamily</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1620</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_StopSubscribeEventgroup_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>3236</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a StopSubscribeEventgroup entry
  that references an IPv4 Udp Endpoint and redundant options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a StopSubscribeEventgroup entry referencing an IPv4 Endpoint option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_GetRemoteAddr() shall be called for Rx unicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477):
      Sd_ServerService_eventStopSubscribe() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_SetRemoteAddr() shall be called for Rx unicast socket, with address parameter set to wildcard.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00477</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1621</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_StopSubscribeEventgroup_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>3386</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore a StopSubscribeEventgroup entry
  that references two conflicting IPv4 Endpoint options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a StopSubscribeEventgroup entry
      referencing two conflicting IPv4 Endpoint options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called..
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.SWS_SD_00663,Sd.SWS_SD_00714, Sd.Design.Receive.Entry.ConflictingOptions):
      Sd_ServerService_eventStopSubscribe() shall not be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Entry.ConflictingOptions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1138</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00663</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00714</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>508</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1622</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_StopSubscribeEventgroup_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>3502</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore a StopSubscribeEventgroup entry
  that references an invalid IPv4 Endpoint option.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a StopSubscribeEventgroup entry
      referencing an IPv4 Endpoint option with port set to 0.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called..
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.Design.Receive.EndpointOption.InvalidAddr):
      Sd_ServerService_eventStopSubscribe() shall not be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.
  08: Assemble a SD message containing a StopSubscribeEventgroup entry
      referencing an IPv4 Endpoint option with address set to 0.
  09: Call Sd_RxIndication() to simulate reception of a SD message.
  10: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called..
  11: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  12: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  13: VP(Sd.Design.Receive.EndpointOption.InvalidAddr):
      Sd_ServerService_eventStopSubscribe() shall not be called.
  14: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.EndpointOption.InvalidAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1623</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_StopSubscribeEventgroup_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>3667</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore a StopSubscribeEventgroup entry
  that references non-existing IPv4 Endpoint option.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a StopSubscribeEventgroup entry
      referencing non-existing IPv4 Endpoint options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called..
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.SWS_SD_00708, Sd.Design.Receive.Entry.InvalidOptionRun):
      Sd_ServerService_eventStopSubscribe() shall be called with option error flag set to '1'.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Entry.InvalidOptionRun</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1137</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1624</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_StopSubscribeEventgroup_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>3778</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a StopSubscribeEventgroup entry
  that references an unknown option and that the unknown option shall be ignored.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a StopSubscribeEventgroup entry
      referencing an IPv4 Endpoint and an unknown option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00661, Sd.SWS_SD_00484):
      Sd_ServerService_eventStopSubscribe() shall be called with only UdpEndpointOption member of EntryOptionInfoPtr argument set.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00484</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00661</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1625</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_StopSubscribeEventgroup_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>3897</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall call Sd_ServerService_eventSubscribe()
  with option error flag set to '1' when processing a SubscribeEventgroup entry
  that references option with address from different address family.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a StopSubscribeEventgroup entry
      referencing an IPv4 and IPv6 Udp Endpoint.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.Design.Receive.EndpointOption.InvalidAddrFamily):
      Sd_ServerService_eventStopSubscribe() shall be called with option error flag set to '1'.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.EndpointOption.InvalidAddrFamily</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1626</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroupAck_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>4016</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a SubscribeEventgroupAck entry
  that references an IPv4 Multicast option and redundant options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroupAck entry referencing IPv4 Multicast, Udp and Tcp Endpoint options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_GetRemoteAddr() shall be called for Rx unicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477):
      Sd_ClientService_eventSubscribeAck() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_SetRemoteAddr() shall be called for Rx unicast socket, with address parameter set to wildcard.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00477</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1627</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroupAck_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>4169</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the conflicting options flag
  when the entry references two conflicting IPv4 Multicast options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroupAck entry
      referencing two conflicting IPv4 Multicast option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.SWS_SD_00663, Sd.Design.Receive.Entry.ConflictingOptions):
      Sd_ClientService_eventSubscribeAck() shall be called with option status conflicting options.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Entry.ConflictingOptions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1138</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00663</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1628</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroupAck_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>4284</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a SubscribeEventgroupAck entry
  that references an IPv4 Multicast and an unknown option, and that the unknown option shall be ignored.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroupAck entry
      referencing an IPv4 Multicast option and an unknown option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00661, Sd.SWS_SD_00484):
      Sd_ClientService_eventSubscribeAck() shall be called with only MulticastOption member of EntryOptionInfoPtr argument set.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00484</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00661</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1629</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroupAck_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>4405</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the error flag
  when the SubscribeEventgroupAck entry references non-existing options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroupAck entry
      referencing non-existing options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.SWS_SD_00708, Sd.Design.Receive.Entry.InvalidOptionRun):
      Sd_ClientService_eventSubscribeAck() shall be called with option status error.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Entry.InvalidOptionRun</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1137</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1630</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroupAck_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>4517</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the invalid endpoint flag
  when the SubscribeEventgroupAck references option with address from different address family.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroupAck entry
      referencing an IPv4 Udp Multicast and an IPv6 Udp Multicast option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.Design.Receive.EndpointOption.InvalidAddrFamily):
      Sd_ClientService_eventSubscribeAck() shall be called with option status invalid endpoint.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.EndpointOption.InvalidAddrFamily</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1631</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroupAck_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>4637</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
This test verifies that SD Receive unit shall mark the entryoptions with the invalid endpoint flag
  when the SubscribeEventgroupAck entry references an IPv4 Multicast Option
  which has the Layer 4 Protocol field not set to 0x11 (UDP).

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroupAck entry referencing an IPv4 Multicast option with invalid protocol value.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.EndpointOption.MulticastNonUDP, Sd.SWS_SD_00395):
      Sd_ClientService_eventSubscribeAck() shall be called with option status invalid endpoint.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.EndpointOption.MulticastNonUDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1142</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00395</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1632</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroupAck_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>4744</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the invalid endpoint flag
  when the SubscribeEventgroupAck entry references an IPv4 Multicast Option
  which has the IP address field set to IP address outside multicast address range.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroupAck entry referencing an IPv4 Multicast option with an unicast IP address.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.EndpointOption.MulticastAddrRange):
      Sd_ClientService_eventSubscribeAck() shall be called with option status invalid endpoint.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.EndpointOption.MulticastAddrRange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1633</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroupAck_Multicast</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>4849</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the invalid endpoint flag
  when the SubscribeEventgroupAck entry references an IPv4 Multicast Option
  which has the IP address field set to IP address outside multicast address range.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroupAck entry referencing an IPv4 Multicast option with an unicast IP address.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.EndpointOption.MulticastAddrRange):
      Sd_ClientService_eventSubscribeAck() shall be called with option status invalid endpoint.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.EndpointOption.MulticastAddrRange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1634</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroupNack_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>4941</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process SubscribeEventgroupNack entry that
  references no options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroupNack entry.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_GetRemoteAddr() shall be called for Rx unicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00477):
      Sd_ClientService_eventSubscribeNack() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_SetRemoteAddr() shall be called for Rx unicast socket, with address parameter set to wildcard.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00477</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1635</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SubscribeEventgroupNack_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>5062</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process SubscribeEventgroupNack entry that
  references redundant options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a SubscribeEventgroupNack entry
      referencing an IPv4 Endpoint and an IPv4 Multicast options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00662):
      Sd_ClientService_eventSubscribeNack() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called..

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00662</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1636</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_MultipleEntries_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>5182</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a SD message
  containing multiple valid OfferService entry where each entry has a different IPv4 Endpoint option,
  and that the entries shall be processed exactly in the order they arrived.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing two OfferService entries and two corresponding IPv4 Endpoint options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      Sd_ClientService_EventOfferService() shall be called for the first entry.
  04: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      Sd_ClientService_EventOfferService() shall be called for the second entry.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1637</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_MultipleEntries_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>5329</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a SD message containing multiple valid OfferService entry
  where entries share the same IPv4 Endpoint option, and that the entries shall be processed exactly in the order they arrived.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing two OfferService entries and shared IPv4 Endpoint options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      Sd_ClientService_EventOfferService() shall be called for the first entry.
  04: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      Sd_ClientService_EventOfferService() shall be called for the second entry.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00482</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1638</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_FirstOptionRun_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>5470</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall correctly read
  the starting option index of the first option run referenced by an OfferService entry.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and multiple options in following order:
        - option 0: IPv4 Tcp option
        - option 1: IPv4 Udp option
        - option 2: IPv4 Multicast option
        - option 3: IPv4 Tcp option
        - option 4: IPv4 Udp option
        - option 5: IPv4 Multicast option
  02: Set the entry "Index 1st options" field to 3, and "# of opt 1" field to 3.
  03: Call Sd_RxIndication() to simulate reception of a SD message.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called.
  05: VP(Sd.SWS_SD_00223):
      Entry shall reference 3 options - EntryOptionInfo parameter shall contain
      TcpEndpointOption, UdpEndpointOption, MulticastOption info read from options 3-5.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1639</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_FirstOptionRun_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>5609</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that an entry field "Index 1st option" shall reference 0 - 15 options
  and that SD Receive unit shall correctly read the number of options in the first option run
  referenced by an OfferService entry.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing three OfferService entries and multiple options in following order:
        - option 0: unknown option
        - option 1: IPv4 Tcp option
        - option 2: IPv4 Udp option
        - option 3: IPv4 Multicast option
        - options 4 - 14: unknown options
        - option 15: configuration option
  02: Set the first entry "Index 1st options" field to 2, and "# of opt 1" field to 0.
  03: Set the second entry "Index 1st options" field to 2, and "# of opt 1" field to 1.
  04: Set the third entry "Index 1st options" field to 1, and "# of opt 1" field to 15.
  05: Call Sd_RxIndication() to simulate reception of a SD message.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called for the first entry.
  07: VP(Sd.SWS_SD_00223, Sd.SWS_SD_00224):
      First entry shall reference zero options - EntryOptionInfo parameter shall be empty.
  08: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called for the second entry.
  09: VP(Sd.SWS_SD_00223, Sd.SWS_SD_00224):
      Second entry shall be called with only UdpEndpointOption member of EntryOptionInfoPtr not set
	  because the option status is set to SD_OPTION_STATUSFLAG_ERROR.
  10: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called for the third entry.
  11: VP(Sd.SWS_SD_00223, Sd.SWS_SD_00224):
      Third entry shall be called with only UdpEndpointOption member of EntryOptionInfoPtr not set
	  because the option status is set to SD_OPTION_STATUSFLAG_ERROR. Unknown options shall be ignored.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1640</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SecondOptionRun_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>5780</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall correctly read
  the starting option index of the second option run referenced by an OfferService entry.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
01: Assemble a SD message containing an OfferService entry and multiple options in following order:
        - option 0: IPv4 Tcp option
        - option 1: IPv4 Udp option
        - option 2: IPv4 Multicast option
        - option 3: IPv4 Tcp option
        - option 4: IPv4 Udp option
        - option 5: IPv4 Multicast option
  02: Set the entry "Index 2st options" field to 3, and "# of opt 2" field to 3.
  03: Call Sd_RxIndication() to simulate reception of a SD message.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called.
  05: VP(Sd.SWS_SD_00225):
      Entry shall reference 3 options - EntryOptionInfo parameter shall contain
      TcpEndpointOption, UdpEndpointOption, MulticastOption info read from options 3-5.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1641</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_SecondOptionRun_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>5919</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that an entry field "Index 1st option" shall reference 0 - 15 options
  and that SD Receive unit shall correctly read the number of options in the second option run
  referenced by an OfferService entry.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing three OfferService entries and multiple options in following order:
        - option 0: unknown option
        - option 1: IPv4 Tcp option
        - option 2: IPv4 Udp option
        - option 3: IPv4 Multicast option
        - options 4 - 14: unknown options
        - option 15: configuration option
  02: Set the first entry "Index 2st options" field to 2, and "# of opt 2" field to 0.
  03: Set the second entry "Index 2st options" field to 2, and "# of opt 2" field to 1.
  04: Set the third entry "Index 2st options" field to 1, and "# of opt 2" field to 15.
  05: Call Sd_RxIndication() to simulate reception of a SD message.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called for the first entry.
  07: VP(Sd.SWS_SD_00225, Sd.SWS_SD_00226):
      First entry shall reference zero options - EntryOptionInfo parameter shall be empty.
  08: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called for the second entry.
  09: VP(Sd.SWS_SD_00225, Sd.SWS_SD_00226):
      Second entry shall be called with only UdpEndpointOption member of EntryOptionInfoPtr not set
	  because the option status is set to SD_OPTION_STATUSFLAG_ERROR.
  10: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called for the third entry.
  11: VP(Sd.SWS_SD_00225, Sd.SWS_SD_00226):
      Third entry shall be called with only UdpEndpointOption member of EntryOptionInfoPtr not set
	  because the option status is set to SD_OPTION_STATUSFLAG_ERROR. Unknown options shall be ignored.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1642</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OptionRuns_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>6091</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies SD Receive unit shall correctly read option information for an entry that references
  options from both runs.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and multiple options in following order:
        - option 0: IPv4 Tcp option
        - option 1: IPv4 Udp option
        - option 2: IPv4 Multicast option
        - option 3: configuration option
        - option 4: IPv4 Udp option
  02: Set the entry "Index 1st options" field to 1, and "# of opt 2" field to 1 and
      "Index 2st options" field to 3, and "# of opt 2" field to 1.
  03: Call Sd_RxIndication() to simulate reception of a SD message.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called.
  05: VP(Sd.SWS_SD_00223, Sd.SWS_SD_00224, Sd.SWS_SD_00225, Sd.SWS_SD_00226):
      Entry shall reference 2 options - EntryOptionInfo parameter shall contain
      UdpEndpointOption and ConfigOptions info read from options 1 and 3, respectively.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1643</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_EmptyOptionRun_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>6228</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process Type 1 Entry
  with option run length set to zero and option index not set to zero.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry
      with option run length set to zero and option index not set to zero.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called for Rx multicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00624):
      Sd_ServerService_eventFind() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called for Rx multicast socket, with address parameter set to wildcard.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00624</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>432</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1644</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_EmptyOptionRun_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>6349</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process Type 2 Entry
  with option run length set to zero and option index not set to zero.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an EventgroupSubscribeNack entry
      with option run length set to zero and option index not set to zero.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called for Rx multicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00627):
      Sd_ClientService_eventSubscribeNack() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called for Rx multicast socket, with address parameter set to wildcard.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00627</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>435</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1645</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ConfigOption_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>6471</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a configuration option.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing SubscribeEventgroup entry
      referencing an IPv4 Endpoint and a Configuration options.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ServerService_eventSubscribe() shall be called
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1646</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ConfigOptionString_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>6613</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore a configuration option where
  a string has length zero.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing FindService entry where a string has length zero
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ServerService_eventFind() shall be called for the entry
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: After FIND entry is procesed Socket connection used for SD reception is released
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.
  08: Assemble an SD message containing FindService entry with a config option where
      string has a empty item in the middle
  09: Call Sd_RxIndication() to simulate reception of a SD message.
  10: VP(Sd.Design.Receive.ConfigOption.Error002):
      Entry options shall be marked as erroneous.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.ConfigOption.Error001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1144</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.ConfigOption.Error002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1647</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ConfigOptionString_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>6767</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore a configuration option where
  the strings do not exactly fit into the config option and where the last byte is not set to zero.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing FindService entry with a config option where
      the last byte is not set to zero
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.ConfigOption.Error003):
      Entry options shall be marked as erroneous.
  04: Assemble a SD message containing FindService entry with a config option where
      the strings do not exactly fit into the config option
  05: Call Sd_RxIndication() to simulate reception of a SD message.
  06: VP(Sd.Design.Receive.ConfigOption.Error002):
      Entry options shall be marked as erroneous.
  07: Assemble an SD message containing FindService entry with a config option where
      the strings do not exactly fit into the config option
  08: Call Sd_RxIndication() to simulate reception of a SD message.
  09: VP(Sd.Design.Receive.ConfigOption.Error002):
      mark the entry options as errorneous.
  10: Assemble an SD message containing FindService entry with a config option where
      the strings do not exactly fit into the config option
  11: Call Sd_RxIndication() to simulate reception of a SD message.
  12: VP(Sd.Design.Receive.ConfigOption.Error002):
      Entry options shall be marked as erroneous.
  13: Assemble an SD message containing FindService entry with a config option where
      the strings do not exactly fit into the config option
  14: Call Sd_RxIndication() to simulate reception of a SD message.
  15: VP(Sd.Design.Receive.ConfigOption.Error002):
      Entry options shall be marked as erroneous.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.ConfigOption.Error002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1145</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.ConfigOption.Error003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1648</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ConfigOptionString_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>7063</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process a configuration option where
  a string contains no option value and where a string contains no equal sign.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing FindService entry with a config option where
      a string contains no option value
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.ConfigOption.NoValue):
      Entry options shall not be marked as erroneous.
  04: Assemble a SD message containing FindService entry with a config option where
      a string contains no equal sign
      Sd_Send_setupBuffer() shall be called.
  05: Call Sd_RxIndication() to simulate reception of a SD message.
  06: VP(Sd.Design.Receive.ConfigOption.NoEqualsign):
      Entry options shall not be marked as erroneous.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.ConfigOption.NoValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1147</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.ConfigOption.NoEqualsign</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1649</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_2ConfigOptionStrings</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>7196</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall process an entry that references two configuration options

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing FindService entry with two config options
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match003):
      Entry options shall be marked as erroneous.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Sd.Sd_CapabilityRecordStrCmp.Match003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>925</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1650</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_RemoteNode_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>7302</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall maintain remote node state for each
  remote node separately.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SD message containing an OfferService entry was received via unicast from a node #0.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and an IPv4 Endpoint option.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called for Rx unicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called with address parameter set to sender address.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall be called for a node #1.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  07: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1651</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_RemoteNode_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>7412</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall maintain remote node state for unicast and multicast
  reception within a context of a single remote node.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SD message containing an OfferService entry was received via unicast from nodes #0 and #1.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and an IPv4 Endpoint option.
  02: Call Sd_RxIndication() to simulate multicast reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00445):
      Sd_ClientService_EventOfferService() shall be called for remote node #0.
  04: Assemble a SD message containing an OfferService entry and an IPv4 Endpoint option.
  05: Call Sd_RxIndication() to simulate multicast reception of a SD message.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00445):
      Sd_ClientService_EventOfferService() shall be called for remote node #0.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00445</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1652</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_RemoteNode_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>7548</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore an Entry if a remote node state variable is not available.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SD message containing an OfferService entry was received via unicast from a node #0 and node #1.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and an IPv4 Endpoint option.
  02: Call Sd_RxIndication() to simulate reception of a SD message from node #2.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called for Rx unicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ClientService_EventOfferService() shall not be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1653</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_RemoteNodeReboot_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>7642</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall correctly detect the reboot
  of a remote node when the incoming multicast SD message reboot flag changes from '0' to '1'.
  Test also verifies that for following unicast and multicast messages with reboot flag = '1' and increasing session id,
  there shall not be a remote connection reset.
  I.e. test verifies that remote connection reset shall not be executed twice for a single remote node reboot,
  when the remote node reboot is indicated by reboot flag change from '0' to '1'.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  Remote note #1 state:
    - unicast session id = 0x100,
    - unicast reboot flag = 0,
    - multicast session id = 0x100,
    - multicast reboot flag = 0

Test Execution: 
  01: Assemble a SD message containing OfferService entry with reboot flag = '1' and session id = 0x101.
  02: Call Sd_RxIndication() to simulate multicast reception of a SD message from remote node #1.
  03: VP(Sd.Design.Receive.RebootDetection.Multicast, Sd.Design.Receive.RebootDetection.ResetConnection):
      Sd_ServerService_resetRemoteConnection() and Sd_ClientService_resetRemoteConnection() shall be called for remote node #1.
  04: Reuse SD message assembled in step 01 with updated session id = 0x1.
  05: Call Sd_RxIndication() to simulate unicast reception of a SD message from remote node #1.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.Design.Receive.RebootDetection.ResetState):
      Remote node Session ID and Reboot Flag shall be reset after step 02: SD message is processed but Sd_ServerService_resetRemoteConnection() and
      Sd_ClientService_resetRemoteConnection() shall not be called.
  07: Reuse SD message assembled in step 01 with updated session id = 0x102.
  08: Call Sd_RxIndication() to simulate multicast reception of a SD message from remote node #1.
  09: VP(Sd.Design.Receive.RxIndication.Seq, Sd.Design.Receive.RebootDetection.ResetState):
      Remote node Session ID and Reboot Flag shall be reset after step 02: SD message is processed but Sd_ServerService_resetRemoteConnection() and
      Sd_ClientService_resetRemoteConnection() shall not be called.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.Multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1133</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.ResetConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1134</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.ResetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1654</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_RemoteNodeReboot_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>7797</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall correctly detect the reboot
  of a remote node when the incoming multicast SD message session ID decreases while Reboot flag stays '1'.
  Test also verifies that for a following unicast message where session ID decreases while Reboot flag stays '1',
  there shall not be a remote connection reset.
  I.e. test verifies that remote connection reset shall not be executed twice for a single remote node reboot,
  when the remote node reboot is indicated by decreased sesion id.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  Remote note #1 state:
    - unicast session id = 0x102,
    - unicast reboot flag = 1,
    - multicast session id = 0x103,
    - multicast reboot flag = 1

Test Execution: 
  01: Assemble a SD message containing OfferService entry with reboot flag = '1' and session id = 0x1.
  02: Call Sd_RxIndication() to simulate multicast reception of a SD message from remote node #1.
  03: VP(Sd.Design.Receive.RebootDetection.Multicast, Sd.Design.Receive.RebootDetection.ResetConnection, Sd.Design.Receive.RebootDetection.ResetState):
      Sd_ServerService_resetRemoteConnection() and Sd_ClientService_resetRemoteConnection() shall be called for remote node #1.
  04: Reuse SD message assembled in step 01 with updated session id = 0x1.
  05: Call Sd_RxIndication() to simulate unicast reception of a SD message from remote node #1.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      Remote node Session ID and Reboot Flag shall be reset after step 02: SD message is processed but Sd_ServerService_resetRemoteConnection() and
      Sd_ClientService_resetRemoteConnection() shall not be called.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.Multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1133</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.ResetConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1134</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.ResetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1655</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_RemoteNodeReboot_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>7930</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test verifies that there shall not be a remote connection reset when SD message session id wraps to 0x0001
  and reboot flag changes to '0'.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  Remote note #1 state:
    - unicast session id = 0x102,
    - unicast reboot flag = 1,
    - multicast session id = 0x103,
    - multicast reboot flag = 1

Test Execution: 
  01: Assemble a SD message containing OfferService entry with reboot flag = '0' and session id = 0x1.
  02: Call Sd_RxIndication() to simulate multicast reception of a SD message from remote node #1.
  03: VP(Sd.Design.Receive.RebootDetection.Multicast, Sd.Design.Receive.RxIndication.Seq):
      SD message is processed but Sd_ServerService_resetRemoteConnection() and
      Sd_ClientService_resetRemoteConnection() shall not be called.
  04: Reuse SD message assembled in step 01 with updated session id = 0x2.
  05: Call Sd_RxIndication() to simulate unicast reception of a SD message from remote node #1.
  06: VP(Sd.Design.Receive.RebootDetection.Unicast, Sd.Design.Receive.RxIndication.Seq):
      SD message is processed but Sd_ServerService_resetRemoteConnection() and
      Sd_ClientService_resetRemoteConnection() shall not be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.Unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1132</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.Multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1133</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1656</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_RemoteNodeReboot_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>8050</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test verifies that SD Receive unit stores separately remote node reboot flag from unicast and multicast receptions.
  Test assumes that remote node keeps separate reboot flag and session id unicast and multicast transmissions
  (perhaps not the most realistic assumption, but necessary to verify decoupling of unicast and multicast remote
  node state).

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  Remote note #1 state:
    - unicast session id = 0x102,
    - unicast reboot flag = 1,
    - multicast session id = 0x103,
    - multicast reboot flag = 1

Test Execution: 
  01: Assemble a SD message containing OfferService entry with reboot flag = '0' and session id = 0x1.
  02: Call Sd_RxIndication() to simulate unicast reception of a SD message from remote node #1.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00445):
      SD message is processed but Sd_ServerService_resetRemoteConnection() and
      Sd_ClientService_resetRemoteConnection() shall not be called.
  04: Reuse SD message assembled in step 01 with updated reboot flag = '1' and session id = 0x104.
  05: Call Sd_RxIndication() to simulate multicast reception of a SD message from remote node #1.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00445):
      SD message is processed but Sd_ServerService_resetRemoteConnection() and
      Sd_ClientService_resetRemoteConnection() shall not be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.Unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1132</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RebootDetection.Multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1133</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00445</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1657</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_RemoteNodeReboot_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>8177</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test verifies that SD Receive unit stores separately remote node session id from unicast and multicast receptions.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  Remote note #1 state:
    - unicast session id = 0x102,
    - unicast reboot flag = 1,
    - multicast session id = 0x103,
    - multicast reboot flag = 1

Test Execution: 
  01: Assemble a SD message containing OfferService entry with reboot flag = '1' and session id = 0x104.
  02: Call Sd_RxIndication() to simulate multicast reception of a SD message from remote node #1.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00445):
      SD message is processed but Sd_ServerService_resetRemoteConnection() and
      Sd_ClientService_resetRemoteConnection() shall not be called.
  04: Reuse SD message assembled in step 01 with updated session id = 0x103.
  05: Call Sd_RxIndication() to simulate unicast reception of a SD message from remote node #1.
  06: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00445):
      SD message is processed but Sd_ServerService_resetRemoteConnection() and
      Sd_ClientService_resetRemoteConnection() shall not be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00445</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1658</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ErrorMinPDULength</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>8294</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore SD message if message size
  is less the minimum PDU length.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing only SD message header.
  02: Call Sd_RxIndication() to simulate reception of the SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  04: VP(Sd.Design.Receive.MessageError.MinPDULength, Sd.SWS_SD_00708):
      Sd_Send_setupBuffer() and Sd_Send_flushBuffer() shall not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.MinPDULength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1118</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1659</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ErrorClientId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>8391</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore SD message if
  the Client ID is not set to 0x0000.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry and Client ID set to 0x0001.
  02: Call Sd_RxIndication() to simulate reception of the SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  04: VP(Sd.Design.Receive.MessageError.ClientID, Sd.SWS_SD_00708, Sd.SWS_SD_00033):
      Sd_Send_setupBuffer(), Sd_ServerService_eventFind() and Sd_Send_flushBuffer() shall not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.ClientID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1119</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1660</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ErrorProtocolVersion</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>8492</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore SD message if
  the Protocol version is not set to 0x01.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry and Protocol Version set to 2U.
  02: Call Sd_RxIndication() to simulate reception of the SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  04: VP(Sd.Design.Receive.MessageError.ProtocolVersion, Sd.SWS_SD_00708, Sd.SWS_SD_00141):
      Sd_Send_setupBuffer(), Sd_ServerService_eventFind() and Sd_Send_flushBuffer() shall not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.ProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1120</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1661</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ErrorInterfaceVersion</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>8594</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore SD message if
  the Interface version is not set to 0x01.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry and Interface Version set to 2U.
  02: Call Sd_RxIndication() to simulate reception of the SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  04: VP(Sd.Design.Receive.MessageError.InterfaceVersion, Sd.SWS_SD_00708, Sd.SWS_SD_00143):
      Sd_Send_setupBuffer(), Sd_ServerService_eventFind() and Sd_Send_flushBuffer() shall not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.InterfaceVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1121</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00143</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1662</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ErrorMessageType</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>8696</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore SD message if
  the Message Type field is not set to 0x02.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry and Message Type set to 3U.
  02: Call Sd_RxIndication() to simulate reception of the SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  04: VP(Sd.Design.Receive.MessageError.MessageType, Sd.SWS_SD_00708, Sd.SWS_SD_00145):
      Sd_Send_setupBuffer(), Sd_ServerService_eventFind() and Sd_Send_flushBuffer() shall not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.MessageType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1122</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00145</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1663</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ErrorReturnCode</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>8798</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore SD message if
  the Return Code field is not set to 0x00.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry and Return Code set to 1U.
  02: Call Sd_RxIndication() to simulate reception of the SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  04: VP(Sd.Design.Receive.MessageError.ReturnCode, Sd.SWS_SD_00708, Sd.SWS_SD_00147):
      Sd_Send_setupBuffer(), Sd_ServerService_eventFind() and Sd_Send_flushBuffer() shall not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.ReturnCode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1123</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1664</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ErrorLengthOfEntriesArray</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>8900</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore SD message if
  Length of Entries Array field is not set to a multiple of the size of an entry.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry
      while Length of Entries Array field is set to an invalid value.
  02: Call Sd_RxIndication() to simulate reception of the SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  04: VP(Sd.Design.Receive.MessageError.LengthOfEntriesArray, Sd.SWS_SD_00708):
      Sd_Send_setupBuffer(), Sd_ServerService_eventFind() and Sd_Send_flushBuffer() shall not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.LengthOfEntriesArray</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1124</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1665</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ErrorOptionsLengthField</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>9005</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore SD message if
  the PDU-Length is less than sizeof(header) + sizeof(lengthof_entries_array) +
  lengthof_entries_array + sizeof(lengthof_options_array).

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry,
      while PDU-Length is set to an invalid value.
  02: Call Sd_RxIndication() to simulate reception of the SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  04: VP(Sd.Design.Receive.MessageError.OptionsLengthField, Sd.SWS_SD_00708):
      Sd_Send_setupBuffer(), Sd_ServerService_eventFind() and Sd_Send_flushBuffer() shall not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.
  06: Assemble a SD message containing a FindService entry,
      while PDU-Length is set to an invalid value.
  07: Call Sd_RxIndication() to simulate reception of the SD message.
  08: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  09: VP(Sd.Design.Receive.MessageError.OptionsLengthField, Sd.SWS_SD_00708):
      Sd_Send_setupBuffer(), Sd_ServerService_eventFind() and Sd_Send_flushBuffer() shall not be called.
  10: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.OptionsLengthField</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1125</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1666</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_ErrorOptionsLength</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>9175</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore SD message if
  the PDU-Length is less than sizeof(header) + sizeof(lengthof_entries_array) +
  lengthof_entries_array + sizeof(lengthof_options_array) + lengthof_options_array.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry referencing an IPv4 Endpoint option,
      while PDU-Length is set to an invalid value.
  02: Call Sd_RxIndication() to simulate reception of the SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  04: Length of options field can't be bigger than the length of the whole received PDU.
      Sd_Send_setupBuffer(), Sd_ServerService_eventFind() and Sd_Send_flushBuffer() shall not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.
  06: Assemble a SD message containing a FindService entry referencing an IPv4 Endpoint option,
      while PDU-Length is set to an invalid value.
  07: Call Sd_RxIndication() to simulate reception of the SD message.
  08: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called
  09: VP(Sd.Design.Receive.MessageError.OptionsLengthField, Sd.SWS_SD_00708):
      Sd_Send_setupBuffer(), Sd_ServerService_eventFind() and Sd_Send_flushBuffer() shall not be called.
  10: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.OptionsLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1126</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1667</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OptionLength_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>9357</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the error flag
  when the OfferService entry references an IPv4 Multicast option with invalid length.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and a valid IPv4 Endpoint option and
      an IPv4 Multicast option with invalid length.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.MessageError.InvalidIPv4OptionLength):
      Sd_ClientService_EventOfferService() shall be called with option status error.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.InvalidIPv4OptionLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1668</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OptionLength_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>9468</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the error flag
  when the SubscribeEventgroup entry references an IPv4 Multicast option with invalid length.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an EventgroupSubscribeAck entry and a valid IPv4 Multicast option and
      an IPv4 Endpoint option with invalid length.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.MessageError.InvalidIPv4OptionLength):
      Sd_ClientService_eventSubscribeAck() shall be called with option status error.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.InvalidIPv4OptionLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1669</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OptionLength_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>9581</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the error flag
  when the OfferService entry references an IPv6 Multicast option with invalid length.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and a valid IPv4 Endpoint option and
      an IPv6 Multicast option with invalid length.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.MessageError.InvalidIPv6OptionLength):
      Sd_ClientService_EventOfferService() shall be called with option status error.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.InvalidIPv6OptionLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1670</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OptionLength_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>9693</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the error flag
  when an entry references an IPv6 Multicast endpoint option with invalid length.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and a valid IPv4 Endpoint option and
      an IPv6 Multicast option with invalid length.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.MessageError.InvalidIPv6OptionLength):
      Sd_ClientService_EventOfferService() shall be called with option status error.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.InvalidIPv6OptionLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1671</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OptionLength_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>9806</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the error flag
  when the entry references a configuration option with invalid length.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and a valid IPv4 Endpoint option and
      an configuration option with invalid length.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.MessageError.InvalidConfigOptionLength):
      Sd_ClientService_EventOfferService() shall be called with option status error.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.InvalidConfigOptionLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1129</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1672</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OptionLength_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>9919</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that the Receive unit shall discard option with invalid length, and all options
  that are behind this option in the option array.
  This test verifies that SD Receive unit shall mark the entryoptions with the error flag
  when the entry refereneces discarded options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and a valid IPv4 Endpoint option and
      an configuration option with invalid length.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.MessageError.InvalidConfigOptionLength):
      Sd_ClientService_EventOfferService() shall not be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.InvalidConfigOptionLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1129</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1673</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OptionLength_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>10031</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall mark the entryoptions with the error flag
  when an refernces and option that exceeds the options array.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and a valid IPv4 Endpoint option and
      an unknown option with invalid length.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.MessageError.OptionsArrayExc):
      Sd_ClientService_EventOfferService() shall be called with option status error.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.OptionsArrayExc</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1674</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_OptionLength_7</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>10143</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test verifies that the Receive unit shall discard option with invalid length which would exceed the options array,
  and all options that are behind this option in the option array.
  This test verifies that SD Receive unit shall mark the entryoptions with the error flag
  when the entry refereneces discarded options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an OfferService entry and a valid IPv4 Endpoint option and
      an configuration option with invalid length that would exceed the options array length.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.MessageError.InvalidConfigOptionLength):
      Sd_ClientService_EventOfferService() shall not be called.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.MessageError.InvalidConfigOptionLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1129</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1675</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_GetRemoteAddr_Err</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>10259</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall correctly handle
  a FindService entry that references no options.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq, Sd.SWS_SD_00482):
      SoAd_GetRemoteAddr() shall be called for Rx multicast socket.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_ServerService_eventFind() shall not be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called for Rx multicast socket, with address parameter set to wildcard.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1676</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_UnknownEntryType</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>10358</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore an entry with
  an unknown type field.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing an entry of unknown type.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_setupBuffer() shall be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      Sd_Send_flushBuffer() shall be called.
  06: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.
  07: VP(Sd.Design.Receive.Entry.UnknownType):
      No entry processing function calls shall be visible in call trace.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.Entry.UnknownType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1677</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_UnicastFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>10473</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall ignore a message with unicast flag not set.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry. Unicast flag is not set in message header.
  02: Call Sd_RxIndication() to simulate reception of a SD message.
  03: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_GetRemoteAddr() shall be called.
  04: VP(Sd.Design.Receive.Message.UnicastFlag):
      Sd_Send_setupBuffer(), Sd_ServerService_eventFind() and Sd_Send_flushBuffer() shall not be called.
  05: VP(Sd.Design.Receive.RxIndication.Seq):
      SoAd_SetRemoteAddr() shall be called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.Message.UnicastFlag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1131</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1678</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Receive_NoRemoteNodeState</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Receive/source/application/Tests.c.m4</sourcefile>
      <sourceline>10567</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that SD Receive unit shall discard
  Sd messages if no Remote node state is available.

Test Object: 
  Sd Receive unit

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.

Test Execution: 
  01: Assemble a SD message containing a FindService entry.
  02: Call Sd_RxIndication() to simulate reception of a SD message from Client 0.
      Find entry gets processed with correct RemoteNodeIndex.
  03: Call Sd_RxIndication() to simulate reception of a SD message from Client 1.
      Find entry gets processed with correct RemoteNodeIndex.
  04: Call Sd_RxIndication() to simulate reception of a SD message from Client 2.
  05: VP(Sd.Design.Receive.RxIndication.Seq) Sd message with all entries is discarded.
  06: Call Sd_RxIndication() to simulate reception of a SD message from Client 1 again.
      Find entry gets processed with correct RemoteNodeIndex.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Receive.RxIndication.Seq</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1679</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Sd_Unit_Send_QueueFind_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>650</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  a FindService entry.

Test Object: 
  Sd_Send_queueFindService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueFindService() to trigger queuing FindService entry for client service #1.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00480.multicast):
      SoAd_SetRemoteAddr() shall be called.
  05: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.multicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 0,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  06: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.Design.Send.flushBuffer.001):
      SD message header shall be correctly encoded.
  07: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00157, Sd.SWS_SD_00158, Sd.SWS_SD_00160):
      SD message Length of Entry Array field shall have a size of 32 bits and set to the length of a single Type 1 entry (16 bytes).
  08: VP(Sd.SWS_SD_00159, Sd.SWS_SD_00161):
      Type 1 Entry Type field shall have a size of 8 bits.
  09: VP(Sd.SWS_SD_00162, Sd.Design.Send.queueFindService.001, Sd.SWS_SD_00240):
      Type field shall carry value 0x00 to encode FindService
  10: VP(Sd.SWS_SD_00159, Sd.SWS_SD_00161, Sd.SWS_SD_00163, Sd.SWS_SD_00164, Sd.SWS_SD_00623):
      The Index First Option Run field of the Type 1 Entry format layout shall have a size of 8 bits.
  11: VP(Sd.SWS_SD_00164, Sd.SWS_SD_00623, Sd.Design.Send.queueFindService.001, Sd.SWS_SD_00505):
      First option run shall be empty, i.e. the Index First Option Run field shall be set to 0.
  12: VP(Sd.SWS_SD_00159, Sd.SWS_SD_00161, Sd.SWS_SD_00165):
      The Index Second Option Run field of the Type 1 Entry format layout shall have a size of 8 bits.
  13: VP(Sd.SWS_SD_00166, Sd.SWS_SD_00623, Sd.Design.Send.queueFindService.001, Sd.SWS_SD_00505):
      Second option run shall be empty, i.e. the Index First Option Run field shall be set to 0.
  14: VP(Sd.SWS_SD_00159, Sd.SWS_SD_00161, Sd.SWS_SD_00167, Sd.SWS_SD_00223):
      The Number of Option 1 field of the Type 1 Entry format layout shall have a size of 4 bits to allow referencing 0 to 15 options.
  15: VP(Sd.SWS_SD_00168, Sd.SWS_SD_00622):
      First option run shall be empty, i.e. The "Number of Option 1" field shall be set to 0.
  16: VP(Sd.SWS_SD_00159, Sd.SWS_SD_00161, Sd.SWS_SD_00169, Sd.SWS_SD_00225):
      The Number of Option 2 field of the Type 1 Entry format layout shall have a size of 4 bits to allow referencing 0 to 15 options.
  17: VP(Sd.SWS_SD_00170, Sd.SWS_SD_00622):
      Second option run shall be empty for FindService entry, i.e. The "Number of Option 2" field shall be set to 0.
  18: VP(Sd.SWS_SD_00159, Sd.SWS_SD_00161, Sd.SWS_SD_00172):
      The Service ID field of the Type 1 Entry format shall have a size of 16 bits
  19: VP(Sd.SWS_SD_00173, Sd.SWS_SD_00296, Sd.Design.Send.queueFindService.001, Sd.SWS_SD_00444):
      The Service ID field shall be set to the instance #0 client #1 service's configuration parameter SdClientServiceID.
  20: VP(Sd.SWS_SD_00159, Sd.SWS_SD_00161, Sd.SWS_SD_00174):
      The Instance ID field of the Type 1 Entry format shall have a size of 16 bits.
  21: VP(Sd.SWS_SD_00175, Sd.SWS_SD_00296, Sd.Design.Send.queueFindService.001, Sd.SWS_SD_00501):
      The Instance ID field shall be set to the instance #0 client #1 service's configuration parameter SdClientServiceInstanceID.
  22: VP(Sd.SWS_SD_00159, Sd.SWS_SD_00161, Sd.SWS_SD_00177):
      The Major Version field of the Type 1 Entry format shall have a size of 8 bits.
  23: VP(Sd.SWS_SD_00178, Sd.SWS_SD_00296, Sd.Design.Send.queueFindService.001, Sd.SWS_SD_00502):
      The Major Version field shall be set to the instance #0 client #1 service's configuration parameter SdClientServiceMajorVersion.
  24: VP(Sd.SWS_SD_00159, Sd.SWS_SD_00161, Sd.SWS_SD_00179):
      The TTL field of the Type 1 Entry format shall have a size of 24 bits.
  25: VP(Sd.SWS_SD_00180, Sd.SWS_SD_00298, Sd.SWS_SD_00504):
      The TTL field shall be set to the instance #0 client #1 service's configuration parameter SdClientTimerTTL.
  26: VP(Sd.SWS_SD_00159, Sd.SWS_SD_00161, Sd.SWS_SD_00181):
      The Minor Version field of the Type 1 Entry format shall have a size of 32 bits.
  27: VP(Sd.SWS_SD_00182, Sd.SWS_SD_00296, Sd.Design.Send.queueFindService.001, Sd.SWS_SD_00503):
      The Minor Version field shall be set to the instance #0 client #1 service's configuration parameter SdClientServiceMinorVersion.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1189</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueFindService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1167</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueFindService.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1168</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00159</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00165</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00169</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00172</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00182</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00296</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00298</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00444</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>349</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00501</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00502</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00503</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00505</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00622</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00623</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>431</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1680</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueFind_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>882</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  a FindService entry for a client service with configured Capability records.

Test Object: 
  Sd_Send_queueFindService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueFindService() to trigger queuing FindService entry for client service #3.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.multicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 0,
      and the SDU data size shall be of correct size.
  05: VP(Sd.Design.Send.flushBuffer.RequestID):
      SD message header shall be correctly encoded.
  06: VP(Sd.SWS_SD_00294):
      SD message shall contain a single entry of Entry Format Type 1
  07: VP(Sd.Design.Send.queueFindService.001):
      Entry Type field shall carry value 0x00 to encode FindService
  08: VP(Sd.Design.Send.queueFindService.001):
      The Service ID, Instance ID, Major Version, TTL and Minor Version fields shall be taken from the instance #0 client #3 service's configuration.
  09: VP(Sd.Design.Send.ConfigOption.001):
      The entry shall reference a single option from Option Run 2.
  10: VP(Sd.SWS_SD_00207):
      The Type field of the configuration option shall be set to 0x01 to indicate configuration option.
  11: VP(Sd.SWS_SD_00206):
      The Length field of the configuration option shall be set to sizeof(configuration string) + sizeof(reserved field)
  12: VP(Sd.SWS_SD_00208):
      The Reserved field of the configuration option shall be set to 0.
  13: VP(Sd.Design.Send.ConfigOption.CapabilityRecordKey, Sd.Design.Send.ConfigOption.CapabilityRecordValue, Sd.SWS_SD_00208):
      All configured Capability records shall be added to the configuration string. Capability record which has key and value configured,
      shall be added in format [len]"key=value", a record which value is empty shall be added in format [len]"key=", and a record which
      value is not enabled shall be added in format [len]"key".

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueFindService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1167</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.CapabilityRecordKey</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1165</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.CapabilityRecordValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1166</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00294</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1681</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueFind_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>1037</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  a FindService entry for a client service with configured Capability records,
  when the SdInstanceHostname parameter is configured.

Test Object: 
  Sd_Send_queueFindService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueFindService() to trigger queuing FindService entry for client service #4.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.multicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 2,
      and the SDU data size shall be of correct size.
  05: VP(Sd.Design.Send.flushBuffer.RequestID):
      SD message header shall be correctly encoded.
  06: VP(Sd.Design.Send.queueFindService.001):
      Entry Type field shall carry value 0x00 to encode FindService
  07: VP(Sd.Design.Send.queueFindService.001):
      The Service ID, Instance ID, Major Version, TTL and Minor Version fields shall be taken from the instance #2 client #0 service's configuration.
  08: VP(Sd.Design.Send.ConfigOption.001):
      The entry shall reference a single option from Option Run 2.
  09: VP(Sd.SWS_SD_00207):
      The Type field of the configuration option shall be set to 0x01 to indicate configuration option.
  10: VP(Sd.Design.Send.ConfigOption.Hostname):
      Configuration item with hostname key containing content of SdInstanceHostname parameter as a value
      shall be added to the begin of the configuration string.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueFindService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1167</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.Hostname</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1164</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1682</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueOffer_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>1171</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an OfferService entry for the Server service which has an Eventhandler with
  container SdEventHandlerUdp configured.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() with parameter isStopOffer=FALSE to trigger queuing OfferService entry for server service #1.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.UDP):
      SoAd_GetLocalAddr() shall be called.
  05: VP(Sd.SWS_SD_00480.unicast):
      SoAd_SetRemoteAddr() shall be called.
  06: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  07: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.Design.Send.flushBuffer.001):
      SD message header shall be correctly encoded.
  08: VP(Sd.Design.Send.flushBuffer.001):
      SD message Length of Entry Array field shall be set to length of a single entry
  09: VP(Sd.SWS_SD_00162, Sd.Design.Send.queueOfferService.001, Sd.SWS_SD_00254):
      Type field shall carry value 0x01 to encode OfferService
  10: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry shall reference a single option from Option Run 1
  11: VP(Sd.SWS_SD_00173, Sd.SWS_SD_00297, Sd.Design.Send.queueOfferService.001, Sd.SWS_SD_00509):
      The Service ID field shall be set to the instance #1 server #1 service's configuration parameter SdServerServiceID.
  12: VP(Sd.SWS_SD_00175, Sd.SWS_SD_00297, Sd.Design.Send.queueOfferService.001):
      The Instance ID field shall be set to the instance #1 server #1 service's configuration parameter SdServerServiceInstanceID.
  13: VP(Sd.SWS_SD_00178, Sd.SWS_SD_00297, Sd.Design.Send.queueOfferService.001):
      The Major Version field shall be set to the instance #1 server #1 service's configuration parameter SdServerServiceMajorVersion.
  14: VP(Sd.SWS_SD_00180, Sd.Design.Send.queueOfferService.003, Sd.Design.Send.queueOfferService.003, Sd.SWS_SD_00513):
      The TTL field shall be set to the instance #0 server #1 service's configuration parameter SdServerTimerTTL.
  15: VP(Sd.SWS_SD_00182, Sd.SWS_SD_00297, Sd.Design.Send.queueOfferService.001):
      The Minor Version field shall be set to the instance #1 server #1 service's configuration parameter SdServerServiceMinorVersion.
  16: VP(Sd.SWS_SD_00653, Sd.Design.Send.EndpointOption.001, Sd.Design.Send.queueOfferService.004, Sd.SWS_SD_00417, Sd.SWS_SD_00267, Sd.SWS_SD_00416):
      Entry shall reference an IPv4 Endpoint option (UDP).
  17: VP(Sd.SWS_SD_00209):
      The Length field of the IPv4 Endpoint Option shall be set to 0x0009.
  18: VP(Sd.SWS_SD_00210):
      The Type field of the IPv4 Endpoint Option shall be set to 0x04.
  19: VP(Sd.SWS_SD_00211):
      The Reserved field of the IPv4 Endpoint Option shall be set to 0x00.
  20: VP(Sd.SWS_SD_00212, Sd.SWS_SD_00478.UDP):
      The IPv4-Address field of the IPv4 Endpoint Option shall have a size of 32 bits and set to the local IP address.
  21: VP(Sd.SWS_SD_00213):
      The Reserved field of the IPv4 Endpoint Option shall be set to 0x00.
  22: VP(Sd.SWS_SD_00214):
      The Layer 4 Protocol field of the IPv4 Endpoint Option shall have a size of 8 bits and set to UDP
  23: VP(Sd.SWS_SD_00215, Sd.SWS_SD_00478.UDP):
      The Port Number field of the IPv4 Endpoint Option shall shall have a size of 16 bits and set to the local UDP port number.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1189</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1171</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00182</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00254</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00297</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00509</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>409</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00513</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00653</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1683</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueOffer_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>1374</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an OfferService entry for the Server service which has an Eventhandler with
  container SdEventHandlerTcp configured.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() with parameter isStopOffer=FALSE to trigger queuing OfferService entry for server service #2.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.TCP):
      SoAd_GetLocalAddr() shall be called.
  05: VP(Sd.SWS_SD_00480.unicast):
      SoAd_SetRemoteAddr() shall be called.
  06: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  07: VP(Sd.SWS_SD_00294):
      SD message shall contain a single entry of Entry Format Type 1
  08: VP(Sd.Design.Send.queueOfferService.001, Sd.SWS_SD_00294):
      OfferService entry shall be added to SD message payload.
  09: VP(Sd.SWS_SD_00653, Sd.Design.Send.EndpointOption.002):
      The entry shall reference a single option from Option Run 1.
  10: VP(Sd.Design.Send.queueOfferService.001,Sd.SWS_SD_00478.TCP):
      The Service ID, Instance ID, Major Version, TTL and Minor Version fields shall be taken from the instance #1 server #2 service's configuration.
  11: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.queueOfferService.004, Sd.SWS_SD_00653, Sd.SWS_SD_00417, Sd.SWS_SD_00267, Sd.SWS_SD_00416):
      Entry shall reference an IPv4 Endpoint option.
  12: VP(Sd.SWS_SD_00212, Sd.SWS_SD_00214, Sd.SWS_SD_00478.TCP, Sd.Design.Send.queueOfferService.005):
      The entry shall reference IPv4 TCP Endpoint option with local IP address and port.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1173</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00294</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00653</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1684</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueOffer_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>1514</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an OfferService entry for a Server service which has container SdProvidedMethods and
  parameter SdServerServiceUdpRef configured.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() with parameter isStopOffer=FALSE to trigger queuing OfferService entry for server service #6.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.UDP):
      SoAd_GetLocalAddr() shall be called.
  05: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  06: VP(Sd.Design.Send.queueOfferService.001):
      OfferService entry shall be added to SD message payload.
  07: VP(Sd.SWS_SD_00653, Sd.Design.Send.EndpointOption.002):
      The entry shall reference a single option from Option Run 1.
  08: VP(Sd.Design.Send.queueOfferService.001,Sd.SWS_SD_00478.TCP):
      The Service ID, Instance ID, Major Version, TTL and Minor Version fields shall be taken from the instance #1 server #6 service's configuration.
  09: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.queueOfferService.004, Sd.SWS_SD_00653, Sd.SWS_SD_00417, Sd.SWS_SD_00267, Sd.SWS_SD_00416):
      Entry shall reference an IPv4 Endpoint option.
  10: VP(Sd.SWS_SD_00212, Sd.SWS_SD_00214, Sd.SWS_SD_00478.UDP, Sd.Design.Send.queueOfferService.005):
      The entry shall reference IPv4 UDP Endpoint option with local IP address and port.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1173</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00653</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1685</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueOffer_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>1651</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an OfferService entry for a Server service which has container SdProvidedMethods and
  parameter SdServerServiceTcpRef configured.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() with parameter isStopOffer=FALSE to trigger queuing OfferService entry for server service #7.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.TCP):
      SoAd_GetLocalAddr() shall be called.
  05: VP(Sd.SWS_SD_00480.unicast):
      SoAd_SetRemoteAddr() shall be called.
  06: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  07: VP(Sd.Design.Send.queueOfferService.001):
      OfferService entry shall be added to SD message payload.
  08: VP(Sd.SWS_SD_00653, Sd.Design.Send.EndpointOption.002):
      The entry shall reference a single option from Option Run 1.
  09: VP(Sd.Design.Send.queueOfferService.001,Sd.SWS_SD_00478.TCP):
      The Service ID, Instance ID, Major Version, TTL and Minor Version fields shall be taken from the instance #1 server #7 service's configuration.
  10: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.queueOfferService.004, Sd.SWS_SD_00653, Sd.SWS_SD_00417, Sd.SWS_SD_00267, Sd.SWS_SD_00416):
      Entry shall reference an IPv4 Endpoint option.
  11: VP(Sd.SWS_SD_00212, Sd.SWS_SD_00214, Sd.SWS_SD_00478.TCP, Sd.Design.Send.queueOfferService.005):
      The entry shall reference IPv4 TCP Endpoint option with local IP address and port.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1173</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00653</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1686</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueOffer_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>1788</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an OfferService entry for a Server service which has container SdProvidedMethods and
  parameters SdServerServiceUdpRef and SdServerServiceTcpRef configured.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() with parameter isStopOffer=FALSE to trigger queuing OfferService entry for server service #8.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.UDP):
      SoAd_GetLocalAddr() shall be called with SoConId argument set to the service's unicast Rx UDP socket connection ID.
  05: VP(Sd.SWS_SD_00478.TCP):
      SoAd_GetLocalAddr() shall be called with SoConId argument set to the service's Rx TCP socket connection ID
  06: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  07: VP(Sd.Design.Send.queueOfferService.001):
      OfferService entry shall be added to SD message payload.
  08: VP(Sd.SWS_SD_00653, Sd.Design.Send.EndpointOption.002):
      The entry shall reference two options from Option Run 1.
  09: VP(Sd.Design.Send.queueOfferService.001,Sd.SWS_SD_00478.TCP):
      The Service ID, Instance ID, Major Version, TTL and Minor Version fields shall be taken from the instance #1 server #8 service's configuration.
  10: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.queueOfferService.004, Sd.SWS_SD_00653, Sd.SWS_SD_00417, Sd.SWS_SD_00267, Sd.SWS_SD_00416):
      Entry shall reference two IPv4 options.
  11: VP(Sd.SWS_SD_00212, Sd.SWS_SD_00214, Sd.SWS_SD_00478.UDP, Sd.Design.Send.queueOfferService.005):
      The entry shall reference IPv4 UDP Endpoint option with local IP address and port.
  12: VP(Sd.SWS_SD_00212, Sd.SWS_SD_00214, Sd.SWS_SD_00478.TCP, Sd.Design.Send.queueOfferService.005):
      The entry shall reference IPv4 TCP Endpoint option with local IP address and port.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1173</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00653</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1687</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueOffer_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>1938</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an OfferService entry for a Server service which has a SdServerCapabilityRecord configured,
  and SdEventHandler with containers SdEventHandlerMulticast, SdEventHandlerTcp and SdEventHandlerUdp configured.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() with parameter isStopOffer=FALSE to trigger queuing OfferService entry for server service #4.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.UDP):
      SoAd_GetLocalAddr() shall be called with SoConId argument set to the service's unicast Rx UDP socket connection ID.
  05: VP(Sd.SWS_SD_00478.TCP):
      SoAd_GetLocalAddr() shall be called with SoConId argument set to the service's Rx TCP socket connection ID
  06: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  07: VP(Sd.Design.Send.queueOfferService.001):
      OfferService entry shall be added to SD message payload.
  08: VP(Sd.SWS_SD_00653, Sd.Design.Send.EndpointOption.002):
      The entry shall reference two options from Option Run 1.
  09: VP(Sd.Design.Send.ConfigOption.001):
      The entry shall reference one options from Option Run 2.
  10: VP(Sd.Design.Send.queueOfferService.001):
      The Service ID, Instance ID, Major Version, TTL and Minor Version fields shall be taken from the instance #1 server #4 service's configuration.
  11: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.queueOfferService.004, Sd.SWS_SD_00653, Sd.SWS_SD_00417, Sd.SWS_SD_00267, Sd.SWS_SD_00416):
      Entry shall reference an IPv4 UDP option.
  12: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.queueOfferService.004, Sd.SWS_SD_00653, Sd.SWS_SD_00417, Sd.SWS_SD_00267, Sd.SWS_SD_00416):
      Entry shall reference an IPv4 TCP option.
  13: VP(Sd.SWS_SD_00478.UDP, Sd.SWS_SD_00478.TCP):
      Entry shall reference a configuration option.
  14: VP(Sd.SWS_SD_00212, Sd.SWS_SD_00214, Sd.SWS_SD_00478.UDP, Sd.Design.Send.queueOfferService.005):
      The entry shall reference IPv4 UDP Endpoint option with local IP address and port.
  15: VP(Sd.SWS_SD_00212, Sd.SWS_SD_00214, Sd.SWS_SD_00478.TCP, Sd.Design.Send.queueOfferService.005):
      The entry shall reference IPv4 TCP Endpoint option with local IP address and port.
  16: VP(Sd.Design.Send.ConfigOption.CapabilityRecordKey, Sd.Design.Send.ConfigOption.CapabilityRecordValue, Sd.SWS_SD_00208):
      The configuration string shall be constructed from SdServerCapabilityRecords configured for the service.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1173</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00653</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.CapabilityRecordKey</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1165</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.CapabilityRecordValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1688</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueOffer_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>2120</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an OfferService entry for a server service with configured Capability records,
  when the SdInstanceHostname parameter is configured.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() with parameter isStopOffer=FALSE to trigger queuing OfferService entry for server service #9.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  05: VP(Sd.Design.Send.queueOfferService.001):
      OfferService entry shall be added to SD message payload.
  06: VP(Sd.SWS_SD_00653, Sd.Design.Send.EndpointOption.002, Sd.SWS_SD_00224):
      The entry shall reference a single option from Option Run 1.
  07: VP(Sd.Design.Send.ConfigOption.001, Sd.SWS_SD_00226):
      The entry shall reference one options from Option Run 2.
  08: VP(Sd.Design.Send.queueOfferService.001,Sd.SWS_SD_00478.TCP):
      The Service ID, Instance ID, Major Version, TTL and Minor Version fields shall be taken from the instance #3 server #0 service's configuration.
  09: VP(Sd.Design.Send.queueOfferService.005):
      The entry shall reference IPv4 UDP Endpoint option with local IP address and port.
  10: VP(Sd.SWS_SD_00207):
      The Type field of the configuration option shall be set to 0x01 to indicate configuration option.
  11: VP(Sd.Design.Send.ConfigOption.Hostname):
      Configuration item with hostname key containing content of SdInstanceHostname parameter as a value
      shall be added to the begin of the configuration string.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1173</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.Hostname</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1164</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00653</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1689</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueStopOffer_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>2271</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an StopOfferService entry.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() with parameter isStopOffer=TRUE to trigger queuing StopOfferService entry for server service #1.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.UDP):
      SoAd_GetLocalAddr() shall be called.
  05: VP(Sd.SWS_SD_00480.unicast):
      SoAd_SetRemoteAddr() shall be called.
  06: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  07: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.Design.Send.flushBuffer.001):
      SD message header shall be correctly encoded.
  08: VP(Sd.Design.Send.flushBuffer.001):
      SD message Length of Entry Array field shall be set to length of a single entry
  09: VP(Sd.SWS_SD_00294, Sd.SWS_SD_00168):
      SD message shall contain a single entry of Entry Format Type 1
  10: VP(Sd.SWS_SD_00162, Sd.SWS_SD_00423):
      Type field shall be set to 0x01 to encode StopOfferService
  11: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry shall reference a single option from Option Run 1.
  12: VP(Sd.SWS_SD_00173, Sd.SWS_SD_00175, Sd.SWS_SD_00178, Sd.SWS_SD_00297):
      The Service ID, Instance ID and Major Version fields shall be set according to the instance #1 server #1 service's configuration.
  13: VP(Sd.SWS_SD_00180, Sd.SWS_SD_00253, Sd.SWS_SD_00425, Sd.Design.Send.queueOfferService.002, Sd.SWS_SD_00513):
      The TTL field shall be set to 0.
  14: VP(Sd.SWS_SD_00182, Sd.SWS_SD_00297):
      The Minor Version field shall be set to the instance #1 server #1 service's configuration parameter SdServerServiceMinorVersion.
  15: VP(Sd.SWS_SD_00653, Sd.SWS_SD_00478.UDP, Sd.Design.Send.EndpointOption.001):
      Entry shall reference one UDP IPv4 Endpoint option with local IP address and port.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1189</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1170</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00182</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00253</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00294</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00297</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00423</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>331</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00425</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>333</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00513</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00653</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1690</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueStopOffer_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>2435</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that StopOfferService entry shall reference the same options and set the entry fields exactly
  like the OfferService entry it is stopping.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() with parameter isStopOffer=FALSE to trigger queuing OfferService entry for server service #1.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  05: Save OfferService entry and referenced option.
  06: VP(Sd.SWS_SD_00162, Sd.SWS_SD_00423):
      Type field shall be set to 0x01 to encode OfferService
  07: Call Sd_Send_setupBuffer() to configure the send buffer
  08: Call Sd_Send_queueOfferService() with parameter isStopOffer=TRUE to trigger queuing StopOfferService entry for server service #1.
  09: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  10: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  11: Save StopOfferService entry and referenced option.
  12: VP(Sd.SWS_SD_00162, Sd.SWS_SD_00423):
      Type field shall be set to 0x01 to encode StopOfferService
  13: VP(Sd.SWS_SD_00424):
      StopOfferService entry shall set the entry fields exactly like the OfferService entry it is stopping.
  14: VP(Sd.SWS_SD_00424, Sd.SWS_SD_00425):
      OfferService TTL shall be taken from configuration; StopOfferService TTL shall be 0.
  15: VP(Sd.SWS_SD_00281):
      A StopOfferService shall reference the same options as the entry trying to stop.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1189</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1170</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00281</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00423</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>331</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00424</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>332</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00425</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>333</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1691</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueSubscribeEventgroup_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>2592</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  a SubscribeEventgroup entry.

Test Object: 
  Sd_Send_queueSubscribeEventgroup() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroup() to trigger queuing SubscribeEventgroup entry for Client #1 ConsumedEventgroup #0.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00701.UDP):
      SoAd_GetLocalAddr() shall be called.
  05: VP(Sd.SWS_SD_00480.multicast):
      SoAd_SetRemoteAddr() shall be called.
  06: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.multicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 0,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  07: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.Design.Send.flushBuffer.001):
      SD message header shall be correctly encoded.
  08: VP(Sd.SWS_SD_00157, Sd.SWS_SD_00158, Sd.SWS_SD_00183):
      SD message Length of Entry Array field shall have a size of 32 bits and set to the length of a single Type 2 entry (16 bytes).
  09: VP(Sd.SWS_SD_00184):
      Type 2 Entry Type field shall have a size of 8 bits.
  10: VP(Sd.Design.Send.queueSubscribeEventgroup.005, Sd.SWS_SD_00312):
      Entry Type field shall carry value 0x06 to encode SubscribeEventgroup
  11: VP(Sd.SWS_SD_00184, Sd.SWS_SD_00185):
      The Index First Option Run field of the Type 2 Entry format layout shall have a size of 8 bits.
  12: VP(Sd.SWS_SD_00386):
      The Index First Option Run field shall be set to the index of first option in the first run (0).
  13: VP(Sd.SWS_SD_00184, Sd.SWS_SD_00186):
      The Index Second Option Run field of the Type 2 Entry format layout shall have a size of 8 bits.
  14: VP(Sd.SWS_SD_00187, Sd.SWS_SD_00626):
      Second option run shall be empty, i.e. the Index second Option Run field shall be set 0.
  15: VP(Sd.SWS_SD_00184, Sd.SWS_SD_00387):
      The Number of Option 1 field of the Type 2 Entry format layout shall have a size of 4 bits.
  16: VP(Sd.SWS_SD_00188, Sd.Design.Send.EndpointOption.002):
      The Number of Option 1 field shall be set to the number of options the first option run uses (1).
  17: VP(Sd.SWS_SD_00184, Sd.SWS_SD_00189):
      The Number of Option 2 field of the Type 2 Entry format layout shall have a size of 4 bits.
  18: VP(Sd.SWS_SD_00190, Sd.SWS_SD_00625):
      Second option run shall be empty, i.e. The Number of Option 2 field shall be set to 0.
  19: VP(Sd.SWS_SD_00184, Sd.SWS_SD_00192):
      The Service ID field of the Type 2 Entry format shall have a size of 16 bits
  20: VP(Sd.SWS_SD_00193, Sd.Design.Send.queueSubscribeEventgroup.001, Sd.SWS_SD_00301):
      The Service ID field shall be set to the instance #0 client #1 service's configuration parameter SdClientServiceID.
  21: VP(Sd.SWS_SD_00184, Sd.SWS_SD_00194):
      The Instance ID field of the Type 2 Entry format shall have a size of 16 bits.
  22: VP(Sd.SWS_SD_00195, Sd.Design.Send.queueSubscribeEventgroup.001, Sd.SWS_SD_00301):
      The Instance ID field shall be set to the instance #0 client #1 service's configuration parameter SdClientServiceInstanceID.
  23: VP(Sd.SWS_SD_00184, Sd.SWS_SD_00197):
      The Major Version field of the Type 2 Entry format shall have a size of 8 bits.
  24: VP(Sd.SWS_SD_00198, Sd.Design.Send.queueSubscribeEventgroup.001):
      The Major Version field shall be set to the instance #0 client #1 service's configuration parameter SdClientServiceMajorVersion.
  25: VP(Sd.SWS_SD_00184, Sd.SWS_SD_00199):
      The TTL field of the Type 2 Entry format shall have a size of 24 bits.
  26: VP(Sd.SWS_SD_00200, Sd.Design.Send.queueSubscribeEventgroup.002, Sd.SWS_SD_00304):
      The TTL field shall be set to the instance #0 client #1 service's configuration parameter SdClientTimerTTL.
  27: VP(Sd.SWS_SD_00184, Sd.SWS_SD_00201):
      The Reserved field of the Type 2 Entry format layout shall have a size of 12 bits.
  28: VP(Sd.SWS_SD_00202, Sd.SWS_SD_00300):
      The Reserved field shall be set to 0.
  29: VP(Sd.SWS_SD_00184, Sd.SWS_SD_00691):
      The Counter field of the Type 2 Entry format layout shall have a size of 4 bits.
  30: VP(Sd.SWS_SD_00692):
      The Counter field shall be set to 0.
  31: VP(Sd.SWS_SD_00184, Sd.SWS_SD_00203, Sd.SWS_SD_00291):
      The Eventgroup ID field of the Type 2 Entry format shall have a size of 16 bits.
  32: VP(Sd.SWS_SD_00204, Sd.SWS_SD_00301):
      The Eventgroup ID field shall be set to the instance #0 client #1 service's configuration parameter SdConsumedEventGroupID.
  33: VP(Sd.SWS_SD_00655, Sd.SWS_SD_00701.UDP, Sd.Design.Send.queueSubscribeEventgroup.004):
      The entry shall reference IPv4 UDP Endpoint option with local IP address and port.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1189</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1174</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1176</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1177</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1178</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00183</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00184</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00186</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00187</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00190</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00194</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00195</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00197</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00198</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00199</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00300</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00301</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00304</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00312</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00386</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>298</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00387</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00625</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00626</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>434</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00655</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00691</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00692</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00701.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1692</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueSubscribeEventgroup_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>2856</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  a SubscribeEventgroup entry for a client service with configured Capability records
  and Consumed Eventgroup using UDP.

Test Object: 
  Sd_Send_queueSubscribeEventgroup() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroup() with parameter isStopSubscribe=FALSE to trigger queuing SubscribeEventgroup entry for Client #3 ConsumedEventgroup #0.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00701.UDP):
      SoAd_GetLocalAddr() shall be called.
  05: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 0,
      and the SDU data size shall be of correct size.
  06: VP(Sd.Design.Send.queueSubscribeEventgroup.005, Sd.SWS_SD_00312):
      Entry Type field shall carry value 0x06 to encode SubscribeEventgroup
  07: VP(Sd.Design.Send.EndpointOption.002):
      Entry shall reference a single option from Option Run 1.
  08: VP(Sd.Design.Send.ConfigOption.001):
      The entry shall reference a single option from Option Run 2.
  09: VP(Sd.Design.Send.queueSubscribeEventgroup.001):
      The Service ID, Instance ID, Major Version and Eventgroup ID fields shall be set according to the instance #0 client #3 service's configuration.
  10: VP(Sd.Design.Send.queueSubscribeEventgroup.004):
      The entry shall reference IPv4 UDP Endpoint option with local IP address and port.
  11: VP(Sd.SWS_SD_00701.UDP):
      Entry shall reference a configuration option.
  12: VP(Sd.SWS_SD_00701.UDP):
      The configuration string shall be constructed from SdServerCapabilityRecords configured for the service.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1174</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1177</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1178</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00312</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00701.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1693</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>3008</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  a StopSubscribeEventgroup entry.

Test Object: 
  Sd_Send_queueSubscribeEventgroup() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroup() with parameter isStopSubscribe=TRUE to trigger queuing StopSubscribeEventgroup entry for Client #1 ConsumedEventgroup #0.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00701.UDP):
      SoAd_GetLocalAddr() shall be called.
  05: VP(Sd.SWS_SD_00480.unicast):
      SoAd_SetRemoteAddr() shall be called.
  06: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 0,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  07: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.Design.Send.flushBuffer.001):
      SD message header shall be correctly encoded.
  08: VP(Sd.SWS_SD_00157, Sd.SWS_SD_00158, Sd.SWS_SD_00183):
      SD message Length of Entry Array field shall have a size of 32 bits and set to the length of a single Type 2 entry (16 bytes).
  09: VP(Sd.SWS_SD_00290):
      SD message shall contain a single entry of Entry Format Type 2
  10: VP(Sd.Design.Send.queueSubscribeEventgroup.005):
      Entry Type field shall carry value 0x06 to encode StopSubscribeEventgroup
  11: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry shall reference a single option from Option Run 1.
  12: VP(Sd.SWS_SD_00192, Sd.SWS_SD_00193, Sd.SWS_SD_00195, Sd.SWS_SD_00198,
         Sd.Design.Send.queueSubscribeEventgroup.001, Sd.SWS_SD_00301):
      The Service ID, Instance ID and Major Version fields shall be set according to the instance #0 client #1 service's configuration.
  13: VP(Sd.SWS_SD_00200, Sd.Design.Send.queueSubscribeEventgroup.003, Sd.SWS_SD_00306):
      The TTL field shall be set to 0.
  14: VP(Sd.SWS_SD_00204, Sd.SWS_SD_00301, Sd.SWS_SD_00291):
      The Eventgroup ID field shall be set to the instance #0 client #1 service's configuration parameter SdConsumedEventGroupID.
  15: VP(Sd.SWS_SD_00300):
      The Reserved field shall be set to 0.
  16: VP(Sd.SWS_SD_00655, Sd.SWS_SD_00701.UDP, Sd.Design.Send.EndpointOption.001, Sd.Design.Send.queueSubscribeEventgroup.004):
      The entry shall reference IPv4 UDP Endpoint option with local IP address and port.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1189</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1174</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1175</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1178</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00183</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00195</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00198</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00290</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00300</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00301</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00306</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00655</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00701.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1694</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueStopSubscribeEventgroup_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>3178</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that StopSubscribeEventgroup entry shall reference the same options and set the entry fields exactly
  like the SubscribeEventgroup entry it is stopping.

Test Object: 
  Sd_Send_queueSubscribeEventgroup() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroup() with parameter isStopOffer=FALSE to trigger queuing SubscribeEventgroup entry for Client #1 ConsumedEventgroup #0.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  05: Save SubscribeEventgroup entry and referenced option.
  06: VP(Sd.Design.Send.queueSubscribeEventgroup.005, Sd.Design.Send.queueSubscribeEventgroup.001):
      Type field shall be set to 0x06 to encode SubscribeEventgroup
  07: Call Sd_Send_setupBuffer() to configure the send buffer
  08: Call Sd_Send_queueSubscribeEventgroup() with parameter isStopOffer=TRUE to trigger queuing StopSubscribeEventgroup entry for Client #1 ConsumedEventgroup #0
  09: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  10: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  11: Save StopSubscribeEventgroup entry and referenced option.
  12: VP(Sd.Design.Send.queueSubscribeEventgroup.005):
      Type field shall be set to 0x06 to encode StopSubscribeEventgroup
  13: VP(Sd.SWS_SD_00427):
      StopSubscribeEventgroup entry shall set the entry fields exactly like the SubscribeEventgroup entry it is stopping.
  14: VP(Sd.SWS_SD_00426):
      SubscribeEventgroup TTL shall be taken from configuration; StopSubscribeEventgroup TTL shall be 0.
  15: VP(Sd.SWS_SD_00694):
      A StopSubscribeEventgroup shall reference the same options as the entry trying to stop.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1174</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1178</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00426</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>334</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00427</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>335</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00694</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1695</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>3330</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an SubscribeEventgroupAck entry.

Test Object: 
  Sd_Send_queueSubscribeEventgroupAck() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroupAck() to trigger queuing SubscribeEventgroupAck entry for server service #1.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00429):
      SoAd_GetRemoteAddr() shall be called to acquire the multicast address.
  05: VP(Sd.SWS_SD_00480.unicast):
      SoAd_SetRemoteAddr() shall be called.
  06: VP(Sd.SWS_SD_00039):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 0,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  07: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.Design.Send.flushBuffer.001):
      SD message header shall be correctly encoded.
  08: VP(Sd.SWS_SD_00157, Sd.SWS_SD_00158, Sd.SWS_SD_00183):
      SD message Length of Entry Array field shall have a size of 32 bits and set to the length of a single Type 2 entry (16 bytes).
  09: VP(Sd.Design.Send.queueSubscribeEventgroupAck.003, Sd.Design.Send.queueSubscribeEventgroupAck.001):
      Entry Type field shall carry value 0x07 to encode SubscribeEventgroupAck
  10: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry shall reference a single option from Option Run 1.
  11: VP(Sd.SWS_SD_00193, Sd.SWS_SD_00195, Sd.SWS_SD_00198, Sd.Design.Send.queueSubscribeEventgroupAck.001):
      The Service ID, Instance ID and Major Version fields shall be set according to the instance #1 server #1 service's configuration.
  12: VP(Sd.SWS_SD_00200):
      The TTL field shall be set to value passed to Sd_Send_queueSubscribeEventgroupAck in step 02.
  13: VP(Sd.SWS_SD_00204, Sd.Design.Send.queueSubscribeEventgroupAck.001, Sd.SWS_SD_00291):
      The Eventgroup ID field shall be set to the instance #1 server #1 service's configuration parameter SdConsumedEventGroupID.
  14: VP(Sd.SWS_SD_00300):
      The Reserved field shall be set to 0.
  15: VP(Sd.SWS_SD_00659, Sd.Design.Send.EndpointOption.001, Sd.Design.Send.queueSubscribeEventgroupAck.002):
      Entry shall reference an IPv4 UDP Multicast option.
  16: VP(Sd.SWS_SD_00390):
      The Length field of the IPv4 Multicast Option shall have a size of 16 bits and shall be set to 0x0009.
  17: VP(Sd.SWS_SD_00391):
      The Type field of the IPv4 Multicast Option shall have a size of 8 bits and shall be set to 0x14.
  18: VP(Sd.SWS_SD_00392):
      The Reserved field of the IPv4 Multicast Option shall have a size of 8 bits and shall be set to 0x00.
  19: VP(Sd.SWS_SD_00393):
      The IPv4-Address field of the IPv4 Multicast Option shall have a size of 32 bits
      and shall be set to the Multicast IP address of the Eventgroup acquired in step 04.
  20: VP(Sd.SWS_SD_00394):
      The Reserved field of the IPv4 Multicast Option shall have a size of 8 bits and shall be set to 0x00.
  21: VP(Sd.SWS_SD_00395):
      The Layer 4 Protocol field of the IPv4 Multicast Option shall have a size of 8 bits and set to UDP
  22: VP(Sd.SWS_SD_00396):
      The Port Number field of the IPv4 Multicast Option shall shall have a size of 16 bits and set to the Multicast port number.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1189</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1179</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1180</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1181</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00183</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00195</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00198</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00300</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00390</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00391</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00392</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00393</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00394</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00395</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00396</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00429</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>337</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00659</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>445</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1696</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>3531</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an SubscribeEventgroupAck entry for a service which parameter SdMulticastEventSoConRef
  of the Eventgroup does not reference a Socketconnectiongroup.

Test Object: 
  Sd_Send_queueSubscribeEventgroupAck() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroupAck() to trigger queuing SubscribeEventgroupAck entry for server service #0.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00480.unicast):
      SoAd_SetRemoteAddr() shall be called.
  05: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 0,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  06: VP(Sd.Design.Send.queueSubscribeEventgroupAck.001):
      SubscribeEventgroupAck entry shall be added to the SD message.
  07: VP(Sd.Design.Send.queueSubscribeEventgroupAck.002):
      Entry shall not reference an Udp multicast endpoint: the First and Second Option Run shall be empty.
  08: VP(Sd.Design.Send.queueSubscribeEventgroupAck.001):
      The Service ID, Instance ID, Major Version, TTL and Minor Version fields shall be taken from the instance #1 server #0 service's configuration.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1179</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1180</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1697</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>3642</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an SubscribeEventgroupAck entry for a Server service which has a SdServerCapabilityRecord configured,
  and SdEventHandler with containers SdEventHandlerMulticast, SdEventHandlerTcp and SdEventHandlerUdp configured.

Test Object: 
  Sd_Send_queueSubscribeEventgroupAck() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroupAck() to trigger queuing SubscribeEventgroupAck entry for server service #4.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00429):
      SoAd_GetRemoteAddr() shall be called to acquire the multicast address.
  05: VP(Sd.SWS_SD_00039):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 0.
  06: VP(Sd.SWS_SD_00290):
      SD message shall contain a single entry of Entry Format Type 2
  07: VP(Sd.Design.Send.queueSubscribeEventgroupAck.001, Sd.Design.Send.queueSubscribeEventgroupAck.003):
      Entry Type field shall carry value 0x07 to encode SubscribeEventgroupAck.
  08: VP(Sd.Design.Send.queueSubscribeEventgroupAck.001):
      The Service ID, Instance ID, Major Version and EventGroupId fields shall be taken from the instance #1 server #4 service's configuration.
  09: VP(Sd.SWS_SD_00655, Sd.Design.Send.EndpointOption.002]):
      The entry shall reference one option from Option Run 1.
  10: VP(Sd.Design.Send.ConfigOption.001):
      The entry shall reference one option from Option Run 2.
  11: VP(Sd.Design.Send.queueSubscribeEventgroupAck.002):
      Entry shall reference an UDP Multicast Endpoint option .
  12: VP(Sd.SWS_SD_00393, Sd.SWS_SD_00395, Sd.SWS_SD_00396):
      IPv4 UDP Multicast Endpoint option shall be set to local IP address and port.
  13: VP(Sd.Design.Send.queueSubscribeEventgroupAck.004):
      Entry shall reference a configuration option.
  14: VP(Sd.Design.Send.queueSubscribeEventgroupAck.004):
      The configuration string shall be constructed from SdServerCapabilityRecords configured for the service.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1179</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1180</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1181</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1182</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00290</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00393</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00395</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00396</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00429</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>337</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00655</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1698</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueSubscribeEventgroupAck_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>3806</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an SubscribeEventgroupAck entry for a Server service which has a SdServerCapabilityRecord configured,
  and SdEventHandler with containers SdEventHandlerTcp and SdEventHandlerUdp configured.

Test Object: 
  Sd_Send_queueSubscribeEventgroupAck() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroupAck() to trigger queuing SubscribeEventgroupAck entry for server service #5.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00039):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 0.
  05: VP(Sd.Design.Send.queueSubscribeEventgroupAck.001, Sd.Design.Send.queueSubscribeEventgroupAck.003):
      Entry Type field shall carry value 0x07 to encode SubscribeEventgroupAck.
  06: VP(Sd.Design.Send.queueSubscribeEventgroupAck.001):
      The Service ID, Instance ID, Major Version and EventGroupId fields shall be taken from the instance #1 server #5 service's configuration.
  07: VP(Sd.Design.Send.ConfigOption.001):
      The entry shall reference one option from Option Run 2.
  08: VP(Sd.Design.Send.queueSubscribeEventgroupAck.004):
      Entry shall reference a configuration option.
  09: VP(Sd.Design.Send.queueSubscribeEventgroupAck.004):
      The configuration string shall be constructed from SdServerCapabilityRecords configured for the service.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1179</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1181</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1182</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1699</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>3934</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an SubscribeEventgroupNack entry.

Test Object: 
  Sd_Send_queueSubscribeEventgroupNack() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroupNackUnknown() to trigger queuing SubscribeEventgroupNack entry for server service #1.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00480.unicast):
      SoAd_SetRemoteAddr() shall be called.
  05: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be sizeof(header) + sizeof(entry) + sizeof(entry array length) + sizeof(options array length).
  06: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.Design.Send.flushBuffer.001):
      SD message header shall be correctly encoded.
  07: VP(Sd.Design.Send.flushBuffer.001,Sd.SWS_SD_00158):
      SD message Length of Entry Array field shall be set to length of a single entry
  08: VP(Sd.SWS_SD_00290):
      SD message shall contain a single entry of Entry Format Type 2
  09: VP(Sd.Design.Send.queueSubscribeEventgroupNack.002, Sd.Design.Send.queueSubscribeEventgroupNack.001):
      Entry Type field shall carry value 0x07 to encode StopSubscribeEventgroupAck
  10: VP(Sd.SWS_SD_00477):
      Entry shall not reference any options.
  11: VP(Sd.SWS_SD_00193):
      The Service ID field shall be set to value passed to Sd_Send_queueSubscribeEventgroupNackUnknown in step 02.
  12: VP(Sd.SWS_SD_00195):
      The Instance ID field shall be set to value passed to Sd_Send_queueSubscribeEventgroupNackUnknown in step 02.
  13: VP(Sd.SWS_SD_00198):
      The Major Version field shall be set to value passed to Sd_Send_queueSubscribeEventgroupNackUnknown in step 02.
  14: VP(Sd.SWS_SD_00200, Sd.SWS_SD_00306, Sd.SWS_SD_00432):
      The TTL field shall be set to 0.
  15: VP(Sd.SWS_SD_00204, Sd.SWS_SD_00291):
      The Eventgroup ID field shall be set to the instance #1 server #4 service's configuration parameter SdConsumedEventGroupID.
  16: VP(Sd.SWS_SD_00300):
      The Reserved field shall be set to 0.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1189</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupNack.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1183</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupNack.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1184</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00195</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00198</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00290</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00300</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00306</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00432</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>340</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00477</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1700</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueSubscribeEventgroupNack_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>4091</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an SubscribeEventgroupNack entry for a Server service which has a SdServerCapabilityRecord configured,
  and SdEventHandler with containers SdEventHandlerTcp and SdEventHandlerUdp configured.

Test Object: 
  Sd_Send_queueSubscribeEventgroupNack() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroupNackUnknown() to trigger queuing SubscribeEventgroupNack entry for server service #1.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1,
      and the SDU data size shall be of correct size.
  05: VP(Sd.Design.Send.queueSubscribeEventgroupNack.002):
      Entry Type field shall carry value 0x07 to encode StopSubscribeEventgroupAck
  06: VP(Sd.SWS_SD_00200, Sd.SWS_SD_00432):
      The TTL field shall be set to 0.
  07: VP(Sd.Design.Send.queueSubscribeEventgroupNack.001):
      The Service ID, Instance ID, Major Version and EventGroupId fields shall be taken from the instance #1 server #5 service's configuration.
  08: VP(Sd.Design.Send.ConfigOption.001):
      Entry shall reference a single option from Option Run 2.
  09: VP(Sd.Design.Send.queueSubscribeEventgroupNack.003, Sd.SWS_SD_00477):
      Entry shall reference a configuration option.
  10: VP(Sd.Design.Send.queueSubscribeEventgroupNack.003):
      The configuration string shall be constructed from SdServerCapabilityRecords configured for the service.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupNack.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1183</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupNack.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1184</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupNack.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1185</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00432</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>340</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00477</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1701</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_QueueSubscribeEventgroupNackUnknown</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>4227</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall correctly encode a SD message containing
  an SubscribeEventgroupNack entry for an unknown service.

Test Object: 
  Sd_Send_queueSubscribeEventgroupNack() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroupNackUnknown() to trigger queuing SubscribeEventgroupNack entry for server service #1.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: SD message header shall be correctly encoded.
  05: VP(Sd.Design.Send.queueSubscribeEventgroupNackUnknown.001, Sd.Design.Send.queueSubscribeEventgroupNackUnknown.002):
      SD message shall contain a single SubscribeEventgroupNack entry with the values set according to the provided arguments

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupNackUnknown.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1186</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupNackUnknown.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1702</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_EndpointOptionReuse_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>4333</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall reuse UDP endpoint option when adding
  an UDP/TCP endpoint option pair if the matching UDP endpoint option is the last option in the option list.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() to queue OfferService entries for server services #0, #6 and #8.
      The resulting SD message's option array shall be: [UDP0][UDP1][TCP1],
      where endpoint option UDP1 is shared between entries #1 and #2 (OfferService for services #6 and #8, respectively).
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.UDP):
      SoAd_GetLocalAddr() shall be called for UDP and TCP socket connections used by services offered in step 2.
  05: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1.
      SDU shall contain 3 entries and 3 IPV4 endpoint options.
  06: VP(Sd.Design.Send.queueOfferService.001):
      Entry #1 shall be an OfferService entry for service #6.
  07: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry #1 shall reference an option #1 in Option Run 1.
  08: VP(Sd.Design.Send.queueOfferService.001):
      Entry #2 shall be an OfferService entry for service #8.
  09: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry #2 shall reference options #1 and #2 in Option Run 1.
  10: VP(Sd.Design.Send.queueOfferService.004):
      Option #1 shall be an IPv4 UDP Endpoint option used by services #6 and #8.
  11: VP(Sd.Design.Send.queueOfferService.005):
      Option #2 shall be an IPv4 TCP Endpoint option used by service #8.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1173</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1703</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_EndpointOptionReuse_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>4483</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall reuse UDP or TCP endpoint option
  if matching endpoint option is already present in the option list.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() to queue OfferService entries for server services #0, #8, #1, #6, #7.
      The resulting SD message's option array shall be: [UDP0][UDP1][TCP1][UDP2],
      where endpoint option UDP1 is shared between entries #1 and #3 (OfferService for services #8 and #6, respectively)
      and endpoint option TCP1 is shared between entries #1 and #4 (OfferService for services #8 and #7, respectively).
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.UDP):
      SoAd_GetLocalAddr() shall be called for UDP and TCP socket connections used by services offered in step 2.
  05: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1.
      SDU shall contain 5 entries and 4 IPV4 endpoint options.
  06: VP(Sd.Design.Send.queueOfferService.001):
      Entry #1 shall be an OfferService entry for service #8.
  07: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry #1 shall reference options #1 and #2 from Option Run 1.
  08: VP(Sd.Design.Send.queueOfferService.001):
      Entry #3 shall be an OfferService entry for service #6.
  09: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry #3 shall reference option #1 in Option Run 1.
  10: VP(Sd.Design.Send.queueOfferService.001):
      Entry #4 shall be an OfferService entry for service #7.
  11: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry #4 shall reference option #2 in Option Run 1.
  12: VP(Sd.Design.Send.queueOfferService.004):
      Option #1 shall be an IPv4 UDP Endpoint option used by services #6 and #8.
  13: VP(Sd.Design.Send.queueOfferService.005):
      Option #2 shall be an IPv4 TCP Endpoint option used by service #7 and #8.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1173</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1704</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_EndpointOptionReuse_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>4653</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall reuse UDP/TCP endpoint option pair when
  matching option pair is already present in the option list.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() to queue OfferService entries for server services #0, #8 and #1 and
      StopOfferService entry for service #8.
      The resulting SD message's option array shall be: [UDP0][UDP1][TCP1][UDP2],
      where endpoint options UDP1 and TCP1 are shared between both entries #1 and #3
      (OfferService and StopOfferService for server service #8).
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.UDP):
      SoAd_GetLocalAddr() shall be called for UDP and TCP socket connections used by services offered in step 2.
  05: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1.
      SDU shall contain 4 entries and 4 IPV4 endpoint options.
  06: VP(Sd.Design.Send.queueOfferService.001):
      Entry #1 shall be an OfferService entry for service #8.
  07: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry #1 shall reference options #1 and #2 in Option Run 1.
  08: VP(Sd.Design.Send.queueOfferService.001):
      Entry #3 shall be a StopOfferService entry for service #8.
  09: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry #3 shall reference options #1 and #2 in Option Run 1.
  10: VP(Sd.Design.Send.queueOfferService.004):
      Option #1 shall be an IPv4 UDP Endpoint option used by service #8.
  11: VP(Sd.Design.Send.queueOfferService.005):
      Option #2 shall be an IPv4 TCP Endpoint option used by service #8.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1173</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1705</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_EndpointOptionReuse_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>4810</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall append UDP/TCP endpoint option pair when
  only matching UDP endpoint option is already present in the option list,
  but it is not the last option in the list.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() to queue OfferService entries for server services #0, #6, #1 and #8.
      The resulting SD message's option array shall be: [UDP0][UDP1][UDP2][UDP1][TCP1],
      where no endpoint option is shared between entries.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.UDP):
      SoAd_GetLocalAddr() shall be called for UDP and TCP socket connections used by services offered in step 2.
  05: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1.
      SDU shall contain 4 entries and 5 IPV4 endpoint options.
  06: VP(Sd.Design.Send.queueOfferService.001):
      Entry #1 shall be an OfferService entry for service #6.
  07: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry #1 shall reference option #1 in Option Run 1.
  08: VP(Sd.Design.Send.queueOfferService.001):
      Entry #3 shall be an OfferService entry for service #8.
  09: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry #3 shall reference options #3 and #4 in Option Run 1.
  10: VP(Sd.Design.Send.queueOfferService.004):
      Option #1 shall be an IPv4 UDP Endpoint option used by service #6 and #8.
  11: VP(Sd.Design.Send.queueOfferService.004):
      Option #3 shall be an IPv4 UDP Endpoint option used by service #6 and #8.
  12: VP(Sd.Design.Send.queueOfferService.005):
      Option #4 shall be an IPv4 TCP Endpoint option used by service #8.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1173</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1706</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_EndpointOptionReuse_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>4974</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall reuse UDP/TCP endpoint option pair when
  matching option pair is already present in the option list and the matching UDP endpoint option
  has a standalone occurrence earlier in the option list.

Test Object: 
  Sd_Send_queueOfferService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueOfferService() to queue OfferService entries for server services #6, #4, #8 and
      StopOfferService entry for service #8.
      The resulting SD message's option array shall be: [UDP0_0][UDP1][TCP1][Config][UDP0_1][TCP0_1],
      where endpoint options UDP0_1 and TCP0_1 are shared between both entries #2 and #3
      (OfferService and StopOfferService for server service #8), and UDP0_0 == UDP0_1.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00478.UDP):
      SoAd_GetLocalAddr() shall be called for UDP and TCP socket connections used by services offered in step 2.
  05: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 1.
      SDU shall contain 4 entries, 5 IPV4 endpoint options and a config option.
  06: VP(Sd.Design.Send.queueOfferService.001):
      Entry #2 shall be an OfferService entry for service #8.
  07: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry #1 shall reference options #4 and #5 from Option Run 1.
  08: VP(Sd.Design.Send.queueOfferService.001):
      Entry #3 shall be a StopOfferService entry for service #8.
  09: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.EndpointOption.002):
      Entry #3 shall reference options the same options as entry #2: options #4 and #5 in Option Run 1.
  10: VP(Sd.Design.Send.queueOfferService.004):
      Option #0 shall be an IPv4 UDP Endpoint option used by services #6 and #8.
  11: VP(Sd.Design.Send.queueOfferService.004):
      Option #4 shall be an IPv4 UDP Endpoint option used by service #8.
  12: VP(Sd.Design.Send.queueOfferService.005):
      Option #5 shall be an IPv4 TCP Endpoint option used by service #8.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1169</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1172</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueOfferService.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1173</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00478.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1707</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_ConfigOptionReuse_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>5144</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall reuse the configuration options for all
  SubscribeEventgroup entries referencing the same client service.

Test Object: 
  Sd_Send_queueSubscribeEventgroup() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroup() with parameter isStopSubscribe=FALSE
      to trigger queuing SubscribeEventgroup entry for Client #3 ConsumedEventgroup #0.
  03: Call Sd_Send_queueSubscribeEventgroup() with parameter isStopSubscribe=FALSE
      to trigger queuing SubscribeEventgroup entry for Client #3 ConsumedEventgroup #1.
  04: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  05: VP(Sd.SWS_SD_00701.UDP, Sd.SWS_SD_00701.TCP):
      SoAd_GetLocalAddr() shall be called.
  06: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.unicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 0,
      and the SDU data size shall be of correct size.
  07: VP(Sd.Design.Send.queueSubscribeEventgroup.005):
      Entry #0 Type field shall carry value 0x06 to encode SubscribeEventgroup
  08: VP(Sd.Design.Send.queueSubscribeEventgroup.001):
      The Service ID, Instance ID, Major Version and Eventgroup ID fields shall be set
      according to the instance #0 client #3 and eventgroup #0 configuration.
  09: VP(Sd.Design.Send.EndpointOption.002, Sd.Design.Send.ConfigOption.001):
      Entry #0 shall reference an Udp endpoint and configuration option.
  10: VP(Sd.Design.Send.queueSubscribeEventgroup.005):
      Entry #1 Type field shall carry value 0x06 to encode SubscribeEventgroup
  11: VP(Sd.Design.Send.queueSubscribeEventgroup.001):
      The Service ID, Instance ID, Major Version and Eventgroup ID fields shall be set
      according to the instance #0 client #3 and eventgroup #1 configuration.
  12: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.ConfigOption.Reuse):
      The entry #1 shall reference the same options as entry #0.
  13: VP(Sd.Design.Send.queueSubscribeEventgroup.004):
      The entries shall reference IPv4 UDP and TCP Endpoint options with local IP address and port.
  14: VP(Sd.SWS_SD_00701.UDP, Sd.SWS_SD_00701.TCP):
      Entries shall reference a configuration option.
  15: VP(Sd.SWS_SD_00701.UDP):
      The configuration string shall be constructed from SdServerCapabilityRecords configured for the service.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.Reuse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1163</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1174</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1177</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroup.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1178</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.unicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00701.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00701.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1708</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_ConfigOptionReuse_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>5319</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall reuse the configuration options for all
  SubscribeEventgroupAck entries referencing the same server service.

Test Object: 
  Sd_Send_queueSubscribeEventgroupAck() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueSubscribeEventgroupAck() to trigger queuing SubscribeEventgroupAck entry for server service #4, eventgroup #0.
  03: Call Sd_Send_queueSubscribeEventgroupAck() to trigger queuing SubscribeEventgroupAck entry for server service #4, eventgroup #1.
  04: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  05: VP(Sd.SWS_SD_00429):
      SoAd_GetRemoteAddr() shall be called to acquire the multicast address.
  06: VP(Sd.SWS_SD_00039):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 0.
  07: VP(Sd.Design.Send.queueSubscribeEventgroupAck.001, Sd.Design.Send.queueSubscribeEventgroupAck.003):
      Entry #0 Type field shall carry value 0x07 to encode SubscribeEventgroupAck.
  08: VP(Sd.Design.Send.queueSubscribeEventgroupAck.001):
      Entry #0 Service ID, Instance ID, Major Version and EventGroupId fields
      shall be taken from the instance #1 server #4, eventgroup #0 configuration.
  09: VP(Sd.Design.Send.EndpointOption.002, Sd.Design.Send.ConfigOption.001):
      Entry #0 shall reference Multicast and configuration option.
  10: VP(Sd.Design.Send.queueSubscribeEventgroupAck.001, Sd.Design.Send.queueSubscribeEventgroupAck.003):
      Entry #1 Type field shall carry value 0x07 to encode SubscribeEventgroupAck.
  11: VP(Sd.Design.Send.queueSubscribeEventgroupAck.001):
      Entry #1 Service ID, Instance ID, Major Version and EventGroupId fields
      shall be taken from the instance #1 server #4, eventgroup #1 configuration.
  12: VP(Sd.Design.Send.EndpointOption.001, Sd.Design.Send.ConfigOption.Reuse):
      Entry #1 shall reference the same options as entry #0.
  13: VP(Sd.Design.Send.queueSubscribeEventgroupAck.002, Sd.SWS_SD_00393, Sd.SWS_SD_00395, Sd.SWS_SD_00396):
      Entries shall reference an UDP Multicast Endpoint option set to local IP address and port.
  14: VP(Sd.Design.Send.queueSubscribeEventgroupAck.004):
      Entry shall reference a configuration option,
      constructed from SdServerCapabilityRecords configured for the service.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1179</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1180</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1181</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueSubscribeEventgroupAck.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1182</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.EndpointOption.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.Reuse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1163</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00393</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00395</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00396</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00429</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>337</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1709</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_ConfigOptionKey_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>5495</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall support multiple configuration items with same key within a
  single configuration option.

Test Object: 
  Sd_Send_queueFindService() API.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.

Test Execution: 
  01: Call Sd_Send_setupBuffer() to configure the send buffer
  02: Call Sd_Send_queueFindService() to trigger queuing FindService entry for client service #0
      where multiple SdClientCapabilityRecords are configured with the same key.
  03: Call Sd_Send_flushBuffer() to trigger sending of a SD message assembled from the send buffer content
  04: VP(Sd.SWS_SD_00039, Sd.SWS_SD_00480.multicast):
      SoAd_IfTransmit() shall be called for the PDU assigned to instance 2,
      and the SDU data size shall be of correct size.
  05: VP(Sd.Design.Send.flushBuffer.RequestID):
      SD message header shall be correctly encoded.
  06: VP(Sd.Design.Send.queueFindService.001):
      Entry Type field shall carry value 0x00 to encode FindService
  07: VP(Sd.Design.Send.queueFindService.001):
      The Service ID, Instance ID, Major Version, TTL and Minor Version fields shall be taken from the instance #2 service #0  configuration.
  08: VP(Sd.Design.Send.ConfigOption.001):
      The entry shall reference a single option from Option Run 2.
  09: VP(Sd.SWS_SD_00207):
      The Type field of the configuration option shall be set to 0x01 to indicate configuration option.
  10: VP(Sd.SWS_SD_00467):
      Entry shall reference a configuration option constructed from all SdClientCapabilityRecords configured for the service.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.queueFindService.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1167</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ConfigOption.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00467</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>372</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00480.multicast</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1710</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_AutoFlush_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>5628</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test verifies that the Sd Send Unit shall automatically transmit the content of send buffer
  when it gets full.

Test Object: 
  Send buffer automatic transmit functionality.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  SoAd_GetLocalAddr stub is configured to return local IP address.

Test Execution: 
    01: Call Sd_Send_setupBuffer() to configure the send buffer
    02: Call Sd_Send_queueOfferService() to add an entry and an option to the send buffer.
    03: VP(Sd.Design.Send.AutoFlush.001):
        Send buffer shall not be transmitted.
    04: Repeat steps 05 - 06 until buffer there is no space for more entries.
    05: Call Sd_Send_queueFindService() to add an entry to the send buffer.
    06: VP(Sd.Design.Send.AutoFlush.001):
        Send buffer shall not be transmitted.
    07: Call Sd_Send_queueFindService().
    08: VP(Sd.Design.Send.AutoFlush.001):
        SoAd_IfTransmit() shall be called to automatically transmit the content of send buffer.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.AutoFlush.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1711</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_SdMessageFormat_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>5736</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Test verifies that Sd Send unit shall correctly encode the SD message header.

Test Object: 
  Service Discovery message header format.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  Sd_ClientService_mainFunction stub is configured to queue
  a FindService entry from client 1 of service instance 0.

Test Execution: 
  01: Call Sd_MainFunction() to trigger sending of a SD message containing an OfferService entry.
  02: VP(Sd.SWS_SD_00039):
      SoAd_IfTransmit() shall be called.
  03: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.SWS_SD_00030, Sd.SWS_SD_00031, Sd.SWS_SD_00037, Sd.Design.Send.ByteOrder, Sd.SWS_SD_00032, Sd.SWS_SD_00033):
      SD message ClientID field shall have a size of 16 bits and set to 0.
  04: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.SWS_SD_00030, Sd.SWS_SD_00031, Sd.SWS_SD_00037, Sd.Design.Send.ByteOrder, Sd.SWS_SD_00032, Sd.SWS_SD_00034):
      SD message SessionID field shall have a size of 16 bits and set to 0x0001 after initialization.
  05: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00030, Sd.SWS_SD_00031, Sd.SWS_SD_00037, Sd.Design.Send.ByteOrder, Sd.SWS_SD_00140, Sd.SWS_SD_00141):
      SD message Protocol version field shall have a size of 8 bits and set to 1.
  06: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00030, Sd.SWS_SD_00031, Sd.SWS_SD_00037, Sd.Design.Send.ByteOrder, Sd.SWS_SD_00142, Sd.SWS_SD_00143):
      SD message Interface version field shall have a size of 8 bits and set to 1.
  07: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00030, Sd.SWS_SD_00031, Sd.SWS_SD_00037, Sd.Design.Send.ByteOrder, Sd.SWS_SD_00144, Sd.SWS_SD_00145):
      SD message Message type field shall have a size of 8 bits and set to 2.
  08: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00030, Sd.SWS_SD_00031, Sd.SWS_SD_00037, Sd.Design.Send.ByteOrder, Sd.SWS_SD_00146, Sd.SWS_SD_00147):
      SD message Return code field shall have a size of 8 bits and set to 0.
  09: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00030, Sd.SWS_SD_00031, Sd.SWS_SD_00037, Sd.Design.Send.ByteOrder, Sd.SWS_SD_00149):
      SD message Flags field shall have a size of 8 bits and Reboot and Unicast flags shall be set.
  10: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00150):
      The first bit of the Flags field (highest order bit) shall be Reboot Flag and the flag shall be set to '1' after reboot.
  11: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00152, Sd.SWS_SD_00153):
      The second bit of the Flag field (second highest order bit) shall be Unicast Flag and the flag shall be set to '1'.
  12: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00154):
      Undefined bits within the Flag field shall be set to '0'.
  13: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00030, Sd.SWS_SD_00031, Sd.SWS_SD_00037, Sd.Design.Send.ByteOrder, Sd.SWS_SD_00155, Sd.SWS_SD_00156):
      SD message Reserved field shall have a size of 24 bits and set to 0.
  14: VP(Sd.SWS_SD_00030, Sd.SWS_SD_00031, Sd.SWS_SD_00037, Sd.Design.Send.ByteOrder, Sd.SWS_SD_00157):
      The length of the first field of the Entries Array shall be 32 bits and it shall carry the amount of bytes of the Entries Array.
  15: VP(Sd.SWS_SD_00030, Sd.SWS_SD_00031, Sd.SWS_SD_00037, Sd.Design.Send.ByteOrder):
      The length of the first field of the Options Array shall be 32 bits and it shall carry the amount of bytes of the Options Array.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1189</internalId></provcov>
        <provcov>
          <linksto>Sd.Design.Send.ByteOrder</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1158</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00140</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00143</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00145</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00153</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1712</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_SdMessageSessionId_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>5910</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test verifies that SD message Session ID field shall be incremented every time SoAd_IfTransmit() is called,
  and that when the Session ID wraps around, the Session ID shall restart with the value 0x0001.

Test Object: 
  Service Discovery message header Session ID field handling.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  Sd_ClientService_mainFunction stub is configured to queue
  a FindService entry from client 1 of service instance 0.

Test Execution: 
  01: Call Sd_MainFunction() to trigger sending of a SD message containing a FindService entry.
  02: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.SWS_SD_00034):
      SD message SessionID field shall be 0x0001 after initialization.
  03: Repeat steps 04 - 05 until SessionID session is 0xFFFF.
  04: Call Sd_MainFunction() to trigger sending of a SD message containing a FindService entry.
  05: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.SWS_SD_00035):
      SD message SessionID field shall be incremented each iteration by 1 .
  06: Call Sd_MainFunction() to trigger sending of a SD message containing a FindService entry.
  07: VP(Sd.Design.Send.flushBuffer.RequestID, Sd.SWS_SD_00036):
      SD message SessionID field shall be set to 0x0001.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.RequestID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1188</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1713</internalId></specobject>
    <specobject>
      <id>TS_Sd_Unit_Send_SdMessageRebootFlag_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SD)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SD/test/ts5/Conformance/IN/Sd_UnitTest_Send/source/application/Tests.c</sourcefile>
      <sourceline>6030</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test verifies that the Reboot Flag shall be set to 1 for all messages after reboot
  until the Session ID of the Request ID field wraps around after which the Reboot Flag shall be set to 0.

Test Object: 
  Service Discovery message header Reboot Flag field handling.

Test Precondition: 
  Sd instance is initialized.
  Tx and Multicast Rx socket connections are assigned.
  SoAd_IfTransmit stub is configured to save SD message data for verification.
  Sd_ClientService_mainFunction stub is configured to queue
  a FindService entry from client 1 of service instance 0.

Test Execution: 
  01: Repeat steps 02 - 03 until SessionID session is 0xFFFF.
  02: Call Sd_MainFunction() to trigger sending of a SD message containing a FindService entry.
  03: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00151):
      SD message Reboot and Unicast flags shall be set.
  04: Call Sd_MainFunction() to trigger sending of a SD message containing a FindService entry.
  05: VP(Sd.Design.Send.flushBuffer.001, Sd.SWS_SD_00151):
      SD message Reboot flag shall be cleared and Unicast flag shall be set.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Sd.Design.Send.flushBuffer.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1189</internalId></provcov>
        <provcov>
          <linksto>Sd.SWS_SD_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1714</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
