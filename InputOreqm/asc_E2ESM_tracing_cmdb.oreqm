<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_E2ESM_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_Native/asc_E2ESM_requirements_ASR_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_Native/asc_E2ESM_requirements_EB_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_Native/asc_E2ESM_requirements_PRS_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_Native/asc_E2ESM_requirements_TL_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/common_req/E2ESM_VerifyStub_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_GenericImporter/reqm_LIM.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 22:06:40 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_E2ESM_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_Native/asc_E2ESM_requirements_ASR_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_Native/asc_E2ESM_requirements_EB_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_Native/asc_E2ESM_requirements_PRS_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_Native/asc_E2ESM_requirements_TL_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/common_req/E2ESM_VerifyStub_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_GenericImporter/reqm_LIM.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/2018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>feavc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swpad</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swts</regex>
      <regex>pdoc</regex>       <!-- since 10/2018: introduced for updated tracing model-->
      <regex>dev</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swadvc</regex>     <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swuvc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/2020: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>
      <regex>doc</regex>

      <!-- legacy items -->
      <regex>req</regex>        <!-- deprecated 10/2017: old swrs type -->
      <regex>dsn</regex>        <!-- deprecated 10/2017: old swdd -->
      <regex>src</regex>        <!-- deprecated 10/2017: old impl type -->
      <regex>tcs</regex>        <!-- deprecated 10/2017: replaced by swintts and swuts -->
      <regex>dsn_arch</regex>   <!-- deprecated 10/2017: old swad type -->
      <regex>man</regex>
      <regex>tso</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='req') and (../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.rejected</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.count</name>
      <description>Requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.req.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='req') or (../@doctype='swrs')) and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='swdd') or (../@doctype='dsn')) and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.doctypes</name>
      <description>Requirements can be covered only by req, dsn_arch, dev, lim, dsn, src, tcs, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req')]</applyto>
          <condition>(./needscoverage/needsobj="req" or ./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swad, dev, lim, swurs, swdd, src, swuts, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.doctypes</name>
      <description>Design elements can only be covered by dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn')]</applyto>
          <condition>(./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.src.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='src')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="tsc" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes") )</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="dsn_arch" or ./fulfilledby/ffbObj/ffbType="dsn_arch" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>



    <rule>
      <name>ERR.dsn_arch.needscoverage.doctypes</name>
      <description>Architectural design objects can only be covered by dsn_arch, dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn_arch')]</applyto>
          <condition>(./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, req, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
         </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
  </rules>
    <oreqmRules>
          <rule>
            <name>WRN.tsc.needscoverage.count</name>
            <description>Violated if there are more than 10 tsc specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='tcs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='tsc'])) &gt; 10]/furtherinfo</applyto>
                    <regex>tsc.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.req.needscoverage.count</name>
            <description>Violated if there are more than 10 req specobjects covering one specobject and no appropriate information is provided in furtherinfo, refinement on req to req are excluded. Refinements of requirements Req to Req and Req to Fea are excluded from this rule since this is tracing on the same level. The justification in furtherinfo must contain the rule name.</description>
           <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(../@doctype != 'req') and (../@doctype != 'fea') and ((count(./needscoverage/needscov[needsobj='req']/coveredby/linkedfrom)) &gt; 10)]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='req'])) &gt; 10]/furtherinfo</applyto>
                    <regex>req.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
     </rule>

        <rule>
            <name>WRN.src.needscoverage.count</name>
            <description>Violated if there are more than 10 src specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='src']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn_arch.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn_arch specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn_arch']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn_arch'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn_arch.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="req">

  <!--  GENERIC AUTOSAR REQUIREMENTS  -->

  <specobject>
      <id>ASR_E2ESM020050</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00050.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00050'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is informational only</comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020311</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00311.
      <para>
        <itemizedlist>
          <listitem>
            <para>
              <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00311'])"/>
            </para>
          </listitem>
        </itemizedlist>
      </para>
      </description>
      <comment>This requirement is informational only.</comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       Design Item SWS_E2E_00048
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00048'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
        applies,
        but the E2E library State Machine shall be built of the following files:
        E2E_SM.h and E2E_SM.c
      </para>
      <para>
        Note:
        E2E.h (common header) is shared by all profiles and exists in a different module.
      </para>
      </description>
      <releases>
         <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_04_Files</srcid><srcstatus/><internalId>151</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020215</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00215.
      <para>
        <itemizedlist>
          <listitem>
            <para>
              <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00215'])"/>
            </para>
          </listitem>
        </itemizedlist>
      </para>
      </description>
      <comment>This requirement is informational only.</comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

      <specobject>
      <id>ASR_E2ESM020115</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00115.
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00115'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_03_IncludeFiles</srcid><srcstatus/><internalId>150</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020049</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00049.
      <para>
        <itemizedlist>
          <listitem>
            <para>
              <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00049'])"/>
            </para>
          </listitem>
        </itemizedlist>
      </para>
      </description>
      <comment>This requirement is informational only.</comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00011.
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00011'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01019_SMCheckInit_InvalidInput</srcid><srcstatus/><internalId>134</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01020_SMCheck_InvalidInput_INPUTERR_NULL</srcid><srcstatus/><internalId>135</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</srcid><srcstatus/><internalId>136</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01022_SMCheck_InvalidCfg_StateInit</srcid><srcstatus/><internalId>137</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01023_SMCheck_InvalidCfg_StateValid</srcid><srcstatus/><internalId>138</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01024_SMCheck_InvalidCfg_StateInvalid</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01025_SMCheck_InvalidCfg_MinOk</srcid><srcstatus/><internalId>140</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01026_SMCheck_InvalidCfg_MaxError</srcid><srcstatus/><internalId>141</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01027_SMCheck_InvalidInput_ProfileStatus</srcid><srcstatus/><internalId>142</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01028_SMCheck_InvalidInput_WrongState</srcid><srcstatus/><internalId>143</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020216</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00216.
      <para>
        <itemizedlist>
          <listitem>
            <para>
              <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00216'])"/>
            </para>
          </listitem>
        </itemizedlist>
      </para>
      </description>
      <comment>This requirement is informational only.</comment>
     <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       Design Item SWS_E2E_00047
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00047'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
        applies,
        but only the library function E2E_SMCheck()
        shall use the specified return values,
        and the library function E2E_SMCheckInit() shall only use <code>E2E_E_INPUTERR_NULL</code>
        and <code>E2E_E_OK</code> as return values.
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01019_SMCheckInit_InvalidInput</srcid><srcstatus/><internalId>134</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01020_SMCheck_InvalidInput_INPUTERR_NULL</srcid><srcstatus/><internalId>135</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</srcid><srcstatus/><internalId>136</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01022_SMCheck_InvalidCfg_StateInit</srcid><srcstatus/><internalId>137</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01023_SMCheck_InvalidCfg_StateValid</srcid><srcstatus/><internalId>138</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01024_SMCheck_InvalidCfg_StateInvalid</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01025_SMCheck_InvalidCfg_MinOk</srcid><srcstatus/><internalId>140</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01026_SMCheck_InvalidCfg_MaxError</srcid><srcstatus/><internalId>141</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01027_SMCheck_InvalidInput_ProfileStatus</srcid><srcstatus/><internalId>142</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01028_SMCheck_InvalidInput_WrongState</srcid><srcstatus/><internalId>143</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020017</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00017.
      <para>
        <itemizedlist>
          <listitem>
            <para>
              <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00017'])"/>
            </para>
          </listitem>
        </itemizedlist>
      </para>
      </description>
      <comment>This requirement is informational only</comment>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00037.
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00037'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_02_NoConfigParams</srcid><srcstatus/><internalId>149</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>


    <specobject>
      <id>ASR_E2ESM020038</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       Design Item SWS_E2E_00038
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00038'])"/>
               </para>
            </listitem>
          </itemizedlist>
      </para>
      applies,
      but the version numbers shall be published
      as stated in [BSW00318] according to the General Requirements on Basic Software Modules
      of ASR V3.2.0 R4.0 Rev 3.
      <para>
        That is, the following version numbers shall be defined in the header file
        according to [BSW00318] (General Requirements on Basic Software Modules
        of ASR V3.2.0 R4.0 Rev 3):
        <itemizedlist>
          <listitem>E2ESM_VENDOR_ID</listitem>
          <listitem>E2ESM_AR_RELEASE_MAJOR_VERSION</listitem>
          <listitem>E2ESM_AR_RELEASE_MINOR_VERSION</listitem>
          <listitem>E2ESM_AR_RELEASE_REVISION_VERSION</listitem>
          <listitem>E2ESM_SW_MAJOR_VERSION</listitem>
          <listitem>E2ESM_SW_MINOR_VERSION</listitem>
          <listitem>E2ESM_SW_PATCH_VERSION</listitem>
        </itemizedlist>
      </para>
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_02_PublishedInformation</srcid><srcstatus/><internalId>148</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>

    <!--  E2ESM AUTOSAR SWS REQUIREMENTS  -->

    <specobject>
      <id>ASR_E2ESM020342</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>2</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00342.
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00342'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01029_SMCheck_Types</srcid><srcstatus/><internalId>144</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020668</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020343</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00343.
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00343'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01029_SMCheck_Types</srcid><srcstatus/><internalId>144</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ImpTest_01002_ProfileStatusWindow</srcid><srcstatus/><internalId>153</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.EfficientRxWindowHandling</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020669</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020344</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00344.
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00344'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01029_SMCheck_Types</srcid><srcstatus/><internalId>144</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020596</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020340</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00340.
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00340'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ComTest_01</srcid><srcstatus/><internalId>114</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01020_SMCheck_InvalidInput_INPUTERR_NULL</srcid><srcstatus/><internalId>135</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</srcid><srcstatus/><internalId>136</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01022_SMCheck_InvalidCfg_StateInit</srcid><srcstatus/><internalId>137</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01023_SMCheck_InvalidCfg_StateValid</srcid><srcstatus/><internalId>138</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01024_SMCheck_InvalidCfg_StateInvalid</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01025_SMCheck_InvalidCfg_MinOk</srcid><srcstatus/><internalId>140</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01026_SMCheck_InvalidCfg_MaxError</srcid><srcstatus/><internalId>141</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01027_SMCheck_InvalidInput_ProfileStatus</srcid><srcstatus/><internalId>142</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01028_SMCheck_InvalidInput_WrongState</srcid><srcstatus/><internalId>143</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020371</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00371.
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00371'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01020_SMCheck_InvalidInput_INPUTERR_NULL</srcid><srcstatus/><internalId>135</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020353</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>2</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00353.
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00353'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ComTest_01</srcid><srcstatus/><internalId>114</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01014_SMCheckInit_DEINITtoNODATA</srcid><srcstatus/><internalId>129</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01015_SMCheckInit_NODATAtoNODATA</srcid><srcstatus/><internalId>130</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01016_SMCheckInit_INITtoNODATA</srcid><srcstatus/><internalId>131</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01017_SMCheckInit_VALIDtoNODATA</srcid><srcstatus/><internalId>132</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01018_SMCheckInit_INVALIDtoNODATA</srcid><srcstatus/><internalId>133</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01019_SMCheckInit_InvalidInput</srcid><srcstatus/><internalId>134</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020370</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_E2ELibrary.pdf, ASR R22-11</source>
      <version>1</version>
      <description>       See AUTOSAR SWS, Design Item SWS_E2E_00370.
      <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_SWS_E2ELibrary_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_SWS_E2E_00370'])"/>
               </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR CP R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01014_SMCheckInit_DEINITtoNODATA</srcid><srcstatus/><internalId>129</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01015_SMCheckInit_NODATAtoNODATA</srcid><srcstatus/><internalId>130</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01016_SMCheckInit_INITtoNODATA</srcid><srcstatus/><internalId>131</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01017_SMCheckInit_VALIDtoNODATA</srcid><srcstatus/><internalId>132</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01018_SMCheckInit_INVALIDtoNODATA</srcid><srcstatus/><internalId>133</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01019_SMCheckInit_InvalidInput</srcid><srcstatus/><internalId>134</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.EfficientRxWindowHandling</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

  <!--  AUTOSAR CONSTRAINTS  -->

    <specobject>
      <id>EB_E2ESM023182</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The E2E Transformer MCG shall provide a file E2EXf_Cfg.h which defines
        the E2ESM_MAX_WINDOW_SIZE_VALID macro. The value of the generated macro must be used
        as a maximum allowed window size.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_04_Files</srcid><srcstatus/><internalId>151</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ImpTest_01001_MaxWindowSizeMacro</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ImpTest_02001_CompilerErrors</srcid><srcstatus/><internalId>156</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.EfficientRxWindowHandling</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>

    <specobject>
      <id>EB_E2ESM023183</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The E2E State Machine shall report a compiler error,
        if E2ESM_MAX_WINDOW_SIZE_VALID is redefined.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ImpTest_02001_CompilerErrors</srcid><srcstatus/><internalId>156</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.EfficientRxWindowHandling</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>

    <specobject>
      <id>EB_E2ESM023184</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        E2E_SMCheckInit shall return with E2E_E_INPUTERR_WRONG, if
        the passed WindowSizeValid is greater than the window size specified in
        E2ESM_MAX_WINDOW_SIZE_VALID.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ImpTest_01003_SMCheckInitWindowSizeError</srcid><srcstatus/><internalId>154</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.EfficientRxWindowHandling</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>

    <specobject>
      <id>EB_E2ESM023185</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        E2E_SMCheck shall return with E2E_E_INPUTERR_WRONG, if
        the passed WindowSizeValid is greater than the window size specified in
        E2ESM_MAX_WINDOW_SIZE_VALID.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ImpTest_01004_SMCheckWindowSizeError</srcid><srcstatus/><internalId>155</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.EfficientRxWindowHandling</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>

    <!-- File Structure -->

    <specobject>
      <id>EB_E2ESM020113</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        applies,
        but E2E_PXX.h shall be replaced by E2E_SM.h.
        E2E_SM.h additionally includes E2EXf_Cfg.h and can also include E2E_MemMap.h.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_03_IncludeFiles</srcid><srcstatus/><internalId>150</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.EfficientRxWindowHandling</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>

    <specobject>
      <id>EB_E2ESM020114</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        applies,
        but E2E_PXX.c shall be replaced by E2E_SM.c
        and E2E_SM.c additionally shall include E2E_MemMap.h.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_03_IncludeFiles</srcid><srcstatus/><internalId>150</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <!--  GENERIC AUTOSAR PRS-REQUIREMENTS  -->

    <specobject>
      <id>ASR_E2ESM020012</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00012
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00012'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
          applies,
          but the library-internal mechanisms shall detect and report errors
          implemented according to this design document.
      </description>
      <comment>
        ASR_E2ESM020012 from 4.2.1 is been replaced by this requirement from PRS
      </comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01019_SMCheckInit_InvalidInput</srcid><srcstatus/><internalId>134</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01020_SMCheck_InvalidInput_INPUTERR_NULL</srcid><srcstatus/><internalId>135</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</srcid><srcstatus/><internalId>136</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01022_SMCheck_InvalidCfg_StateInit</srcid><srcstatus/><internalId>137</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01023_SMCheck_InvalidCfg_StateValid</srcid><srcstatus/><internalId>138</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01024_SMCheck_InvalidCfg_StateInvalid</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01025_SMCheck_InvalidCfg_MinOk</srcid><srcstatus/><internalId>140</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01026_SMCheck_InvalidCfg_MaxError</srcid><srcstatus/><internalId>141</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01027_SMCheck_InvalidInput_ProfileStatus</srcid><srcstatus/><internalId>142</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01028_SMCheck_InvalidInput_WrongState</srcid><srcstatus/><internalId>143</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020673</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00673
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00673'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <furtherinfo>
        Justifying rule: WRN.swurs.needscoverage.count violation.
        This swurs is covered by more than 10 EB swurs.
      </furtherinfo>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01001_SMCheck_NODATAtoNODATAorINVALID_transitToInvalidExtended_TRUE</srcid><srcstatus/><internalId>116</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01002_SMCheck_NODATAtoNODATAorINVALID_transitToInvalidExtended</srcid><srcstatus/><internalId>117</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01003_SMCheck_NODATAtoINVALID</srcid><srcstatus/><internalId>118</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01004_SMCheck_NODATAtoINIT</srcid><srcstatus/><internalId>119</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01005_SMCheck_INITtoINIT_TransitToInvalidExtended_False</srcid><srcstatus/><internalId>120</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01006_SMCheck_INITtoVALIDTransitToInvalidExtended_False</srcid><srcstatus/><internalId>121</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</srcid><srcstatus/><internalId>122</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01008_SMCheck_VALIDtoVALID</srcid><srcstatus/><internalId>123</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01009_SMCheck_VALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01010_SMCheck_VALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>125</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01012_SMCheck_INVALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>127</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01013_SMCheck_INVALIDtoVALID</srcid><srcstatus/><internalId>128</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01014_SMCheckInit_DEINITtoNODATA</srcid><srcstatus/><internalId>129</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01015_SMCheckInit_NODATAtoNODATA</srcid><srcstatus/><internalId>130</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01016_SMCheckInit_INITtoNODATA</srcid><srcstatus/><internalId>131</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01017_SMCheckInit_VALIDtoNODATA</srcid><srcstatus/><internalId>132</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01018_SMCheckInit_INVALIDtoNODATA</srcid><srcstatus/><internalId>133</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01019_SMCheckInit_InvalidInput</srcid><srcstatus/><internalId>134</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01020_SMCheck_InvalidInput_INPUTERR_NULL</srcid><srcstatus/><internalId>135</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</srcid><srcstatus/><internalId>136</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01022_SMCheck_InvalidCfg_StateInit</srcid><srcstatus/><internalId>137</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01023_SMCheck_InvalidCfg_StateValid</srcid><srcstatus/><internalId>138</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01024_SMCheck_InvalidCfg_StateInvalid</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01025_SMCheck_InvalidCfg_MinOk</srcid><srcstatus/><internalId>140</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01026_SMCheck_InvalidCfg_MaxError</srcid><srcstatus/><internalId>141</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01027_SMCheck_InvalidInput_ProfileStatus</srcid><srcstatus/><internalId>142</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>

    <!--  E2ESM AUTOSAR PRS REQUIREMENTS  -->

    <specobject>
      <id>ASR_E2ESM020675</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00675.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00675'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <para>
            The diagram is visualized in <xref linkend="fig_E2E_SMOverview_TransitToInvalidExtended_False"/>.
          </para>
          <figure id="fig_E2E_SMOverview_TransitToInvalidExtended_False">
            <title>E2E state machine overview–[TransitToInvalidExtended == 0]</title>
            <inlinegraphic fileref="images/E2E_SMOverview_TransitToInvalidExtended_False.png"/>
          </figure>
        </para>
      </description>
      <furtherinfo>
        Justifying rule: WRN.swurs.needscoverage.count violation.
        This swurs is covered by more than 10 EB swurs.
      </furtherinfo>
      <comment>Incorporated in R22-11</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01002_SMCheck_NODATAtoNODATAorINVALID_transitToInvalidExtended</srcid><srcstatus/><internalId>117</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01003_SMCheck_NODATAtoINVALID</srcid><srcstatus/><internalId>118</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01004_SMCheck_NODATAtoINIT</srcid><srcstatus/><internalId>119</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01005_SMCheck_INITtoINIT_TransitToInvalidExtended_False</srcid><srcstatus/><internalId>120</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</srcid><srcstatus/><internalId>122</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01008_SMCheck_VALIDtoVALID</srcid><srcstatus/><internalId>123</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01009_SMCheck_VALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01010_SMCheck_VALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>125</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01012_SMCheck_INVALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>127</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01013_SMCheck_INVALIDtoVALID</srcid><srcstatus/><internalId>128</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01014_SMCheckInit_DEINITtoNODATA</srcid><srcstatus/><internalId>129</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020676</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00676.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00676'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <para>
            The diagram is visualized in <xref linkend="fig_E2E_SMOverview_TransitToInvalidExtended_True"/>.
          </para>
          <figure id="fig_E2E_SMOverview_TransitToInvalidExtended_True">
            <title>E2E state machine overview–[TransitToInvalidExtended == 1]</title>
            <inlinegraphic fileref="images/E2E_SMOverview_TransitToInvalidExtended_True.png"/>
          </figure>
        </para>
      </description>
      <furtherinfo>
        Justifying rule: WRN.swurs.needscoverage.count violation.
        This swurs is covered by more than 10 EB swurs.
      </furtherinfo>
      <comment>Incorporated in R22-11</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01002_SMCheck_NODATAtoNODATAorINVALID_transitToInvalidExtended</srcid><srcstatus/><internalId>117</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01004_SMCheck_NODATAtoINIT</srcid><srcstatus/><internalId>119</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01005_SMCheck_INITtoINIT_TransitToInvalidExtended_False</srcid><srcstatus/><internalId>120</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</srcid><srcstatus/><internalId>122</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01008_SMCheck_VALIDtoVALID</srcid><srcstatus/><internalId>123</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01009_SMCheck_VALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01010_SMCheck_VALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>125</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01012_SMCheck_INVALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>127</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01013_SMCheck_INVALIDtoVALID</srcid><srcstatus/><internalId>128</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01014_SMCheckInit_DEINITtoNODATA</srcid><srcstatus/><internalId>129</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01030_SMCheck_INITtoINIT_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>145</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01031_SMCheck_INITtoVALID_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>146</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01032_SMCheck_INITtoINVALIDandINIT_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>147</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020354</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00354.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00354'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ComTest_01</srcid><srcstatus/><internalId>114</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00345
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00345'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          The diagram is visualized in <xref linkend="fig_E2E_SMCheck"/>.
        </para>
        <figure id="fig_E2E_SMCheck">
          <title>E2E_SMCheck()</title>
          <inlinegraphic fileref="images/E2E_SMCheck.png"/>
        </figure>
      </description>
      <comment>
        Recently introduced  TransitToInvalidExtended configuration parameter
      </comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended</srcid><srcstatus/><internalId>31</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended</srcid><srcstatus/><internalId>55</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>

     <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          In case TransitToInvalidExtended==1 (true): The E2E_SMCheck() shall behave according
          to Figure <xref linkend="fig_E2E_SMCheck_TransitToInvalidExtended_True"/>.
        </para>
        <para>
          <para>
            The diagram is visualized in <xref linkend="fig_E2E_SMCheck_TransitToInvalidExtended_True"/>.
          </para>
          <figure id="fig_E2E_SMCheck_TransitToInvalidExtended_True">
            <title>E2E state machine check - [TransitToInvalidExtended == 1]</title>
            <inlinegraphic fileref="images/E2E_SMCheck_TransitToInvalidExtended_True.png"/>
          </figure>
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.1</srcid><srcstatus/><internalId>32</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.2</srcid><srcstatus/><internalId>33</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.3</srcid><srcstatus/><internalId>34</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.4</srcid><srcstatus/><internalId>35</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.5</srcid><srcstatus/><internalId>37</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.6</srcid><srcstatus/><internalId>40</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.7</srcid><srcstatus/><internalId>41</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.8</srcid><srcstatus/><internalId>43</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.9</srcid><srcstatus/><internalId>46</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.10</srcid><srcstatus/><internalId>47</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.11</srcid><srcstatus/><internalId>50</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.12</srcid><srcstatus/><internalId>53</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>

     <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_DEINIT to state E2E_SM_DEINIT through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_DEINITtoDEINIT
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The conditions for transition E2E_SM_DEINIT-&gt;E2E_SM_DEINIT is that at least one pointer
          parameter of E2E_SMCheckInit() is a NULL pointer or at least one input parameter is erroneous.
          This transition is indicated by receipt of E2E_E_INPUTERR_NULL as return value,
          if E2E_SMCheckInit() is called.
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01000_SMCheck_DEINITtoDEINIT</srcid><srcstatus/><internalId>115</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.2</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_DEINIT to state E2E_SM_NODATA through E2E_SMCheckInit()
          function shall be performed according to Transition E2E_SMCheckInit()
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The conditions for transition E2E_SM_DEINIT-&gt;E2E_SM_NODATA is that the parameters of E2E_SMCheckInit()
          must not equal NULL pointers and none of the input parameters are erroneous.
          This transition is indicated by receipt of E2E_E_OK as return value, if E2E_SMCheckInit() is called.
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01014_SMCheckInit_DEINITtoNODATA</srcid><srcstatus/><internalId>129</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.3</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_NODATA to state E2E_SM_NODATA through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_NODATAtoNODATA
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_NODATA-&gt;E2E_SM_NODATA is
          if(State-&gt;WindowTopIndex != 0) &amp;&amp; ((ProfileStatus == E2E_P_ERROR) || (ProfileStatus == E2E_P_NONEWDATA))
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01001_SMCheck_NODATAtoNODATAorINVALID_transitToInvalidExtended_TRUE</srcid><srcstatus/><internalId>116</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01002_SMCheck_NODATAtoNODATAorINVALID_transitToInvalidExtended</srcid><srcstatus/><internalId>117</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.4</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_NODATA to state E2E_SM_INIT through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_NODATAtoINIT
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_NODATA-&gt;E2E_SM_INIT is
          if(State-&gt;WindowTopIndex != 0) &amp;&amp; [ProfileStatus != E2E_P_ERROR &amp;&amp; ProfileStatus != E2E_P_NONEWDATA]
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01004_SMCheck_NODATAtoINIT</srcid><srcstatus/><internalId>119</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.4.1</srcid><srcstatus/><internalId>36</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>

     <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.4.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_NODATA to state E2E_SM_INIT through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_NODATAtoINIT
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_NODATA-&gt;E2E_SM_INIT
          if(State-&gt;WindowTopIndex != 0) &amp;&amp; [ProfileStatus != E2E_P_ERROR &amp;&amp; ProfileStatus != E2E_P_NONEWDATA]
          in TransitToInvalidExtended==1 is True then E2E_SMClearStatus() is invoked
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01004_SMCheck_NODATAtoINIT</srcid><srcstatus/><internalId>119</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.5</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_NODATA to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_NODATAtoNODATA
          described in Design Item PRS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_NODATA-&gt;E2E_SM_INVALID is State-&gt;WindowTopIndex ==0
          &amp;&amp; if (Config-&gt;ClearToInvalid == TRUE)
        </para>
        <para>
          The condition for transition E2E_SM_NODATA-&gt;E2E_SM_INVALID from
          State-&gt;WindowTopIndex ==0 changed to [(State-&gt;WindowTopIndex == 0) || (State-&gt;WindowTopindex &gt;= WindowSizeInit)]
          Incorporated Autosar RFC AR-117834
          See <ulink>https://jira.autosar.org/browse/AR-117834</ulink>.
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01003_SMCheck_NODATAtoINVALID</srcid><srcstatus/><internalId>118</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.5.1</srcid><srcstatus/><internalId>38</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.5.2</srcid><srcstatus/><internalId>39</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.5.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_NODATA to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_NODATAtoNODATA
          described in Design Item PRS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_NODATA-&gt;E2E_SM_INVALID E2E_SMClearStatus() is invoked
          if (Config-&gt;ClearToInvalid == TRUE)
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01003_SMCheck_NODATAtoINVALID</srcid><srcstatus/><internalId>118</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.5.2</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_NODATA to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_NODATAtoNODATA
          described in Design Item PRS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_NODATA-&gt;E2E_SM_INVALID E2E_SMClearRemainingStatus() is invoked
          if (Config-&gt;ClearToInvalid == FALSE)
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01003_SMCheck_NODATAtoINVALID</srcid><srcstatus/><internalId>118</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.6</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_INIT through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoINIT
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_INIT is
          ((State-&gt;ErrorCount &gt; Config-&gt;MaxErrorStateInit) || (State-&gt;OkCount &lt; Config-&gt;;MinOkStateInit))
          &amp;&amp; State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateInit) &amp;&amp;
          (((State-&gt;WindowTopIndex-1)%WindowSizeInit)+1-State-&gt;OkCount &lt; Config-&gt;WindowSizeInit - Config-&gt;MinOkStateInit)]
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01030_SMCheck_INITtoINIT_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>145</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.7</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_VALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_VALID is
          (State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateInit) &amp;&amp; (State-&gt;OkCount &gt;= Config-&gt;MinOkStateInit).
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01031_SMCheck_INITtoVALID_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>146</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01032_SMCheck_INITtoINVALIDandINIT_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>147</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.7.1</srcid><srcstatus/><internalId>42</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.7.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_VALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoVALID
          described in Design Item PRS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_VALID the function E2E_SMClearRemaining() is invoked,
          if [(State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateInit) &amp;&amp;
          (State-&gt;OkCount &gt;= Config-&gt;MinOkStateInit)] is true.
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01031_SMCheck_INITtoVALID_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>146</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01032_SMCheck_INITtoINVALIDandINIT_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>147</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.8</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoINVALID
          described in Design Item PRS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_INVALID is
          [State-&gt;ErrorCount &gt; Config-&gt;MaxErrorStateInit] ||  (((State-&gt;WindowTopIndex-1)%WindowSizeInit) +1- State-&gt;OkCount &gt;
          Config-&gt;WindowSizeInit - Config-&gt;MinOkStateInit)  &amp;&amp; if(Config-&gt;ClearToInvalid == TRUE)
        </para>
        <para>
          condition for transition E2E_SM_INIT-&gt;E2E_SM_INVALID from
          [[State-&gt;ErrorCount&gt; Config-&gt;MaxErrorStateInit || (((State-&gt;WindowTopIndex-1)%(...)] changed to
          [(State-&gt;ErrorCount &gt; Config-&gt;MaxErrorStateInit)||((State-&gt;OkCount &lt; Config-&gt;MinOkStateInit)
          &amp;&amp;((State-&gt;WindowTopIndex == 0) || (State-&gt;WindowTopIndex &gt;= Config-&gt;WindowSizeInit)) ) ||
          (State-&gt;OkCount + (WindowSizeInit - WindowTopIndex) &lt; Config-&gt;MinOkStateInit)]
          Incorporated Autosar RFC AR-117834
          See <ulink>https://jira.autosar.org/browse/AR-117834</ulink>.
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</srcid><srcstatus/><internalId>122</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.8.1</srcid><srcstatus/><internalId>44</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.8.2</srcid><srcstatus/><internalId>45</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.8.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoINVALID
          described in Design Item PRS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_INVALID the function E2E_SMClearStatus() is invoked,
          if(Config-&gt;ClearToInvalid == TRUE)
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</srcid><srcstatus/><internalId>122</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.8.2</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoINVALID
          described in Design Item PRS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_INVALID the function E2E_SMClearRemainingStatus() is invoked,
          if(Config-&gt;ClearToInvalid == False)
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</srcid><srcstatus/><internalId>122</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.9</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_VALID to state E2E_SM_VALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_VALIDtoVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_VALID-&gt;E2E_SM_VALID is
          (State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateValid) &amp;&amp; (State-&gt;OkCount &gt;= Config-&gt;MinOkStateValid).
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01008_SMCheck_VALIDtoVALID</srcid><srcstatus/><internalId>123</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.10</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_VALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_VALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_VALID-&gt;E2E_SM_INVALID is
          (State-&gt;ErrorCount &gt; Config-&gt;MaxErrorStateValid) || (State-&gt;OkCount &lt; Config-&gt;MinOkStateValid).
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01009_SMCheck_VALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01010_SMCheck_VALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.10.1</srcid><srcstatus/><internalId>48</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.10.2</srcid><srcstatus/><internalId>49</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.10.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_VALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_VALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_VALID-&gt;E2E_SM_INVALID the function E2E_SMClearStatus() is invoked
          if ([Config-&gt;ClearToInvalid == TRUE])
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01009_SMCheck_VALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01010_SMCheck_VALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.10.2</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_VALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_VALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_VALID-&gt;E2E_SM_INVALID the function E2E_SMClearStatus() is not invoked
          if ([Config-&gt;ClearToInvalid == FALSE])
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01009_SMCheck_VALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01010_SMCheck_VALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.11</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_INVALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INVALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INVALID-&gt;E2E_SM_INVALID is
          (State-&gt;ErrorCount &gt; Config-&gt;MaxErrorStateInvalid) || (State-&gt;OkCount &lt; Config-&gt;MinOkStateInvalid).
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01012_SMCheck_INVALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>127</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.11.1</srcid><srcstatus/><internalId>51</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.11.2</srcid><srcstatus/><internalId>52</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.11.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_INVALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INVALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INVALID-&gt;E2E_SM_INVALID function E2E_SMClearStatus() is invoked,
          if(ProfileStatus == E2E_P_ERROR)
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01012_SMCheck_INVALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>127</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.11.2</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_INVALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INVALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INVALID-&gt;E2E_SM_INVALID function E2E_SMClearStatus() is not invoked,
          if(ProfileStatus != E2E_P_ERROR)
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01012_SMCheck_INVALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>127</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.12</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_INVALID to state E2E_SM_VALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INVALIDtoVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INVALID-&gt;E2E_SM_INVALID is
          (State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateInvalid) &amp;&amp; (State-&gt;OkCount &gt;= Config-&gt;MinOkStateInvalid).
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01013_SMCheck_INVALIDtoVALID</srcid><srcstatus/><internalId>128</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_True_TransitToInvalidExtended.12.1</srcid><srcstatus/><internalId>54</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_True_TransitToInvalidExtended.12.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description>
        <para>
          Transition from state E2E_SM_INVALID to state E2E_SM_VALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INVALIDtoVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INVALID-&gt;E2E_SM_INVALID function E2E_SMClearRemainingStatus() is invoked,
          if (State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateInvalid) &amp;&amp; (State-&gt;OkCount &gt;= Config-&gt;MinOkStateInvalid) is TRUE.
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01013_SMCheck_INVALIDtoVALID</srcid><srcstatus/><internalId>128</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          In case of TransitToInvalidExtended==0 (false): The E2E_SMCheck() shall behave according
          to Figure <xref linkend="fig_E2E_SMCheck_TransitToInvalidExtended_False"/>.
          Incorporated from Autosar RFC AR-117604,
          See <ulink>https://jira.autosar.org/browse/AR-117604</ulink>
          applies even for refined requirements of ASR_E2ESM020345_False_TransitToInvalidExtended
        </para>
        <para>
          <para>
            The diagram is visualized in <xref linkend="fig_E2E_SMCheck_TransitToInvalidExtended_False"/>.
          </para>
          <figure id="fig_E2E_SMCheck_TransitToInvalidExtended_False">
            <title>E2E state machine check - [TransitToInvalidExtended == 0]</title>
            <inlinegraphic fileref="images/E2E_SMCheck_TransitToInvalidExtended_False.png"/>
          </figure>
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.1</srcid><srcstatus/><internalId>56</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.2</srcid><srcstatus/><internalId>57</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.3</srcid><srcstatus/><internalId>58</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.4</srcid><srcstatus/><internalId>59</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.5</srcid><srcstatus/><internalId>61</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.6</srcid><srcstatus/><internalId>62</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.7</srcid><srcstatus/><internalId>64</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.8</srcid><srcstatus/><internalId>67</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.9</srcid><srcstatus/><internalId>68</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.10</srcid><srcstatus/><internalId>71</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.11</srcid><srcstatus/><internalId>74</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_DEINIT to state E2E_SM_DEINIT through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_DEINITtoDEINIT
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The conditions for transition E2E_SM_DEINIT-&gt;E2E_SM_DEINIT is that at least one pointer
          parameter of E2E_SMCheckInit() is a NULL pointer or at least one input parameter is erroneous.
          This transition is indicated by receipt of E2E_E_INPUTERR_NULL as return value,
          if E2E_SMCheckInit() is called.
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01000_SMCheck_DEINITtoDEINIT</srcid><srcstatus/><internalId>115</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.2</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_DEINIT to state E2E_SM_NODATA through E2E_SMCheckInit()
          function shall be performed according to Transition E2E_SMCheckInit()
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The conditions for transition E2E_SM_DEINIT-&gt;E2E_SM_NODATA is that the parameters of E2E_SMCheckInit()
          must not equal NULL pointers and none of the input parameters are erroneous.
          This transition is indicated by receipt of E2E_E_OK as return value, if E2E_SMCheckInit() is called.
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01014_SMCheckInit_DEINITtoNODATA</srcid><srcstatus/><internalId>129</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.3</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_NODATA to state E2E_SM_NODATA through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_NODATAtoNODATA
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_NODATA-&gt;E2E_SM_NODATA is
          if ((ProfileStatus == E2E_P_ERROR) || (ProfileStatus == E2E_P_NONEWDATA))
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01002_SMCheck_NODATAtoNODATAorINVALID_transitToInvalidExtended</srcid><srcstatus/><internalId>117</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.4</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_NODATA to state E2E_SM_INIT through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_NODATAtoINIT
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_NODATA-&gt;E2E_SM_INIT is
          [ProfileStatus != E2E_P_ERROR &amp;&amp; ProfileStatus != E2E_P_NONEWDATA]
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01004_SMCheck_NODATAtoINIT</srcid><srcstatus/><internalId>119</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.4.1</srcid><srcstatus/><internalId>60</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.4.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_NODATA to state E2E_SM_INIT through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_NODATAtoINIT
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_NODATA-&gt;E2E_SM_INIT
          [ProfileStatus != E2E_P_ERROR &amp;&amp; ProfileStatus != E2E_P_NONEWDATA]
          in TransitToInvalidExtended==0 is True then E2E_SMClearStatus() is invoked
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01004_SMCheck_NODATAtoINIT</srcid><srcstatus/><internalId>119</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.4</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.5</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_INIT through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoINIT
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_INIT is
          ((State-&gt;ErrorCount &gt; Config-&gt;MaxErrorStateInit) || (State-&gt;OkCount &lt; Config-&gt;;MinOkStateInit))
          &amp;&amp; State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateInit)
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01005_SMCheck_INITtoINIT_TransitToInvalidExtended_False</srcid><srcstatus/><internalId>120</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.6</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_VALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_VALID is
          (State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateInit) &amp;&amp; (State-&gt;OkCount &gt;= Config-&gt;MinOkStateInit).
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01006_SMCheck_INITtoVALIDTransitToInvalidExtended_False</srcid><srcstatus/><internalId>121</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.6.1</srcid><srcstatus/><internalId>63</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.6.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_VALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoVALID
          described in Design Item PRS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_VALID the function E2E_SMClearRemaining() is invoked,
          if [(State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateInit) &amp;&amp;
          (State-&gt;OkCount &gt;= Config-&gt;MinOkStateInit)] is true.
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01006_SMCheck_INITtoVALIDTransitToInvalidExtended_False</srcid><srcstatus/><internalId>121</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.6</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.7</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoINVALID
          described in Design Item PRS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_INVALID is
          [State-&gt;ErrorCount &gt; Config-&gt;MaxErrorStateInit]
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</srcid><srcstatus/><internalId>122</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.7.1</srcid><srcstatus/><internalId>65</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.7.2</srcid><srcstatus/><internalId>66</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.7.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoINVALID
          described in Design Item PRS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_INVALID the function E2E_SMClearStatus() is invoked,
          if(Config-&gt;ClearToInvalid == True)
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</srcid><srcstatus/><internalId>122</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.7</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.7.2</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_INIT to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INITtoINVALID
          described in Design Item PRS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INIT-&gt;E2E_SM_INVALID the function E2E_SMClearRemainingStatus is invoked,
          if(Config-&gt;ClearToInvalid == FALSE)
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</srcid><srcstatus/><internalId>122</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.7</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.8</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_VALID to state E2E_SM_VALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_VALIDtoVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_VALID-&gt;E2E_SM_VALID is
          (State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateValid) &amp;&amp; (State-&gt;OkCount &gt;= Config-&gt;MinOkStateValid).
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01008_SMCheck_VALIDtoVALID</srcid><srcstatus/><internalId>123</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.9</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_VALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_VALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_VALID-&gt;E2E_SM_INVALID is
          (State-&gt;ErrorCount &gt; Config-&gt;MaxErrorStateValid) || (State-&gt;OkCount &lt; Config-&gt;MinOkStateValid).
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01009_SMCheck_VALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01010_SMCheck_VALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.9.1</srcid><srcstatus/><internalId>69</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.9.2</srcid><srcstatus/><internalId>70</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.9.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_VALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_VALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_VALID-&gt;E2E_SM_INVALID the function E2E_SMClearStatus() is invoked
          if ([Config-&gt;ClearToInvalid == TRUE])
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01009_SMCheck_VALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01010_SMCheck_VALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.9</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.9.2</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_VALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_VALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_VALID-&gt;E2E_SM_INVALID the function E2E_SMClearStatus() is not invoked
          if ([Config-&gt;ClearToInvalid == FALSE])
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01009_SMCheck_VALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01010_SMCheck_VALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.9</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.10</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_INVALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INVALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INVALID-&gt;E2E_SM_INVALID is
          (State-&gt;ErrorCount &gt; Config-&gt;MaxErrorStateInvalid) || (State-&gt;OkCount &lt; Config-&gt;MinOkStateInvalid).
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01012_SMCheck_INVALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>127</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.10.1</srcid><srcstatus/><internalId>72</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.10.2</srcid><srcstatus/><internalId>73</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.10.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_INVALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INVALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INVALID-&gt;E2E_SM_INVALID function E2E_SMClearStatus() is invoked,
          if(ProfileStatus == E2E_P_ERROR)
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01012_SMCheck_INVALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>127</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.10</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.10.2</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_INVALID to state E2E_SM_INVALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INVALIDtoINVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INVALID-&gt;E2E_SM_INVALID function E2E_SMClearStatus is not invoked,
          (ProfileStatus != E2E_P_ERROR)
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01012_SMCheck_INVALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>127</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.10</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.11</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_INVALID to state E2E_SM_VALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INVALIDtoVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INVALID-&gt;E2E_SM_INVALID is
          (State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateInvalid) &amp;&amp; (State-&gt;OkCount &gt;= Config-&gt;MinOkStateInvalid).
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01013_SMCheck_INVALIDtoVALID</srcid><srcstatus/><internalId>128</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020345_False_TransitToInvalidExtended.11.1</srcid><srcstatus/><internalId>75</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020345_False_TransitToInvalidExtended.11.1</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description>
        <para>
          Transition from state E2E_SM_INVALID to state E2E_SM_VALID through E2E_SMCheck()
          function shall be performed according to Transition E2E_SMCheck_INVALIDtoVALID
          described in Design Item SWS_E2E_00345.
        </para>
        <para>
          The condition for transition E2E_SM_INVALID-&gt;E2E_SM_INVALID function E2E_SMClearRemainingStatus() is invoked,
          if (State-&gt;ErrorCount &lt;= Config-&gt;MaxErrorStateInvalid) &amp;&amp; (State-&gt;OkCount &gt;= Config-&gt;MinOkStateInvalid) is TRUE.
        </para>
      </description>
      <releases>
         <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01013_SMCheck_INVALIDtoVALID</srcid><srcstatus/><internalId>128</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.11</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020466</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00466
        <para>
          <itemizedlist>
            <listitem>
            <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00466'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Applies,
          If E2E_SMCheck() is called in the state E2E_SM_NODATA, E2E_SMAddStatus() is invoked.
          Unfortunately there is no window size for E2E_SM_NODATA. Added condition for SMState==E2E_SM_NODATA
          Incorporated Autosar RFC AR-111609 'Undefined window size for E2E_SM_NODATA',
          See <ulink>https://jira.autosar.org/browse/AR-111609</ulink>.
        </para>
        <para>
          <para>
            The diagram is visualized in <xref linkend="fig_E2E_SMAddStatus"/>.
          </para>
          <figure id="fig_E2E_SMAddStatus">
            <title>E2E_SMAddStatus()</title>
            <inlinegraphic fileref="images/E2E_SMAddStatus.png"/>
          </figure>
        </para>
      </description>
      <furtherinfo>
        Justifying rule: WRN.swurs.needscoverage.count violation.
        This swurs is covered by more than 10 EB swurs.
      </furtherinfo>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01005_SMCheck_INITtoINIT_TransitToInvalidExtended_False</srcid><srcstatus/><internalId>120</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01006_SMCheck_INITtoVALIDTransitToInvalidExtended_False</srcid><srcstatus/><internalId>121</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</srcid><srcstatus/><internalId>122</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01008_SMCheck_VALIDtoVALID</srcid><srcstatus/><internalId>123</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01009_SMCheck_VALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01010_SMCheck_VALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>125</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoINVALID_MaxErrorExceeded</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01012_SMCheck_INVALIDtoINVALID_MinOkNotReached</srcid><srcstatus/><internalId>127</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01013_SMCheck_INVALIDtoVALID</srcid><srcstatus/><internalId>128</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01030_SMCheck_INITtoINIT_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>145</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01031_SMCheck_INITtoVALID_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>146</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01032_SMCheck_INITtoINVALIDandINIT_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>147</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.EfficientRxWindowHandling</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020375</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00375.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00375'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <para>
            The diagram is visualized in <xref linkend="fig_E2E_SMCheckInit"/>.
          </para>
          <figure id="fig_E2E_SMCheckInit">
            <title>E2E_SMCheckInit()</title>
            <inlinegraphic fileref="images/E2E_SMCheckInit.png"/>
          </figure>
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01014_SMCheckInit_DEINITtoNODATA</srcid><srcstatus/><internalId>129</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01015_SMCheckInit_NODATAtoNODATA</srcid><srcstatus/><internalId>130</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01016_SMCheckInit_INITtoNODATA</srcid><srcstatus/><internalId>131</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01017_SMCheckInit_VALIDtoNODATA</srcid><srcstatus/><internalId>132</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01018_SMCheckInit_INVALIDtoNODATA</srcid><srcstatus/><internalId>133</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020467</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>2</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00467.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00467'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <para>
            The diagram is visualized in <xref linkend="fig_E2E_SMClearStatus"/>.
          </para>
          <figure id="fig_E2E_SMClearStatus">
            <title>E2E_SMClearStatus(State,Config)</title>
            <inlinegraphic fileref="images/E2E_SMClearStatus.png"/>
          </figure>
        </para>
      </description>
      <comment>Altered functional parameters in R22-11</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01014_SMCheckInit_DEINITtoNODATA</srcid><srcstatus/><internalId>129</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01015_SMCheckInit_NODATAtoNODATA</srcid><srcstatus/><internalId>130</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01016_SMCheckInit_INITtoNODATA</srcid><srcstatus/><internalId>131</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01017_SMCheckInit_VALIDtoNODATA</srcid><srcstatus/><internalId>132</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01018_SMCheckInit_INVALIDtoNODATA</srcid><srcstatus/><internalId>133</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.EfficientRxWindowHandling</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020607</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00607.
        <para>
          <itemizedlist>
            <listitem>
            <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00607'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Applies,
          Transition from E2E_SM_NODATA to E2E_SM_INVALID the function E2E_SMClearRemaining() is invoked,
          E2E_SMClearRemaining() needs the window size of the current state (E2E_SM_NODATA).
          Added WindowSizeValid if state-&gt;SMState equals E2E_SM_VALID or E2E_SM_NODATA
          Incorporated Autosar RFC AR-111609 'Undefined window size for E2E_SM_NODATA'
          see <ulink>https://jira.autosar.org/browse/AR-111609</ulink>
        </para>
        <para>
          <para>
            The diagram is visualized in <xref linkend="fig_E2E_SMClearRemainingStatus"/>.
          </para>
          <figure id="fig_E2E_SMClearRemainingStatus">
            <title>E2E_SMClearRemainingStatus(Config,State)</title>
            <inlinegraphic fileref="images/E2E_SMClearRemainingStatus.png"/>
          </figure>
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01003_SMCheck_NODATAtoINVALID</srcid><srcstatus/><internalId>118</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01006_SMCheck_INITtoVALIDTransitToInvalidExtended_False</srcid><srcstatus/><internalId>121</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</srcid><srcstatus/><internalId>122</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01013_SMCheck_INVALIDtoVALID</srcid><srcstatus/><internalId>128</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01031_SMCheck_INITtoVALID_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>146</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01032_SMCheck_INITtoINVALIDandINIT_TransitToInvalidExtended_True</srcid><srcstatus/><internalId>147</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020668</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00668.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00668'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>
        Incorporated in R22-11,
        MinOkStateInit and transitToInvalidExtended is covered in requirement SWS_E2E_00342.
      </comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020342</srcid><srcstatus/><internalId>12</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020669</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00669.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00669'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>
        Incorporated in R22-11,
        SMState the type is E2E_SMStateType covered in requirement SWS_E2E_00343.
      </comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020343</srcid><srcstatus/><internalId>13</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020596</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00596.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00596'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>
        Incorporated in R22-11,
        Reserved is covered in requirement SWS_E2E_00344.
      </comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020344</srcid><srcstatus/><internalId>14</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020598</id>
      <status>rejected</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00598.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00598'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is informational only, implemented in profiles</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020641</id>
      <status>rejected</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00641.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00641'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is informational only, implemented in profiles</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020599</id>
      <status>rejected</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00599.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00599'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is informational only, implemented in profiles</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020670</id>
      <status>rejected</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00670.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00670'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is informational only, implemented in profiles</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020600</id>
      <status>rejected</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00600.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00600'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is informational only, implemented in profiles</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020601</id>
      <status>rejected</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00601.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00601'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is informational only, implemented in profiles</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020602</id>
      <status>rejected</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00602.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00602'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is informational only, implemented in profiles</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020603</id>
      <status>rejected</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00603.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00603'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is informational only, implemented in profiles</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020850</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00850.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00850'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is added in R22-11, profile 8 not yet implemented</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.E2E_SMStatusMappings</srcid><srcstatus/><internalId>111</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020604</id>
      <status>rejected</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00604.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00604'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is informational only, implemented in profiles</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020605</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00605.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00605'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is added in R22-11, profile 22 not yet implemented</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.E2E_SMStatusMappings</srcid><srcstatus/><internalId>111</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020738</id>
      <status>rejected</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00738.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00738'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is informational only, implemented in profiles</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020826</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00826.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00826'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is added in R22-11, profile 4m not yet implemented</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.E2E_SMStatusMappings</srcid><srcstatus/><internalId>111</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM020827</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_00827.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_00827'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>This requirement is added in R22-11, profile 7m not yet implemented</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.E2ESM.E2E_SMStatusMappings</srcid><srcstatus/><internalId>111</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>

   <!--  E2E State Machine Settings  -->

    <specobject>
      <id>ASR_E2ESM023176</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_CONSTR_03176
        The value of the windowSizeValid attribute shall be greater or equal to 1.
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_CONSTR_03176'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
       <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</srcid><srcstatus/><internalId>136</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM023177</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_CONSTR_03177
        The following restriction shall be respected:
        maxErrorStateValid &gt;= maxErrorStateInit &gt;= maxErrorStateInvalid &gt;= 0
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_CONSTR_03177'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</srcid><srcstatus/><internalId>136</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01026_SMCheck_InvalidCfg_MaxError</srcid><srcstatus/><internalId>141</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM023178</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_CONSTR_03178
        The following restriction shall be respected:
        1 &lt;= minOkStateValid &lt;= minOkStateInit &lt;= minOkStateInvalid
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_CONSTR_03178'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01025_SMCheck_InvalidCfg_MinOk</srcid><srcstatus/><internalId>140</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM023179</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_CONSTR_03179
        The following restriction shall be respected:
        minOkStateInit + maxErrorStateInit &lt;= WindowSizeInit
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_CONSTR_03179'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</srcid><srcstatus/><internalId>136</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01022_SMCheck_InvalidCfg_StateInit</srcid><srcstatus/><internalId>137</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM023180</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_CONSTR_03180
        The following restriction shall be respected:
        minOkStateValid + maxErrorStateValid &lt;= windowSizeValid
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_CONSTR_03180'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</srcid><srcstatus/><internalId>136</internalId></linkedfrom><linkedfrom><srcid>TS_E2ESM_ConTest_01023_SMCheck_InvalidCfg_StateValid</srcid><srcstatus/><internalId>138</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM023181</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_CONSTR_03181
        The following restriction shall be respected:
        minOkStateInvalid + maxErrorStateInvalid &lt;= windowSizeInvalid
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_CONSTR_03181'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01024_SMCheck_InvalidCfg_StateInvalid</srcid><srcstatus/><internalId>139</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM026301</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_CONSTR_06301
        The following restriction shall be respected:
        WindowSizeInvalid &lt;= WindowSizeValid
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_CONSTR_06301'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>Incorporated in R22-11</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</srcid><srcstatus/><internalId>136</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>

    <specobject>
      <id>ASR_E2ESM026302</id>
      <status>approved</status>
      <source>AUTOSAR_PRS_E2EProtocol.pdf, ASR R22-11</source>
      <version>1</version>
      <description> See AUTOSAR PRS, Design Item PRS_E2E_CONSTR_06302
        The following restriction shall be respected:
        windowSizeInit &lt;= WindowSizeValid
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../../asc_E2ESEXfmgmt/doc/SwRS/customer_requirements/AUTOSAR_PRS_E2EProtocol_ASR_R22-11.xml" xpointer="xpointer(//specobject[id='CREQ_ASR22-11_PRS_E2E_CONSTR_06302'])"/>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </description>
      <comment>Incorporated in R22-11</comment>
      <releases>
        <release>AUTOSAR FO R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</srcid><srcstatus/><internalId>136</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <!--
        Top Level requirements motivated by the Product Description
    -->

    <specobject>
      <id>E2ESM.top.001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The E2ESM module shall aggregate a reception state out of several data verification
        cycles within a reception window.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020038</srcid><srcstatus/><internalId>11</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020340</srcid><srcstatus/><internalId>15</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020353</srcid><srcstatus/><internalId>17</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020370</srcid><srcstatus/><internalId>18</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020675</srcid><srcstatus/><internalId>27</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020676</srcid><srcstatus/><internalId>28</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020354</srcid><srcstatus/><internalId>29</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345</srcid><srcstatus/><internalId>30</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020466</srcid><srcstatus/><internalId>76</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020375</srcid><srcstatus/><internalId>77</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020467</srcid><srcstatus/><internalId>78</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020607</srcid><srcstatus/><internalId>79</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020850</srcid><srcstatus/><internalId>91</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020605</srcid><srcstatus/><internalId>93</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020826</srcid><srcstatus/><internalId>95</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020827</srcid><srcstatus/><internalId>96</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>

    <specobject>
      <id>E2ESM.top.002</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The E2ESM module shall provide a possibility to configure the reception window.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020675</srcid><srcstatus/><internalId>27</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020466</srcid><srcstatus/><internalId>76</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM023176</srcid><srcstatus/><internalId>97</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM023177</srcid><srcstatus/><internalId>98</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM023178</srcid><srcstatus/><internalId>99</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM023179</srcid><srcstatus/><internalId>100</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM023180</srcid><srcstatus/><internalId>101</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM023181</srcid><srcstatus/><internalId>102</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM026301</srcid><srcstatus/><internalId>103</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM026302</srcid><srcstatus/><internalId>104</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>

    <!--
        Top Level requirements motivated by module specific behavior
    -->

    <specobject>
      <id>E2ESM.top.003</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The E2ESM module shall check input parameter for validity.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020047</srcid><srcstatus/><internalId>8</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020371</srcid><srcstatus/><internalId>16</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020370</srcid><srcstatus/><internalId>18</internalId></linkedfrom><linkedfrom><srcid>EB_E2ESM023184</srcid><srcstatus/><internalId>21</internalId></linkedfrom><linkedfrom><srcid>EB_E2ESM023185</srcid><srcstatus/><internalId>22</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020012</srcid><srcstatus/><internalId>25</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>

    <specobject>
      <id>E2ESM.top.004</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The E2ESM module shall implement error indication and error states
        to indicate malfunction to the SWC.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020011</srcid><srcstatus/><internalId>6</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020344</srcid><srcstatus/><internalId>14</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020340</srcid><srcstatus/><internalId>15</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020371</srcid><srcstatus/><internalId>16</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020353</srcid><srcstatus/><internalId>17</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020370</srcid><srcstatus/><internalId>18</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020673</srcid><srcstatus/><internalId>26</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020345</srcid><srcstatus/><internalId>30</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020668</srcid><srcstatus/><internalId>80</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>

    <specobject>
      <id>E2ESM.top.005</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The E2ESM module shall modularly structure static implementation files and data types.
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ASR_E2ESM020048</srcid><srcstatus/><internalId>2</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020115</srcid><srcstatus/><internalId>4</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020037</srcid><srcstatus/><internalId>10</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020342</srcid><srcstatus/><internalId>12</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020343</srcid><srcstatus/><internalId>13</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020344</srcid><srcstatus/><internalId>14</internalId></linkedfrom><linkedfrom><srcid>EB_E2ESM023182</srcid><srcstatus/><internalId>19</internalId></linkedfrom><linkedfrom><srcid>EB_E2ESM023183</srcid><srcstatus/><internalId>20</internalId></linkedfrom><linkedfrom><srcid>EB_E2ESM020113</srcid><srcstatus/><internalId>23</internalId></linkedfrom><linkedfrom><srcid>EB_E2ESM020114</srcid><srcstatus/><internalId>24</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020668</srcid><srcstatus/><internalId>80</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020669</srcid><srcstatus/><internalId>81</internalId></linkedfrom><linkedfrom><srcid>ASR_E2ESM020596</srcid><srcstatus/><internalId>82</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>E2ESM.EB.Interface.Consistency</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        The module shall provide a mechanism to guarantee consistency of interfaces and
        types between its implementation and its code stub.
       </description>
       <comment>
        The code stub of a module shall provide the same external view than the module itself.
        This is mandatory because unit test of modules test against the code stubs of
        adjacent modules. Inconsistent stubs may result in the situation that incompatible
        interfaces are not detected as unit test stage.
       </comment>
       <verifycrit>
        Create a compile test with two permutations that call all interfaces of a module
        (in both permutations).
        p0: Behave like a regular compile test; call the module generator and compile against
        the implementation of the module.
        p1: Do not generate module code and do not compile the implementation of the module.
        Instead the module shall be replaced with its own code stub.
       </verifycrit>
       <needscoverage>
          <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_E2ESM_VerifyCodeStub</srcid><srcstatus/><internalId>113</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.E2ESM.E2E_SMStatusMappings</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020850</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020605</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020826</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020827</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>
  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.E2ESM.EfficientRxWindowHandling</id>
      <status>approved</status>
      <source>EB limitations</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/doc/public/releasenotes/Enhancements_reqm.xml</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020343</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020467</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020370</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>EB_E2ESM020113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>EB_E2ESM023182</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>EB_E2ESM023183</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>EB_E2ESM023184</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>EB_E2ESM023185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_E2ESM_VerifyCodeStub</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/build/reqm/common_req/E2ESM_VerifyStub_testspec.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the code stub of the module is consistent with the
    implementation.
  
Test Object: 
    Relocatable post-build configuration macros generation.
  
Test Precondition: 
    Permutation [VerifyStub == true]:
      - Unit test contains its own code stub
      - Module is excluded from generation and compilation
    Permutation [VerifyStub == false]:
      - unit test excludes its own code stub
  
Test Execution: 
    01: Invoke all module APIs
    02: VP(E2ESM.EB.Interface.Consistency):
        Unit test compiles (implicitly tested)
  
Test Input: 
  
Test Output: 
    Test is correctly generated and compiled.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>E2ESM.EB.Interface.Consistency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_E2ESM_ComTest_01</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Compile/IN/E2ESM_ComTest_01/source/application/E2ESM_ComTest_01.c</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The End-to-End State Machine Module shall be translated.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 

    01: Call E2E_SMCheck().
    02: VP(ASR_E2ESM020340,ASR_E2ESM020354):
        E2E_SMCheck() shall be translated.
    03: Call E2E_SMCheckInit().
    04: VP(ASR_E2ESM020353,ASR_E2ESM020354):
        E2E_SMCheckInit() shall be translated.


Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020353</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020354</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_E2ESM_ConTest_01000_SMCheck_DEINITtoDEINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>449</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_DEINIT to E2E_SM_DEINIT of the E2E State
     Machine for the function E2E_SMCheck().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through all possible values of
        - MinOkStateInit, MinOkStateValid, MinOkStateInvalid (SMConfig)
        - MaxErrorStateInit, MaxErrorStateValid, MaxErrorStateInvalid (SMConfig)
        - WindowSizeInit, WindowSizeInValid (SMConfig)
        - WindowTopIndex, OkCount, ErrorCount (SMCheckState)
        - ProfileStatus
        - For even values of WindowTopIndex transitToInvalidExtended sent as FALSE else TRUE.
    01: Set initial E2ESM state to E2E_SM_DEINIT.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_False_TransitToInvalidExtended.1)
          (ASR_E2ESM020345_True_TransitToInvalidExtended.1):
        E2E_SMCheck() returns E2E_E_WRONGSTATE.
        SMState is E2E_SM_DEINIT.
        E2E_SMAddStatus step is not performed.
        ( All elements of window are unchanged.
          WindowTopIndex is unchanged.
          OkCount is unchanged.
          ErrorCount is unchanged. )

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_DEINIT to E2E_SM_DEINIT)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01001_SMCheck_NODATAtoNODATAorINVALID_transitToInvalidExtended_TRUE</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>608</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_NODATA to E2E_SM_NODATA or E2E_SM_INVALID of
     the E2E State Machine for the function E2E_SMCheck().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through all possible values of
        - MinOkStateInit, MinOkStateValid, MinOkStateInvalid (SMConfig)
        - MaxErrorStateInit, MaxErrorStateValid, MaxErrorStateInvalid (SMConfig)
        - WindowSizeInit, WindowSizeInValid (SMConfig)
        - WindowTopIndex, OkCount, ErrorCount (SMCheckState)
        - For even values of WindowTopIndex ClearToInvalid sent as FALSE else TRUE.
    01: Set initial E2ESM state to E2E_SM_NODATA.
        Set ProfileStatus to E2E_P_ERROR (every first iteration) or
        E2E_P_NONEWDATA (every second iteration).
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.3):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_DEINIT.
        E2E_SMAddStatus step is not performed.
        ( All elements of window are unchanged.
          WindowTopIndex is unchanged.
          OkCount is unchanged.
          ErrorCount is unchanged. )

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from :
    E2E_SM_NODATA to E2E_SM_NODATA if ((transitToInvalidExtended == TRUE and WindowTopIndex == 0U)
        || (WindowTopIndex &gt;= WindowSizeInit)) else the state goes to E2E_SM_INVALID )

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01002_SMCheck_NODATAtoNODATAorINVALID_transitToInvalidExtended</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>812</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_NODATA to E2E_SM_NODATA or E2E_SM_INVALID of
     the E2E State Machine for the function E2E_SMCheck(). for transitToInvalidExtended values i.e
     TRUE and FALSE and WindowTopIndex is &amp;lt; WindowSizeInit.
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through all possible values of
        - MinOkStateInit, MinOkStateValid, MinOkStateInvalid (SMConfig)
        - MaxErrorStateInit, MaxErrorStateValid, MaxErrorStateInvalid (SMConfig)
        - WindowSizeInit, WindowSizeInValid (SMConfig)
        - WindowTopIndex, OkCount, ErrorCount (SMCheckState)
        - For even values of WindowTopIndex transitToInvalidExtended sent as FALSE else TRUE.
    01: Set initial E2ESM state to E2E_SM_NODATA.
        Set ProfileStatus to E2E_P_ERROR (every first iteration) or
        E2E_P_NONEWDATA (every second iteration).
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.3)
          (ASR_E2ESM020345_False_TransitToInvalidExtended.3):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_DEINIT.
        E2E_SMAddStatus step is not performed.
        ( All elements of window are unchanged.
          WindowTopIndex is unchanged.
          OkCount is unchanged.
          ErrorCount is unchanged. )

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from :
    E2E_SM_NODATA to E2E_SM_NODATA if ((transitToInvalidExtended == TRUE and WindowTopIndex == 0U)
        || (WindowTopIndex &gt;= WindowSizeInit)) else the state goes to E2E_SM_INVALID )

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.3</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01003_SMCheck_NODATAtoINVALID</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>995</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_NODATA to E2E_SM_INVALID of
     the E2E State Machine for the function E2E_SMCheck().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through all possible values of ProfileStatus
        except E2E_P_ERROR and E2E_P_NONEWDATA (transition to E2E_SM_NODATA) and
        E2E_P_NOTAVAILABLE (wrong input).
        MinOkStateInit, MinOkStateValid, MinOkStateInvalid (SMConfig)
        MaxErrorStateInit, MaxErrorStateValid, MaxErrorStateInvalid (SMConfig)
        WindowSizeInit, WindowSizeInValid (SMConfig)
        For even values of WindowTopIndex ClearToInvalid sent as FALSE else TRUE.
    01: Set initial E2ESM state to E2E_SM_NODATA.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.5):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_INVALID.
        E2E_SMAddStatus step is performed.
    03: VP : SMCheckState members are changed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_NODATA to E2E_SM_INVALID)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.5.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.5.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020607</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01004_SMCheck_NODATAtoINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>1181</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_NODATA to E2E_SM_INIT of
     the E2E State Machine for the function E2E_SMCheck().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through all possible values of ProfileStatus
        except E2E_P_ERROR and E2E_P_NONEWDATA (transition to E2E_SM_NODATA) and
        E2E_P_NOTAVAILABLE (wrong input).
        MinOkStateInit, MinOkStateValid, MinOkStateInvalid (SMConfig)
        MaxErrorStateInit, MaxErrorStateValid, MaxErrorStateInvalid (SMConfig)
        WindowSizeInit, WindowSizeInValid (SMConfig)
        For even values of WindowTopIndex transitToInvalidExtended and ClearToInvalid sent as FALSE else TRUE.
    01: Set initial E2ESM state to E2E_SM_NODATA.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.4)
          (ASR_E2ESM020345_False_TransitToInvalidExtended.4):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_INIT.
        E2E_SMAddStatus step is performed.
    03: VP : SMCheckState members are changed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_NODATA to E2E_SM_INIT)
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.4.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.4</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.4.1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01005_SMCheck_INITtoINIT_TransitToInvalidExtended_False</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>1339</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_INIT to E2E_SM_INIT of
     the E2E State Machine for the function E2E_SMCheck() when transitToInvaledExtended is FALSE.
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - ErrorCount values 0..(MaxErrorStateInit - 1) out of which some are undefined values
        - ErrorCount = MaxErrorStateInit covered when ProfileStatus = E2E_P_ERROR
        - UndefinedCount values 0..ErrorCount
        - OkCount values 0..(MinOkStateInit - 2)
        - OkCount = (MinOkStateInit - 1) covered when ProfileStatus = E2E_P_OK
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries

    01: Set initial E2ESM state to E2E_SM_INIT.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_False_TransitToInvalidExtended.5):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_INIT.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_INIT to E2E_SM_INIT)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.5</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01006_SMCheck_INITtoVALIDTransitToInvalidExtended_False</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>1642</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_INIT to E2E_SM_VALID of
     the E2E State Machine for the function E2E_SMCheck(), when transitToInvaledExtended is FALSE.
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - ErrorCount values 0..(MaxErrorStateInit - 1) out of which some are undefined values
        - ErrorCount = MaxErrorStateInit covered when ProfileStatus = E2E_P_ERROR
        - UndefinedCount values 0..ErrorCount
        - OkCount values (MinOkStateInit + 1)..(WindowSizeValid - ErrorCount)
        - OkCount = MinOkStateInit covered when status from WindowTopIndex is E2E_P_OK and
          is overwritten by different value
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries
        - Apart from WindowSizeInit value other values in WindowSizeValid are ignored based on
          WindowTopIndex value.

    01: Set initial E2ESM state to E2E_SM_INIT.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_False_TransitToInvalidExtended.6):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_VALID.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_INIT to E2E_SM_VALID)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.6</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.6.1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020607</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01007_SMCheck_INITtoINVALID</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>1983</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_INIT to E2E_SM_INVALID of
     the E2E State Machine for the function E2E_SMCheck().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - ErrorCount values (MaxErrorStateInit + 4)..WindowSizeValid
          out of which some are undefined values
        - ErrorCount = (MaxErrorStateInit + 1) covered when status at WindowTopIndex is E2E_P_ERROR
          or undefined and is overwritten by other defined status value
        - UndefinedCount values 0..ErrorCount
        - OkCount values 0..(WindowSizeValid - ErrorCount)
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries
        - For even values of WindowTopIndex transitToInvalidExtended and ClearToInvalid sent as
          FALSE else TRUE.
        - Apart from WindowSizeInit value other values in WindowSizeValid are ignored based on
          WindowTopIndex value.

    01: Set initial E2ESM state to E2E_SM_INIT.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.8)
          (ASR_E2ESM020345_False_TransitToInvalidExtended.7):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_INVALID.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_INIT to E2E_SM_INVALID)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.8.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.8.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.7</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.7.1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.7.2</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020607</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01008_SMCheck_VALIDtoVALID</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>2361</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_VALID to E2E_SM_VALID of
     the E2E State Machine for the function E2E_SMCheck().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - ErrorCount values 0..(MaxErrorStateValid - 1) out of which some are undefined values
        - ErrorCount = MaxErrorStateValid covered when ProfileStatus = E2E_P_ERROR
        - UndefinedCount values 0..ErrorCount
        - OkCount values (MinOkStateValid + 1)..(WindowSizeValid - ErrorCount)
        - OkCount = MinOkStateValid covered when status from WindowTopIndex is E2E_P_OK and
          is overwritten by different value
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries
        - For even values of WindowTopIndex transitToInvalidExtended sent as FALSE else TRUE.

    01: Set initial E2ESM state to E2E_SM_VALID.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.9)
          (ASR_E2ESM020345_False_TransitToInvalidExtended.8):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_VALID.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_VALID to E2E_SM_VALID)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.8</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01009_SMCheck_VALIDtoINVALID_MaxErrorExceeded</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>2646</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_VALID to E2E_SM_INVALID of
     the E2E State Machine for the function E2E_SMCheck() for OkCount &amp;gt;= MinOkStateValid
     and ErrorCount &amp;gt; MaxErrorStateValid.
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - ErrorCount values (MaxErrorStateValid + 3)..WindowSizeValid
          out of which some are undefined values
        - ErrorCount = (MaxErrorStateValid + 1) covered when status at WindowTopIndex is
          E2E_P_ERROR or undefined and is overwritten by other defined status value
        - UndefinedCount values 0..ErrorCount
        - OkCount values 0..(WindowSizeValid - ErrorCount)
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries
        - For even values of WindowTopIndex transitToInvalidExtended and ClearToInvalid are sent as FALSE else TRUE.

    01: Set initial E2ESM state to E2E_SM_VALID.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.10)
          (ASR_E2ESM020345_False_TransitToInvalidExtended.9):
        E2E_SMCheck() returns E2E_E_OK.
        and SMCheckState.SMState is E2E_SM_INVALID.
        SMState is E2E_SM_INVALID.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_VALID to E2E_SM_INVALID)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.10.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.10.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.9</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.9.1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.9.2</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01010_SMCheck_VALIDtoINVALID_MinOkNotReached</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>2964</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_VALID to E2E_SM_INVALID of
     the E2E State Machine for the function E2E_SMCheck() for OkCount &amp;lt; MinOkStateValid
     and ErrorCount &lt;= MaxErrorStateValid.
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - OkCount values 0..(MinOkStateValid - 2)
        - OkCount = (MinOkStateValid - 1) covered when actual profile status is E2E_P_OK
        - ErrorCount values 0..(MaxErrorStateValid - 1)
          out of which some are undefined values
        - ErrorCount = MaxErrorStateValid covered when actual profile status is E2E_P_ERROR
        - UndefinedCount values 0..ErrorCount
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries
        - For even values of WindowTopIndex transitToInvalidExtended and ClearToInvalid sent as FALSE else TRUE.

    01: Set initial E2ESM state to E2E_SM_VALID.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.10)
          (ASR_E2ESM020345_False_TransitToInvalidExtended.9):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_INVALID.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_VALID to E2E_SM_INVALID)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.10.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.10.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.9</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.9.1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.9.2</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoINVALID_MaxErrorExceeded</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>3282</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_INVALID to E2E_SM_INVALID of
     the E2E State Machine for the function E2E_SMCheck() for OkCount &amp;gt;= MinOkStateInvalid
     and ErrorCount &amp;gt; MaxErrorStateInvalid.
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - ErrorCount values (MaxErrorStateInvalid + 3)..WindowSizeValid
          out of which some are undefined values
        - ErrorCount = (MaxErrorStateInvalid + 1) covered when status at WindowTopIndex is
          E2E_P_ERROR or undefined and is overwritten by other defined status value
        - UndefinedCount values 0..ErrorCount
        - OkCount values 0..(WindowSizeValid - ErrorCount)
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries
        - For even values of WindowTopIndex transitToInvalidExtended and ClearToInvalid are sent as
          FALSE else TRUE.
        - Apart from WindowSizeInit value other values in WindowSizeValid are ignored based on
          WindowTopIndex value.

    01: Set initial E2ESM state to E2E_SM_INVALID.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.11
           ASR_E2ESM020345_False_TransitToInvalidExtended.10):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_INVALID.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_INVALID to E2E_SM_INVALID)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.11.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.11.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.10</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.10.1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.10.2</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01012_SMCheck_INVALIDtoINVALID_MinOkNotReached</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>3631</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_INVALID to E2E_SM_INVALID of
     the E2E State Machine for the function E2E_SMCheck() for OkCount &amp;lt; MinOkStateInvalid
     and ErrorCount &lt;= MaxErrorStateInvalid.
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - OkCount values 0..(MinOkStateInvalid - 2)
        - OkCount = (MinOkStateInvalid - 1) covered when actual profile status is E2E_P_OK
        - ErrorCount values 0..(MaxErrorStateInvalid - 1)
          out of which some are undefined values
        - ErrorCount = MaxErrorStateInvalid covered when actual profile status is E2E_P_ERROR
        - UndefinedCount values 0..ErrorCount
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries
        - For even values of WindowTopIndex transitToInvalidExtended and ClearToInvalid sent as
          FALSE else TRUE.
        - Apart from WindowSizeInit value other values in WindowSizeValid are ignored based on
          WindowTopIndex value.

    01: Set initial E2ESM state to E2E_SM_INVALID.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.11
           ASR_E2ESM020345_False_TransitToInvalidExtended.10):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_INVALID.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_INVALID to E2E_SM_INVALID)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.11.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.11.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.10</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.10.1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.10.2</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01013_SMCheck_INVALIDtoVALID</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>3981</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_INVALID to E2E_SM_VALID of
     the E2E State Machine for the function E2E_SMCheck().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - ErrorCount values 0..(MaxErrorStateInvalid - 1) out of which some are undefined values
        - ErrorCount = MaxErrorStateInvalid covered when ProfileStatus = E2E_P_ERROR
        - UndefinedCount values 0..ErrorCount
        - OkCount values (MinOkStateInvalid + 1)..(WindowSizeValid - ErrorCount)
        - OkCount = MinOkStateInvalid covered when status from WindowTopIndex is E2E_P_OK and
          is overwritten by different value
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries
        - For even values of WindowTopIndex transitToInvalidExtended and ClearToInvalid sent as
          FALSE else TRUE.
        - Apart from WindowSizeInit value other values in WindowSizeValid are ignored based on
          WindowTopIndex value.

    01: Set initial E2ESM state to E2E_SM_INVALID.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.12
           ASR_E2ESM020345_False_TransitToInvalidExtended.11):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_VALID.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_INVALID to E2E_SM_VALID)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.12.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.11</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.11.1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020607</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01014_SMCheckInit_DEINITtoNODATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>4336</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_DEINIT to E2E_SM_NODATA of
     the E2E State Machine for the function E2E_SMCheckInit().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheckInit()
Test Precondition: None.
Test Execution: 

    01: Set initial E2ESM state to E2E_SM_DEINIT.
        Call E2E_SMCheckInit().
        transitToInvalidExtended sent as FALSE and TRUE.
    02: VP(ASR_E2ESM020353,ASR_E2ESM020370,ASR_E2ESM020375,ASR_E2ESM020467,ASR_E2ESM020345_True_TransitToInvalidExtended.2,
           ASR_E2ESM020345_False_TransitToInvalidExtended.2):
        E2E_SMCheckInit() returns E2E_E_OK.
        Each element of window is initialized with E2E_P_NOTAVAILABLE.
        WindowTopIndex is initialized with 0.
        OkCount is initialized with 0.
        ErrorCount is initialized with 0.
        SMState is initialized with E2E_SM_NODATA.

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_DEINIT to E2E_SM_NODATA)

  
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020353</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020370</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020375</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020467</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_False_TransitToInvalidExtended.2</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01015_SMCheckInit_NODATAtoNODATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>4443</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_NODATA to E2E_SM_NODATA of
     the E2E State Machine for the function E2E_SMCheckInit().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheckInit()
Test Precondition: None.
Test Execution: 

    01: Set initial E2ESM state to E2E_SM_NODATA.
        Call E2E_SMCheckInit().
    02: VP(ASR_E2ESM020353,ASR_E2ESM020370,ASR_E2ESM020375,ASR_E2ESM020467):
        E2E_SMCheckInit() returns E2E_E_OK.
        Each element of window is initialized with E2E_P_NOTAVAILABLE.
        WindowTopIndex is initialized with 0.
        OkCount is initialized with 0.
        ErrorCount is initialized with 0.
        SMState is initialized with E2E_SM_NODATA.

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_NODATA to E2E_SM_NODATA)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020353</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020370</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020375</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020467</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01016_SMCheckInit_INITtoNODATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>4540</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_INIT to E2E_SM_NODATA of
     the E2E State Machine for the function E2E_SMCheckInit().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheckInit()
Test Precondition: None.
Test Execution: 

    01: Set initial E2ESM state to E2E_SM_INIT.
        Call E2E_SMCheckInit().
    02: VP(ASR_E2ESM020353,ASR_E2ESM020370,ASR_E2ESM020375,ASR_E2ESM020467):
        E2E_SMCheckInit() returns E2E_E_OK.
        Each element of window is initialized with E2E_P_NOTAVAILABLE.
        WindowTopIndex is initialized with 0.
        OkCount is initialized with 0.
        ErrorCount is initialized with 0.
        SMState is initialized with E2E_SM_NODATA.

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_INIT to E2E_SM_NODATA)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020353</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020370</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020375</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020467</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01017_SMCheckInit_VALIDtoNODATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>4637</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_VALID to E2E_SM_NODATA of
     the E2E State Machine for the function E2E_SMCheckInit().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheckInit()
Test Precondition: None.
Test Execution: 

    01: Set initial E2ESM state to E2E_SM_VALID.
        Call E2E_SMCheckInit().
    02: VP(ASR_E2ESM020353,ASR_E2ESM020370,ASR_E2ESM020375,ASR_E2ESM020467):
        E2E_SMCheckInit() returns E2E_E_OK.
        Each element of window is initialized with E2E_P_NOTAVAILABLE.
        WindowTopIndex is initialized with 0.
        OkCount is initialized with 0.
        ErrorCount is initialized with 0.
        SMState is initialized with E2E_SM_NODATA.

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_VALID to E2E_SM_NODATA)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020353</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020370</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020375</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020467</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01018_SMCheckInit_INVALIDtoNODATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>4734</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_INVALID to E2E_SM_NODATA of
     the E2E State Machine for the function E2E_SMCheckInit().
     See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheckInit()
Test Precondition: None.
Test Execution: 

    01: Set initial E2ESM state to E2E_SM_INVALID.
        Call E2E_SMCheckInit().
    02: VP(ASR_E2ESM020353,ASR_E2ESM020370,ASR_E2ESM020375,ASR_E2ESM020467):
        E2E_SMCheckInit() returns E2E_E_OK.
        Each element of window is initialized with E2E_P_NOTAVAILABLE.
        WindowTopIndex is initialized with 0.
        OkCount is initialized with 0.
        ErrorCount is initialized with 0.
        SMState is initialized with E2E_SM_NODATA.

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_INVALID to E2E_SM_NODATA)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020353</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020370</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020375</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020467</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01019_SMCheckInit_InvalidInput</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>4831</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
      This test shall check the behavior of the E2E State Machine for the function E2E_SMCheckInit()
      applied to invalid input parameter.
      See section 6.19 from PRS E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheckInit
Test Precondition: None.
Test Execution: 

    01: Call E2E_P04CheckInit() with first parameter NULL.
    02: VP(ASR_E2ESM020353,ASR_E2ESM020370,ASR_E2ESM020011,ASR_E2ESM020012,ASR_E2ESM020047):
        E2E_SMCheckInit() returns E2E_E_INPUTERR_NULL.
    03: Call E2E_P04CheckInit() with second parameter NULL.
    04: VP(ASR_E2ESM020353,ASR_E2ESM020370,ASR_E2ESM020011,ASR_E2ESM020012,ASR_E2ESM020047):
        E2E_SMCheckInit() returns E2E_E_INPUTERR_NULL.
    05: Call E2E_P04CheckInit() with both parameters NULL.
    06: VP(ASR_E2ESM020353,ASR_E2ESM020370,ASR_E2ESM020011,ASR_E2ESM020012,ASR_E2ESM020047):
        E2E_SMCheckInit() returns E2E_E_INPUTERR_NULL.
    06: Call E2E_P04CheckInit() with invalid ConfigParameter.
    07: VP(ASR_E2ESM020353,ASR_E2ESM020370,ASR_E2ESM020011,ASR_E2ESM020012,ASR_E2ESM020047):
        E2E_SMCheckInit() returns E2E_E_INPUTERR_WRONG.

      Used Test Strategies:
      - Equivalence Class Partitioning
      (Testing only transitions to status E2E_E_INPUTERR_NULL for E2E_SMCheckInit() function)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020353</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020370</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01020_SMCheck_InvalidInput_INPUTERR_NULL</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>4936</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Test that E2E_SMCheck() returns E2E_E_INPUTERR_NULL if NULL pointer is passed
    in the second (E2E_SMConfig) or third (E2E_SMCheckState) argument.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    01: Set second parameter to NULL (E2E_SMConfig) and call E2E_SMCheck().
    02: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047,ASR_E2ESM020371):
        E2E_SMCheck() returns E2E_E_INPUTERR_NULL.
    03: Set third parameter to NULL (E2E_SMCheckState) and call E2E_SMCheck().
    04: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047,ASR_E2ESM020371):
        E2E_SMCheck() returns E2E_E_INPUTERR_NULL.
    05: Set second and third parameter to NULL (E2E_SMConfig and E2E_SMCheckState)
        and call E2E_SMCheck().
    06: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047,ASR_E2ESM020371):
        E2E_SMCheck() returns E2E_E_INPUTERR_NULL.

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020371</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_WindowSize</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>5024</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Test that E2E_SMCheck() returns E2E_E_INPUTERR_WRONG if E2E_SMConfig constraint
    (WindowSizeValid &gt; 0) is violated.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Reset test config to valid configuration.
    Loop over test value range:
    01: WindowSizeValid in the E2E_SMConfig is tested in the range 0x00 to 0xFE.
    02: Call E2E_SMCheck().
    03: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047,ASR_E2ESM023176):
        E2E_SMCheck() returns the expected return value E2E_E_OK or E2E_E_INPUTERR_WRONG
        according to constraint ASR_E2ESM023176.
    04: WindowSizeInit in the E2E_SMConfig is tested in the range 0x00 to 0xFE.
    05: Call E2E_SMCheck().
    06: VP:
        E2E_SMCheck() returns the expected return value E2E_E_OK or E2E_E_INPUTERR_WRONG
    07: WindowSizeInvalid in the E2E_SMConfig is tested in the range 0x00 to 0xFE.
    08: Call E2E_SMCheck().
    09: VP:
        E2E_SMCheck() returns the expected return value E2E_E_OK or E2E_E_INPUTERR_WRONG
    10: WindowSizeValid is greater than Max Value in the E2E_SMConfig is tested in the range 0x00 to 0xFE.
    11: Call E2E_SMCheck().
    12: VP:
        E2E_SMCheck() returns the expected return value E2E_E_INPUTERR_WRONG

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM023176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM023177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM023179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM023180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM026301</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM026302</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01022_SMCheck_InvalidCfg_StateInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>5166</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Test that E2E_SMCheck() returns E2E_E_INPUTERR_WRONG if E2E_SMConfig constraint
    ((MinOkStateInit + MaxErrorStateInit) &lt;= WindowSizeValid) is violated.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Reset test config to valid configuration.
    Loop over test value range:
    01: Set WindowSizeValid in the E2E_SMConfig (test boundary values).
    02: Set MinOkStateInit in the E2E_SMConfig (test range 0x01 to WindowSizeValid).
    03: Set MaxErrorStateInit in the E2E_SMConfig (test range 0x00 to WindowSizeValid).
    04: Call E2E_SMCheck().
    05: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047,ASR_E2ESM023179):
        E2E_SMCheck() returns the expected return value E2E_E_OK or E2E_E_INPUTERR_WRONG
        according to constraint ASR_E2ESM023179.

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM023179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01023_SMCheck_InvalidCfg_StateValid</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>5260</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Test that E2E_SMCheck() returns E2E_E_INPUTERR_WRONG if E2E_SMConfig constraint
    ((MinOkStateValid + MaxErrorStateValid) &lt;= WindowSizeValid) is violated.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Reset test config to valid configuration.
    Loop over test value range:
    01: Set WindowSizeValid in the E2E_SMConfig (test boundary values).
    02: Set MinOkStateInit in the E2E_SMConfig (test range 0x01 to WindowSizeValid).
    03: Set MaxErrorStateInit in the E2E_SMConfig (test range 0x00 to WindowSizeValid).
    04: Call E2E_SMCheck().
    05: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047,ASR_E2ESM023180):
        E2E_SMCheck() returns the expected return value E2E_E_OK or E2E_E_INPUTERR_WRONG
        according to constraint ASR_E2ESM023180.

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM023180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01024_SMCheck_InvalidCfg_StateInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>5354</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Test that E2E_SMCheck() returns E2E_E_INPUTERR_WRONG if E2E_SMConfig constraint
    ((MinOkStateInvalid + MaxErrorStateInvalid) &lt;= WindowSizeValid) is violated.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Reset test config to valid configuration.
    Loop over test value range:
    01: Set WindowSizeValid in the E2E_SMConfig (test boundary values).
    02: Set MinOkStateInit in the E2E_SMConfig (test range 0x01 to WindowSizeValid).
    03: Set MaxErrorStateInit in the E2E_SMConfig (test range 0x00 to WindowSizeValid).
    04: Call E2E_SMCheck().
    05: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047,ASR_E2ESM023181):
        E2E_SMCheck() returns the expected return value E2E_E_OK or E2E_E_INPUTERR_WRONG
        according to constraint ASR_E2ESM023181.

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM023181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01025_SMCheck_InvalidCfg_MinOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>5448</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Test that E2E_SMCheck() returns E2E_E_INPUTERR_WRONG if E2E_SMConfig constraint
    (1 &lt;= MinOkStateValid &lt;= MinOkStateInit &lt;= MinOkStateInvalid) is violated.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Reset test config to valid configuration. Set WindowSizeValid to maximum valid value.
    Test boundary values:
    01: MinOkStateInit in the E2E_SMConfig is set.
    02: MinOkStateValid in the E2E_SMConfig is set.
    03: MinOkStateInvalid in the E2E_SMConfig is set.
    04: Call E2E_SMCheck().
    05: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047,ASR_E2ESM023178):
        E2E_SMCheck() returns the expected return value E2E_E_OK or E2E_E_INPUTERR_WRONG
        according to constraint ASR_E2ESM023178.

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM023178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01026_SMCheck_InvalidCfg_MaxError</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>5543</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Test that E2E_SMCheck() returns E2E_E_INPUTERR_WRONG if E2E_SMConfig constraint
    (MaxErrorStateValid &gt;= MaxErrorStateInit &gt;= MaxErrorStateInvalid &gt;= 0) is violated.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Reset test config to valid configuration. Set WindowSizeValid to maximum valid value.
    Test boundary values:
    01: MaxErrorStateInit in the E2E_SMConfig is set.
    02: MaxErrorStateValid in the E2E_SMConfig is set.
    03: MaxErrorStateInvalid in the E2E_SMConfig is set.
    04: Call E2E_SMCheck().
    05: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047,ASR_E2ESM023177):
        E2E_SMCheck() returns the expected return value E2E_E_OK or E2E_E_INPUTERR_WRONG
        according to constraint ASR_E2ESM023177.

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM023177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01027_SMCheck_InvalidInput_ProfileStatus</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>5638</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Test that E2E_SMCheck() returns E2E_E_INPUTERR_WRONG if:
    - First parameter (ProfileStatus) is E2E_P_NOTAVAILABLE
    - First parameter (ProfileStatus) is undefined
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    01: First parameter (ProfileStatus) is E2E_P_NOTAVAILABLE. Call E2E_SMCheck().
    02: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047):
        E2E_SMCheck() returns E2E_E_INPUTERR_WRONG.
    03: First parameter (ProfileStatus) is undefined. Call E2E_SMCheck().
    04: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047):
        E2E_SMCheck() returns E2E_E_INPUTERR_WRONG.

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01028_SMCheck_InvalidInput_WrongState</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>5715</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Test that E2E_SMCheck() returns E2E_E_WRONGSTATE if:
    - WindowTopIndex in the E2E_SMCheckState is greater than WindowSizeValid
    - SMState in the E2E_SMCheckState is E2E_SM_DEINIT
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    01: WindowTopIndex in the E2E_SMCheckState is greater than WindowSizeValid. Call E2E_SMCheck().
    02: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047):
        E2E_SMCheck() returns E2E_E_WRONGSTATE.
    03: SMState in the E2E_SMCheckState is E2E_SM_DEINIT. Call E2E_SMCheck().
    04: VP(ASR_E2ESM020340,ASR_E2ESM020012,ASR_E2ESM020011,ASR_E2ESM020047):
        E2E_SMCheck() returns E2E_E_WRONGSTATE.

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01029_SMCheck_Types</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>5795</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test shall check the correctness of the types of the E2E-library
    for the function E2E_SMCheck().
    See section 6.19 from PRS
    E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMConfigType,E2E_SMCheckStateType,E2E_SMStateType
Test Precondition: None.
Test Execution: 

    01: Define EbTest_E2E_SMConfigCompareType as specified in ASR_E2ESM020342.
    02: Define EbTest_E2E_SMCheckStateCompareType as specified in ASR_E2ESM020343.
    03: Define EbTest_E2E_SMStateCompareType as specified in ASR_E2ESM020344.
    04: VP(ASR_E2ESM020342):
        Size of structure and position of members between EbTest_E2E_SMConfigCompareType
        and E2E_SMConfigType are equal.
        Each structure member is of unsigned type.
    05: VP(ASR_E2ESM020343):
        Size of structure and position of members between EbTest_E2E_SMCheckStateCompareType
        and E2E_SMCheckStateType are equal.
        Each structure member is of unsigned type.
    06: VP(ASR_E2ESM020344):
        Size of EbTest_E2E_SMStateCompareType and E2E_SMStateType are equal.
        E2E_SMStateType is an unsigned type.

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020342</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020343</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020344</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01030_SMCheck_INITtoINIT_TransitToInvalidExtended_True</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>6023</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_INIT to E2E_SM_INIT of
     the E2E State Machine for the function E2E_SMCheck() when transitToInvalidExtended is TRUE.
     See section 6.19 from PRS
     E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - ErrorCount values 0..(MaxErrorStateInit - 1) out of which some are undefined values
        - ErrorCount = MaxErrorStateInit covered when ProfileStatus = E2E_P_ERROR
        - UndefinedCount values 0..ErrorCount
        - OkCount values 0..(MinOkStateInit - 2)
        - OkCount = (MinOkStateInit - 1) covered when ProfileStatus = E2E_P_OK
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries
        - Apart from WindowSizeInit value other values in WindowSizeValid are ignored based on
          WindowTopIndex value.

    01: Set initial E2ESM state to E2E_SM_INIT.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.6):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_INIT.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_INIT to E2E_SM_INIT)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01031_SMCheck_INITtoVALID_TransitToInvalidExtended_True</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>6326</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_INIT to E2E_SM_VALID of
     the E2E State Machine for the function E2E_SMCheck() when transitToInvalidExtended is TRUE.
     See section 6.19 from PRS
     E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - ErrorCount values 0..(MaxErrorStateInit - 1) out of which some are undefined values
        - ErrorCount = MaxErrorStateInit covered when ProfileStatus = E2E_P_ERROR
        - UndefinedCount values 0..ErrorCount
        - OkCount values (MinOkStateInit + 4)..(WindowSizeValid - ErrorCount)
        - OkCount = MinOkStateInit covered when status from WindowTopIndex is E2E_P_OK and
          is overwritten by different value
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries
        - Apart from WindowSizeInit value other values in WindowSizeValid are ignored based on
          WindowTopIndex value.

    01: Set initial E2ESM state to E2E_SM_INIT.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.7):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_VALID.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_INIT to E2E_SM_VALID)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.7.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020607</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_01032_SMCheck_INITtoINVALIDandINIT_TransitToInvalidExtended_True</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_01_SMCheck/source/application/E2ESM_ConTest_01_SMCheck.c</sourcefile>
      <sourceline>6668</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
     This test shall check the transition from E2E_SM_INIT to E2E_SM_INVALID  and E2E_SM_INIT to
     E2E_SM_INIT of the E2E State Machine for the function E2E_SMCheck() when
     transitToInvalidExtended is TRUE.
     See section 6.19 from PRS
     E2E Protocol Specification R22-11.
  &lt;/para&gt;
  
Test Object: E2E_SMCheck()
Test Precondition: None.
Test Execution: 

    00: Loop through:
        - ProfileStatus values: E2E_P_OK, E2E_P_REPEATED, E2E_P_WRONGSEQUENCE, E2E_P_ERROR,
                                E2E_P_NONEWDATA
        - ErrorCount values 0..(MaxErrorStateInit - 1) out of which some are undefined values
        - ErrorCount = MaxErrorStateInit covered when ProfileStatus = E2E_P_ERROR
        - UndefinedCount values 0..ErrorCount
        - OkCount values (MinOkStateInit + 1)..(WindowSizeValid - ErrorCount)
        - OkCount = MinOkStateInit covered when status from WindowTopIndex is E2E_P_OK and
          is overwritten by different value
        - idx_NotAvailableEntries values 0..1
           (idx_NotAvailableEntries == 0) =&gt; initial window does not
                                             contain E2E_P_NOTAVAILABLE entries
           (idx_NotAvailableEntries == 1) =&gt; initial window contains E2E_P_NOTAVAILABLE entries
        - For even values of WindowTopIndex ClearToInvalid sent as FALSE else TRUE.
        - Apart from WindowSizeInit value other values in WindowSizeValid are ignored based on
          WindowTopIndex value.

    01: Set initial E2ESM state to E2E_SM_INIT.
        Call E2E_SMCheck().
    02: VP(ASR_E2ESM020345_True_TransitToInvalidExtended.7):
        E2E_SMCheck() returns E2E_E_OK.
        SMState is E2E_SM_VALID.
    03: VP(ASR_E2ESM020466):
        E2E_SMAddStatus step is performed:
        - window content is updated
        - State-&gt;OKCount is correctly updated
        - State-&gt;ErrorCount is correctly updated
        - WindowTopIndex wrap around is correctly performed

    Used Test Strategies:
    - Equivalence Class Partitioning
    (Testing only transition from E2E_SM_INIT to E2E_SM_VALID)

  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020345_True_TransitToInvalidExtended.7.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020607</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020466</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_E2ESM_ConTest_02_PublishedInformation</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_02_General/source/application/E2ESM_ConTest_02_General.c</sourcefile>
      <sourceline>39</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall check the correct definition of the common published information
    provided in the module header file.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 

 01: VP(ASR_E2ESM020038):
     E2ESM_VENDOR_ID is defined with the value provided by the tooling environment
 02: VP(ASR_E2ESM020038):
     E2ESM_AR_RELEASE_MAJOR_VERSION is defined with the value specified in config.mk
 03: VP(ASR_E2ESM020038):
     E2ESM_AR_RELEASE_MINOR_VERSION is defined with the value specified in config.mk
 04: VP(ASR_E2ESM020038):
     E2ESM_AR_RELEASE_REVISION_VERSION is defined with the value specified in config.mk
 05: VP(ASR_E2ESM020038):
     E2ESM_SW_MAJOR_VERSION is defined with the value specified in config.mk
 06: VP(ASR_E2ESM020038):
     E2ESM_SW_MINOR_VERSION is defined with the value specified in config.mk
 07: VP(ASR_E2ESM020038):
     E2ESM_SW_PATCH_VERSION is defined with the value specified in config.mk


Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ConTest_02_NoConfigParams</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_02_General/source/application/E2ESM_ConTest_02_General.c</sourcefile>
      <sourceline>126</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall check that the E2E State Machine does not
    have any configuration options.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 

 TS5 build process steps:
 01: Provide a reference file E2ESM_Config.txt
     that contains the first line of the configuration
     container of the module configuration
 02: grep all variables of the installed
     E2E State Machine configuration and for the name of
     the configuration container
 02a: remove all allowed variables from the result of step 02,
     i.e parameters of CommonPublishedInformation and PublishedInformation
 03: Compare the result of Step 2a with
     E2ESM_Config.txt
     and store the difference into
     E2ESM_Config.txt.diff.
 04: VP(ASR_E2ESM020037):
     Step 03 reveals no difference
     (i.e. E2ESM_Config.txt.diff is empty)
 05: Include comparison differences of Step 04
     (i.e. E2ESM_Config.txt.diff)
     within this file.
 06: Compile this file
 07: VP(ASR_E2ESM020037):
     This file compiles without errors.
 08: Execute this test case
 09: VP(ASR_E2ESM020037):
     TS5ATL_RESULT_SUCCESS is returned Step 08

   Note:
    If one of the Verification points is violated, then the
    build process is aborted and an error is reported.


Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_E2ESM_ConTest_03_IncludeFiles</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_03_Includes/source/application/E2ESM_ConTest_03_Includes.c</sourcefile>
      <sourceline>46</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   This test shall check that E2E_SM.h exclusively includes the files
   E2E.h, E2E_MemMap.h
   and that E2E_SM.c exclusively includes the files
   E2E_SM.h, E2E_MemMap.h
 
Test Object: None.
Test Precondition: 
 
Test Execution: 

 TS5 build process steps:
  01: Provide a reference file includesOf_E2E_SM.h.txt
      that contains the includes:
      E2E.h, E2E_MemMap.h
  02: Provide a reference file includesOf_E2E_SM.c.txt
      that contains the includes:
      E2E_SM.h, MemMap.h.
  03: Extract all includes of E2E_SM.h
  04: Extract all includes of E2E_SM.c
  05: Compare all includes of Step 3 with the
      reference file includesOf_E2E_SM.h.txt
      and store difference
      in file includesOf_E2E_SM.h.txt.diff.
  06: Compare all includes of Step 4 with the
      reference file includesOf_E2E_SM.c.txt
      and store difference
      in file includesOf_E2E_SM.h.txt.diff.
  07: Include comparison differences of Step 5 and Step 6
      (i.e. includesOf_E2E_SM.h.txt.diff and
      includesOf_E2E_SM.c.txt.diff) within this file.
  08: Compile this file
  09: VP(EB_E2ESM020113, EB_E2ESM020114, ASR_E2ESM020115):
      Execute this test case which always returns TS5ATL_RESULT_SUCCESS.
      Note:
        If the extracted includes of Step 5 / Step 6 and
        the reference file are not identical, then
        the compile signals an error due to the
        inclusion of the diff results which contains
        not compilable text (backup in case the build process
        incorrectly does not abort).
 
Test Input: 
 
Test Output: 
 &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESM020113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>EB_E2ESM020114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>ASR_E2ESM020115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_E2ESM_ConTest_04_Files</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Conformance/IN/E2ESM_ConTest_04_Files/source/application/E2ESM_ConTest_04_Files.c</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   This test shall check that the E2E State Machine specific part
   of the E2E library is built of the following files: E2E_SM.h,
   and E2E_SM.c;
 
Test Object: None.
Test Precondition: 
 
Test Execution: 

 TS5 build process steps:
  01: Provide a reference file E2ESM_HeaderFiles.txt
      that contains: E2E_SM.h
  02: Provide a reference file E2ESM_SourceFiles.txt
      that contains: E2E_SM.c
  03: Search for all header files existing in the
      installed Tresos plugin of E2ESM
  04: Search for all source files existing in the
      installed Tresos plugin of E2ESM
  05: Compare the found files of Step 3 with the
      files listed in E2ESM_HeaderFiles.txt
      and store the difference into
      E2ESM_HeaderFiles.txt.diff.
  06: VP(ASR_E2ESM020048,EB_E2ESM023182):
      Step 5 reveals no difference
      (i.e. E2ESM_HeaderFiles.txt.diff is empty)
  07: Compare the found files of Step 4 with the
      files listed in E2ESM_SourceFiles.txt
      and store the difference into
      E2ESM_SourceFiles.txt.diff.
  08: VP(ASR_E2ESM020048):
      Step 7 reveals no difference
      (i.e. E2ESM_SourceFiles.txt.diff is empty)
  09: Include comparison differences of Step 5 and Step 7
      (i.e. E2ESM_HeaderFiles.txt.diff and
      E2ESM_SourceFiles.txt.diff) within this file.
  10: Compile this file
  11: VP(ASR_E2ESM020048,EB_E2ESM023182):
      This file compiles without errors.
  12: Execute this test case
  13: VP(ASR_E2ESM020048,EB_E2ESM023182):
      TS5ATL_RESULT_SUCCESS is returned in 12

   Note:
    If one of the Verification points is violated, then the
    build process is aborted and an error is reported.

 
Test Input: 
 
Test Output: 
 &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
        <provcov>
          <linksto>EB_E2ESM023182</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_E2ESM_ImpTest_01001_MaxWindowSizeMacro</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Implementation/IN/E2ESM_ImpTest_01_ProfileWindow/source/application/E2ESM_ImpTest_01_ProfileWindow.c</sourcefile>
      <sourceline>34</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that the correct value of the externally defined macro
  E2ESM_MAX_WINDOW_SIZE_VALID is taken.

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP (EB_E2ESM023182)
      E2ESM_MAX_WINDOW_SIZE_VALID generated by E2EXf is defined with the expected value.

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESM023182</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ImpTest_01002_ProfileStatusWindow</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Implementation/IN/E2ESM_ImpTest_01_ProfileWindow/source/application/E2ESM_ImpTest_01_ProfileWindow.c</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test that the type definition of type E2E_SMCheckStateType
  specifies a member ProfileStatusWindowArray with the correct window size
  equal to value of macro definition E2ESM_MAX_WINDOW_SIZE_VALID.

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: sizeof() value of E2E_SMCheckStateType.ProfileStatusWindowArray equals
      macro value E2ESM_MAX_WINDOW_SIZE_VALID

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>ASR_E2ESM020343</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ImpTest_01003_SMCheckInitWindowSizeError</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Implementation/IN/E2ESM_ImpTest_01_ProfileWindow/source/application/E2ESM_ImpTest_01_ProfileWindow.c</sourcefile>
      <sourceline>110</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test that E2E_SMCheckInit() returns E2E_E_INPUTERR_WRONG,
  if passed WindowSize is greater than the window size specified in
  E2ESM_MAX_WINDOW_SIZE_VALID.

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: Call E2E_SMCheckInit() with valid parameters except that
      passed WindowSize configuration is greater than the value
      specified in E2ESM_MAX_WINDOW_SIZE_VALID.
  02: VP (EB_E2ESM023184)
      E2E_SMCheckInit() returns E2E_E_INPUTERR_WRONG

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESM023184</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>
    <specobject>
      <id>TS_E2ESM_ImpTest_01004_SMCheckWindowSizeError</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Implementation/IN/E2ESM_ImpTest_01_ProfileWindow/source/application/E2ESM_ImpTest_01_ProfileWindow.c</sourcefile>
      <sourceline>179</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test that E2E_SMCheck() returns E2E_E_INPUTERR_WRONG,
  if passed WindowSize is greater than the window size specified in
  E2ESM_MAX_WINDOW_SIZE_VALID.

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: Call E2E_SMCheck() with valid parameters except that
      passed WindowSize configuration is greater than the value
      specified in E2ESM_MAX_WINDOW_SIZE_VALID.
  02: VP (EB_E2ESM023185)
      E2E_SMCheck() returns E2E_E_INPUTERR_WRONG

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESM023185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_E2ESM_ImpTest_02001_CompilerErrors</id>
      <status>approved</status>
      <source>EB test case specification (asc_E2ESM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESM/test/ts5/Implementation/IN/E2ESM_ImpTest_02_CompilerErrors/source/application/E2ESM_ImpTest_02_CompileErrors.c</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test that the compiler reports an error if E2ESM_MAX_WINDOW_SIZE_VALID is redefined
  with a double declaration protection macro.

Test Object: None.
Test Precondition: 
  &lt;para&gt;
  This test-case executes pre-defined sub-test-cases:
    CompTest_01_NOK and CompTest_02_OK

  Each sub-test-case provides a file Test.c and a E2EXf_Cfg.h which is shall contain the content
  responsible for the compile error.
  &lt;/para&gt;

  For each sub-test-case, a reference file is provided containing expected compiler errors:
  &lt;itemizedlist&gt;
   &lt;listitem&gt;
    CompTest_01_NOK: CompTest_01_NOK.err
                     (specifies: "#error E2ESM_MAX_WINDOW_SIZE_VALID already defined")
   &lt;/listitem&gt;
   &lt;listitem&gt;
    CompTest_02_NOK: CompTest_02_NOK.err 
                    (specifies: "error: 'E2ESM_MAX_WINDOW_SIZE_VALID' undeclared here (not in a function)")
   &lt;/listitem&gt; 
   &lt;listitem&gt;
    CompTest_03_OK: CompTest_03_OK.err (empty since no compiler errors expected)
   &lt;/listitem&gt;
  &lt;/itemizedlist&gt;

Test Execution: 
  &lt;para&gt;01: The E2ESM_MAX_WINDOW_SIZE_VALID macro is defined twice within E2EXf_Cfg.h and Test.c&lt;/para&gt;
  &lt;para&gt;02: VP (EB_E2ESM023183)
      Compiling this test results in a compiler error
      "#error E2ESM_MAX_WINDOW_SIZE_VALID already defined".
      Compiler error is compared with reference file
      CompTest_01_NOK.err&lt;/para&gt;
  &lt;para&gt;03: The E2ESM_MAX_WINDOW_SIZE_VALID macro is not defined within E2EXf_Cfg.h&lt;/para&gt;
  &lt;para&gt;04: VP (EB_E2ESM023182)
      Compiling this test results in a compiler error
      "error: 'E2ESM_MAX_WINDOW_SIZE_VALID' undeclared here (not in a function)".
      Compiler error is compared with reference file CompTest_03_NOK.err&lt;/para&gt;
  &lt;para&gt;05: Environment variable E2ESM_MAX_WINDOW_SIZE_VALID is defined only once
      (in E2EXf_Cfg.h)&lt;/para&gt;
  &lt;para&gt;06: VP (EB_E2ESM023183)
      Compiling this test does not result in a compiler error&lt;/para&gt;

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESM023182</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>EB_E2ESM023183</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
