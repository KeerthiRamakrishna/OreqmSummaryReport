<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_MemAs_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_algorithm_view_configure.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_error_handling_view.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_information_view.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_interaction_view_pull.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_interaction_view_push.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_interface_view.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_unattendedWizard_memoryStackAutomation.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_requirements_MemAs.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_requirements_MemoryStackAutomation.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_GenericImporter/reqm_QFT.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_GenericImporter/reqm_TCS.reqm</commandline>
    <timestamp>Mon Jun 17 22:13:10 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_MemAs_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_algorithm_view_configure.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_error_handling_view.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_information_view.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_interaction_view_pull.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_interaction_view_push.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_assistant_interface_view.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_design_unattendedWizard_memoryStackAutomation.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_requirements_MemAs.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_Native/asc_MemAs_requirements_MemoryStackAutomation.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_GenericImporter/reqm_QFT.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/build/reqm/ReqM2_GenericImporter/reqm_TCS.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/2018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>feavc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swpad</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swts</regex>
      <regex>pdoc</regex>       <!-- since 10/2018: introduced for updated tracing model-->
      <regex>dev</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swadvc</regex>     <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swuvc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/2020: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>
      <regex>doc</regex>

      <!-- legacy items -->
      <regex>req</regex>        <!-- deprecated 10/2017: old swrs type -->
      <regex>dsn</regex>        <!-- deprecated 10/2017: old swdd -->
      <regex>src</regex>        <!-- deprecated 10/2017: old impl type -->
      <regex>tcs</regex>        <!-- deprecated 10/2017: replaced by swintts and swuts -->
      <regex>dsn_arch</regex>   <!-- deprecated 10/2017: old swad type -->
      <regex>man</regex>
      <regex>tso</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='req') and (../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.rejected</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.count</name>
      <description>Requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.req.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='req') or (../@doctype='swrs')) and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='swdd') or (../@doctype='dsn')) and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.doctypes</name>
      <description>Requirements can be covered only by req, dsn_arch, dev, lim, dsn, src, tcs, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req')]</applyto>
          <condition>(./needscoverage/needsobj="req" or ./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swad, dev, lim, swurs, swdd, src, swuts, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.doctypes</name>
      <description>Design elements can only be covered by dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn')]</applyto>
          <condition>(./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.src.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='src')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="tsc" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes") )</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="dsn_arch" or ./fulfilledby/ffbObj/ffbType="dsn_arch" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>



    <rule>
      <name>ERR.dsn_arch.needscoverage.doctypes</name>
      <description>Architectural design objects can only be covered by dsn_arch, dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn_arch')]</applyto>
          <condition>(./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, req, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
         </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
  </rules>
    <oreqmRules>
          <rule>
            <name>WRN.tsc.needscoverage.count</name>
            <description>Violated if there are more than 10 tsc specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='tcs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='tsc'])) &gt; 10]/furtherinfo</applyto>
                    <regex>tsc.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.req.needscoverage.count</name>
            <description>Violated if there are more than 10 req specobjects covering one specobject and no appropriate information is provided in furtherinfo, refinement on req to req are excluded. Refinements of requirements Req to Req and Req to Fea are excluded from this rule since this is tracing on the same level. The justification in furtherinfo must contain the rule name.</description>
           <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(../@doctype != 'req') and (../@doctype != 'fea') and ((count(./needscoverage/needscov[needsobj='req']/coveredby/linkedfrom)) &gt; 10)]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='req'])) &gt; 10]/furtherinfo</applyto>
                    <regex>req.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
     </rule>

        <rule>
            <name>WRN.src.needscoverage.count</name>
            <description>Violated if there are more than 10 src specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='src']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn_arch.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn_arch specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn_arch']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn_arch'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn_arch.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="dsn">
        <defaults>
            <idprefix>memas.design.algorithm.configurator.</idprefix>
            <source>EB</source>
        </defaults>


        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationIdentifier</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemoryModuleConfigurator shall assign the nvramBlockIdentifier
                values uniquely.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationIdentifier</srcid><srcstatus/><internalId>321</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateNvMValues</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>


        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationBaseNumber</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemoryModuleConfigurator shall assign the blockBaseNumber according to
                the following rule: blockBaseNumber = BlockConfiguration.BlockNumber (Fee/Ea 
				block configuration block number referenced in NvMTargetBlockReference) &gt;&gt; dataSelectionBits</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationBaseNumber</srcid><srcstatus/><internalId>323</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationBaseNumberExist</srcid><srcstatus/><internalId>324</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationBaseNumberWithNoChange</srcid><srcstatus/><internalId>325</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateNvMValues</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationFeeNative</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemoryModuleConfigurator shall assign one BlockConfiguration object
                with name Fee_&lt;name of BlockDescriptor&gt; and blockType==FEE_BLOCK to each
                BlockDescriptor with blockManagementType==NVM_BLOCK_NATIVE and
                targetBlockType==FEE_BLOCK. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationFeeNative</srcid><srcstatus/><internalId>326</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.AllocateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationFeeRedundant</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemoryModuleConfigurator shall assign two BlockConfiguration objects
                with names Fee_&lt;name of BlockDescriptor&gt; and Fee_&lt;name of
                BlockDescriptor&gt;_Red and blockType==FEE_BLOCK to each BlockDescriptor with
                blockManagementType==NVM_BLOCK_REDUNDANT and targetBlockType==FEE_BLOCK. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationFeeRedundant</srcid><srcstatus/><internalId>327</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.AllocateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationFeeDataSet</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemoryModuleConfigurator shall assign i BlockConfiguration objects with
                names Fee_&lt;name of BlockDescriptor&gt;_&lt;i&gt; and blockType==FEE_BLOCK to each
                BlockDescriptor with blockManagementType==NVM_BLOCK_DATASET and
                targetBlockType==FEE_BLOCK where i equals BlockConfiguration.nvBlockNum. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationFeeDataSet</srcid><srcstatus/><internalId>328</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.AllocateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationEaNative</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemoryModuleConfigurator shall assign one BlockConfiguration object
                with name Ea_&lt;name of BlockDescriptor&gt; and blockType==EA_BLOCK to each
                BlockDescriptor with blockManagementType==NVM_BLOCK_NATIVE and
                targetBlockType==EA_BLOCK. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaNative</srcid><srcstatus/><internalId>329</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.AllocateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationEaRedundant</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemoryModuleConfigurator shall assign two BlockConfiguration objects
                with names Ea_&lt;name of BlockDescriptor&gt; and Ea_&lt;name of
                BlockDescriptor&gt;_Red and blockType==EA_BLOCK to each BlockDescriptor with
                blockManagementType==NVM_BLOCK_REDUNDANT and targetBlockType==EA_BLOCK. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaRedundant</srcid><srcstatus/><internalId>330</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.AllocateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationEaDataSet</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemoryModuleConfigurator shall assign i BlockConfiguration objects with
                names Ea_&lt;name of BlockDescriptor&gt;_&lt;i&gt; and blockType==EA_BLOCK to each
                BlockDescriptor with blockManagementType==NVM_BLOCK_DATASET and
                targetBlockType==EA_BLOCK where i equals BlockConfiguration.nvBlockNum. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaDataSet</srcid><srcstatus/><internalId>331</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.AllocateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationStartingMappedBlock</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When adding a new BlockConfiguration object, the MemoryModuleConfigurator
                shall set the reference startingMappedBlockConfiguration from the BlockDescriptor to
                the first BlockConfiguration assigned to the BlockDescriptor. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationStartingMappedBlock_Native</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationStartingMappedBlock_Redundant</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationStartingMappedBlock_Dataset</srcid><srcstatus/><internalId>334</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.AllocateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationReferencedBlockDescriptor</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When adding a new BlockConfiguration objects, the MemoryModuleConfigurator
                shall set the attribute referencedBlockDescriptor to BlockDescriptor.name. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationReferencedBlockDescriptor_Native</srcid><srcstatus/><internalId>335</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationReferencedBlockDescriptor_Redundant</srcid><srcstatus/><internalId>336</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationReferencedBlockDescriptor_Dataset</srcid><srcstatus/><internalId>337</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.AllocateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationExists</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>If BlockConfiguration object(s) for a BlockDescriptor already exist, the
                MemoryModuleConfigurator shall use the existing BlockConfiguration objects and shall
                not change the name of them. The other parameters shall be updated.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationAlreadyExists</srcid><srcstatus/><internalId>370</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorNameChanged</srcid><srcstatus/><internalId>371</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorTargetTypeChanged</srcid><srcstatus/><internalId>372</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaChangeToFee</srcid><srcstatus/><internalId>373</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Native_Redundant</srcid><srcstatus/><internalId>374</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Redundant_Native</srcid><srcstatus/><internalId>375</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Native_Dataset</srcid><srcstatus/><internalId>376</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Dataset_Native</srcid><srcstatus/><internalId>377</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Redundant_Dataset</srcid><srcstatus/><internalId>378</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Dataset_Redundant</srcid><srcstatus/><internalId>379</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationNameMangling</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When assigning names to BlockConfiguration objects and the name is not
                unique among all BlockConfigurationObjects, the MemoryModuleConfigurator shall
                mangle a unique name by assigning an additional suffix. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationNameMangling</srcid><srcstatus/><internalId>380</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.AllocateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationRemoveUnused</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemoryModuleConfigurator shall remove BlockConfiguration objects and
                the corresponding row mementos when they do not belong to a BlockDescriptor anymore. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DeleteNvMFeeEaBlocksBlocks.DeleteFeeEaBlocks</srcid><srcstatus/><internalId>177</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationRemoveUnused_Native</srcid><srcstatus/><internalId>366</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationRemoveUnused_Redundant</srcid><srcstatus/><internalId>367</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureBlockDescriptor_BlockConfig</srcid><srcstatus/><internalId>368</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationRemoveUnused_Dataset</srcid><srcstatus/><internalId>369</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.DeleteFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>

            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationSizeNoCRC</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> The MemoryModuleConfigurator shall set the size of the BlockConfiguration
                to the size of the BlockDescriptor when blockUseCRC==false. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeNoCRC_Native</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeNoCRC_Redundant</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeNoCRC_Dataset</srcid><srcstatus/><internalId>340</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>

            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationSizeCRC8</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> The MemoryModuleConfigurator shall set the size of the BlockConfiguration
                to the size of the BlockDescriptor plus 1 when blockUseCRC==true and
                blockCRCType=NVM_CRC8. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC8_Native</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC8_Redudant</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC8_Dataset</srcid><srcstatus/><internalId>343</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationSizeCRC16</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> The MemoryModuleConfigurator shall set the size of the BlockConfiguration
                to the size of the BlockDescriptor plus 2 when blockUseCRC==true and
                blockCRCType=NVM_CRC16. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC16_Native</srcid><srcstatus/><internalId>344</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC16_Redudant</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC16_Dataset</srcid><srcstatus/><internalId>346</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationSizeCRC32</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> The MemoryModuleConfigurator shall set the size of the BlockConfiguration
                to the size of the BlockDescriptor plus 4 when blockUseCRC==true and
                blockCRCType=NVM_CRC32. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC32_Native</srcid><srcstatus/><internalId>347</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC32_Redundant</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC32_Dataset</srcid><srcstatus/><internalId>349</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>
		
        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> The NvMCryptoExtraInfoSize shall be considered when calculating the actual
				block size when calling lower layers. This information can be either a MAC, a Hash 
				or a Crypto initialization Vector plus a Mac.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeNoCRC_Native</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeNoCRC_Redundant</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeNoCRC_Dataset</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC8_Native</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC8_Redudant</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC8_Dataset</srcid><srcstatus/><internalId>343</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC16_Native</srcid><srcstatus/><internalId>344</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC16_Redudant</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC16_Dataset</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC32_Native</srcid><srcstatus/><internalId>347</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC32_Redundant</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC32_Dataset</srcid><srcstatus/><internalId>349</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations><ruleid>WRN.tsc.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>17</internalId></specobject>
        
        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationLocation</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> The BlockConfiguration location can be manually set after
                 the NvmBlockDescriptor that is linked to the BlockConfiguration is modified. If there are more than one module 
                 in the project for ex(Ea,Ea_n or Fee/Fee_n) you can manualy select the module
                 location, where it will be saved.
                 If BlockConfiguration is of the type EA_BLOCK/FEE_BLOCK then you can select only Ea
                 or Ea_n/Fee or Fee_n.Where n represents the number of Ea/Fee modules inside the
                 project.
                </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationRemoveUnused_Redundant</srcid><srcstatus/><internalId>367</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.Location</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
        
        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationEaFeeBaseNumber</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemoryModuleConfigurator shall assign the blockNumber of the i th
                BlockConfiguration object (i=1, 2, 3, ...) belonging to a BlockDescriptor according
                to the following rule: the block number should be unique and it should not 
				result a data lose while right shifting by dataSelectionBits.
				</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber_Native</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber_Redundant</srcid><srcstatus/><internalId>351</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber_Dataset</srcid><srcstatus/><internalId>352</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
		<specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationExistingEaFeeBlockNumber</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>If the user has manually assigned Ea/Fee block numbers to Ea/Fee blocks, 
				the MemoryModuleConfigurator shall keep these assigned numbers if there is no conflict. So if an Ea/Fee block already has a block number, 
				this block number shall not be overwritten if it is correct. The block base number of the NvM block shall be derived from this Ea/Fee block number. 
				When assigning new block numbers, the MemoryModuleConfigurator shall not assign block numbers which are already in use. When the Ea/Fee block number 
				is already assigned to a different Ea/Fee block, the MemoryModuleConfigurator shall use the next possible value.

				</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber</srcid><srcstatus/><internalId>387</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber_Delete</srcid><srcstatus/><internalId>388</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber_Invalid</srcid><srcstatus/><internalId>389</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigEaFeeBaseNumber_Increase_DataselectionBits</srcid><srcstatus/><internalId>390</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigEaFeeBaseNumber_Decrease_DataselectionBits</srcid><srcstatus/><internalId>391</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationImmediateData</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemoryModuleConfigurator shall set BlockConfiguration.immediateData to
                true when AbstractMemAsDataProvider.nvmJobPriorization=true and BlockDescriptor.blockPriority=0. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationImmediateData_Native</srcid><srcstatus/><internalId>353</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationImmediateData_Redundant</srcid><srcstatus/><internalId>354</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationImmediateData_Dataset</srcid><srcstatus/><internalId>355</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexFls</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> When adding a new BlockConfiguration object, the MemoryModuleConfigurator
                shall set BlockConfiguration.deviceIndex to the first FlsGeneral container's FlsDriverIndex id of all 
				Fls module configurations when blockType==FEE_BLOCK.
                When the BlockConfiguration object already exists, the deviceIndex shall only be
                changed if it refers to an EepGeneral container. Also the NVRAMDeviceId shall be set to the
				FeeIndex value inside the Fee configuration, taken from the FeeTargetBlockReference associated 
				with the NV block.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexFls</srcid><srcstatus/><internalId>356</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexWithDifferentFls</srcid><srcstatus/><internalId>381</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexFls_Multiple</srcid><srcstatus/><internalId>382</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorNvRAMDeviceId_Fee_Dataset</srcid><srcstatus/><internalId>386</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
		
		<specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexMemAcc</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> When adding a new BlockConfiguration object, the MemoryModuleConfigurator
                shall set BlockConfiguration.deviceIndex to the value of the index based
                MemAccAddressAreaConfiguration container's MemAccAddressAreaId, of all MemAcc module configurations when blockType==FEE_BLOCK/EA_BLOCK and FeeMemAccUsage/EaMemAccUsage parameter is set to true.
                When the BlockConfiguration object already exists, the deviceIndex shall only be
                changed if it refers to different MemAccAddressArea container. Also the NVRAMDeviceId shall be set to the
				MemAccAddressAreaId value, taken from the FeeTargetBlockReference/EaTargetBlockReference associated 
				with the NV block.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CheckDeviceIndexWhenMemAccUsed.ConfigureMemAccAndCheckResults</srcid><srcstatus/><internalId>175</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexMemAcc</srcid><srcstatus/><internalId>357</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexEep</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When adding a new BlockConfiguration object, the MemoryModuleConfigurator
                shall set BlockConfiguration.deviceIndex to the firstEepGeneral container's FlsDriverIndex id of all 
				Eep module configurations when blockType==EA_BLOCK. When
                the BlockConfiguration object already exists, the deviceIndex shall only be changed
                if it refers to an FlsGeneral container. Also the NVRAMDeviceId shall be set to the
				EaIndex value inside the Ea configuration, taken from the EaTargetBlockReference associated 
				with the NV block.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexEep</srcid><srcstatus/><internalId>358</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexWithDifferentEep</srcid><srcstatus/><internalId>383</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexEep_Multiple</srcid><srcstatus/><internalId>384</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorNvRAMDeviceId_Ea_Dataset</srcid><srcstatus/><internalId>385</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationWriteCycles</id>
            <status>approved</status><source>EB</source>
            <version>2</version>
            <description>When adding a new BlockConfiguration object, the MemoryModuleConfigurator
                shall set numberOfWriteCycles, If FeeDeviceIndex/EaDeviceIndex is enabled in Fee/Ea module, 
				use FlsSpecifiedEraseCycles/EepSpecifiedEraseCycles value. If FeeMemAccAddressArea/EaMemAccAddressArea is enabled in Fee/Ea module, 
				redirect to its reference and go to the MemAccSubAddressAreaConfiguration for all the childcontainers of MemAccSubAddressAreaConfiguration 
				if,
					MemAccFlsEepSectorBatchRef is enabled then take FlsEepSpecifiedEraseCycles value or if
					MemAccSectorBatchRef is enabled then take MemSpecifiedEraseCycles value. 
				Now return the smallest of EraseCycles value from the child containers of MemAccSubAddressAreaConfiguration.
				When the BlockConfiguration already exists, the value shall not be overwritten.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_Native</srcid><srcstatus/><internalId>359</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_Redundant</srcid><srcstatus/><internalId>360</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_Dataset</srcid><srcstatus/><internalId>361</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_Native_Exists</srcid><srcstatus/><internalId>362</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_Redundant_Exists</srcid><srcstatus/><internalId>363</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_MemAcc</srcid><srcstatus/><internalId>364</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_MCAL_MemAcc</srcid><srcstatus/><internalId>365</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
		
		<specobject>
            <id>memas.design.algorithm.configurator.BlockDescriptorWithUniqueName</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The memory module configurator shall not change anything when the NvM blocks don't have unique names. 
			Instead, it shall show a message in a message box that the block names are not unique.</description>
		    <needscoverage>
		        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>BlockDescriptorWithSameName.BlockDescriptorWithSameName</srcid><srcstatus/><internalId>187</internalId></linkedfrom></coveredby></needscov>
		    <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>
		
		<specobject>
            <id>memas.design.algorithm.configurator.BlockDescriptorBlockNum</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The memory module configurator shall set the nvBlockNum of a block descriptor according to
				the block management type. If blockManagementType is NVM_BLOCK_NATIVE, nvBlockNum shall be 1. 
				If blockManagementType is NVM_BLOCK_REDUNDANT, nvBlockNum shall be 2. If blockManagementType 
				is NVM_BLOCK_DATASET, no transformation required.</description>
		    <needscoverage>
		        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>BlockDescriptorBlockNumAndBlockDescriptorRomBlockNum.BlockDescriptorBlockNum</srcid><srcstatus/><internalId>188</internalId></linkedfrom></coveredby></needscov>
		    <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateNvMValues</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
		
		<specobject>
            <id>memas.design.algorithm.configurator.BlockDescriptorRomBlockNum</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The memory module configurator shall set the romBlockNum of a block descriptor based on 
				block rom block dataAddress and block management type. If romBlockDataAddress is empty, 
				romBlockNum shall be 0 else if blockManagementType is not NVM_BLOCK_DATASET, romBlockNum shall be 
				shall be 1. Default value for romBlockNum for newly created Block Descriptor shall be 0.</description>
		    <needscoverage>
		        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>BlockDescriptorBlockNumAndBlockDescriptorRomBlockNum.BlockDescriptorBlockNum</srcid><srcstatus/><internalId>188</internalId></linkedfrom></coveredby></needscov>
		    <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateNvMValues</linksto>					
					<dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
				<provcov>
                    <linksto>memas.req.RomBlockDefaultValue</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
		
		<specobject>
            <id>memas.design.algorithm.configurator.NvBlockNeedsNvBlockSwComponentType</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The NV block needs configurator shall add one BlockDescriptor object for
                each NvBlockNeeds of a NvBlockSwComponentType.</description>
		    <needscoverage>
		        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptor</srcid><srcstatus/><internalId>395</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptorForServiceNeeds</srcid><srcstatus/><internalId>396</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptor_Ea</srcid><srcstatus/><internalId>397</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptor_No_ECUExtract</srcid><srcstatus/><internalId>399</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testNvmBlockLengthNvBlockNeedsBlockDescriptor</srcid><srcstatus/><internalId>400</internalId></linkedfrom></coveredby></needscov>
		    <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.NvBlockNeeds</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.NvBlockNeedsAtomicSwComponentType</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The NV block needs configurator shall add one BlockDescriptor object for
                each NvBlockNeeds contained in the SwcServiceDependencys in the internal behavior of
                an AtomicSwComponentType other than NvBlockSwComponentType.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptor</srcid><srcstatus/><internalId>395</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptorForServiceNeeds</srcid><srcstatus/><internalId>396</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptor_Ea</srcid><srcstatus/><internalId>397</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptor_No_ECUExtract</srcid><srcstatus/><internalId>399</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testNvmBlockLengthNvBlockNeedsBlockDescriptor</srcid><srcstatus/><internalId>400</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.NvBlockNeeds</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.NvBlockNeedsAttributes</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The attributes of the BlockDescriptor shall be derived from the
                NvBlockNeeds as stated in the table "Mapping of attributes of NvBlockNeeds to
                attributes of BlockDescriptor".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptor</srcid><srcstatus/><internalId>395</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptorForServiceNeeds</srcid><srcstatus/><internalId>396</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptor_Ea</srcid><srcstatus/><internalId>397</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testNvmBlockLengthNvBlockNeedsBlockDescriptor</srcid><srcstatus/><internalId>400</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.NvBlockNeeds</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>

        <specobject>
            <id>memas.design.algorithm.configurator.NvBlockNeedsAlreadyExists</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>If a BlockDescriptor with the name of the NvBlockNeeds already exists, the
                NvBlockNeeds shall be ignored.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testNvBlockNeedsAlreadyExists</srcid><srcstatus/><internalId>398</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.NvBlockNeeds</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
		 
        <specobject>
            <id>memas.design.algorithm.configurator.BlockConfigurationSizeStaticBlockIdCheck</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> The MemoryModuleConfigurator shall add two additional bytes to the size of  
			the BlockConfiguration when checkStaticBlockId=true. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSize_staticBlockIDChecked</srcid><srcstatus/><internalId>392</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC16_staticBlockIDChecked</srcid><srcstatus/><internalId>393</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC32_staticBlockIDChecked</srcid><srcstatus/><internalId>394</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.CalculateFeeEaBlockParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
                <provcov>
                    <linksto>memas.req.UpdateFeeEaBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
    </specobjects>
    <specobjects doctype="dsn">
        <defaults>
            <idprefix>memas.design.errorhandling.</idprefix>
            <source>EB</source>
        </defaults>

        <specobject>
            <id>memas.design.errorhandling.Validate1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.name is out of the
                valid range.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationBlockDescriptorNameisOutofValidRange</srcid><srcstatus/><internalId>256</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationBlockDescriptorNameisValidOrNot</srcid><srcstatus/><internalId>257</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_49</srcid><srcstatus/><internalId>194</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInvalidParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate2</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.name is not
                unique.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationBlockDescriptorNameisNotunique</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationBlockDescriptorNameisNotuniqueBeforeStart</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_83</srcid><srcstatus/><internalId>196</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInvalidParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate4</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.nvBlockNum contains
                a different value than 1 for native blocks.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationofNvMBlockNumberForNative</srcid><srcstatus/><internalId>260</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_123</srcid><srcstatus/><internalId>197</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate5</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.nvBlockNum contains
                a different value than 2 for redundant blocks.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationofNvMBlockNumberForRedundant</srcid><srcstatus/><internalId>261</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationForModuleWithProblems</srcid><srcstatus/><internalId>311</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_148</srcid><srcstatus/><internalId>198</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate6</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.nvBlockNum contains
                a value lower than 2 or greater than (2 to the power of dataSelectionBits) for data
                set blocks.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationofNvMBlockNumberForDatasetWithLessthanMinValue</srcid><srcstatus/><internalId>262</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationofNvMBlockNumberForDatasetWithGreaterthanMaxValue</srcid><srcstatus/><internalId>263</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_172</srcid><srcstatus/><internalId>199</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate7</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.romBlockNum is not
                set 1 and BlockDescriptor.romBlockDataAddress is not an empty string for native and
                redundant blocks.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfRomBlockNumberForNative</srcid><srcstatus/><internalId>264</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfRomBlockNumberForRedundant</srcid><srcstatus/><internalId>265</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationForModuleWithProblems</srcid><srcstatus/><internalId>311</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_199</srcid><srcstatus/><internalId>200</internalId></linkedfrom><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_228</srcid><srcstatus/><internalId>201</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate9</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.romBlockNum is
                greater than 0 but BlockDescriptor.romBlockDataAddress is an empty
                string.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfRomBlockNumberForAll</srcid><srcstatus/><internalId>266</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusNotOk</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_256</srcid><srcstatus/><internalId>202</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate10</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.blockBaseNumber does
                not equal BlockConfiguration.BlockNumber (Fee/Ea block configuration block number
                referenced in NvMTargetBlockReference) &gt;&gt; dataSelectionBits.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockBaseNumber</srcid><srcstatus/><internalId>267</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusNotOk</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_281</srcid><srcstatus/><internalId>203</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate11</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.nvRAMDeviceId does
                not equal the value of the ECU configuration parameter [Fls/Eep]DriverIndex in the
                container which is referenced by referencedBlockDescriptor of the
                startingMappedBlockConfiguration.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfNvramDeviceIdandDeviceIndexofFee</srcid><srcstatus/><internalId>268</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfNvramDeviceIdanddeviceindexofEa</srcid><srcstatus/><internalId>269</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfNvramDeviceIdandDeviceIndexofMemAcc</srcid><srcstatus/><internalId>270</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusNotOk</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_308</srcid><srcstatus/><internalId>204</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate12</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.blockLength contains
                a value which is out of the valid range.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockLength</srcid><srcstatus/><internalId>271</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusNotOk</srcid><srcstatus/><internalId>310</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationForModuleWithProblems</srcid><srcstatus/><internalId>311</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_339</srcid><srcstatus/><internalId>205</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInvalidParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate13</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.ramBlockDataAddress
                contains a value which is out of the valid range. Valid range is a C identifier
                (including -&gt; and []).</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfRamBlockAddress</srcid><srcstatus/><internalId>272</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockAddresses</srcid><srcstatus/><internalId>274</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusNotOk</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_66</srcid><srcstatus/><internalId>195</internalId></linkedfrom><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_359</srcid><srcstatus/><internalId>206</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInvalidParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate14</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.romBlockDataAddress
                contains a value which is out of the valid range. Valid range is a C identifier
                (including -&gt; and []).</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfRomBlockAddress</srcid><srcstatus/><internalId>273</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockAddresses</srcid><srcstatus/><internalId>274</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_66</srcid><srcstatus/><internalId>195</internalId></linkedfrom><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_384</srcid><srcstatus/><internalId>207</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInvalidParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate15</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockDescriptor.targetBlockType==FEE_BLOCK but startingMappedBlockConfiguration
                refers to a BlockConfiguration with blockType==EA_BLOCK.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfTargetBlocktypeofFEEBlock</srcid><srcstatus/><internalId>275</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_409</srcid><srcstatus/><internalId>208</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate16</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockDescriptor.targetBlockType==EA_BLOCK but startingMappedBlockConfiguration
                refers to a BlockConfiguration with blockType==FEE_BLOCK.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfTargetBlocktypeofEaBlock</srcid><srcstatus/><internalId>276</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_409</srcid><srcstatus/><internalId>208</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate17</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockDescriptor.startingMappedBlockConfiguration does not refer to a
                BlockConfiguration.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfStartingMappedBlockConfig</srcid><srcstatus/><internalId>277</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_441</srcid><srcstatus/><internalId>209</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate18</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockDescriptor.startingMappedBlockConfiguration of multiple BlockDescriptor objects
                refer to the same BlockConfiguration.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfSMBlockConfigMapping</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_461</srcid><srcstatus/><internalId>210</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate19</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockDescriptor.blockManagementType==NVM_BLOCK_NATIVE but there is not exactly one
                BlockConfiguration object with BlockConfiguration.blockNumber ==
                BlockDescriptor.blockBaseNumber &lt;&lt; dataSelectionBits, which refers to the
                BlockDescriptor via BlockConfiguration.referencedBlockDescriptor.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateBlockconfigExistForNativeBlockDescriptor</srcid><srcstatus/><internalId>279</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_513</srcid><srcstatus/><internalId>211</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate20</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockDescriptor.blockManagementType==NVM_BLOCK_REDUNDANT but there are not exactly
                two BlockConfiguration objects with BlockConfiguration.blockNumber ==
                BlockDescriptor.blockBaseNumber &lt;&lt; dataSelectionBits + i (i=0,1) which refers
                to the BlockDescriptor via
                BlockConfiguration.referencedBlockDescriptor.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateBlockconfigExistForRedundantBlockDescriptor</srcid><srcstatus/><internalId>280</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_575</srcid><srcstatus/><internalId>212</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate21</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockDescriptor.blockManagementType==NVM_BLOCK_DATASET but there are not exactly
                BlockDescriptor.nvBlockNum BlockConfiguration objects with
                BlockConfiguration.blockNumber == BlockDescriptor.blockBaseNumber &lt;&lt;
                dataSelectionBits + i(i=0..nvBlockNum) which refers to the BlockDescriptor via
                BlockConfiguration.referencedBlockDescriptor.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateBlockconfigExistForDatasetBlockDescriptor</srcid><srcstatus/><internalId>281</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_656</srcid><srcstatus/><internalId>213</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate22</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockConfiguration.blockNumber is
                out of the valid range.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlocknumberofblockconfigurationisValid</srcid><srcstatus/><internalId>282</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusNotOk</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_738</srcid><srcstatus/><internalId>214</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInvalidParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate23</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockConfiguration.blockNumber is
                not unique within the Ea or Fee i.e. BlockConfiguration.blockNumber shall be unique for all Fee blocks or
                for all Ea blocks. An Ea block can have the same number as an Fee block.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlocknumberofblockconfigurationisUnique</srcid><srcstatus/><internalId>283</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusNotOk</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_756</srcid><srcstatus/><internalId>215</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInvalidParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>



        <specobject>
            <id>memas.design.errorhandling.Validate24</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockConfiguration.blockSize does
                not equal size of the referenced BlockDescriptor with plus NvMCryptoExtraInfoSize 
                blockUseCRC=false and checkStaticBlockId=false.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfiguration</srcid><srcstatus/><internalId>284</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1514</srcid><srcstatus/><internalId>233</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>


        <specobject>
            <id>memas.design.errorhandling.Validate25_1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockConfiguration.blockSize does
                not equal size of the referenced BlockDescriptor plus NvMCryptoExtraInfoSize plus 1 with blockUseCRC=true,
                blockCRCType=NVM_CRC8 and checkStaticBlockId=false.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC8</srcid><srcstatus/><internalId>285</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC8WithCryptoExtraInfoSize</srcid><srcstatus/><internalId>288</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC8PlusCryptoExtraInfoSizePlusCheckStaticBlockId</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1515</srcid><srcstatus/><internalId>234</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate25</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockConfiguration.blockSize does
                not equal size of the referenced BlockDescriptor plus NvMCryptoExtraInfoSize plus 2 with blockUseCRC=true,
                blockCRCType=NVM_CRC16 and checkStaticBlockId=false.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC16</srcid><srcstatus/><internalId>286</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC16WithCryptoExtraInfoSize</srcid><srcstatus/><internalId>290</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC16PlusCryptoExtraInfoSizePlusCheckStaticBlockId</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1516</srcid><srcstatus/><internalId>235</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate26</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockConfiguration.blockSize does
                not equal size of the referenced BlockDescriptor plus NvMCryptoExtraInfoSize plus 4 with blockUseCRC=true,
                blockCRCType=NVM_CRC32 and checkStaticBlockId=false.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC32</srcid><srcstatus/><internalId>287</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC32WithCryptoExtraInfoSize</srcid><srcstatus/><internalId>292</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC32PlusCryptoExtraInfoSizePlusCheckStaticBlockId</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1517</srcid><srcstatus/><internalId>236</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate27</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockConfiguration.deviceIndex
                contains a value which is out of range.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfDeviceIndexofFeeblockconfigurationLessthanZero</srcid><srcstatus/><internalId>294</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfDeviceIndexofFeeblockconfigurationgreaterthanMaxval</srcid><srcstatus/><internalId>295</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfDeviceIndexofEablockconfigurationLessthanZero</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfDeviceIndexofEablockconfigurationgreaterThanMaxVal</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationForModuleWithProblems</srcid><srcstatus/><internalId>311</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_798</srcid><srcstatus/><internalId>216</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInvalidParameters</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate28</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockConfiguration.referencedBlockDescriptor does not contain the name of an
                existing BlockDescriptor.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfReferencedBlockDescofblockconfiguration</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_820</srcid><srcstatus/><internalId>217</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate29</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockDescriptor.targetBlockType==FEE_BLOCK but the Fee or the Fls are not part of
                the project.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFeeFlsModulesPresent</srcid><srcstatus/><internalId>299</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFeeFlsmodulesMissing</srcid><srcstatus/><internalId>300</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFeeModuleMissing</srcid><srcstatus/><internalId>301</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFlsmoduleMissing</srcid><srcstatus/><internalId>302</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepFlsFeeBlockMissing</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepFlsFeeBlockPresent</srcid><srcstatus/><internalId>304</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_854</srcid><srcstatus/><internalId>218</internalId></linkedfrom><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1049</srcid><srcstatus/><internalId>220</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsFeeEaNotAvailable</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate30</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockDescriptor.targetBlockType==EA_BLOCK but the Ea or the Eep are not part of the
                project.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepFlsFeeBlockMissing</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepFlsFeeBlockPresent</srcid><srcstatus/><internalId>304</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepModulesPresent</srcid><srcstatus/><internalId>305</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepModuleMissing</srcid><srcstatus/><internalId>306</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaModuleMissing</srcid><srcstatus/><internalId>307</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEepModuleMissing</srcid><srcstatus/><internalId>308</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_854</srcid><srcstatus/><internalId>218</internalId></linkedfrom><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1049</srcid><srcstatus/><internalId>220</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsFeeEaNotAvailable</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate31</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockConfiguration.blockType==FEE_BLOCK but the Fee or the Fls are not part of the
                project.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFeeFlsModulesPresent</srcid><srcstatus/><internalId>299</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFeeFlsmodulesMissing</srcid><srcstatus/><internalId>300</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFeeModuleMissing</srcid><srcstatus/><internalId>301</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFlsmoduleMissing</srcid><srcstatus/><internalId>302</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepFlsFeeBlockMissing</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepFlsFeeBlockPresent</srcid><srcstatus/><internalId>304</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_953</srcid><srcstatus/><internalId>219</internalId></linkedfrom><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1049</srcid><srcstatus/><internalId>220</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsFeeEaNotAvailable</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate32</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when
                BlockConfiguration.blockType==EA_BLOCK but the Ea or the Eep are not part of the
                project.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepFlsFeeBlockMissing</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepFlsFeeBlockPresent</srcid><srcstatus/><internalId>304</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepModulesPresent</srcid><srcstatus/><internalId>305</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepModuleMissing</srcid><srcstatus/><internalId>306</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaModuleMissing</srcid><srcstatus/><internalId>307</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEepModuleMissing</srcid><srcstatus/><internalId>308</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_953</srcid><srcstatus/><internalId>219</internalId></linkedfrom><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1049</srcid><srcstatus/><internalId>220</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsFeeEaNotAvailable</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate33</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when number of write cycles of a block
                configuration contains a value which is out of range.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateNumberofWriteCyclesOfBlockConfiguration</srcid><srcstatus/><internalId>312</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1140</srcid><srcstatus/><internalId>222</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate34</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when NvmBlockJobPriority of a block
                descriptor contains a value which is out of range.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusNotOk</srcid><srcstatus/><internalId>310</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationForModuleWithProblems</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateNvmJobPrioritization</srcid><srcstatus/><internalId>313</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1161</srcid><srcstatus/><internalId>223</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>
        <specobject>
            <id>memas.design.errorhandling.Validate35</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockDescriptor.priority is high but
                mappedBlockConfigurations BlockConfiguration.immediatedata is not set to true and
                vice versa.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateBlockConfigurationImmediateData</srcid><srcstatus/><internalId>314</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1181</srcid><srcstatus/><internalId>224</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>
        <specobject>
            <id>memas.design.errorhandling.Validate36</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when the user opens the Memory Stack Editor and
                BlockDescriptor.nvramBlockIdentifier is not uniquely assigned .</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>BadNvramBlockIdentifier.BadNvramBlockParameters</srcid><srcstatus/><internalId>185</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1238</srcid><srcstatus/><internalId>225</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>
        
        <specobject>
            <id>memas.design.errorhandling.Validate37</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when the user opens the Memory Stack Editor and
                BlockDescriptor.nvramBlockIdentifier is not assigned.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>BadNvramBlockIdentifier.BadNvramBlockParameters</srcid><srcstatus/><internalId>185</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1268</srcid><srcstatus/><internalId>226</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>
        <specobject>
            <id>memas.design.errorhandling.Validate38</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report when the user opens the Memory Stack Editor and any dataset
                block with BlockDescriptor.nvmNvBlockNum is greater than the maximum
                limit.</description>
            <needscoverage>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1304</srcid><srcstatus/><internalId>227</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>BadNvramBlockIdentifier.BadNvramBlockParameters</srcid><srcstatus/><internalId>185</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusNotOk</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>
        <specobject>
            <id>memas.design.errorhandling.Validate39</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report when the user opens the Memory Stack Editor and block
                descriptors have the same target reference.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SameTargetReference.SameTargetReference</srcid><srcstatus/><internalId>186</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1347</srcid><srcstatus/><internalId>229</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>
        <specobject>
            <id>memas.design.errorhandling.Validate40</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report a warning when no block descriptors are present to
                configure.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateBlockDescriptorsPresentToConfigure</srcid><srcstatus/><internalId>315</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1386</srcid><srcstatus/><internalId>230</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>
        <specobject>
            <id>memas.design.errorhandling.Validate41</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when blockConfiguration.blocknumber is
                invalid.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidateAllBlockConfigurationBlockNumber</srcid><srcstatus/><internalId>316</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1408</srcid><srcstatus/><internalId>231</internalId></linkedfrom><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1475</srcid><srcstatus/><internalId>232</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate42</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockConfiguration.blockSize does
                not equal size of the referenced BlockDescriptor plus NvMCryptoExtraInfoSize plus 2 with
                blockUseCRC=false and checkStaticBlockId=true.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationWithCheckStaticBlockIDChecked</srcid><srcstatus/><internalId>317</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1518</srcid><srcstatus/><internalId>237</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate43_1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockConfiguration.blockSize does
                not equal size of the referenced BlockDescriptor plus NvMCryptoExtraInfoSize plus 3 with blockUseCRC=true,
                blockCRCType=NVM_CRC8 and checkStaticBlockId=true.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC8AndStaticBlockIdChecked</srcid><srcstatus/><internalId>318</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1519</srcid><srcstatus/><internalId>238</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate43</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockConfiguration.blockSize does
                not equal size of the referenced BlockDescriptor plus NvMCryptoExtraInfoSize plus 4 with blockUseCRC=true,
                blockCRCType=NVM_CRC16 and checkStaticBlockId=true.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusNotOk</srcid><srcstatus/><internalId>310</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC16AndStaticBlockIdChecked</srcid><srcstatus/><internalId>319</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1520</srcid><srcstatus/><internalId>239</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>

        <specobject>
            <id>memas.design.errorhandling.Validate44</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report an error when BlockConfiguration.blockSize does
                not equal size of the referenced BlockDescriptor plus NvMCryptoExtraInfoSize plus 6 with blockUseCRC=true,
                blockCRCType=NVM_CRC32 and checkStaticBlockId=true.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationForModuleWithProblems</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC32AndStaticBlockIdChecked</srcid><srcstatus/><internalId>320</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1521</srcid><srcstatus/><internalId>240</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ReportErrorsInconsistentConfig</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>
    </specobjects>
    <specobjects doctype="dsn">
        <defaults>
            <idprefix>memas.design.information.datamodel.</idprefix>
            <source>EB</source>
        </defaults>

        <specobject>
            <id>memas.design.information.datamodel.MementoFactory1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>Each time a new row memento of the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS is
                created, the MemAsMementoFactory shall create a new BlockDescriptor object and shall
                assign it to the memento created. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataModelTest.testMementoFactoryForBlockDescriptor</srcid><srcstatus/><internalId>246</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>

        <specobject>
            <id>memas.design.information.datamodel.MementoFactory2</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>Each time a new row memento of the MEMENTO_BLOCK_CONFIGURATION_TABLE is
                created, the MemAsMementoFactory shall create a new BlockConfiguration object and
                shall assign it to the memento created. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataModelTest.testMementoFactoryForBlockConfiguration</srcid><srcstatus/><internalId>247</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>
        <specobject>
            <id>memas.design.information.datamodel.MementoFactory4</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemAsMementoFactory shall make all mementos
                non-persistant execept the root memento and the meta data memento.</description>
            <rationale>All data is stored in the ECU configuration.</rationale>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataModelTest.testMementoFactoryForBlockDescriptor</srcid><srcstatus/><internalId>246</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.DataModelTest.testMementoFactoryForBlockConfiguration</srcid><srcstatus/><internalId>247</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>

        <specobject>
            <id>memas.design.information.datamodel.BlockDescriptor1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The getter methods of BlockDescriptor shall transform the values from the
                GUI representation to the internal representation according to table "Storage
                location and GUI transformation for attributes of BlockDescriptor".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.BlockDescriptorTest.testSetterGetterNvmBlockPriority</srcid><srcstatus/><internalId>241</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.DataModelTest.testGetBlockDescriptorAttributes</srcid><srcstatus/><internalId>242</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>

        <specobject>
            <id>memas.design.information.datamodel.BlockDescriptor2</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The setter methods of BlockDescriptor shall transform the values from the
                internal representation to the GUI representation according to table "Storage
                location and GUI transformation for attributes of BlockDescriptor".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataModelTest.testSetBlockDescriptorAttributes</srcid><srcstatus/><internalId>243</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>

        <specobject>
            <id>memas.design.information.datamodel.BlockConfiguration1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The getter methods of BlockConfiguration shall transform the values from
                the GUI representation to the internal representation according to table "Storage
                location and GUI transformation for attributes of BlockConfiguration".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataModelTest.testGetBlockConfigurationAttributes</srcid><srcstatus/><internalId>244</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>

        <specobject>
            <id>memas.design.information.datamodel.BlockConfiguration2</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The setter methods of BlockConfiguration shall transform the values from
                the internal representation to the GUI representation according to table "Storage
                location and GUI transformation for attributes of BlockConfiguration".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataModelTest.testSetBlockConfigurationAttributes</srcid><srcstatus/><internalId>245</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>

    </specobjects>
    <specobjects doctype="dsn">
        <defaults>
            <idprefix>memas.design.interaction.pull.</idprefix>
            <source>EB</source>
        </defaults>

        <specobject>
            <id>memas.design.interaction.pull.PullEvent1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> When the Memory Stack Editor is loaded, the MemAsBackend shall call the
            PullMemAsConfigurationEvent.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CheckNvMValues.CheckPreConfiguration</srcid><srcstatus/><internalId>189</internalId></linkedfrom><linkedfrom><srcid>CheckNvMValues.CheckAdditionalConfig</srcid><srcstatus/><internalId>190</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.pull.PullEvent2</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the Memory Stack Editor is finished, the MemAsBackend shall call the
                PushMemAsConfigurationEvent to initiate the write back of the data to the ECU
                configuration.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CheckChangesInEcuConfiguration.ConfigureDevice</srcid><srcstatus/><internalId>179</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.pull.DataProvider1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each FeeBlockConfiguration existent in the Fee configuration modules that are
                included in the project, the MemAsDataProvider shall add a new row memento to 
                MEMENTO_BLOCK_CONFIGURATION_TABLE and shall create a new instance of BlockConfiguration in the data
                model.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataProviderTest.testPullFeeConfiguration</srcid><srcstatus/><internalId>248</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.pull.DataProvider2</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each FeeBlockConfiguration existent in the Fee configuration modules that are
                included in the project, the MemAsDataProvider shall transform the parameters of the
                FeeBlockConfiguration to the attributes of BlockConfiguration according to the table "Mapping of Fee
                configuration parameters to attributes of BlockConfiguration".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataProviderTest.testPullFeeConfiguration</srcid><srcstatus/><internalId>248</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.SupportedModuleVersions</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.pull.DataProvider3</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each EaBlockConfiguration existent in the Ea configuration modules that are
                included in the project, the MemAsDataProvider shall add a new row memento to 
                MEMENTO_BLOCK_CONFIGURATION_TABLE and shall create a new instance of BlockConfiguration in the data
                model.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataProviderTest.testPullEaConfiguration</srcid><srcstatus/><internalId>249</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>
        
        <specobject>
            <id>memas.design.interaction.pull.DataProvider4</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each EaBlockConfiguration existent in the Ea configuration modules that are
                included in the project, the MemAsDataProvider shall transform the parameters of the EaBlockConfiguration 
                to the attributes of BlockConfiguration according to the table "Mapping of Ea configuration
                parameters to attributes of BlockConfiguration".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataProviderTest.testPullEaConfiguration</srcid><srcstatus/><internalId>249</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.pull.DataProvider5</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each BlockConfiguration, the MemAsDataProvider shall set the reference
                modelObject to the corresponding FeeBlockConfiguration or EaBlockConfiguration node
                in the ECU configuration.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataProviderTest.testPullEaFeeReferenceModelObject</srcid><srcstatus/><internalId>250</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>


        <specobject>
            <id>memas.design.interaction.pull.DataProvider6</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each NvMBlockDescriptor in the NvM configuration, the MemAsDataProvider
                shall add a new row memento to MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS and shall create
                a new instance of BlockDescriptor in the data model.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataProviderTest.testPullNvMConfiguration</srcid><srcstatus/><internalId>251</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.pull.DataProvider7</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each NvMBlockDescriptor in the NvM configuration, the MemAsDataProvider
                shall transform the parameters of the NvMBlockDescriptor to the attributes of
                BlockDescriptor according to the table "Mapping of NvM configuration parameters to
                attributes of BlockDescriptor".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataProviderTest.testPullNvMConfiguration</srcid><srcstatus/><internalId>251</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.pull.DataProvider8</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each BlockDescriptor, the MemAsDataProvider shall set the reference
                modelObject to the corresponding NvMBlockDescriptor node in the ECU
                configuration.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataProviderTest.testPullNvMReferenceModelObject</srcid><srcstatus/><internalId>252</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.pull.DataProvider9</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each BlockDescriptor, the MemAsDataProvider shall set the reference
                startingMappedBlockConfiguration to the BlockConfiguration where modelObject refers
                to the same DCtxt as the NvMTargetBlockReference of the corresponding
                NvMBlockDescriptor.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataProviderTest.testPullNvMModelObjectDCTxtTargetRef</srcid><srcstatus/><internalId>253</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.pull.DataProvider10</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemAsDataProvider shall read the parameter
                /NvM/NvMCommon/NvMDatasetSelectionBits and store it in the MEMENTO_TEXT_NVM_DATASET_SELECTION_BITS
                memento of MemAsDataProvider. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataProviderTest.testPullNvMDatasetSelectionBits</srcid><srcstatus/><internalId>254</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.SupportedModuleVersions</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.pull.DataProvider12</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The MemAsDataProvider shall read the parameter
                /NvM/NvMCommon/NvMJobPrioritization and store it in the nvmJobPriorization attribute
                of AbstractMemAsDataProvider. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.DataProviderTest.testNvMJobPrioritization</srcid><srcstatus/><internalId>255</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.SupportedModuleVersions</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>


    </specobjects>
    <specobjects doctype="dsn">
        <defaults>
            <idprefix>memas.design.interaction.push.</idprefix>
            <source>EB</source>
        </defaults>

        <specobject>
            <id>memas.design.interaction.push.PushOperation1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each BlockDescriptor where the modelObject reference is not set, the
                PushMemAsConfigurationOperation shall add a new NvMBlockDescriptor to the ECU
                configuration and shall set the modelReference.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushNewBlockDescriptorWithEaConfiguration</srcid><srcstatus/><internalId>403</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushNewBlockDescriptorWithFeeConfiguration</srcid><srcstatus/><internalId>404</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation2</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each BlockConfiguration with blockType = FEE_BLOCK where the
                modelObject reference is not set, the PushMemAsConfigurationOperation shall add a
                new FeeBlockConfiguration to the ECU configuration and shall set the
                modelReference. The BlockConfiguration will be configured in the module that is set
                as a location.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushFeeConfiguration</srcid><srcstatus/><internalId>401</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation3</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each BlockConfiguration with blockType = EA_BLOCK where the modelObject
                reference is not set, the PushMemAsConfigurationOperation shall add a new
                EaBlockConfiguration to the ECU configuration and shall set the
                modelReference. The BlockConfiguration will be configured in the module that is set
                as a location.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushEaConfiguration</srcid><srcstatus/><internalId>402</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation4</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each BlockDescriptor the PushMemAsConfigurationOperation shall
                transform the attributes of BlockDescriptor to the parameters of the
                NvMBlockDescriptor referenced by the modelObject reference according to the table
                "Mapping of NvM configuration parameters to attributes of
                BlockDescriptor".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushNewBlockDescriptorWithEaConfiguration</srcid><srcstatus/><internalId>403</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushNewBlockDescriptorWithFeeConfiguration</srcid><srcstatus/><internalId>404</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation5</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each BlockConfiguration with blockType = FEE_BLOCK the
                PushMemAsConfigurationOperation shall transform the attributes of BlockConfiguration
                to the parameters of the FeeBlockConfiguration referenced by the modelObject
                reference according to the table "Mapping of Fee configuration parameters to
                attributes of BlockDescriptor".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushFeeConfiguration</srcid><srcstatus/><internalId>401</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.SupportedModuleVersions</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation6</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each BlockConfiguration with blockType = EA_BLOCK the
                PushMemAsConfigurationOperation shall transform the attributes of BlockConfiguration
                to the parameters of the EaBlockConfiguration referenced by the modelObject
                reference according to the table "Mapping of Ea configuration parameters to
                attributes of BlockDescriptor".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushEaConfiguration</srcid><srcstatus/><internalId>402</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.SupportedModuleVersions</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
            </providescoverage>

        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation7</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The PushMemAsConfigurationOperation shall only set parameter or reference
                values in the ECU configuration when the current value does not equal the new
                value.</description>
            <rationale>
                The parameter/reference shall not be marked as dirty when the value hasn't changed.
            </rationale>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushChangedValuesOnly</srcid><srcstatus/><internalId>411</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushValuesWithNochange</srcid><srcstatus/><internalId>412</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation8</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The PushMemAsConfigurationOperation shall set the reference
                NvMTargetBlockReference/NvMNameOfEaBlock of NvMBlockDescriptor to the short name
                path of the EaBlockConfiguration which is referenced by modelObject of
                BlockConfiguration which again is referenced by startingMappedBlockConfiguration of
                BlockDescriptor when targetBlockType=NvMEaRef.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushNewBlockDescriptorWithEaConfiguration</srcid><srcstatus/><internalId>403</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation9</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The PushMemAsConfigurationOperation shall set the reference
                NvMTargetBlockReference/NvMNameOfFeeBlock of NvMBlockDescriptor to the short name
                path of the FeeBlockConfiguration which is referenced by modelObject of
                BlockConfiguration which again is referenced by startingMappedBlockConfiguration of
                BlockDescriptor when targetBlockType=NvMFeeRef.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushNewBlockDescriptorWithFeeConfiguration</srcid><srcstatus/><internalId>404</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation10</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The PushMemAsConfigurationOperation shall remove all NvMBlockDescriptor
                containers from the ECU configuration if there is no BlockDescriptor in the data
                model which refers to it via the modelObject reference.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushBlockDescriptorDeleteAll</srcid><srcstatus/><internalId>405</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushBlockDescriptorDelete</srcid><srcstatus/><internalId>408</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation11</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The PushMemAsConfigurationOperation shall remove all FeeBlockConfiguration
                containers from the ECU configuration if there is no BlockConfiguration in the data
                model which refers to it via the modelObject reference.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushFeeConfigurationDeleteAll</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushFeeConfigurationDelete</srcid><srcstatus/><internalId>409</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation12</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The PushMemAsConfigurationOperation shall remove all EaBlockConfiguration
                containers from the ECU configuration if there is no BlockConfiguration in the data
                model which refers to it via the modelObject reference.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushEaConfigurationDeleteAll</srcid><srcstatus/><internalId>407</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushEaConfigurationDelete</srcid><srcstatus/><internalId>410</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation14</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The PushMemAsConfigurationOperation shall use transactions when modifying
                the data model.</description>
            <rationale>Transactions are required to show the modifications in the Result View.</rationale>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ConfigureDevice.ConfigureDevice</srcid><srcstatus/><internalId>173</internalId></linkedfrom><linkedfrom><srcid>TwoFlsInstance.ConfigureFlsInstance</srcid><srcstatus/><internalId>174</internalId></linkedfrom><linkedfrom><srcid>CheckChangesInEcuConfiguration.ConfigureDevice</srcid><srcstatus/><internalId>179</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ShowResults</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>

        <specobject>
            <id>memas.design.interaction.push.PushOperation15</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For each BlockConfiguration with blockType = FEE_BLOCK, when adding new Fee blocks and 
				the parameter FeeBlockConfiguration/FeeClusterGroupRef exists then it is an Freescale Fee and 
				PushMemAsConfigurationOperation shall set this parameter to the short name path of the first container 
				found within the list Fee/FeeClusterGroup.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushMemAsConfigOperationSetFreeScaleParametertoShortNamePath</srcid><srcstatus/><internalId>413</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.PushOperationTest.testPushNotChangeFeeClusterGroupRef</srcid><srcstatus/><internalId>414</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
			<providescoverage>
                <provcov>
                    <linksto>memas.req.SupportedThirdPartyModules</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>

    </specobjects>
    <specobjects doctype="dsn">
        <defaults>
            <idprefix>memas.design.interface.</idprefix>
            <source>EB</source>
        </defaults>

        <specobject>
            <id>memas.design.interface.UserInterface1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The GUI shall provide a table to show and configure NvM blocks with columns
                and attributes according to table "NvM Block Descriptors".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EditNvMBlocksRAMBlockAddressROMBlockAddress.EditNvMBlocks</srcid><srcstatus/><internalId>172</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.EditNvMBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>

        <specobject>
            <id>memas.design.interface.UserInterface2</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The GUI shall provide a table to show and configure Ea/Fee blocks with
                columns and attributes according to table "Ea/Fee Block
                Configuration".</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AddNvMBlocks.AddNvMBlocksInMemoryStackEditor</srcid><srcstatus/><internalId>167</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ConfigureWriteCycles</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
                <provcov>
                    <linksto>memas.req.ConfigureDevice</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>

        <specobject>
            <id>memas.design.interface.UserInterface3</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user presses the Add NvM Block button (1), the Memory Stack Editor shall add a
                new row to the NvM Block Descriptors table.When adding a new NvM block the Target will be set to <code>FLASH</code> only if both the <code>Fee Module</code> and the <code>Fls Module</code> are available otherwise it will be set to <code>EEPROM</code> but only if both the <code>Ea Module</code> and the <code>Eep Module</code> are available.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AddNvMBlocks.AddNvMBlocksInMemoryStackEditor</srcid><srcstatus/><internalId>167</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.AddNvMBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>

        <specobject>
            <id>memas.design.interface.UserInterface4</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user presses the Delete NvM Block button (2), the Memory Stack Editor shall
                remove the selected NvM block from the NvM Block Descriptor table.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DeleteNvMFeeEaBlocksBlocks.TryDeletingAndCheckEditability</srcid><srcstatus/><internalId>176</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.DeleteNvMBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>

        <specobject>
            <id>memas.design.interface.UserInterface5</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user presses the Duplicate NvM Block button (3), the Memory Stack Editor shall
                duplicate the selected NvM block in the NvM Block Descriptors table.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DuplicateNvMBlock.DuplicateNvMBlock</srcid><srcstatus/><internalId>178</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.AddNvMBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>

        <specobject>
            <id>memas.design.interface.UserInterface8</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user presses the Configure Memory Modules button (6), the Memory Stack Editor
                shall trigger the automatic configuration of the Ea/Fee modules. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EditNvMDatasetBlocksCrc.EditNvMDatasetBlocksCrc</srcid><srcstatus/><internalId>170</internalId></linkedfrom><linkedfrom><srcid>EditNvMBlocksTargetStaticBlockIDCheckAndPriority.EditNvMBlocks</srcid><srcstatus/><internalId>171</internalId></linkedfrom><linkedfrom><srcid>EditNvMBlocksRAMBlockAddressROMBlockAddress.EditNvMBlocks</srcid><srcstatus/><internalId>172</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ConfigureEaFeeBlocks</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>

        <specobject>
            <id>memas.design.interface.UserInterface9</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user presses the Finish button (7), the Memory Stack Editor shall close the
                dialog and write back the current configuration to the ECU configuration of NvM, Ea
                and Fee.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CheckChangesInEcuConfiguration.ConfigureDevice</srcid><srcstatus/><internalId>179</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ApplyChanges</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>

            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>

        <specobject>
            <id>memas.design.interface.UserInterface10</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user presses the Cancel button (8), the Memory Stack Editor shall close the
                dialog without modifying the ECU configuration of NvM, Ea and Fee.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CancelledConfiguration.ConfigureDevice</srcid><srcstatus/><internalId>180</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.ApplyChanges</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>

            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>

        <specobject>
            <id>memas.design.interface.UserInterface11</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user presses the Add NvM Blocks from atomic software
                component service needs button (9), the Memory Stack Editor shall evaluate the NV block 
                needs of all application software components and shall add the corresponding NvM
                block descriptors.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ServiceNeeds.ServiceNeeds</srcid><srcstatus/><internalId>181</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.NvBlockNeeds</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>
		
		<specobject>
            <id>memas.design.interface.UserInterface12</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> When the Memory Stack Editor is loaded or when user presses the Configure Memory Modules button (6), the Memory Stack Editor
                shall show the sum of all configured Ea block sizes and all configured Fee block sizes.</description>
		    <needscoverage>
		        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EditNvMDatasetBlocksCrc.EditNvMDatasetBlocksCrc</srcid><srcstatus/><internalId>170</internalId></linkedfrom><linkedfrom><srcid>EditNvMBlocksTargetStaticBlockIDCheckAndPriority.EditNvMBlocks</srcid><srcstatus/><internalId>171</internalId></linkedfrom></coveredby></needscov>
		    <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.SumOfBlockSize</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>
		
		<specobject>
            <id>memas.design.interface.UserInterface13</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user presses the Undo button, the Memory Stack Editor shall be able to rollback the parameter value 
			according to previous changes and final parameter values shall depends on number of triggers done on the Undo 
			button</description>
		    <needscoverage>
		        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Undo.AddUndoRedo</srcid><srcstatus/><internalId>182</internalId></linkedfrom><linkedfrom><srcid>Undo.EditUndoRedo</srcid><srcstatus/><internalId>183</internalId></linkedfrom><linkedfrom><srcid>Undo.DeleteUndoRedo</srcid><srcstatus/><internalId>184</internalId></linkedfrom></coveredby></needscov>
		    <containerCovstatus>covered</containerCovstatus></needscoverage>            
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>
		
		<specobject>
            <id>memas.design.interface.UserInterface14</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user presses the Redo button, the Memory Stack Editor shall be able to revert back 
			back the changes done by pressing the Undo button .The number of times modified parameter value can be roll back 
			by triggering Redo set value depends on the number of triggers done on the Undo button.</description>			
		    <needscoverage>
		        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Undo.AddUndoRedo</srcid><srcstatus/><internalId>182</internalId></linkedfrom><linkedfrom><srcid>Undo.EditUndoRedo</srcid><srcstatus/><internalId>183</internalId></linkedfrom><linkedfrom><srcid>Undo.DeleteUndoRedo</srcid><srcstatus/><internalId>184</internalId></linkedfrom></coveredby></needscov>
		    <containerCovstatus>covered</containerCovstatus></needscoverage>            
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>
		
		<specobject>
            <id>memas.design.interface.UserInterface15</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user selects NvM block with block identifier 1 from the NvM Block Descriptor table, the Memory Stack Editor shall disable the Delete NvM Block button(2).</description>
		    <needscoverage>
		        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DeleteNvMFeeEaBlocksBlocks.TryDeletingAndCheckEditability</srcid><srcstatus/><internalId>176</internalId></linkedfrom></coveredby></needscov>
		    <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.NotDeleteNvMBlockWithID1</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>

		<specobject>
            <id>memas.design.interface.UserInterface16</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall be write protected for the NvM block with block identifier 1 of the following cells: Block Name, Type, No. of data set blocks,Length, RAM block address, ROM block address, Priority and editable for following cells: CRC type, select for ReadAll, select for WriteAll, Target, Static Block ID Check.</description>
		    <needscoverage>
		        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DeleteNvMFeeEaBlocksBlocks.TryDeletingAndCheckEditability</srcid><srcstatus/><internalId>176</internalId></linkedfrom></coveredby></needscov>
		    <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memas.req.WriteProtectedNvMBlockWithID1</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
            </providescoverage>
		<violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>
		
		
    </specobjects>
    <specobjects doctype="dsn">
        <defaults>
            <idprefix>memoryStackAutomation.design.</idprefix>
            <source>EB</source>
        </defaults>

        <specobject>
            <id>memoryStackAutomation.design.UserInterface</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Automation Unattended Wizard will be available to perform from UI mode in the Unattended
                Wizards Dialog only if there is a configuration project with Mem Modules inside and
                optionally, a MemSystem file imported for the AddBlocksFromServiceNeedsAction. The
                GUI shall provide two actions to the user : UpdateMemoryModuleConfigAction and
                AddBlocksFromServiceNeedsAction. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>UnattendedWizardRunWithAndWithoutEvBlockNeeds.UpdateMemoryModuleConfigActionAndAddBlocksFromServiceNeedsAction</srcid><srcstatus/><internalId>192</internalId></linkedfrom><linkedfrom><srcid>UnattendedWizardRunWithAndWithoutEvBlockNeeds.TestIfWizardWorksWithEvBlockNeedsDisabled</srcid><srcstatus/><internalId>193</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memoryStackAutomation.req.PreRequirements</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
                <provcov>
                    <linksto>memoryStackAutomation.req.UIAvailability</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
                <provcov>
                    <linksto>memoryStackAutomation.req.ProvidedActions</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
                <provcov>
                    <linksto>memoryStackAutomation.req.UpdateMemoryModuleConfigAction</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
                <provcov>
                    <linksto>memoryStackAutomation.req.AddBlocksFromServiceNeedsAction</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.design.CommandLineAvailability</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> The Memory Stack Automation Unattended Wizard will be available to perform from CommandLine mode only after
                the user initially configures it from UI inside the Unattended Wizards Dialog .
                Based on the actions configured from UI (AddBlocksFromServiceNeedsAction ,
                UpdateMemoryModuleConfigAction) the Memory Stack Automation Unattended Wizard will either run both of the actions or
                only one of the two. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>UnattendedWizardRunWithAndWithoutEvBlockNeeds.UpdateMemoryModuleConfigActionAndAddBlocksFromServiceNeedsAction</srcid><srcstatus/><internalId>192</internalId></linkedfrom><linkedfrom><srcid>UnattendedWizardRunWithAndWithoutEvBlockNeeds.TestIfWizardWorksWithEvBlockNeedsDisabled</srcid><srcstatus/><internalId>193</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memoryStackAutomation.req.PreRequirements</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
                <provcov>
                    <linksto>memoryStackAutomation.req.CommandLineAvailability</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.design.RunFromCommandLine</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description> Before running the Memory Stack Automation Unattended Wizard from commandLine the user needs to also run the
                EcuExtractor unattended wizard. In order to run the Memory Stack Automation Unattended Wizard the command that needs
                to be passed is as follows : <code>tresos_cmd.bat autoconfigure project_name
                    memoryStackAutomation</code>. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>UnattendedWizardRunWithAndWithoutEvBlockNeeds.UpdateMemoryModuleConfigActionAndAddBlocksFromServiceNeedsAction</srcid><srcstatus/><internalId>192</internalId></linkedfrom><linkedfrom><srcid>UnattendedWizardRunWithAndWithoutEvBlockNeeds.TestIfWizardWorksWithEvBlockNeedsDisabled</srcid><srcstatus/><internalId>193</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memoryStackAutomation.req.RunFromCommandLine</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.design.CommandLineExecution</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When running the Memory Stack Automation Unattended Wizard from commandLine, if there are any configuration
                erros inside the needed modules for Memory Stack Automation Unattended Wizard then the performed changes will not be
                saved. The user will be notified that he should first fix the configuration problems
                from UI and then perform the desired actions. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>UnattendedWizardRunWithAndWithoutEvBlockNeeds.UpdateMemoryModuleConfigActionAndAddBlocksFromServiceNeedsAction</srcid><srcstatus/><internalId>192</internalId></linkedfrom><linkedfrom><srcid>UnattendedWizardRunWithAndWithoutEvBlockNeeds.TestIfWizardWorksWithEvBlockNeedsDisabled</srcid><srcstatus/><internalId>193</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memoryStackAutomation.req.CommandLineExecution</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.design.CommandLineLog</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>After running the Memory Stack Automation Unattended Wizard from commandLine, it will provide a feedback
                inside both the command line window and also inside the .tresoslog file from the
                .metadata folder of the workspace. </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>UnattendedWizardRunWithAndWithoutEvBlockNeeds.UpdateMemoryModuleConfigActionAndAddBlocksFromServiceNeedsAction</srcid><srcstatus/><internalId>192</internalId></linkedfrom><linkedfrom><srcid>UnattendedWizardRunWithAndWithoutEvBlockNeeds.TestIfWizardWorksWithEvBlockNeedsDisabled</srcid><srcstatus/><internalId>193</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
                <provcov>
                    <linksto>memoryStackAutomation.req.CommandLineLog</linksto>
                    <dstversion>1</dstversion>
                <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>

    </specobjects>
    <specobjects doctype="req">
        <defaults>
            <idprefix>memas.req.</idprefix>
            <source>EB</source>
        </defaults>

        <specobject>
            <id>memas.req.AvailabilityModules</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall only be available when the NvM module and either the
                Fee/Fls or the Ea/Eep modules are part of the project. The Memory Stack Editor shall report an
                error when this is not fulfilled.</description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CheckAvailabilityWithDifferentModulesEnabled.OpenEditorForProjectWithCertainModules</srcid><srcstatus/><internalId>166</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1098</srcid><srcstatus/><internalId>221</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>

        <specobject>
            <id>memas.req.AvailabilityParameters</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall only be available when the number of data selection bits
                is correctly configured in the NvM configuration. The Memory Stack Editor shall report an error
                when this is not fulfilled.</description>
            <comment>The data selection bits have a range from 0 to 8. But since there is a
                preconfiguration forcing a redundant block, value 0 always produces an
                error</comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CheckAvailabilityDependentOnDataSelectionBitsSetting.OpenEditorWithSpecificSetDataSelectionBits</srcid><srcstatus/><internalId>169</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1330</srcid><srcstatus/><internalId>228</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>

        <specobject>
            <id>memas.req.SupportedModuleVersions</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall work with all ACG-6 versions of the EB tresos AutoCore
                NvM, Fee, Ea, Fls, Eep module.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interaction.pull.DataProvider2</srcid><srcstatus/><internalId>88</internalId></linkedfrom><linkedfrom><srcid>memas.design.interaction.pull.DataProvider10</srcid><srcstatus/><internalId>96</internalId></linkedfrom><linkedfrom><srcid>memas.design.interaction.pull.DataProvider12</srcid><srcstatus/><internalId>97</internalId></linkedfrom><linkedfrom><srcid>memas.design.interaction.push.PushOperation5</srcid><srcstatus/><internalId>102</internalId></linkedfrom><linkedfrom><srcid>memas.design.interaction.push.PushOperation6</srcid><srcstatus/><internalId>103</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>

        <specobject>
            <id>memas.req.SupportedThirdPartyModules</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall work with third party memory modules Fee, Ea, Fls and Eep
                for ACG-6.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interaction.push.PushOperation15</srcid><srcstatus/><internalId>111</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>

        <specobject>
            <id>memas.req.AddNvMBlocks</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The user shall be able to add NvM blocks with the Memory Stack Editor.When adding a new
                NvM block the Target will be set to <code>FLASH</code> only if both the <code>Fee
                    Module</code> and the <code>Fls Module</code> are available otherwise it will be
                set to <code>EEPROM</code> but only if both the <code>Ea Module</code> and the
                    <code>Eep Module</code> are available.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interface.UserInterface3</srcid><srcstatus/><internalId>114</internalId></linkedfrom><linkedfrom><srcid>memas.design.interface.UserInterface5</srcid><srcstatus/><internalId>116</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AddNvMBlocks.AddNvMBlocksInMemoryStackEditor</srcid><srcstatus/><internalId>167</internalId></linkedfrom><linkedfrom><srcid>AddNvMBlocksWhenFlsModuleMissing.CreateProjectThenOpenEditor</srcid><srcstatus/><internalId>191</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>

        <specobject>
            <id>memas.req.EditNvMBlocks</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The user shall be able to edit the following parameters of an NvM blocks
                with the Memory Stack Editor: Block Name, Type (native, redundant, data set), No. of data set
                blocks (for data set blocks only), CRC type (none, CRC8, CRC16, CRC32), Length, RAM
                block address, ROM block address, select for ReadAll, select for WriteAll, Priority
                (high (immediate), medium, low), Target (EEPROM, FLASH).</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interface.UserInterface1</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AddNvMBlocks.EditNvMBlocksRedundant</srcid><srcstatus/><internalId>168</internalId></linkedfrom><linkedfrom><srcid>EditNvMDatasetBlocksCrc.EditNvMDatasetBlocksCrc</srcid><srcstatus/><internalId>170</internalId></linkedfrom><linkedfrom><srcid>EditNvMBlocksTargetStaticBlockIDCheckAndPriority.EditNvMBlocks</srcid><srcstatus/><internalId>171</internalId></linkedfrom><linkedfrom><srcid>DuplicateNvMBlock.DuplicateNvMBlock</srcid><srcstatus/><internalId>178</internalId></linkedfrom><linkedfrom><srcid>BlockDescriptorWithSameName.BlockDescriptorWithSameName</srcid><srcstatus/><internalId>187</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>

        <specobject>
            <id>memas.req.DeleteNvMBlocks</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The user shall be able to delete NvM blocks with the Memory Stack Editor. </description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interface.UserInterface4</srcid><srcstatus/><internalId>115</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>
        <specobject>
            <id>memas.req.NotDeleteNvMBlockWithID1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The user shall not be able to delete NvM block with block identifier 1
                using the Memory Stack Editor. </description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interface.UserInterface15</srcid><srcstatus/><internalId>124</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>

        <specobject>
            <id>memas.req.WriteProtectedNvMBlockWithID1</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The user shall not be able to edit the following cells of an NvM block with
                block identifier 1 with Memory Stack Editor: Block Name, Type, No. of data set blocks,Length,
                RAM block address, ROM block address, Priority and shall be able to edit the
                following cells: CRC type,select for ReadAll, select for WriteAll, Target, Static
                Block ID Check. </description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interface.UserInterface16</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>

        <specobject>
            <id>memas.req.ConfigureEaFeeBlocks</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The shall be able to trigger the automatic configuration of the Ea/Fee
                blocks for the current NvM configuration.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interface.UserInterface8</srcid><srcstatus/><internalId>117</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>

        <specobject>
            <id>memas.req.AllocateFeeEaBlocks</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user triggers the automatic configuration of the Ea/Fee blocks,
                the Memory Stack Editor shall allocate the required number of Fee/Ea blocks for each NvM block
                and shall link them to the NvM block. </description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationFeeNative</srcid><srcstatus/><internalId>2</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationFeeRedundant</srcid><srcstatus/><internalId>3</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationFeeDataSet</srcid><srcstatus/><internalId>4</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationEaNative</srcid><srcstatus/><internalId>5</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationEaRedundant</srcid><srcstatus/><internalId>6</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationEaDataSet</srcid><srcstatus/><internalId>7</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationStartingMappedBlock</srcid><srcstatus/><internalId>8</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationReferencedBlockDescriptor</srcid><srcstatus/><internalId>9</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationNameMangling</srcid><srcstatus/><internalId>11</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>AddNvMBlocks.AddNvMBlocksInMemoryStackEditor</srcid><srcstatus/><internalId>167</internalId></linkedfrom><linkedfrom><srcid>EditNvMDatasetBlocksCrc.EditNvMDatasetBlocksCrc</srcid><srcstatus/><internalId>170</internalId></linkedfrom><linkedfrom><srcid>EditNvMBlocksTargetStaticBlockIDCheckAndPriority.EditNvMBlocks</srcid><srcstatus/><internalId>171</internalId></linkedfrom><linkedfrom><srcid>EditNvMBlocksRAMBlockAddressROMBlockAddress.EditNvMBlocks</srcid><srcstatus/><internalId>172</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testValidationOfInvalidBlockConfig_DeleteAllBlockExceptFirst</srcid><srcstatus/><internalId>322</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>

        <specobject>
            <id>memas.req.CalculateFeeEaBlockParameters</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user triggers the automatic configuration of the Ea/Fee blocks,
                the Memory Stack Editor shall assign the following parameters automatically: name, block number,
                block size, immediate data, location. the Memory Stack Editor shall assign reasonable default values for
                number of write cycles and the device. Also, MemAs will set the
                    <parameter>IMPORTER_INFO</parameter> status to <parameter>CALCULATED</parameter>
                for all the Fee parameters which are calculated inside it.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeNoCRC</srcid><srcstatus/><internalId>13</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeCRC8</srcid><srcstatus/><internalId>14</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeCRC16</srcid><srcstatus/><internalId>15</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeCRC32</srcid><srcstatus/><internalId>16</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</srcid><srcstatus/><internalId>17</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationLocation</srcid><srcstatus/><internalId>18</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationEaFeeBaseNumber</srcid><srcstatus/><internalId>19</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationExistingEaFeeBlockNumber</srcid><srcstatus/><internalId>20</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationImmediateData</srcid><srcstatus/><internalId>21</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexFls</srcid><srcstatus/><internalId>22</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexMemAcc</srcid><srcstatus/><internalId>23</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexEep</srcid><srcstatus/><internalId>24</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationWriteCycles</srcid><srcstatus/><internalId>25</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeStaticBlockIdCheck</srcid><srcstatus/><internalId>33</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations><ruleid>WRN.dsn.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>142</internalId></specobject>

        <specobject>
            <id>memas.req.UpdateFeeEaBlocks</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user triggers the automatic configuration of the Ea/Fee blocks,
                the Memory Stack Editor shall update the following Fee/Ea block parameters if they don't meet
                the requirements: block number, block size, immediate data, device , location. Invalid values
                shall be overwritten.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationExists</srcid><srcstatus/><internalId>10</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeNoCRC</srcid><srcstatus/><internalId>13</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeCRC8</srcid><srcstatus/><internalId>14</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeCRC16</srcid><srcstatus/><internalId>15</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeCRC32</srcid><srcstatus/><internalId>16</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</srcid><srcstatus/><internalId>17</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationEaFeeBaseNumber</srcid><srcstatus/><internalId>19</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationExistingEaFeeBlockNumber</srcid><srcstatus/><internalId>20</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationImmediateData</srcid><srcstatus/><internalId>21</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexFls</srcid><srcstatus/><internalId>22</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexMemAcc</srcid><srcstatus/><internalId>23</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexEep</srcid><srcstatus/><internalId>24</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationSizeStaticBlockIdCheck</srcid><srcstatus/><internalId>33</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations><ruleid>WRN.dsn.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>143</internalId></specobject>

        <specobject>
            <id>memas.req.DeleteFeeEaBlocks</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When the user triggers the automatic configuration of the Ea/Fee blocks,
                the Memory Stack Editor shall delete Fee/Ea blocks which are not required anymore.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationRemoveUnused</srcid><srcstatus/><internalId>12</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>

        <specobject>
            <id>memas.req.ConfigureWriteCycles</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The user shall be able to configure the number of write cycles for each
                Ea/Fee block in the Memory Stack Editor.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interface.UserInterface2</srcid><srcstatus/><internalId>113</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ConfigureDevice.ConfigureDevice</srcid><srcstatus/><internalId>173</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>

        <specobject>
            <id>memas.req.ConfigureDevice</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The user shall be able to configure the device (driver) for each Ea/Fee
                block in the Memory Stack Editor.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interface.UserInterface2</srcid><srcstatus/><internalId>113</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ConfigureDevice.ConfigureDevice</srcid><srcstatus/><internalId>173</internalId></linkedfrom><linkedfrom><srcid>TwoFlsInstance.ConfigureFlsInstance</srcid><srcstatus/><internalId>174</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>
        
        <specobject>
            <id>memas.req.Location</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The user shall be able to configure the location for each Ea/Fee
                block in the Memory Stack Editor after the modification of NvmBlocDescriptor that is linked
                to the block.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationLocation</srcid><srcstatus/><internalId>18</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DeleteNvMFeeEaBlocksBlocks.DeleteFeeEaBlocks</srcid><srcstatus/><internalId>177</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>
        
        <specobject>
            <id>memas.req.ApplyChanges</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall write back the changes to the NvM, Fee and Ea module
                configurations when the user finishes the Memory Stack Editor dialog. No changes shall be
                applied when the user cancels the dialog. </description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interface.UserInterface9</srcid><srcstatus/><internalId>118</internalId></linkedfrom><linkedfrom><srcid>memas.design.interface.UserInterface10</srcid><srcstatus/><internalId>119</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>

        <specobject>
            <id>memas.req.ShowResults</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall show the modified/added/removed parameters in a result
                view after the user has finished the Memory Stack Editor dialog.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interaction.push.PushOperation14</srcid><srcstatus/><internalId>110</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>ConfigureDevice.ConfigureDevice</srcid><srcstatus/><internalId>173</internalId></linkedfrom><linkedfrom><srcid>TwoFlsInstance.ConfigureFlsInstance</srcid><srcstatus/><internalId>174</internalId></linkedfrom><linkedfrom><srcid>CheckChangesInEcuConfiguration.ConfigureDevice</srcid><srcstatus/><internalId>179</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>

		<specobject>
            <id>memas.req.RomBlockDefaultValue</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>Default value for ROM Block Num in newly created Block Descriptor shall be 0.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.algorithm.configurator.BlockDescriptorRomBlockNum</srcid><srcstatus/><internalId>28</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>

        <specobject>
            <id>memas.req.CalculateNvMValues</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall (re-)calculate the following parameters for each NvM
                block: block identifier, ROM block number, block base number, device
                Id.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationIdentifier</srcid><srcstatus/><internalId>0</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockConfigurationBaseNumber</srcid><srcstatus/><internalId>1</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockDescriptorBlockNum</srcid><srcstatus/><internalId>27</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.BlockDescriptorRomBlockNum</srcid><srcstatus/><internalId>28</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>

        <specobject>
            <id>memas.req.ReportErrorsInconsistentConfig</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report errors in the GUI when the Ea or Fee configuration
                is not consistent with the NvM configuration (missing Ea/Fee blocks, unused Ea/Fee
                blocks, wrong block types/devices, inconsistent block size, wrong priority, wrong
                base number). The Memory Stack Editor shall attach error markers to the affected NvM or Ea/Fee
                blocks then.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.algorithm.configurator.BlockDescriptorWithUniqueName</srcid><srcstatus/><internalId>26</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate4</srcid><srcstatus/><internalId>36</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate5</srcid><srcstatus/><internalId>37</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate6</srcid><srcstatus/><internalId>38</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate7</srcid><srcstatus/><internalId>39</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate9</srcid><srcstatus/><internalId>40</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate10</srcid><srcstatus/><internalId>41</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate11</srcid><srcstatus/><internalId>42</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate15</srcid><srcstatus/><internalId>46</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate16</srcid><srcstatus/><internalId>47</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate17</srcid><srcstatus/><internalId>48</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate18</srcid><srcstatus/><internalId>49</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate19</srcid><srcstatus/><internalId>50</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate20</srcid><srcstatus/><internalId>51</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate21</srcid><srcstatus/><internalId>52</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate24</srcid><srcstatus/><internalId>55</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate25_1</srcid><srcstatus/><internalId>56</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate25</srcid><srcstatus/><internalId>57</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate26</srcid><srcstatus/><internalId>58</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate28</srcid><srcstatus/><internalId>60</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate33</srcid><srcstatus/><internalId>65</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate34</srcid><srcstatus/><internalId>66</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate35</srcid><srcstatus/><internalId>67</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate36</srcid><srcstatus/><internalId>68</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate37</srcid><srcstatus/><internalId>69</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate38</srcid><srcstatus/><internalId>70</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate39</srcid><srcstatus/><internalId>71</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate40</srcid><srcstatus/><internalId>72</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate41</srcid><srcstatus/><internalId>73</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate42</srcid><srcstatus/><internalId>74</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate43_1</srcid><srcstatus/><internalId>75</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate43</srcid><srcstatus/><internalId>76</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate44</srcid><srcstatus/><internalId>77</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations><ruleid>WRN.dsn.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>152</internalId></specobject>

        <specobject>
            <id>memas.req.ReportErrorsFeeEaNotAvailable</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report errors in the GUI when an NvM block is mapped to
                Fee or Ea and the Fee or Ea module is not part of the project. The Memory Stack Editor shall
                attach error markers to the affected NvM block then.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.errorhandling.Validate29</srcid><srcstatus/><internalId>61</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate30</srcid><srcstatus/><internalId>62</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate31</srcid><srcstatus/><internalId>63</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate32</srcid><srcstatus/><internalId>64</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>

        <specobject>
            <id>memas.req.ReportErrorsInvalidParameters</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall report errors in the GUI when an editable configuration
                parameter contains a wrong or inconsistent value. The Memory Stack Editor shall attach error
                markers to the affected parameters then.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.errorhandling.Validate1</srcid><srcstatus/><internalId>34</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate2</srcid><srcstatus/><internalId>35</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate12</srcid><srcstatus/><internalId>43</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate13</srcid><srcstatus/><internalId>44</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate14</srcid><srcstatus/><internalId>45</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate22</srcid><srcstatus/><internalId>53</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate23</srcid><srcstatus/><internalId>54</internalId></linkedfrom><linkedfrom><srcid>memas.design.errorhandling.Validate27</srcid><srcstatus/><internalId>59</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>

        <specobject>
            <id>memas.req.NvBlockNeeds</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall provide an option to evaluate the NV block needs of the
                atomic software components and NV block software components and shall add the
                required NvM block descriptors automatically. Supported as per R20-11.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.algorithm.configurator.NvBlockNeedsNvBlockSwComponentType</srcid><srcstatus/><internalId>29</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.NvBlockNeedsAtomicSwComponentType</srcid><srcstatus/><internalId>30</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.NvBlockNeedsAttributes</srcid><srcstatus/><internalId>31</internalId></linkedfrom><linkedfrom><srcid>memas.design.algorithm.configurator.NvBlockNeedsAlreadyExists</srcid><srcstatus/><internalId>32</internalId></linkedfrom><linkedfrom><srcid>memas.design.interface.UserInterface11</srcid><srcstatus/><internalId>120</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>

        <specobject>
            <id>memas.req.SumOfBlockSize</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Editor shall show the sum of all configured Ea block sizes and all
                configured Fee block sizes.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memas.design.interface.UserInterface12</srcid><srcstatus/><internalId>121</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>

    </specobjects>
    <specobjects doctype="req">
        <defaults>
            <idprefix>memoryStackAutomation.req.</idprefix>
            <source>EB</source>
        </defaults>

        <specobject>
            <id>memoryStackAutomation.req.PreRequirements</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>For the Memory Stack Automation Unattended Wizard to be available the following PreRequirements are needed:
                configuration project with Mem Modules inside and optionally, a MemSystem file
                imported for the AddBlocksFromServiceNeedsAction. </description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memoryStackAutomation.design.UserInterface</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>memoryStackAutomation.design.CommandLineAvailability</srcid><srcstatus/><internalId>127</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.req.UIAvailability</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Automation Unattended Wizard will be available to perform from UI mode in the Unattended
                Wizards Dialog only if the prerequirements are handled.</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memoryStackAutomation.design.UserInterface</srcid><srcstatus/><internalId>126</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.req.ProvidedActions</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Automation Unattended Wizard will provide two actions to the user :
                UpdateMemoryModuleConfigAction and AddBlocksFromServiceNeedsAction. For more details
                regarding what the two actions do, please have a look inside the MemAs.reqm where
                they are explained in detail. </description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memoryStackAutomation.design.UserInterface</srcid><srcstatus/><internalId>126</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.req.CommandLineAvailability</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Automation Unattended Wizard will be available to perform from CommandLine mode only after
                the user initially configures it from UI inside the Unattended Wizards Dialog .
                Based on the actions configured from UI (AddBlocksFromServiceNeedsAction ,
                UpdateMemoryModuleConfigAction) the Memory Stack Automation Unattended Wizard will either run both of the actions or
                only one of the two. </description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memoryStackAutomation.design.CommandLineAvailability</srcid><srcstatus/><internalId>127</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.req.UpdateMemoryModuleConfigAction</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Automation Unattended Wizard will be able to run the UpdateMemoryModuleConfigAction once it
                is checked. Once this action is checked , it will also be performed if the wizard is
                called from commandLine .</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memoryStackAutomation.design.UserInterface</srcid><srcstatus/><internalId>126</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.req.AddBlocksFromServiceNeedsAction</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>The Memory Stack Automation Unattended Wizard will be able to run the AddBlocksFromServiceNeedsAction once it
                is checked. Once this action is checked , it will also be performed if the wizard is
                called from commandLine .</description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memoryStackAutomation.design.UserInterface</srcid><srcstatus/><internalId>126</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.req.RunFromCommandLine</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>Before running the Memory Stack Automation Unattended Wizard from commandLine the user needs to also run the
                EcuExtractor unattended wizard. In order to run the Memory Stack Automation Unattended Wizard the command that needs
                to be passed is as follows : <code>tresos_cmd.bat autoconfigure project_name
                    MemoryStackAutomation</code>. </description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memoryStackAutomation.design.RunFromCommandLine</srcid><srcstatus/><internalId>128</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.req.CommandLineExecution</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>When running the Memory Stack Automation Unattended Wizard from commandLine, if there are any configuration
                erros inside the needed modules for Memory Stack Automation Unattended Wizard then the performed changes will not be
                saved. The user will be notified that he should first fix the configuration problems
                from UI and then perform the desired actions. </description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memoryStackAutomation.design.CommandLineExecution</srcid><srcstatus/><internalId>129</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>

        <specobject>
            <id>memoryStackAutomation.req.CommandLineLog</id>
            <status>approved</status><source>EB</source>
            <version>1</version>
            <description>After running the Memory Stack Automation Unattended Wizard from commandLine, it will provide a feedback
                inside both the command line window and also inside the .tresoslog file from the
                .metadata folder of the workspace. </description>
            <needscoverage>
                <needscov><needsobj>dsn</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>memoryStackAutomation.design.CommandLineLog</srcid><srcstatus/><internalId>130</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>



    </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>CheckAvailabilityWithDifferentModulesEnabled.OpenEditorForProjectWithCertainModules</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>50</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.AvailabilityModules</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>
    <specobject>
      <id>AddNvMBlocks.AddNvMBlocksInMemoryStackEditor</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>127</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.AddNvMBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>memas.req.AllocateFeeEaBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>
    <specobject>
      <id>AddNvMBlocks.EditNvMBlocksRedundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>182</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.EditNvMBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>
    <specobject>
      <id>CheckAvailabilityDependentOnDataSelectionBitsSetting.OpenEditorWithSpecificSetDataSelectionBits</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>256</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.AvailabilityParameters</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>
    <specobject>
      <id>EditNvMDatasetBlocksCrc.EditNvMDatasetBlocksCrc</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>354</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.EditNvMBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>memas.req.AllocateFeeEaBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>
    <specobject>
      <id>EditNvMBlocksTargetStaticBlockIDCheckAndPriority.EditNvMBlocks</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>477</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.EditNvMBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>memas.req.AllocateFeeEaBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>
    <specobject>
      <id>EditNvMBlocksRAMBlockAddressROMBlockAddress.EditNvMBlocks</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>580</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interface.UserInterface1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>memas.req.AllocateFeeEaBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>
    <specobject>
      <id>ConfigureDevice.ConfigureDevice</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>666</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.ConfigureDevice</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>memas.req.ShowResults</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
        <provcov>
          <linksto>memas.req.ConfigureWriteCycles</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>
    <specobject>
      <id>TwoFlsInstance.ConfigureFlsInstance</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>847</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.ConfigureDevice</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>memas.req.ShowResults</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>
    <specobject>
      <id>CheckDeviceIndexWhenMemAccUsed.ConfigureMemAccAndCheckResults</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>1046</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexMemAcc</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>
    <specobject>
      <id>DeleteNvMFeeEaBlocksBlocks.TryDeletingAndCheckEditability</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>1206</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interface.UserInterface4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>
    <specobject>
      <id>DeleteNvMFeeEaBlocksBlocks.DeleteFeeEaBlocks</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>1398</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationRemoveUnused</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>memas.req.Location</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>
    <specobject>
      <id>DuplicateNvMBlock.DuplicateNvMBlock</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>1488</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.EditNvMBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>
    <specobject>
      <id>CheckChangesInEcuConfiguration.ConfigureDevice</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>1577</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interface.UserInterface9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>memas.req.ShowResults</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.pull.PullEvent2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>
    <specobject>
      <id>CancelledConfiguration.ConfigureDevice</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>1655</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interface.UserInterface10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>
    <specobject>
      <id>ServiceNeeds.ServiceNeeds</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>1807</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interface.UserInterface11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>
    <specobject>
      <id>Undo.AddUndoRedo</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>2007</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interface.UserInterface13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>
    <specobject>
      <id>Undo.EditUndoRedo</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>2098</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interface.UserInterface13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>
    <specobject>
      <id>Undo.DeleteUndoRedo</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>2215</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interface.UserInterface13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>memas.design.interface.UserInterface14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>
    <specobject>
      <id>BadNvramBlockIdentifier.BadNvramBlockParameters</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>2370</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate36</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate37</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate38</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>
    <specobject>
      <id>SameTargetReference.SameTargetReference</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>2473</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate39</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>
    <specobject>
      <id>BlockDescriptorWithSameName.BlockDescriptorWithSameName</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>2580</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.EditNvMBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockDescriptorWithUniqueName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>
    <specobject>
      <id>BlockDescriptorBlockNumAndBlockDescriptorRomBlockNum.BlockDescriptorBlockNum</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>2673</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockDescriptorBlockNum</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockDescriptorRomBlockNum</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>
    <specobject>
      <id>CheckNvMValues.CheckPreConfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>2799</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.pull.PullEvent1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>
    <specobject>
      <id>CheckNvMValues.CheckAdditionalConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>2919</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.pull.PullEvent1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>
    <specobject>
      <id>AddNvMBlocksWhenFlsModuleMissing.CreateProjectThenOpenEditor</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>3050</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.AddNvMBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>
    <specobject>
      <id>UnattendedWizardRunWithAndWithoutEvBlockNeeds.UpdateMemoryModuleConfigActionAndAddBlocksFromServiceNeedsAction</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>3202</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memoryStackAutomation.design.UserInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>memoryStackAutomation.design.CommandLineAvailability</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>memoryStackAutomation.design.RunFromCommandLine</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>memoryStackAutomation.design.CommandLineExecution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>memoryStackAutomation.design.CommandLineLog</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>
    <specobject>
      <id>UnattendedWizardRunWithAndWithoutEvBlockNeeds.TestIfWizardWorksWithEvBlockNeedsDisabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/qft/memas.qft</sourcefile>
      <sourceline>3423</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memoryStackAutomation.design.UserInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>memoryStackAutomation.design.CommandLineAvailability</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>memoryStackAutomation.design.RunFromCommandLine</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>memoryStackAutomation.design.CommandLineExecution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>memoryStackAutomation.design.CommandLineLog</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_49</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>49</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_66</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>66</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_83</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_123</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>123</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_148</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>148</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_172</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>172</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_199</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>199</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_228</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>228</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_256</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>256</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_281</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>281</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_308</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>308</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_339</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>339</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_359</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>359</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_384</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>384</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_409</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>409</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_441</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>441</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate17</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_461</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>461</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate18</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_513</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>513</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate19</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_575</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>575</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate20</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_656</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>656</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate21</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_738</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>738</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate22</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_756</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>756</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate23</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_798</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>798</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate27</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_820</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>820</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate28</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_854</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>854</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate29</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate30</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_953</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>953</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate31</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1049</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1049</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate29</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate30</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate31</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1098</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1098</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.AvailabilityModules</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1140</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1140</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate33</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1161</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1161</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate34</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1181</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1181</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate35</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1238</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1238</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate36</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1268</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1268</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate37</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1304</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1304</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate38</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1330</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1330</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.req.AvailabilityParameters</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1347</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1347</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate39</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1386</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1386</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate40</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1408</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1408</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate41</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1475</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1475</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate41</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1514</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1514</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate24</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1515</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1515</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate25_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1516</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1516</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate25</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1517</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1517</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate26</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1518</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1518</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate42</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1519</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1519</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate43_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1520</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1520</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate43</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>
    <specobject>
      <id>src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java_1521</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/src/plugin.MemAs.Autosar/Java/eb/tresos/memas/errorhandling/MemAsValidator.java</sourcefile>
      <sourceline>1521</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate44</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.BlockDescriptorTest.testSetterGetterNvmBlockPriority</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/BlockDescriptorTest.java</sourcefile>
      <sourceline>19</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the setter and getter for NVM Priority works correctly&lt;/pre&gt;</description>
      <testexec>01: Set value for NVM Priority
                 02: Check if getter returns correct value</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.information.datamodel.BlockDescriptor1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataModelTest.testGetBlockDescriptorAttributes</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataModelTest.java</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>Verifies that the getter methods of BlockDescriptor transform the values from the GUI representation to the internal representation based on the design</description>
      <testexec>01: Create new BlockDescriptor object and set the values
                 02: VP: check that the mementos have the data objects of type BlockDescriptor assigned
                 03: VP: check that the getter methods of BlockDescriptor transform the values from the GUI representation to the internal representation</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.information.datamodel.BlockDescriptor1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataModelTest.testSetBlockDescriptorAttributes</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataModelTest.java</sourcefile>
      <sourceline>217</sourceline>
      <version>1</version>
      <description>Verifies that the setter methods of BlockDescriptor transform the values from the internal representation to the GUI representation based on the design</description>
      <testexec>01: Create new BlockDescriptor object and setting the values
                 02: VP: check that the mementos have the data objects of type BlockDescriptor assigned
                 03: VP: check that the setter methods of BlockDescriptor transform the values from the GUI representation to the internal representation based on the design by reading the values from the mementos.</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.information.datamodel.BlockDescriptor2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataModelTest.testGetBlockConfigurationAttributes</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataModelTest.java</sourcefile>
      <sourceline>463</sourceline>
      <version>1</version>
      <description>Verifies that the getter methods of BlockConfiguration transform the values from the GUI representation to the internal representation based on the design</description>
      <testexec>01: Create new BlockConfiguration object and setting the values to the mementos
                 02: VP: check that the getter methods of BlockConfiguration shall transform the values from the GUI representation to the internal representation according to design</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.information.datamodel.BlockConfiguration1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataModelTest.testSetBlockConfigurationAttributes</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataModelTest.java</sourcefile>
      <sourceline>625</sourceline>
      <version>1</version>
      <description>Verifies that the setter methods of BlockConfiguration shall transform the values from the internal representation to the GUI representation according to design</description>
      <testexec>01: Create new BlockConfiguration object and setting the values
                 02: VP: check that the setter methods of BlockConfiguration shall transform the values from the GUI representation to the internal representation according to design by reading the values from the mementos</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.information.datamodel.BlockConfiguration2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataModelTest.testMementoFactoryForBlockDescriptor</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataModelTest.java</sourcefile>
      <sourceline>757</sourceline>
      <version>1</version>
      <description>Verifies that each time a new row memento of the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS is created, the MemAsMementoFactory shall create a new BlockDescriptor object and shall assign it to the memento created and also verifies that the MemAsMementoFactory shall make all mementos non-persistant.</description>
      <testexec>01: create a new row mementos for a block descriptor
                 02: VP: check that the mementos have the data objects of type BlockDescriptor assigned
                 03: VP: check that new row mementos is created and data object is same that of memento and memAsMementoFactory makes mementos non-persistant
                 04: VP: check that MemAsMementoFactory makes mementos non-persistant and the root memento is persistant</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.information.datamodel.MementoFactory1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>memas.design.information.datamodel.MementoFactory4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataModelTest.testMementoFactoryForBlockConfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataModelTest.java</sourcefile>
      <sourceline>800</sourceline>
      <version>1</version>
      <description>Verifies that each time a new row memento of the MEMENTO_BLOCK_CONFIGURATION_TABLE is created, the MemAsMementoFactory shall create a new BlockConfiguration object and shall assign it to the memento created and also verifies that the MemAsMementoFactory shall make all mementos non-persistant.</description>
      <testexec>01: create a new row mementos for a block configuration
                 02: VP: check that the mementos have the data objects of type BlockConfiguration assigned
                 03: VP: check that new row mementos is created and data object is same that of memento
                 04: VP: check that MemAsMementoFactory makes mementos non-persistant and the root memento is persistant</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.information.datamodel.MementoFactory2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>memas.design.information.datamodel.MementoFactory4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataProviderTest.testPullFeeConfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataProviderTest.java</sourcefile>
      <sourceline>34</sourceline>
      <version>1</version>
      <description>Verifies that the data provider correctly reads the data to the ECU configuration and writes it to the internal data model</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries (DataProvider1)
                 04: VP: check that the mementos have the data objects of type BlockConfiguration assigned (DataProvider1)
                 05: VP: check that the BlockConfiguration objects have the correct attribute values (DataProvider2)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.pull.DataProvider1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.pull.DataProvider2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataProviderTest.testPullEaConfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataProviderTest.java</sourcefile>
      <sourceline>162</sourceline>
      <version>1</version>
      <description>Verifies that the data provider correctly reads the data from the ECU configuration and writes it to the internal data model</description>
      <testexec>01: create new project with NvM, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: VP: check that the IMemAsMementoConstants.MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries (DataProvider3)
                 04: VP: check that the mementos have the data objects of type BlockConfiguration assigned (DataProvider3)
                 05: VP: check that the BlockConfiguration objects have the correct attribute values (DataProvider4)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.pull.DataProvider3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.pull.DataProvider4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataProviderTest.testPullEaFeeReferenceModelObject</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataProviderTest.java</sourcefile>
      <sourceline>298</sourceline>
      <version>1</version>
      <description>Verifies that the data provider correctly reads the corresponding FeeBlockConfiguration or EaBlockConfiguration reference model Object data from the ECU configuration and writes it to the internal data model</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: get the Ea, Fee DCTXT configuration context
                 04: VP: check that the IMemAsMementoConstants.MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of Ea, Fee entries
                 05: VP: check that the mementos have the data objects of type BlockConfiguration assigned
                 06: VP: check that the corresponding EaBlockConfiguration object have the correct reference modelObject (DataProvider5)
                 07: VP: check that the corresponding FeeBlockConfiguration object have the correct reference modelObject (DataProvider5)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.pull.DataProvider5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataProviderTest.testPullNvMConfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataProviderTest.java</sourcefile>
      <sourceline>452</sourceline>
      <version>1</version>
      <description>Verifies that the data provider correctly reads the data from the ECU configuration and writes it to the internal data model</description>
      <testexec>01: create new project with NvM, Ea, Eep, Fee,Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: check that the IMemAsMementoConstants.MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries (DataProvider6)
                 04: VP: check that the mementos have the data objects of type BlockDescriptor assigned (DataProvider6)
                 05: VP: check that the BlockDescriptor objects have the correct attribute values (DataProvider7)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.pull.DataProvider6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.pull.DataProvider7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataProviderTest.testPullNvMReferenceModelObject</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataProviderTest.java</sourcefile>
      <sourceline>768</sourceline>
      <version>1</version>
      <description>Verifies that the data provider correctly reads the corresponding NvMBlockDescriptor node from the ECU configuration and writes it to the internal data model</description>
      <testexec>01: create new project with NvM and load test configurations
                 02: push the memory module configuration
                 03: get the NvM DCTXT configuration context
                 04: VP: check that the IMemAsMementoConstants.MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of NvM entries
                 05: VP: check that the mementos have the data objects of type BlockDescriptor assigned
                 06: VP: check that the corresponding NvMBlockDescriptor node have the correct reference modelObject (DataProvider8)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.pull.DataProvider8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataProviderTest.testPullNvMModelObjectDCTxtTargetRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataProviderTest.java</sourcefile>
      <sourceline>867</sourceline>
      <version>1</version>
      <description>Verifies that the data provider correctly reads the NvMTargetBlockReference to the corresponding starting Mapped BlockConfiguration from the ECU configuration and writes it to the internal data model</description>
      <testexec>01: create new project with NvM, Ea, Eep, Fee,Fls and load test configurations
                 02: push the memory module configuration
                 03: get the NvM DCTXT configuration context
                 04: VP: check that the IMemAsMementoConstants.MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of NvM entries
                 05: VP: check that the mementos have the data objects of type BlockDescriptor assigned
                 06: VP: check that the NvMTargetBlockReference of the corresponding NvMBlockDescriptor having the correct reference modelObject (DataProvider9)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.pull.DataProvider9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataProviderTest.testPullNvMDatasetSelectionBits</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataProviderTest.java</sourcefile>
      <sourceline>977</sourceline>
      <version>1</version>
      <description>Verifies that the data provider correctly reads the corresponding NvMDatasetSelectionBits from the ECU configuration and writes it to the internal data model</description>
      <testexec>01: create new project with NvM and load test configurations
                 02: push the memory module configuration
                 03: get the NvM DCTXT configuration context
                 04: VP: check that the read parameter of NvMDatasetSelectionBits is stored correctly (DataProvider10)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.pull.DataProvider10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.DataProviderTest.testNvMJobPrioritization</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/DataProviderTest.java</sourcefile>
      <sourceline>1018</sourceline>
      <version>1</version>
      <description>Verifies that the data provider correctly reads the corresponding NvMJobPrioritization from the ECU configuration and writes it to the internal data model</description>
      <testexec>01: create new project with NvM and load test configurations
                 02: push the memory module configuration
                 03: get the NvM DCTXT configuration context
                 04: VP: check that the read parameter of NvMJobPrioritization is stored correctly (DataProvider12)</testexec>
      <testpasscrit>Pass</testpasscrit>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.pull.DataProvider12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationBlockDescriptorNameisOutofValidRange</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>101</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the  validation for the block Descriptor name is out of a valid range or not&lt;/pre&gt;</description>
      <testexec>01: Create a new block descriptor with invalid name
                 02: VP: Check that the block descriptors name is out of a valid range.</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationBlockDescriptorNameisValidOrNot</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the  validation for the block Descriptor name is valid or not&lt;/pre&gt;</description>
      <testexec>01: Create new block descriptors with valid and invalid names
                 02: VP: Check that the block descriptors name is valid or not.</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationBlockDescriptorNameisNotunique</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>219</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the Memory Stack Editor shall report an error when name of blockDescriptor is not unique&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: Create new block descriptors
                 03: VP: Check that the block descriptors name is unique or not.</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationBlockDescriptorNameisNotuniqueBeforeStart</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>330</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the Memory Stack Editor shall report an error when name of blockDescriptor is not unique&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: VP: Check that the block descriptors name is unique or not.</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationofNvMBlockNumberForNative</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>366</sourceline>
      <version>1</version>
      <description>Verifies that the Memory Stack Editor shall report an error when nvmBlockNum contains a different value than 1 for native blocks</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check that the validation of NvMBlockNumber for native block</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationofNvMBlockNumberForRedundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>429</sourceline>
      <version>1</version>
      <description>Verifies that the Memory Stack Editor shall report an error when nvBlockNum contains a different value than 2 for redundant blocks</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of NvMBlockNumber for Redundant block .</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationofNvMBlockNumberForDatasetWithLessthanMinValue</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>493</sourceline>
      <version>1</version>
      <description>Verifies that the Memory Stack Editor shall report an error when nvmBlockNum contains a value lower than 2 or greater than (2 to the power of dataSelectionBits)for data set blocks</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of NvMBlockNumber For Dataset Blocks with NvMBlockNumber=1</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationofNvMBlockNumberForDatasetWithGreaterthanMaxValue</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>563</sourceline>
      <version>1</version>
      <description>Verifies that the Memory Stack Editor shall report an error when nvmBlockNum contains a value lower than 2 or greater than (2 to the power of dataSelectionBits)for data set blocks</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of NvMBlockNumber For Dataset Blocks with NvMBlockNumber&gt;2^dataSelectionBits</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfRomBlockNumberForNative</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>633</sourceline>
      <version>1</version>
      <description>Verifies the The Memory Stack Editor shall report an error when romBlockNum is not set 1 and romBlockDataAddress is not an empty string for native and redundant blocks</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of RomBlockNumber for native blocks</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfRomBlockNumberForRedundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>700</sourceline>
      <version>1</version>
      <description>Verifies the The Memory Stack Editor shall report an error when romBlockNum is not set 1 and romBlockDataAddress is not an empty string for native and redundant blocks</description>
      <testexec>01: create new project with NvM, Fee,Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of RomBlockNumber for Redundant blocks</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfRomBlockNumberForAll</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>767</sourceline>
      <version>1</version>
      <description>Verifies that the Memory Stack Editor shall report an error when romBlockNum is greater than 0 but romBlockDataAddress is an empty string</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: check the validation of relation between RomBlockNumber and RomBlockDataAddress</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockBaseNumber</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>833</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockBaseNumber does not equal BlockNumber of BlockConfiguration (Fee/Ea block configuration block number referenced in NvMTargetBlockReference) &gt;&gt; dataSelectionBits</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of relation between BlockBaseNumber and block configuration blockNumber</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfNvramDeviceIdandDeviceIndexofFee</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>903</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when nvRAMDeviceId does not equal the value of the ECU configuration parameter [Fls/Eep]DriverIndex in the container which is referenced by referencedBlockDescriptor of the startingMappedBlockConfiguration</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking the relation between NvRamDeviceId and deviceindex for Fee block</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfNvramDeviceIdanddeviceindexofEa</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>971</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when nvRAMDeviceId does not equal the value of the ECU configuration parameter [Fls/Eep]DriverIndex in the container which is referenced by referencedBlockDescriptor of the startingMappedBlockConfiguration</description>
      <testexec>01: create new project with NvM, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking the relation between NvRamDeviceId and deviceindex for Ea block</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfNvramDeviceIdandDeviceIndexofMemAcc</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>1039</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when nvRAMDeviceId does not equal the value of the ECU configuration parameter [MemAcc]MemAccAddressAreaId in the container which is referenced by referencedBlockDescriptor of the startingMappedBlockConfiguration</description>
      <testexec>01: create new project with NvM, Fee, MemAcc and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking the relation between NvRamDeviceId and deviceindex for Fee block reference to MemAcc module</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockLength</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>1099</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockLength contains a value which is out of the valid range</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of Block Length is correct or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfRamBlockAddress</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>1163</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when ramBlockDataAddress contains a value which is out of the valid range while loading the memory stack editor</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of RamBlockAddress is correct or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfRomBlockAddress</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>1229</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when romBlockDataAddress contains a value which is out of the valid range while loading the memory stack editor</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of RomBlockAddress is correct or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockAddresses</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>1294</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when ramBlockDataAddress/romBlockDataAddress contains a value which is out of the valid range</description>
      <testexec>01: create block descriptors with valid and invalid ramBlockDataAddress and romBlockDataAddress respectively
                 02: VP: Check the RamBlockAddress is correct or not for each block descriptor
                 03: VP: Check the RomBlockAddress is correct or not for each block descriptor</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfTargetBlocktypeofFEEBlock</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>1856</sourceline>
      <version>1</version>
      <description>Verifies that the Memory Stack Editor shall report an error when targetBlockType==FEE_BLOCK but startingMappedBlockConfiguration refers to a BlockConfiguration with blockType==EA_BLOCK</description>
      <testexec>01: create new project with NvM,Ea,Eep and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of TargetBlocktype of FEE block is correct or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfTargetBlocktypeofEaBlock</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>1923</sourceline>
      <version>1</version>
      <description>Verifies that the Memory Stack Editor shall report an error when targetBlockType==EA_BLOCK but startingMappedBlockConfiguration refers to a BlockConfiguration with blockType==FEE_BLOCK</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: Vp: Check the validation of TargetBlocktype for EA Block is correct or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfStartingMappedBlockConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>1990</sourceline>
      <version>1</version>
      <description>Verifies that the Memory Stack Editor shall report an error when startingMappedBlockConfiguration does not refer to a BlockConfiguration</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of Starting Mapped Block Configuration which is validating, whether starting mapped block Configuration is reffering to a block configuartion</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate17</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfSMBlockConfigMapping</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2055</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when startingMappedBlockConfiguration of multiple BlockDescriptor objects refer to the same BlockConfiguration</description>
      <testexec>01: create new project with NvM, Fee, Fls,Ea,Eep and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of Starting Mapped Block Configuration ,which is checking the Starting Mapped Block Configuration of multiple block descriptors are reffering to same block configuartion</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate18</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateBlockconfigExistForNativeBlockDescriptor</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2107</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockManagementType==NVM_BLOCK_NATIVE but there are not exactly one BlockConfiguration object with blockNumber == blockBaseNumber which refers to the BlockDescriptor via referencedBlockDescriptor</description>
      <testexec>01: create new project with NvM, Fee, Fls,Ea,Eep and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of Blockconfiguration Exist For Native blockDescriptor</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate19</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateBlockconfigExistForRedundantBlockDescriptor</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2163</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockManagementType==NVM_BLOCK_REDUNDANT but there are not exactly two BlockConfiguration objects with blockNumber == blockBaseNumber + i (i=0,1) which refers to the BlockDescriptor via referencedBlockDescriptor</description>
      <testexec>01: create new project with NvM, Fee, Fls,Ea,Eep and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of Block configurations exist for Redundant block descriptor</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate20</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateBlockconfigExistForDatasetBlockDescriptor</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2221</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockManagementType==NVM_BLOCK_DATASET but there are not exactly nvBlockNum BlockConfiguration objects with blockNumber == blockBaseNumber + i (i=0..nvBlockNum) which refers to the BlockDescriptor via referencedBlockDescriptor</description>
      <testexec>01: create new project with NvM, Fee, Fls,Ea,Eep and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking block configurations exist for Dataset block descriptor</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate21</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlocknumberofblockconfigurationisValid</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2279</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockNumber of block configuration is out of the valid range</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking the  block number of block configuration is valid or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate22</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlocknumberofblockconfigurationisUnique</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2342</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies  that the Memory Stack Editor shall report an error when blockNumber of block configuration is not unique&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking the  block number of block configuration is unique or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate23</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2411</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor with blockUseCRC=false</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking the relation between  block size of block configuration and size of referenced block descriptors</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate24</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC8</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2476</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus 2 with blockUseCRC=true and blockCRCType=NVM_CRC8</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking  the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC8</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate25_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC16</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2544</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus 2 with blockUseCRC=true and blockCRCType=NVM_CRC16</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking  the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC16</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate25</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC32</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2610</sourceline>
      <version>1</version>
      <description>Verifies  that The Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus 4 with blockUseCRC=true and blockCRCType=NVM_CRC32</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC32</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate26</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC8WithCryptoExtraInfoSize</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2676</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus NvMCryptoExtraInfoSize plus 1 with blockUseCRC=true and blockCRCType=NVM_CRC8</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking  the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC8</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate25_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC8PlusCryptoExtraInfoSizePlusCheckStaticBlockId</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2707</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus CheckStaticBlockId plus NvMCryptoExtraInfoSize plus 1 with blockUseCRC=true and blockCRCType=NVM_CRC8</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking  the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC8</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate25_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC16WithCryptoExtraInfoSize</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2740</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus NvMCryptoExtraInfoSize plus 2 with blockUseCRC=true and blockCRCType=NVM_CRC16</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking  the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC16</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate25</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC16PlusCryptoExtraInfoSizePlusCheckStaticBlockId</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2771</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus CheckStaticBlockId plus NvMCryptoExtraInfoSize plus 2 with blockUseCRC=true and blockCRCType=NVM_CRC16</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking  the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC16</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate25</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC32WithCryptoExtraInfoSize</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2805</sourceline>
      <version>1</version>
      <description>Verifies  that The Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus NvMCryptoExtraInfoSize plus 4 with blockUseCRC=true and blockCRCType=NVM_CRC32</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC32</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate26</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC32PlusCryptoExtraInfoSizePlusCheckStaticBlockId</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2837</sourceline>
      <version>1</version>
      <description>Verifies  that The Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus CheckStaticBlockId plus NvMCryptoExtraInfoSize plus 4 with blockUseCRC=true and blockCRCType=NVM_CRC32</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC32</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate26</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfDeviceIndexofFeeblockconfigurationLessthanZero</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>2944</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when deviceIndex of block configuration contains a value which is out of range</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of Device Index of Fee block configuration is correct or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate27</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfDeviceIndexofFeeblockconfigurationgreaterthanMaxval</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>3008</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when deviceIndex of block configuration contains a value which is out of range</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of Device Index of Fee block configuration is correct or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate27</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfDeviceIndexofEablockconfigurationLessthanZero</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>3072</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when deviceIndex of block configuration contains a value which is out of range</description>
      <testexec>01: create new project with NvM, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of Device Index of Ea block configuration is correct or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate27</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfDeviceIndexofEablockconfigurationgreaterThanMaxVal</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>3135</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when deviceIndex of block configuration contains a value which is out of range</description>
      <testexec>01: create new project with NvM, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation of Device Index of Ea block configuration is correct or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate27</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfReferencedBlockDescofblockconfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>3198</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when referencedBlockDescriptor does not contain the name of an existing BlockDescriptor</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check validation for checking Referenced BlockDescriptor of block configuration is existing or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate28</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFeeFlsModulesPresent</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>3266</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when targetBlockType==FEE_BLOCK or blockType of BlockConfiguration==FEE_BLOCK but the Fee or the Fls are not part of the project</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: add a new BlockDescriptor to the internal data model
                 03: VP: Check the validation result list is empty or not when required modules are present(validate29,validate31)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate29</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate31</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFeeFlsmodulesMissing</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>3355</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when targetBlockType==FEE_BLOCK or blockType of BlockConfiguration==FEE_BLOCK but the Fee or the Fls are not part of the project</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: add a new BlockDescriptor and new block configuration to the internal data model
                 03: VP: Check the validation of memory module requirements for block descriptor(validate29)
                 04: VP: Check the validation of memory module requirements for block configuration(validate30)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate29</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate31</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFeeModuleMissing</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>3455</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when targetBlockType==FEE_BLOCK or blockType of BlockConfiguration==FEE_BLOCK but the Fee or the Fls are not part of the project</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: add a new BlockDescriptor to the internal data model
                 03: VP: Check the validation of memory module requirements for block descriptor(validate29)
                 04: VP: Check the validation of memory module requirements for block configuration(validate30)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate29</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate31</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredFlsmoduleMissing</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>3553</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when targetBlockType==FEE_BLOCK or blockType of BlockConfiguration==FEE_BLOCK but the Fee or the Fls are not part of the project</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: add a new BlockDescriptor to the internal data model
                 03: VP: Check the validation of memory module requirements for block descriptor(validate29)
                 04: VP: Check the validation of memory module requirements for block configuration(validate30)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate29</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate31</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepFlsFeeBlockMissing</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>3652</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies  the validation of Memory Module Requirements Required when all the modules Ea,Eep,Fee,Fls are missing&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Ea,Eep,Fee,Fls
                 02: add new Fee and Ea BlockDescriptor and new Fee and Ea block configuarations andto the internal data model
                 03: VP: Check the validation of memory module requirements for block descriptor(validate29,validate31)
                 04: VP: Check the validation of memory module requirements for block configuration(validate30,validate32)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate29</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate30</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate31</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepFlsFeeBlockPresent</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>3799</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies  the validation of Memory Module Requirements Required when all the modules Ea,Eep,Fee,Fls are present&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Ea,Eep,Fee,Fls
                 02: add new Fee and Ea BlockDescriptor and new Fee and Ea block configuarations andto the internal data model
                 03: VP: Check the validation result list is empty or not when all the required modules are present(validate29,validate30,validate31,validate32)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate29</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate30</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate31</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepModulesPresent</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>3927</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when targetBlockType==EA_BLOCK or blockType of BlockConfiguration==EA_BLOCK but the Ea or the Eep are not part of the project</description>
      <testexec>01: create new project with NvM, Ea, Eep
                 02: Add a new BlockDescriptor to the internal data model
                 03: VP: Check the validation result list is empty or not when required modules are present(validate30,validate32)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate30</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaEepModuleMissing</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>4015</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when targetBlockType==EA_BLOCK or blockType of BlockConfiguration==EA_BLOCK but the Ea or the Eep are not part of the project</description>
      <testexec>01: create new project with NvM, Ea, Eep
                 02: Add a new BlockDescriptor to the internal data model
                 03: VP: Check the validation of Memory Module Requirements of block descriptor (validate30)
                 04: VP: Check the validation of Memory Module Requirements of block configuration(validate32)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate30</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEaModuleMissing</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>4114</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when targetBlockType==EA_BLOCK or blockType of BlockConfiguration==EA_BLOCK but the Ea or the Eep are not part of the project</description>
      <testexec>01: create new project with NvM, Ea, Eep
                 02: Add a new BlockDescriptor to the internal data model
                 03: VP: Check the validation of Memory Module Requirements of block descriptor (validate30)
                 04: VP: Check the validation of Memory Module Requirements of block configuration(validate32)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate30</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateMemoryModuleRequirementsRequiredEepModuleMissing</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>4211</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when targetBlockType==EA_BLOCK or blockType of BlockConfiguration==EA_BLOCK but the Ea or the Eep are not part of the project</description>
      <testexec>01: create new project with NvM, Ea, Eep
                 02: Add a new BlockDescriptor to the internal data model
                 03: VP: Check the validation of Memory Module Requirements of block descriptor (validate30)
                 04: VP: Check the validation of Memory Module Requirements of block configuration(validate32)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate30</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusOkForAllValidations</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>4309</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies All the validation status is ok or not&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check all the validation status is ok for block descriptor
                 04: VP: Check all the validation status is ok for block configuration</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate17</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate22</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate23</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate24</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate25</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate26</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate27</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate28</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationStatusNotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>4426</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies All the validation status is ok or not&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: push the memory module configuration
                 03: VP: Check all the validation status is not ok for block descriptor
                 04: VP: Check all the validation status is not ok for block descriptor</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate22</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate23</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate34</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate38</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate43</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationForModuleWithProblems</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>4544</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies All the validation status is ok or not&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: push the memory module configuration
                 03: VP: Check all the validation status is not ok for module
                 04: VP: Check all the validation status is not ok for module</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate27</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate34</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
        <provcov>
          <linksto>memas.design.errorhandling.Validate44</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateNumberofWriteCyclesOfBlockConfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>4656</sourceline>
      <version>1</version>
      <description>Verifies that the Memory Stack Editor shall report an error when number of write cycles of BlockConfiguration contains a value which is out of range</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: add Block Configurations to the internal data model
                 03: VP: Check the number of write cycles of BlockConfiguration contains a value which is out of range including both lower and upper limits</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate33</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateNvmJobPrioritization</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>4723</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the Memory Stack Editor shall report an error when NvmBlockJobPriority is less than zero&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: add a new Block descriptors to the internal data model
                 03: VP: Check the NvmBlockJobPriority is less than zero</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate34</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateBlockConfigurationImmediateData</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>4776</sourceline>
      <version>1</version>
      <description>Verifies that the Memory Stack Editor shall report an error when block configuration immediate data contains a wrong value with respect to block descriptor's NvmBlockPriority value</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: add Block descriptors and block configurations to the internal data model
                 03: VP: Check the block configuration immediate data is wrong or not with respect to block descriptor's NvmBlockPriority value
                 04: Run the memory module configutrator to fix the wrong block configuration immediate data
                 05: VP: Again check the block configuration immediate data is wrong or not with respect to block descriptor's NvmBlockPriority value and verify the result</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate35</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateBlockDescriptorsPresentToConfigure</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>4928</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the Memory Stack Editor shall report a warning when no block descriptors present to configure&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: VP: Check the block descriptors present to configure
                 03: Add new block descriptors to the internal data model
                 04: VP: verify again the block descriptors present to configure and the result list is empty
                 05: Remove all block descriptors
                 06: VP: verify again the block descriptors present to configure and the result list contains an error marker</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate40</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidateAllBlockConfigurationBlockNumber</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>5026</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the Memory Stack Editor shall report an error when block configuration blocknumber is invalid&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: VP: Check the blocknumber is valid or not</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate41</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationWithCheckStaticBlockIDChecked</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>5078</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus 2 with blockUseCRC=false</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking the relation between  block size of block configuration and size of referenced block descriptor and checkStaticBlockId=true</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate42</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC8AndStaticBlockIdChecked</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>5145</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus 4 with blockUseCRC=true, blockCRCType=NVM_CRC8 and checkStaticBlockId=true</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking  the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC8 and checkStaticBlockId=true</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate43_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC16AndStaticBlockIdChecked</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>5212</sourceline>
      <version>1</version>
      <description>Verifies  that the Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus 4 with blockUseCRC=true, blockCRCType=NVM_CRC16 and checkStaticBlockId=true</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking  the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC16 and checkStaticBlockId=true</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate43</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.ErrorHandlingTest.testValidationOfBlockSizeofblockconfigurationwithCRC32AndStaticBlockIdChecked</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/ErrorHandlingTest.java</sourcefile>
      <sourceline>5275</sourceline>
      <version>1</version>
      <description>Verifies  that The Memory Stack Editor shall report an error when blockSize does not equal size of the referenced BlockDescriptor plus 4 with blockUseCRC=true, blockCRCType=NVM_CRC32 and and checkStaticBlockId=true</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: Check the validation for checking the relation between  block size of block configuration and size of referenced block descriptors with blockCRCType=NVM_CRC32 and checkStaticBlockId=true</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.errorhandling.Validate44</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationIdentifier</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the MemoryModuleConfigurator shall assign the NvramBlockIdentifier values uniquely.&lt;/pre&gt;</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object for the type Native, Redundant &amp; Dataset
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries
                 05: VP: Check that the NvramBlockIdentifier of block Descriptors is assigned uniquely (BlockConfigurationIdentifier)
                 06: VP: check that the mementos have the data objects of type BlockDescriptor assigned</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationIdentifier</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testValidationOfInvalidBlockConfig_DeleteAllBlockExceptFirst</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>168</sourceline>
      <version>1</version>
      <description>Verifies that the Memory Stack Editor shall not report "does not refer a valid block configuration" error when all the blocks are deleted except the first block.</description>
      <testexec>01: Create first BlockDescriptors
                 02: Create new BlockDescriptor object for the type Native, Redundant &amp; Dataset
                 03: Create memory module configuration for all the BlockDescriptors
                 04: Create next BlockDescriptors
                 05: VP: Check the validation of Starting Mapped Block Configuration.
                 06: Create memory module configuration for all the BlockDescriptors
                 07: VP: Check the validation error doesn't appear after clicking Memory Stack Configurator</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.req.AllocateFeeEaBlocks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationBaseNumber</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>269</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the memory module configuration shall assign the blockBaseNumber according to the new block number.&lt;/pre&gt;</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object for the type Native, Redundant &amp; Dataset
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries
                 05: VP: Check that the blockBaseNumber of block Descriptors is assigned according to new block number (BlockConfigurationBaseNumber)
                 06: VP: check that the mementos have the data objects of type BlockDescriptor assigned</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationBaseNumber</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationBaseNumberExist</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>382</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the memory module configuration shall assign the blockBaseNumber according to the new block number.&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and BlockConfigurations
                 04: VP: check that the list contains correct number of block configuration entries before module configuratio
                 05: Change the block number of starting mapped block configuration
                 06: Create memory module configuration for all the BlockDescriptors
                 07: VP: Check that the blockBaseNumber of block Descriptors is assigned according to new block number (BlockConfigurationBaseNumber)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationBaseNumber</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationBaseNumberWithNoChange</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>467</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the memory module configuration shall assign the blockBaseNumber according to the new block number.&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and BlockConfigurations
                 04: VP: check that the list contains correct number of block configuration entries before module configuration
                 05: Change the block number of starting mapped block configuration
                 06: Create memory module configuration for all the BlockDescriptors
                 07: VP: Check that the blockBaseNumber of block Descriptors is assigned according to new block number (BlockConfigurationBaseNumber)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationBaseNumber</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationFeeNative</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>551</sourceline>
      <version>1</version>
      <description>Verifies that the memory module configuration shall assign one BlockConfiguration object with name Fee_&lt;name of BlockDescriptor&gt; and blockType==FEE_BLOCK to each BlockDescriptor with blockManagementType==NVM_BLOCK_NATIVE and targetBlockType==FEE_BLOCK.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object of type Native and FEE
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries for the type Native
                 05: VP: check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries for the type Native
                 06: VP: Check that the BlockConfiguration object with name Fee_&lt;name of BlockDescriptor&gt; is assigned for each BlockDescriptor (BlockConfigurationFeeNative)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationFeeNative</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationFeeRedundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>641</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall assign two BlockConfiguration object with names Fee_&lt;name of BlockDescriptor_Red&gt; and Fee_&lt;name ofBlockDescriptor&gt;_Red_0 and blockType==FEE_BLOCK to each BlockDescriptor with blockManagementType==NVM_BLOCK_REDUNDANT and targetBlockType==FEE_BLOCK.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object of the type Redundant and FEE
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries for the type Redundant
                 05: VP: check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries for the type Redundant
                 06: VP: Check that the BlockConfiguration object with names Fee_&lt;name of BlockDescriptor&gt;_Red and Fee_&lt;name of BlockDescriptor&gt;_Red_0 is assigned for each BlockDescriptor (BlockConfigurationFeeRedundant)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationFeeRedundant</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationFeeDataSet</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>731</sourceline>
      <version>1</version>
      <description>Verifies that The MemoryModuleConfigurator shall assign i BlockConfiguration object with names Fee_&lt;name of BlockDescriptor&gt;_&lt;i&gt; and blockType==FEE_BLOCK to each BlockDescriptor with blockManagementType==NVM_BLOCK_DATASET and targetBlockType==FEE_BLOCK.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object of the type Dataset and FEE
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries for the type Dataset
                 05: VP: check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries for the type Dataset
                 06: VP: Check that the BlockConfiguration object with names Fee_&lt;name of BlockDescriptor&gt;_&lt;i&gt; is assigned for each BlockDescriptor (BlockConfigurationFeeDataSet)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationFeeDataSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaNative</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>827</sourceline>
      <version>1</version>
      <description>Verifies that The MemoryModuleConfigurator shall assign one BlockConfiguration object with name Ea_&lt;name of BlockDescriptor&gt; and blockType==EA_BLOCK to each BlockDescriptor with blockManagementType==NVM_BLOCK_NATIVE and targetBlockType==EA_BLOCK.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object of the type Native and Ea
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries for the type Native
                 05: VP: check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries for the type Native
                 06: VP: Check that the BlockConfiguration object with name Ea_&lt;name of BlockDescriptor&gt; is assigned for each BlockDescriptor (BlockConfigurationEaNative)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationEaNative</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaRedundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>915</sourceline>
      <version>1</version>
      <description>Verifies that The memory module configuration shall assign two BlockConfiguration object with names Ea_&lt;name of BlockDescriptor&gt;_Red and Ea_&lt;name of BlockDescriptor&gt;_Red_0 and blockType==EA_BLOCK to each BlockDescriptor with blockManagementType==NVM_BLOCK_REDUNDANT and targetBlockType==EA_BLOCK.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object of the type Redundant and Ea
                 03: Create memory module configurations for all the BlockDescriptors
                 04: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries for the type Redundant
                 05: VP: check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries for the type Redundant
                 06: VP: Check that the BlockConfiguration object with names Ea_&lt;name of BlockDescriptor&gt;_Red and Ea_&lt;name of BlockDescriptor&gt;_Red_0 is assigned for each BlockDescriptor (BlockConfigurationEaRedundant)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationEaRedundant</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaDataSet</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1005</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall assign i BlockConfiguration objects with names Ea_&lt;name of BlockDescriptor&gt;_&lt;i&gt; and blockType==EA_BLOCK to each BlockDescriptor with blockManagementType==NVM_BLOCK_DATASET and targetBlockType==EA_BLOCK.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object of the type Dataset and Ea
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries for the type Dataset
                 05: VP: check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries for the type Dataset
                 06: VP: Check that the BlockConfiguration object with names Ea_&lt;name of BlockDescriptor&gt;_&lt;i&gt; is assigned for each BlockDescriptor (BlockConfigurationEaDataSet)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationEaDataSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationStartingMappedBlock_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1101</sourceline>
      <version>1</version>
      <description>Verifies that when adding new BlockConfiguration objects, the MemoryModuleConfigurator shall set the reference startingMappedBlockConfiguration from the BlockDescriptor to the first BlockConfiguration assigned to the BlockDescriptor.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object for the type Native
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the reference startingMappedBlockConfiguration from the BlockDescriptor to the first BlockConfiguration assigned to the BlockDescriptor (BlockConfigurationStartingMappedBlock)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationStartingMappedBlock</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationStartingMappedBlock_Redundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1155</sourceline>
      <version>1</version>
      <description>Verifies that when adding new BlockConfiguration objects, the MemoryModuleConfigurator shall set the reference startingMappedBlockConfiguration from the BlockDescriptor to the first BlockConfiguration assigned to the BlockDescriptor.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object for the type Redundant
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the reference startingMappedBlockConfiguration from the BlockDescriptor to the first BlockConfiguration assigned to the BlockDescriptor (BlockConfigurationStartingMappedBlock)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationStartingMappedBlock</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationStartingMappedBlock_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1210</sourceline>
      <version>1</version>
      <description>Verifies that when adding new BlockConfiguration objects, the MemoryModuleConfigurator shall set the reference startingMappedBlockConfiguration from the BlockDescriptor to the first BlockConfiguration assigned to the BlockDescriptor.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object for the type Dataset
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the reference startingMappedBlockConfiguration from the BlockDescriptor to the first BlockConfiguration assigned to the BlockDescriptor (BlockConfigurationStartingMappedBlock)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationStartingMappedBlock</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationReferencedBlockDescriptor_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1267</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the MemoryModuleConfigurator shall set the attribute referencedBlockDescriptor to BlockDescriptor.name.&lt;/pre&gt;</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of block confinguration native entries
                 05: VP: Check that the referencedBlockDescriptor is set to BlockDescriptor.name (BlockConfigurationReferencedBlockDescriptor)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationReferencedBlockDescriptor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationReferencedBlockDescriptor_Redundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1325</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the MemoryModuleConfigurator shall set the attribute referencedBlockDescriptor to BlockDescriptor.name.&lt;/pre&gt;</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of block confinguration redundant entries
                 05: VP: Check that the referencedBlockDescriptor is set to BlockDescriptor.name (BlockConfigurationReferencedBlockDescriptor)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationReferencedBlockDescriptor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationReferencedBlockDescriptor_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1385</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the MemoryModuleConfigurator shall set the attribute referencedBlockDescriptor to BlockDescriptor.name.&lt;/pre&gt;</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of block configuration dataset entries
                 05: VP: Check that the referencedBlockDescriptor is set to BlockDescriptor.name (BlockConfigurationReferencedBlockDescriptor)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationReferencedBlockDescriptor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeNoCRC_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1446</sourceline>
      <version>1</version>
      <description>Verifies that The MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor when blockUseCRC==false.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object for Native
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to false
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor when blockUseCRC==false (BlockConfigurationSizeNoCRC)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeNoCRC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeNoCRC_Redundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1498</sourceline>
      <version>1</version>
      <description>Verifies that The MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor when blockUseCRC==false.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object for Redundant
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to false
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor when blockUseCRC==false (BlockConfigurationSizeNoCRC)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeNoCRC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeNoCRC_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1551</sourceline>
      <version>1</version>
      <description>Verifies that The MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor when blockUseCRC==false.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object for Dataset
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to false
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor when blockUseCRC==false (BlockConfigurationSizeNoCRC)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeNoCRC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC8_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1605</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 2 when blockUseCRC==true and blockCRCType=NVM_CRC8.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to true
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 1 (BlockConfigurationSizeCRC8)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeCRC8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC8_Redudant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1659</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 2 when blockUseCRC==true and blockCRCType=NVM_CRC8.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to true
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 1 (BlockConfigurationSizeCRC8)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeCRC8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC8_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1713</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 2 when blockUseCRC==true and blockCRCType=NVM_CRC8.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to true
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 1 (BlockConfigurationSizeCRC8)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeCRC8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC16_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1768</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 2 when blockUseCRC==true and blockCRCType=NVM_CRC16.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to true
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 2 (BlockConfigurationSizeCRC16)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeCRC16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC16_Redudant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1821</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 2 when blockUseCRC==true and blockCRCType=NVM_CRC16.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to true
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 2 (BlockConfigurationSizeCRC16)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeCRC16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC16_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1876</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 2 when blockUseCRC==true and blockCRCType=NVM_CRC16.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to true
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 2 (BlockConfigurationSizeCRC16)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeCRC16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC32_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1931</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 4 when blockUseCRC==true and blockCRCType=NVM_CRC32.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to true
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 4 (BlockConfigurationSizeCRC32)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeCRC32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC32_Redundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>1984</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 4 when blockUseCRC==true and blockCRCType=NVM_CRC32.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to true
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 4 (BlockConfigurationSizeCRC32)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeCRC32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC32_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2038</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 4 when blockUseCRC==true and blockCRCType=NVM_CRC32.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the BlockUseCRC is set to true
                 05: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 4 (BlockConfigurationSizeCRC32)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeCRC32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeConsidersCryptoExtraInfoSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2093</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall assign the blockNumber of the i th BlockConfiguration object belonging to a BlockDescriptor according to the new block base number rule.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that MemoryModuleConfigurator as assigned the blockNumber of the i th BlockConfiguration (BlockConfigurationEaFeeBaseNumber)
                 05: VP: Check that MemoryModuleConfigurator as assigned containes unique BlockConfiguration block number (BlockConfigurationEaFeeBaseNumber)
                 06: VP: Check that MemoryModuleConfigurator should not result a data lose while right shifting by dataSelectionBits (BlockConfigurationEaFeeBaseNumber)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationEaFeeBaseNumber</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber_Redundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2183</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall assign the blockNumber of the i th BlockConfiguration object belonging to a BlockDescriptor according to the new block base number rule.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that MemoryModuleConfigurator as assigned the blockNumber of the i th BlockConfiguration (BlockConfigurationEaFeeBaseNumber)
                 05: VP: Check that MemoryModuleConfigurator as assigned containes unique BlockConfiguration block number (BlockConfigurationEaFeeBaseNumber)
                 06: VP: Check that MemoryModuleConfigurator should not result a data lose while right shifting by dataSelectionBits (BlockConfigurationEaFeeBaseNumber)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationEaFeeBaseNumber</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2275</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall assign the blockNumber of the i th BlockConfiguration object belonging to a BlockDescriptor according to the new block base number rule.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that MemoryModuleConfigurator as assigned the blockNumber of the i th BlockConfiguration (BlockConfigurationEaFeeBaseNumber)
                 05: VP: Check that MemoryModuleConfigurator as assigned containes unique BlockConfiguration block number (BlockConfigurationEaFeeBaseNumber)
                 06: VP: Check that MemoryModuleConfigurator should not result a data lose while right shifting by dataSelectionBits (BlockConfigurationEaFeeBaseNumber)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationEaFeeBaseNumber</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationImmediateData_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2374</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set immediateData to true when nvmJobPriorization=true and BlockDescriptor.blockPriority=0.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that MemoryModuleConfigurator as assigned BlockConfiguration.immediateData to true when MemAsBackend.nvmJobPriorization=true and BlockDescriptor.blockPriority=0 (BlockConfigurationImmediateData_Native)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationImmediateData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationImmediateData_Redundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2420</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set IMemAsMementoConstants.immediateData to true when MemAsBackend.nvmJobPriorization=true and BlockDescriptor.blockPriority=0.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that MemoryModuleConfigurator as assigned BlockConfiguration.immediateData to true when MemAsBackend.nvmJobPriorization=true and BlockDescriptor.blockPriority=0 (BlockConfigurationImmediateData_Redundant)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationImmediateData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationImmediateData_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2466</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set IMemAsMementoConstants.immediateData to true when MemAsBackend.nvmJobPriorization=true and BlockDescriptor.blockPriority=0.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that MemoryModuleConfigurator as assigned BlockConfiguration.immediateData to true when MemAsBackend.nvmJobPriorization=true and BlockDescriptor.blockPriority=0 (BlockConfigurationImmediateData_Dataset)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationImmediateData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexFls</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2511</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set IMemAsMementoConstants.deviceIndex to the short name path of the first FlsGeneral container of all Fls module configurations when blockType==FEE_BLOCK.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration object where deviceIndex is set to EepGeneral
                 05: Create memory module configuration for all the BlockDescriptors
                 06: VP: check that the MemoryModuleConfigurator configured deviceIndex to FlsGeneral</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexFls</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexMemAcc</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2585</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set to the short name path of the correct MemAccAddressArea container of all MemAcc module configurations when blockType==FEE_BLOCK/EA_BLOCK and FeeMemAccUsage is set to true.</description>
      <testexec>01: create new project with NvM, Fee, MemAcc, Ea, Eep
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and BlockConfigurations
                 04: Create memory module configuration for all the BlockDescriptors
                 05: Check that the BlockDescriptors and BlockConfigurations contains the correct number of entries
                 06: Check that the MemoryModuleConfigurator configured deviceIndex to MemAccAddressArea
                 07: Check that the BlockDescriptor configured to NvRAMDeviceId</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexMemAcc</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexEep</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2657</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the device index path to the short name path of the first EepGeneral container of all Eep module configurations when blockType==EA_BLOCK.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration object where deviceIndex is set to FlsGeneral
                 05: Create memory module configuration for all the BlockDescriptors
                 07: VP: Check that MemoryModuleConfigurator as set the device index path to EepGeneral</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexEep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2733</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the MemoryModuleConfigurator shall set correct numberOfWriteCycles.&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and BlockConfigurations
                 04: Create new BlockDescriptor object
                 05: Create memory module configuration for all the BlockDescriptors
                 06: Check the size of BlockConfigurations
                 07: VP: Check that newly created configuration is assigned numberOfWriteCycles to 100000 (BlockConfigurationWriteCycles)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationWriteCycles</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_Redundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2809</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the MemoryModuleConfigurator shall set correct numberOfWriteCycles.&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and BlockConfigurations
                 04: Create new BlockDescriptor object
                 05: Create memory module configuration for all the BlockDescriptors
                 06: Check the size of BlockConfigurations
                 07: VP: Check that newly created redundent block configuration is assigned numberOfWriteCycles to 100000 (BlockConfigurationWriteCycles)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationWriteCycles</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2887</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the MemoryModuleConfigurator shall set correct numberOfWriteCycles.&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and BlockConfigurations
                 04: Create new BlockDescriptor object
                 05: Create memory module configuration for all the BlockDescriptors
                 06: Check the size of BlockConfigurations
                 07: VP: Check that newly created dataset block configuration is assigned numberOfWriteCycles to 100000 (BlockConfigurationWriteCycles)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationWriteCycles</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_Native_Exists</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>2972</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set numberOfWriteCycles when the BlockConfiguration already exists, the value shall not be overwritten to default value.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create new BlockConfiguration object
                 04: Create memory module configuration for all the BlockDescriptors
                 05: VP: Check that numberOfWriteCycles already exists, the value shall not be overwritten (BlockConfigurationWriteCycles)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationWriteCycles</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_Redundant_Exists</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>3027</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set numberOfWriteCycles when the BlockConfiguration already exists, the value shall not be overwritten to default value.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create new BlockConfiguration object
                 04: Create memory module configuration for all the BlockDescriptors
                 05: VP: Check that numberOfWriteCycles already exists, the value shall not be overwritten (BlockConfigurationWriteCycles)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationWriteCycles</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_MemAcc</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>3092</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the MemoryModuleConfigurator shall set numberOfWriteCycles.&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Ea, MemAcc
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and BlockConfigurations
                 04: Create new Native target BlockDescriptor object
                 05: Create new redundant target BlockDescriptor object
                 06: Create new dataset target BlockDescriptor object
                 05: Create memory module configuration for all the BlockDescriptors
                 07: Check the size of BlockConfigurations
                 08: VP: Check that newly created configuration's numberOfWriteCycles (BlockConfigurationWriteCycles)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationWriteCycles</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationWriteCycles_MCAL_MemAcc</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>3186</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the MemoryModuleConfigurator shall set numberOfWriteCycles for MCAL projects.&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, MemAcc and Mem_43_EEP
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and BlockConfigurations
                 04: Create memory module configuration for all the BlockDescriptors
                 05: Check the size of BlockConfigurations
                 06: VP: Check that newly created configuration's numberOfWriteCycles (BlockConfigurationWriteCycles)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationWriteCycles</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationRemoveUnused_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>3278</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall remove BlockConfiguration objects and the corresponding row mementos when they do not belong to a BlockDescriptor anymore.</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration object
                 05: Create memory module configuration for all the BlockDescriptors
                 06: push the configuration
                 07: VP: Check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries
                 08: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries
                 09: VP: Check that MemoryModuleConfigurator removed BlockConfiguration objects and the corresponding row mementos when they do not belong to a BlockDescriptor anymore (BlockConfigurationRemoveUnused)
                 10: All the block descriptor objects are removed from the list
                 11: VP: Checkt that the all block descriptor object are removed from the list
                 12: Create memory module configuration for empty BlockDescriptors
                 13: push the configuration again
                 14: VP: Check that all the configuration is removed</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationRemoveUnused</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationRemoveUnused_Redundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>3408</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall remove BlockConfiguration objects and the corresponding row mementos when they do not belong to a BlockDescriptor anymore.</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration object
                 05: Create memory module configuration for all the BlockDescriptors
                 06: push the configuration
                 07: VP: Check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries
                 08: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries
                 09: VP: Check that MemoryModuleConfigurator removed BlockConfiguration objects and the corresponding row mementos when they do not belong to a BlockDescriptor anymore (BlockConfigurationRemoveUnused)
                 10: All the block descriptor objects are removed from the list
                 11: VP: Checkt that the all block descriptor object are removed from the list
                 12: Create memory module configuration for empty BlockDescriptors
                 13: push the configuration again
                 14: VP: Check that all the configuration is removed</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationRemoveUnused</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationLocation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureBlockDescriptor_BlockConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>3552</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall remove BlockConfiguration objects and the corresponding row mementos when they do not belong to a BlockDescriptor anymore.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration object
                 05: Create memory module configuration for all the BlockDescriptors
                 06: push the configuration
                 07: VP: Check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries
                 08: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries
                 09: VP: Check that MemoryModuleConfigurator removed BlockConfiguration objects and the corresponding row mementos when they do not belong to a BlockDescriptor anymore (BlockConfigurationRemoveUnused)
                 10: All the block descriptor objects are removed from the list
                 11: VP: Check that the all block descriptor object are removed from the list
                 12: Create memory module configuration for empty BlockDescriptors
                 13: push the configuration again
                 14: VP: Check that all the configuration is removed</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationRemoveUnused</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationRemoveUnused_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>3669</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall remove BlockConfiguration objects and the corresponding row mementos when they do not belong to a BlockDescriptor anymore.</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration object
                 05: Create memory module configuration for all the BlockDescriptors
                 06: push the configuration
                 07: VP: Check that the MEMENTO_TABLE_NVM_BLOCK_DESCRIPTORS memento contains the correct number of entries
                 08: VP: check that the MEMENTO_BLOCK_CONFIGURATION_TABLE memento contains the correct number of entries
                 09: VP: Check that MemoryModuleConfigurator removed BlockConfiguration objects and the corresponding row mementos when they do not belong to a BlockDescriptor anymore (BlockConfigurationRemoveUnused)
                 10: All the block descriptor objects are removed from the list
                 11: VP: Checkt that the all block descriptor object are removed from the list
                 12: Create memory module configuration for empty BlockDescriptors
                 13: push the configuration again
                 14: VP: Check that all the configuration is removed</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationRemoveUnused</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationAlreadyExists</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>3832</sourceline>
      <version>1</version>
      <description>Verifies that the if Fee/Ea blocks are correctly assigned to a block descriptor and the user doesn't change any parameters of the block descriptor, the names of the assigned Fee/Ea blocks shall not change</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: VP: check that the list containes correct number of block configuration entries before module configuration
                 05: Create memory module configuration for all the BlockDescriptors
                 06: VP: check that the list containes correct number of block configuration entries after module configuration
                 07: VP: Check that the user doesn't change any parameters of the block descriptor, the names of the assigned Fee/Ea blocks shall not change</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorNameChanged</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>3938</sourceline>
      <version>1</version>
      <description>Verifies that the if Fee/Ea blocks are correctly assigned to a block descriptor and the user renames the block descriptor, the names of the assigned Fee/Ea blocks shall not change</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Set the BlockDescriptors name
                 05: VP: check that the list containes correct number of block configuration entries before module configuration
                 06: Create memory module configuration for all the BlockDescriptors
                 07: VP: check that the list containes correct number of block configuration entries after module configuration
                 08: VP: Check that if user renames the block descriptor, names of the assigned Fee/Ea blocks shall not change</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorTargetTypeChanged</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>4056</sourceline>
      <version>1</version>
      <description>Verifies that if Fee/Ea blocks are correctly assigned to a block descriptor and the user changes target type of the block descriptor, the names of the assigned Fee/Ea blocks shall not change</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Set the BlockDescriptors target type to EA_BLOCK
                 05: VP: check that the list containes correct number of block configuration entries before module configuration
                 06: Create memory module configuration for all the BlockDescriptors
                 07: VP: check that the list containes correct number of block configuration entries after module configuration
                 08: VP: Check that the names of the assigned Fee/Ea blocks shall not change</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaChangeToFee</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>4184</sourceline>
      <version>1</version>
      <description>Verifies that if Fee/Ea blocks are correctly assigned to a block descriptor and the user changes target block type FEE_BLOCK  of the block descriptor</description>
      <testexec>01: create new project with NvM, Ea and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Set the BlockDescriptors target type to FEE_BLOCK
                 05: VP: check that the list containes correct number of block configuration entries before module configuration
                 06: Create memory module configuration for all the BlockDescriptors</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Native_Redundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>4236</sourceline>
      <version>1</version>
      <description>Verifies that if BlockConfiguration object(s) for a BlockDescriptor already exist, the MemoryModuleConfigurator shall use the existing BlockConfiguration objects and shall not change the name of them. Even if the user changes the block management type from Native to Redundant</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Set BlockDescriptor Mangagement type to Redundant
                 05: VP: check that the list containes correct number of block configuration entries before module configuration
                 06: Create memory module configuration for all the BlockDescriptors
                 07: VP: check that the changed block management type list containes correct number of entries
                 08: VP: check that the list containes correct number of block configuration entries after module configuration
                 09: VP: Check that if the user changes the block management type, name changed to previovs name with additional suffix
                 10: VP: Check that the if user didn't changed block management type, names are remains same</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Redundant_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>4368</sourceline>
      <version>1</version>
      <description>Verifies that the if BlockConfiguration object(s) for a BlockDescriptor already exist, the MemoryModuleConfigurator shall use the existing BlockConfiguration objects and shall not change the name of them. Even if the user changes the block management type from Redundant to Native</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Set BlockDescriptor Mangagement type to Native
                 05: VP: check that the list contains correct number of block configuration entries before module configuration
                 06: Create memory module configuration for all the BlockDescriptors
                 07: VP: check that the changed block management type list containes correct number of entries
                 08: VP: check that the list containes correct number of block configuration entries after module configuration
                 09: VP: Check that if the user changes the block management type, name changed to previovs name with additional suffix
                 10: VP: Check that the if user didn't changed block management type, names are remains same</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Native_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>4494</sourceline>
      <version>1</version>
      <description>Verifies that the if BlockConfiguration object(s) for a BlockDescriptor already exist, the MemoryModuleConfigurator shall use the existing BlockConfiguration objects and shall not change the name of them. Even if the user changes the block management type from Native to Dataset</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Set BlockDescriptor Mangagement type to Dataset
                 05: VP: check that the list containes correct number of block configuration entries before module configuration
                 06: Create memory module configuration for all the BlockDescriptors
                 07: VP: check that the changed block management type list containes correct number of entries
                 08: VP: check that the list containes correct number of block configuration entries after module configuration
                 09: VP: Check that if the user changes the block management type, name changed to previovs name with additional suffix
                 10: VP: Check that the if user didn't changed block management type, names are remains same</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Dataset_Native</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>4622</sourceline>
      <version>1</version>
      <description>Verifies that the if BlockConfiguration object(s) for a BlockDescriptor already exist, the MemoryModuleConfigurator shall use the existing BlockConfiguration objects and shall not change the name of them. Even if the user changes the block management type from Dataset to Native</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Set BlockDescriptor Mangagement type to Native
                 05: VP: check that the list containes correct number of block configuration entries before module configuration
                 06: Create memory module configuration for all the BlockDescriptors
                 07: VP: check that the changed block management type list containes correct number of entries
                 08: VP: check that the list containes correct number of block configuration entries after module configuration
                 09: VP: Check that if the user changes the block management type, name changed to previovs name with additional suffix
                 10: VP: Check that the if user didn't changed block management type, names are remains same</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Redundant_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>4728</sourceline>
      <version>1</version>
      <description>Verifies that the if BlockConfiguration object(s) for a BlockDescriptor already exist, the MemoryModuleConfigurator shall use the existing BlockConfiguration objects and shall not change the name of them. Even if the user changes the block management type from Redundant to Dataset</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Set BlockDescriptor Mangagement type to Dataset
                 05: VP: check that the list containes correct number of block configuration entries before module configuration
                 06: Create memory module configuration for all the BlockDescriptors
                 07: VP: check that the changed block management type list containes correct number of entries
                 08: VP: check that the list containes correct number of block configuration entries after module configuration
                 09: VP: Check that if the user changes the block management type, name changed to previovs name with additional suffix
                 10: VP: Check that the if user didn't changed block management type, names are remains same</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorManagementType_Dataset_Redundant</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>4850</sourceline>
      <version>1</version>
      <description>Verifies that the if BlockConfiguration object(s) for a BlockDescriptor already exist, the MemoryModuleConfigurator shall use the existing BlockConfiguration objects and shall not change the name of them. Even if the user changes the block management type from Dataset to Redundant.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and BlockConfigurations
                 04: Set BlockDescriptor Mangagement type to Redundant
                 05: VP: check that the list containes correct number of block configuration entries before module configuration
                 06: Create memory module configuration for all the BlockDescriptors
                 07: VP: check that the changed block management type list containes correct number of entries
                 08: VP: check that the list containes correct number of block configuration entries after module configuration
                 09: VP: Check that if the user changes the block management type, name changed to previovs name with additional suffix
                 10: VP: Check that the if user didn't changed block management type, names are remains same</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationNameMangling</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>4971</sourceline>
      <version>1</version>
      <description>Verifies that when assigning names to BlockConfiguration objects and the name is not unique among all BlockConfigurationObjects,MemoryModuleConfigurator shall mangle a unique name by assigning an additional suffix.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Create new BlockDescriptor object
                 05: Create memory module configuration for all the BlockDescriptors
                 06: VP: Check that the the MemoryModuleConfigurator shall mangle a unique name by assigning an additional suffix (BlockConfigurationNameMangling)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationNameMangling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexWithDifferentFls</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>5050</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the device index path to the short name path of the selected FlsGeneral container when blockType==FEE_BLOCK.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep,Fls2, Eep2
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration objects where the device index context is set to different FlsGeneral containers
                 05: Create memory module configuration for all the BlockDescriptors
                 06: VP: check that the MemoryModuleConfigurator configured the device index paths to the correct short name paths of the FlsGeneral containers</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexFls</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexFls_Multiple</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>5148</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the device index path to the short name path of the the first FlsGeneral container when blockType==FEE_BLOCK and
the device index context is set to an EepGeneral container before the MemoryModuleConfigurator is called.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep,Fls2, Eep2
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration objects where the device index context is set to a EepGeneral container
                 05: Create memory module configuration for all the BlockDescriptors
                 06: VP: check that the MemoryModuleConfigurator configured the device index path to the short name path of the first FlsGeneral container</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexFls</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexWithDifferentEep</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>5248</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the device index path to the short name path of the selected EepGeneral container when blockType==EA_BLOCK.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep, Fls1, Eep2
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration objects and set the device index context to different EepGeneral containers
                 05: Create memory module configuration for all the BlockDescriptors
                 07: VP: check that the MemoryModuleConfigurator has configured the right device index paths</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexEep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationDeviceIndexEep_Multiple</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>5349</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the device index path to the short name path of the first EepGeneral container when blockType==EA_BLOCK
and the device index context is set to FlsGeneral container before the MemoryModuleConfigurator is called.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep, Fls1, Eep2
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration objects where the device index context is set to FlsGeneral container
                 05: Create memory module configuration for all the BlockDescriptors
                 06: VP: check that the MemoryModuleConfigurator configured the device index path to the short name path of the first EepGeneral container</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexEep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorNvRAMDeviceId_Ea_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>5449</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the MemoryModuleConfigurator sets the the correct value for NvRamDeviceId when blockType==EA_BLOCK.&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep, Fls2, Eep2
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration objects and set the device index context to an EepGeneral container
                 05: Create memory module configuration for all the BlockDescriptors
                 06: VP: check that the MemoryModuleConfigurator configured the NvRamDeviceId of the BlockDescriptor to the EepDeviceIndex parameter of the EepGeneral container</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexEep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockDescriptorNvRAMDeviceId_Fee_Dataset</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>5562</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the MemoryModuleConfigurator sets the the correct value for NvRamDeviceId when blockType==EA_BLOCK.&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep, Fls2, Eep2
                 02: Create list of BlockDescriptors
                 03: Create new BlockDescriptor object
                 04: Create new BlockConfiguration objects and set the device index context to an FlsGeneral container
                 05: Create memory module configuration for all the BlockDescriptors
                 06: VP: check that the MemoryModuleConfigurator configured the NvRamDeviceId of the BlockDescriptor to the FlsDeviceIndex parameter of the FlsGeneral container</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationDeviceIndexFls</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>5663</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall assign the blockNumber of the i th BlockConfiguration object belonging to a BlockDescriptor according to the new block base number rule.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Create new BlockDescriptor object and add to block list and change some block configuration's block number
                 05: Create memory module configuration for all the BlockDescriptors
                 06: VP: Check that the MemoryModuleConfigurator shall keep the old block number if it is a valid block number
                 07: VP: Check that the MemoryModuleConfigurator shall assign unique block number for each block configuration
                 08: VP: Check that the MemoryModuleConfigurator shall assign block number for each block configuration without resulting dataloss
                 09: VP: Check that the MemoryModuleConfigurator shall assign next possible block number for new  block configuration
                 10: VP: Check that the MemoryModuleConfigurator shall keep the user given block number if it is a valid block number</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExistingEaFeeBlockNumber</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber_Delete</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>5780</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall assign the blockNumber of the i th BlockConfiguration object belonging to a BlockDescriptor according to the new block base number rule.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Delete a BlockDescriptor object
                 04: Create list of BlockDescriptors and Blockconfiguration
                 05: Create memory module configuration for all the BlockDescriptors
                 06: VP: Check that the the MemoryModuleConfigurator shall keep the old block number if it is a valid block number
                 07: VP: Check that the the MemoryModuleConfigurator shall assign unique block number for each block configuration
                 08: VP: Check that the the MemoryModuleConfigurator shall assign block number for each block configuration without resulting dataloss</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExistingEaFeeBlockNumber</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationEaFeeBaseNumber_Invalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>5871</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall assign the blockNumber of the i th BlockConfiguration object belonging to a BlockDescriptor according to the new block base number rule.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: set invalid block numbers to some block configurations
                 04: Create list of BlockDescriptors and Blockconfiguration
                 05: Create memory module configuration for all the BlockDescriptors
                 06: VP: Check that the the MemoryModuleConfigurator shall keep the old block number if it is a valid block number
                 07: VP: Check that the the MemoryModuleConfigurator shall assign unique block number for each block configuration
                 08: VP: Check that the the MemoryModuleConfigurator shall assign block number for each block configuration without resulting dataloss
                 09: VP: Check that the the MemoryModuleConfigurator shall assign next possible block number for new  block configurations
                 10: VP: Check that the the MemoryModuleConfigurator shall keep the user given block number if it is a valid block number</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExistingEaFeeBlockNumber</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigEaFeeBaseNumber_Increase_DataselectionBits</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>5979</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall assign the blockNumber of the i th BlockConfiguration object belonging to a BlockDescriptor according to the new block base number rule.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Create memory module configuration for all the BlockDescriptors according to the new dataselection bits
                 05: VP: check the number of block descriptors and block configurations generated
                 06: VP: Check that the MemoryModuleConfigurator shall assign next possible block number for block configurations according to the new data selection bits
                 07: VP: Check that the MemoryModuleConfigurator shall assign unique block number for each block configuration
                 08: VP: Check that the MemoryModuleConfigurator shall assign block number for each block configuration without resulting dataloss</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExistingEaFeeBlockNumber</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigEaFeeBaseNumber_Decrease_DataselectionBits</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>6078</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall assign the blockNumber of the i th BlockConfiguration object belonging to a BlockDescriptor according to the new block base number rule.</description>
      <testexec>01: create new project with NvM, Fee, Fls, Ea, Eep and load test configurations
                 02: push the memory module configuration
                 03: Create list of BlockDescriptors and Blockconfiguration
                 04: Create memory module configuration for all the BlockDescriptors according to the new dataselection bits
                 05: VP: check the number of block descriptors and block configurations generated
                 06: VP: Check that the MemoryModuleConfigurator shall assign next possible block number for block configurations according to the new data selection bits
                 07: VP: Check that the MemoryModuleConfigurator shall assign unique block number for each block configuration
                 08: VP: Check that the MemoryModuleConfigurator shall assign block number for each block configuration without resulting dataloss</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationExistingEaFeeBlockNumber</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSize_staticBlockIDChecked</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>6177</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 6 (additional 2 bytes is adding when static block id checked) when checkstaticBlockId=true.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 6 (BlockConfigurationSizeStaticBlockIdCheck)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeStaticBlockIdCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC16_staticBlockIDChecked</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>6224</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 8 (additional 2 bytes is adding when static block id checked) when blockUseCRC==true, blockCRCType=NVM_CRC16 and checkstaticBlockId=true .</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 8 (BlockConfigurationSizeStaticBlockIdCheck)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeStaticBlockIdCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.MemoryModuleConfiguratorTest.testConfigureEaFeeModule_BlockConfigurationSizeCRC32_staticBlockIDChecked</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/MemoryModuleConfiguratorTest.java</sourcefile>
      <sourceline>6272</sourceline>
      <version>1</version>
      <description>Verifies that the MemoryModuleConfigurator shall set the size of the BlockConfiguration to the size of the BlockDescriptor plus 10 (additional 2 bytes is adding when static block id checked) when  blockUseCRC==true, blockCRCType=NVM_CRC32 and checkstaticBlockId=true.</description>
      <testexec>01: Create list of BlockDescriptors
                 02: Create new BlockDescriptor object
                 03: Create memory module configuration for all the BlockDescriptors
                 04: VP: Check that the size of the BlockConfiguration to the size of the BlockDescriptor plus 10 (BlockConfigurationSizeStaticBlockIdCheck)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.BlockConfigurationSizeStaticBlockIdCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptor</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/NvBlockNeedsConfiguratorTest.java</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <description>Verifies that the NV block needs configurator shall add one BlockDescriptor object for each NvBlockNeeds of a NvBlockSwComponentType or for each NvBlockNeeds contained in the SwcServiceDependencys in the internal behavior of an AtomicSwComponentType other than NvBlockSwComponentType.</description>
      <testexec>01: create new project with NvM, Fee and Fls and load test configurations
                 02: Run 'runSystemDescImporter' to import the system description file to the project
                 03: push the memory module configuration
                 04: VP: check the existing BlockDescriptors
                 05: Run the NvBlockNeedsConfigurator to create required BlockDescriptors
                 06: VP: check the total number of BlockDescriptors added.
                 07: VP: check that the required number of BlockDescriptors are added for NvBlockNeedsAtomicSwComponentType (NvBlockNeedsAtomicSwComponentType)
                 08: VP: check that the required number of BlockDescriptors are added for NvBlockNeedsNvBlockSwComponentType (NvBlockNeedsNvBlockSwComponentType)
                 09: VP: check that the attributes of the BlockDescriptor are derived from the NvBlockNeeds (NvBlockNeedsAttributes) and default target type is FLASH</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsAtomicSwComponentType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsNvBlockSwComponentType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsAttributes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptorForServiceNeeds</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/NvBlockNeedsConfiguratorTest.java</sourcefile>
      <sourceline>290</sourceline>
      <version>1</version>
      <description>Verifies that the NV block needs configurator shall add one BlockDescriptor object for each NvBlockNeeds of a NvBlockSwComponentType or for each NvBlockNeeds contained in the SwcServiceDependencys in the internal behavior of an AtomicSwComponentType other than NvBlockSwComponentType.</description>
      <testexec>01: create new project with NvM, Fee and Fls and load test configurations
                 02: Run 'runSystemDescImporter' to import the system description file to the project
                 03: push the memory module configuration
                 04: VP: check the existing BlockDescriptors
                 05: Run the NvBlockNeedsConfigurator to create required BlockDescriptors
                 06: VP: check the total number of BlockDescriptors added.
                 07: VP: check that the required number of BlockDescriptors are added and check the service needs parameters</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsAtomicSwComponentType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsNvBlockSwComponentType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsAttributes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptor_Ea</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/NvBlockNeedsConfiguratorTest.java</sourcefile>
      <sourceline>415</sourceline>
      <version>1</version>
      <description>Verifies that the NV block needs configurator shall add one BlockDescriptor object for each NvBlockNeeds of a NvBlockSwComponentType or for each NvBlockNeeds contained in the SwcServiceDependencys in the internal behavior of an AtomicSwComponentType other than NvBlockSwComponentType.</description>
      <testexec>01: create new project with NvM, Ea and Eep and load test configurations
                 02: Run 'runSystemDescImporter' to import the system description file to the project
                 03: push the memory module configuration
                 04: VP: check the existing BlockDescriptors
                 05: Run the NvBlockNeedsConfigurator to create required BlockDescriptors
                 06: VP: check the total number of BlockDescriptors added.
                 07: VP: check that the required number of BlockDescriptors are added for NvBlockNeedsAtomicSwComponentType (NvBlockNeedsAtomicSwComponentType)
                 08: VP: check that the required number of BlockDescriptors are added for NvBlockNeedsNvBlockSwComponentType (NvBlockNeedsNvBlockSwComponentType)
                 09: VP: check that the attributes of the BlockDescriptor are derived from the NvBlockNeeds (NvBlockNeedsAttributes) and the target type of BlockDescriptor should be EEPROM, if Fee is not present in the project</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsAtomicSwComponentType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsNvBlockSwComponentType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsAttributes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testNvBlockNeedsAlreadyExists</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/NvBlockNeedsConfiguratorTest.java</sourcefile>
      <sourceline>667</sourceline>
      <version>1</version>
      <description>Verifies that the if a BlockDescriptor with the name of the NvBlockNeeds already exists, the NvBlockNeeds shall be ignored</description>
      <testexec>01: Create new project with NvM, Fee, Fls and load test configurations
                 02: Run 'runSystemDescImporter' to import the system description file to the project
                 03: push the memory module configuration
                 04: VP: check the existing BlockDescriptors
                 05: Run the NvBlockNeedsConfigurator to create required BlockDescriptors
                 06: VP: check that the required number of BlockDescriptors are added
                 07: Run the NvBlockNeedsConfigurator once again
                 08: VP: check that the no new BlockDescriptors are added</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsAlreadyExists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testAddNvBlockNeedsBlockDescriptor_No_ECUExtract</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/NvBlockNeedsConfiguratorTest.java</sourcefile>
      <sourceline>747</sourceline>
      <version>1</version>
      <description>Verifies that the NV block needs configurator shall add one BlockDescriptor object for each NvBlockNeeds of a NvBlockSwComponentType or for each NvBlockNeeds contained in the SwcServiceDependencys in the internal behavior of an AtomicSwComponentType other than NvBlockSwComponentType.</description>
      <testexec>01: create new project with NvM, Fee and Fls and load test configurations
                 02: push the memory module configuration
                 03: VP: check the existing BlockDescriptors
                 04: Run the NvBlockNeedsConfigurator to create required BlockDescriptors
                 05: VP: check that no BlockDescriptors are added and proper error messages are displayed.</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsAtomicSwComponentType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsNvBlockSwComponentType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.NvBlockNeedsConfiguratorTest.testNvmBlockLengthNvBlockNeedsBlockDescriptor</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/NvBlockNeedsConfiguratorTest.java</sourcefile>
      <sourceline>803</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the NV block needs configurator shall calculate the NvmBlockLength using API from RTE&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Base and platforms and load test configurations
                 02: Run 'runSystemDescImporter' to import the system description file to the project
                 03: push the memory module configuration
                 04: VP: check the existing BlockDescriptors
                 05: Run the NvBlockNeedsConfigurator to create required BlockDescriptors
                 06: VP: check the total number of BlockDescriptors added.
                 07: VP: check that the NvmBlockLength calculated value is as expected</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsAtomicSwComponentType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsNvBlockSwComponentType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>memas.design.algorithm.configurator.NvBlockNeedsAttributes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushFeeConfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the push operation correctly writes the data to the ECU configuration&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee, Fls
                 02: add BlockConfigurations to the internal data model
                 03: push the configuration
                 04: VP: check that the FeeBlockConfigurations have been added to the ECU configuration and that the model object references have been set (PushOperation2)
                 05: VP: check that the FeeBlockConfigurations have the correct attribute values (PushOperation5)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushEaConfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>135</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the push operation correctly writes the data to the ECU configuration&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Ea, Eep
                 02: add BlockConfigurations to the internal data model
                 03: push the configuration
                 04: VP: check that the EaBlockConfigurations have been added to the ECU configuration and that the model object references have been set (PushOperation3)
                 05: VP: check that the EaBlockConfigurations have the correct attribute values (PushOperation6)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushNewBlockDescriptorWithEaConfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>227</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the push operation correctly writes the new block descriptor created to the ECU configuration&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Ea, Eep
                 02: add a new BlockDescriptor to the internal data model
                 03: push the configuration
                 04: VP: check that the new BlockDescriptor have been added to the ECU configuration and that the model object references have been set (PushOperation1)
                 05: VP: check that the BlockDescriptor have the correct attribute values (PushOperation4)
                 06: VP: check that the NvMTargetBlockReference/NvMNameOfEaBlock of NvMBlockDescriptor have been set correctly (PushOperation8)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushNewBlockDescriptorWithFeeConfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>525</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verifies that the push operation correctly writes the new block descriptor created to the ECU configuration&lt;/pre&gt;</description>
      <testexec>01: create new project with NvM, Fee and Fls
                 02: add a new BlockDescriptor to the internal data model
                 03: push the configuration
                 04: VP: check that the new BlockDescriptor have been added to the ECU configuration and that the model object references have been set (PushOperation1)
                 05: VP: check that the BlockDescriptor have the correct attribute values (PushOperation4)
                 06: VP: check that the NvMTargetBlockReference/NvMNameOfFeeBlock of NvMBlockDescriptor have been set correctly (PushOperation9)</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushBlockDescriptorDeleteAll</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>850</sourceline>
      <version>1</version>
      <description>Verifies that the push operation correctly deletes all NvMBlockDescriptor containers from the ECU configuration if there is no BlockDescriptor in the data model which refers to it via the modelObject reference.</description>
      <testexec>01: create new project with NvM and load test configuration
                 02: push the memory module configuration
                 03: delete existing blockdescriptors using mementos
                 04: push the memory module configuration again
                 05: VP: check that all NvMBlockDescriptor have been removed from ECU model</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushFeeConfigurationDeleteAll</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>906</sourceline>
      <version>1</version>
      <description>Verifies that the push operation correctly deletes all FeeBlockConfiguration containers from the ECU configuration if there is no BlockConfiguration in the data model which refers to it via the modelObject reference.</description>
      <testexec>01: create new project with NvM, Fee and load test configurations
                 02: push the memory module configuration
                 03: delete existing block configurations using mementos
                 04: push the memory module configuration again
                 05: VP: check that all Fee configurations have been removed from ECU model</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushEaConfigurationDeleteAll</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>967</sourceline>
      <version>1</version>
      <description>Verifies that the push operation correctly deletes all EaBlockConfiguration containers from the ECU configuration if there is no BlockConfiguration in the data model which refers to it via the modelObject reference.</description>
      <testexec>01: create new project with Nvm, Ea and load test configurations
                 02: push the memory module configuration
                 03: delete all existing BlockConfigurations using mementos
                 04: push the memory module configuration again
                 05: VP: check that all EaConfigurations have been removed from ECU model</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushBlockDescriptorDelete</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>1028</sourceline>
      <version>1</version>
      <description>Verifies that the push operation correctly deletes the NvMBlockDescriptor container from the ECU configuration if there is no BlockDescriptor in the data model which refers to it via the modelObject reference.</description>
      <testexec>01: create new project with NvM and load test configurations
                 02: push the memory module configuration
                 03: delete any two blockdescriptors using mementos
                 04: push the memory module configuration again
                 05: VP: check that two NvMBlockDescriptors are removed from the NvMBlockDescriptors list of NvM module.</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushFeeConfigurationDelete</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>1076</sourceline>
      <version>1</version>
      <description>Verifies that the push operation correctly delete FeeBlockConfiguration container from the ECU configuration if there is no BlockConfiguration in the data model which refers to it via the modelObject reference.</description>
      <testexec>01: create new project with NvM, Fee and load test configurations
                 02: push the memory module configuration
                 03: delete any one BlockConfiguration using memento
                 04: push the memory module configuration again
                 05: VP: check that the FeeBlockConfiguration have been removed from model</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushEaConfigurationDelete</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>1148</sourceline>
      <version>1</version>
      <description>Verifies that the push operation correctly deletes EaBlockConfiguration container from the ECU configuration if there is no BlockConfiguration in the data model which refers to it via the modelObject reference.</description>
      <testexec>01: create new project with NvM, Ea and load test configurations
                 02: push the memory module configuration
                 03: delete any one BlockConfiguration using memento
                 04: push the memory module configuration again
                 05: VP: check that the EaBlockConfiguration have been removed from model</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushChangedValuesOnly</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>1220</sourceline>
      <version>1</version>
      <description>Verifies that the PushMemAsConfigurationOperation shall only set parameter or reference values in the ECU configuration when the current value does not equal the new value</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: Change some fields in the block descriptor
                 03: Check that the IMPORTER_INFO tag is @DEF
                 04: make the changes in memory module configurations
                 05: push the configuration
                 06: VP: check that the changed parameters and references both block descriptors and block configurations have been added to the ECU configuration
                 07: VP: check that the changed parameters and references for both block descriptors and block configurations are present in the result view list
                 08: Check that the IMPORTER_INFO tag was changed after the modifications to @CALC</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushValuesWithNochange</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>1397</sourceline>
      <version>1</version>
      <description>Verifies that the PushMemAsConfigurationOperation shall only set parameter or reference values in the ECU configuration when the current value does not equal the new value</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: create the memory module configuration
                 03: push the configuration
                 03: VP: check that no parameters and references for both block descriptors and block configurations are present in the result view list</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushMemAsConfigOperationSetFreeScaleParametertoShortNamePath</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>1451</sourceline>
      <version>1</version>
      <description>Verifies that for each BlockConfiguration with blockType = FEE_BLOCK, when adding new Fee blocks and the parameter FeeBlockConfiguration/FeeClusterGroupRef exists then it is an Freescale Fee and PushMemAsConfigurationOperation shall set this parameter to the short name path of the first container found within the list Fee/FeeClusterGroup.</description>
      <testexec>01: create new project with NvM, Fee
                 02: set the flag value to true, to create the project for the free scale fee
                 03: Create list of BlockDescriptors
                 04: create the memory module configuration
                 05: push the configuration
                 06: VP: check that for the Freescale Fee and the pushMemAsConfigurationOperation shall set the parameter FeeBlockConfiguration/FeeClusterGroupRef to the short name path of the first container found within the list Fee/FeeClusterGroup</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.memas.test.PushOperationTest.testPushNotChangeFeeClusterGroupRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_MemAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_MemAs/test/junit/plugin.Test_MemAs.Autosar.WINDOWS/Java/eb/tresos/memas/test/PushOperationTest.java</sourcefile>
      <sourceline>1555</sourceline>
      <version>1</version>
      <description>Verifies that for each BlockConfiguration with blockType = FEE_BLOCK, when adding new Fee blocks and the parameter FeeBlockConfiguration/FeeClusterGroupRef exists then it is an Freescale Fee and PushMemAsConfigurationOperation shall set this parameter to the short name path of the first container found within the list Fee/FeeClusterGroup and For existing Fee blocks, the MemAs shall not change the FeeClusterGroupRef anymore.</description>
      <testexec>01: create new project with NvM, Fee, Fls and load test configurations
                 02: set the flag value to true, to load the test configuration for the free scale fee
                 03: Load existing block descriptors and add one new block to it
                 04: create the memory module configuration
                 05: push the configuration
                 06: VP: check that for existing Fee blocks, the MemAs shall not change the FeeClusterGroupRef anymore</testexec>
      <providescoverage>
        <provcov>
          <linksto>memas.design.interaction.push.PushOperation15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
