<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_EthSM_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_public_modulereference_integration_req.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_requirements_EthSM_4_1_1.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_requirements_EthSM_EB_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_requirements_EthSM_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_requirements_EthSM_R20-11_Refinments.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_requirements_EthSM_R22-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/common_req/EthSM_PbcfgM_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/common_req/EthSM_VerifyStub_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_DocBookImporter/reqm_DSN.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_GenericImporter/reqm_SRCXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 21:47:58 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_EthSM_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_public_modulereference_integration_req.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_requirements_EthSM_4_1_1.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_requirements_EthSM_EB_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_requirements_EthSM_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_requirements_EthSM_R20-11_Refinments.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_Native/asc_EthSM_requirements_EthSM_R22-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/common_req/EthSM_PbcfgM_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/common_req/EthSM_VerifyStub_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_DocBookImporter/reqm_DSN.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_GenericImporter/reqm_SRCXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/2018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>feavc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swpad</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swts</regex>
      <regex>pdoc</regex>       <!-- since 10/2018: introduced for updated tracing model-->
      <regex>dev</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swadvc</regex>     <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swuvc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/2020: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>
      <regex>doc</regex>

      <!-- legacy items -->
      <regex>req</regex>        <!-- deprecated 10/2017: old swrs type -->
      <regex>dsn</regex>        <!-- deprecated 10/2017: old swdd -->
      <regex>src</regex>        <!-- deprecated 10/2017: old impl type -->
      <regex>tcs</regex>        <!-- deprecated 10/2017: replaced by swintts and swuts -->
      <regex>dsn_arch</regex>   <!-- deprecated 10/2017: old swad type -->
      <regex>man</regex>
      <regex>tso</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='req') and (../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.rejected</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.count</name>
      <description>Requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.req.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='req') or (../@doctype='swrs')) and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='swdd') or (../@doctype='dsn')) and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.doctypes</name>
      <description>Requirements can be covered only by req, dsn_arch, dev, lim, dsn, src, tcs, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req')]</applyto>
          <condition>(./needscoverage/needsobj="req" or ./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swad, dev, lim, swurs, swdd, src, swuts, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.doctypes</name>
      <description>Design elements can only be covered by dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn')]</applyto>
          <condition>(./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.src.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='src')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="tsc" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes") )</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="dsn_arch" or ./fulfilledby/ffbObj/ffbType="dsn_arch" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>



    <rule>
      <name>ERR.dsn_arch.needscoverage.doctypes</name>
      <description>Architectural design objects can only be covered by dsn_arch, dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn_arch')]</applyto>
          <condition>(./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, req, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
         </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
  </rules>
    <oreqmRules>
          <rule>
            <name>WRN.tsc.needscoverage.count</name>
            <description>Violated if there are more than 10 tsc specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='tcs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='tsc'])) &gt; 10]/furtherinfo</applyto>
                    <regex>tsc.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.req.needscoverage.count</name>
            <description>Violated if there are more than 10 req specobjects covering one specobject and no appropriate information is provided in furtherinfo, refinement on req to req are excluded. Refinements of requirements Req to Req and Req to Fea are excluded from this rule since this is tracing on the same level. The justification in furtherinfo must contain the rule name.</description>
           <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(../@doctype != 'req') and (../@doctype != 'fea') and ((count(./needscoverage/needscov[needsobj='req']/coveredby/linkedfrom)) &gt; 10)]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='req'])) &gt; 10]/furtherinfo</applyto>
                    <regex>req.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
     </rule>

        <rule>
            <name>WRN.src.needscoverage.count</name>
            <description>Violated if there are more than 10 src specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='src']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn_arch.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn_arch specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn_arch']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn_arch'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn_arch.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="dev">
    <specobject>
      <id>lim.EthSm.EB_INTREQ_EthSm_0001</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The reinitialization process shall not interrupt other module functions
        If reinitialization of the module is required, the call of
        <code>EthSM_Init</code> shall not interrupt other module functions.
      </description>
      <rationale>
        The reinitialisation process resets all internal variables. Continuing an interrupted
        module function after reinitialization can lead to undefined module behavior.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <specobject>
      <id>lim.EthSm.EB_INTREQ_EthSm_0002</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        EthSMMainFunctionPeriod shall be equal or greater than the TcpIpMainFunctionPeriod.
      </description>
      <rationale>
        EthSM mainFunction would call RequestComMode two or more times without TcpIp processing
        all of them inside its MainFunction call.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>EthSM.ASR41.SWS_EthSM_00084</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V2.1.0</source>
      <version>2</version>
      <description>
        The function EthSM_GetCurrentComMode shall report ETHSM_E_PARAM_POINTER to
        the DET, if the pointer of the parameter list is invalid.()
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
        Extension: The API shall return E_NOT_OK in this case.
      </comment>
      <releases>
        <release>AUTOSAR 4.1.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_T102_02_GetCurrentComMode_DetInvPointer</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>
    <specobject>
      <id>EthSM.ASR41.SWS_EthSM_0113</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V2.1.0</source>
      <version>2</version>
      <description>
        The function EthSM_TrcvLinkStateChg shall report
        ETHSM_E_INVALID_TRCV_LINK_STATE to the DET, if it does not accept the
        transceiver link state of the function call.()
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
      </comment>
      <releases>
        <release>AUTOSAR 4.1.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01005_Det_TrcvLinkStateChg_InvalidState</srcid><srcstatus/><internalId>357</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">

<!-- EB specific features ====================================================================== -->

    <specobject>
      <id>EthSM.EB.BSWMDGeneration_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The EthSM module's generator shall generate a basic software
        module description (BSWMD) based on the EthSM module's
        configuration containing information on the exclusive areas
        required by the EthSM module's implementation.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_SchM</srcid><srcstatus/><internalId>301</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>EthSM.EB.BSWMDGeneration_2</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The EthSM module's generator shall generate a basic software
        module description (BSWMD) based on the EthSM module's
        configuration containing information on the scheduled
        MainFunctions together with the scheduling period.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_SchM</srcid><srcstatus/><internalId>301</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

    <specobject>
      <id>EthSM.EB.BSWMDGeneration_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The EthSM module's BSWMD shall be generated using a generator
        mode named "generate_swcd".
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_SchM</srcid><srcstatus/><internalId>301</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

    <specobject>
      <id>EthSM.EB.MaxNetworks_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        Name EthSMMaxNetworks {ETHSM_MAX_NETWORKS}
        Description Defines the maximum number of EthSM networks allowed to be configured.
        Multiplicity 1
        Type EcucIntegerParamDef
        Range 1 .. 256
        Default value --
        ConfigurationClass
        Pre-compile time X All Variants
        Link time --
        Post-build time --
        Scope / Dependency scope: local
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.EB.XdmCheck.MaxNetworks.MoreNetworks</srcid><srcstatus/><internalId>268</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The whole EthSM internal state machine shall be executed with configuration parameter
        EthSMSingleNetworkOptEnable enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.OfflineToWaitCtrlModeInd</srcid><srcstatus/><internalId>9</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlModeIndToWaitTrcvLink</srcid><srcstatus/><internalId>10</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.WaitTrcvLinkToWaitOnline</srcid><srcstatus/><internalId>11</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlMIndDown</srcid><srcstatus/><internalId>12</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToWaitTrcvLink</srcid><srcstatus/><internalId>13</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToOnline</srcid><srcstatus/><internalId>14</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToWaitCtrlMindDown</srcid><srcstatus/><internalId>15</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToOnHold</srcid><srcstatus/><internalId>16</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToWaitOnline</srcid><srcstatus/><internalId>17</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToWaitOffline</srcid><srcstatus/><internalId>18</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.OnHoldToWaitLinkDown</srcid><srcstatus/><internalId>19</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.WaitLinkDownToOffline</srcid><srcstatus/><internalId>20</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.OnHoldToWaitTrcvLink</srcid><srcstatus/><internalId>21</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.OnHoldToOnline</srcid><srcstatus/><internalId>22</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOfflineToWaitLinkDown</srcid><srcstatus/><internalId>23</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.OfflineToWaitCtrlModeInd</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_OFFLINE to ETHSM_STATE_WAIT_CTRLMODEIND which sets the controller mode
        to ETH_MODE_ACTIVE shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_00_00_OfflineState_to_WaitCtrlModeIndState_Transition</srcid><srcstatus/><internalId>313</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03000_OfflineToWaitCtrlModeInd_SingleNetwork</srcid><srcstatus/><internalId>382</internalId></linkedfrom><linkedfrom><srcid>EthSM_OfflineState_to_WaitCtrlModeIndState_Transition</srcid><srcstatus/><internalId>406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlModeIndToWaitTrcvLink</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
         ETHSM_STATE_WAIT_CTRLMODEIND to ETHSM_STATE_WAIT_TRCVLINK shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_02_00_WaitCtrlModeIndState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03001_WaitCtrlModeInd_To_WaitTrcvLink_SingleNetwork</srcid><srcstatus/><internalId>383</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitCtrlModeIndState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>409</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.WaitTrcvLinkToWaitOnline</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_ONLINE shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03002_WaitTrcvLinkToWaitOnline_SingleNetwork</srcid><srcstatus/><internalId>384</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlMIndDown</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_WAIT_CTRLMIND_DOWN which sets the controller
        mode to ETH_MODE_DOWN shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03003_WaitTrcvLinkToWaitCtrlMIndDown_SingleNetwork</srcid><srcstatus/><internalId>385</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToWaitTrcvLink</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_TRCVLINK shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03004_WaitOnlineToWaitTrcvLink_SingleNetwork</srcid><srcstatus/><internalId>386</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToOnline</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_ONLINE shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03005_WaitOnlineToOnline_SingleNetwork</srcid><srcstatus/><internalId>387</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToWaitCtrlMindDown</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_CTRLMIND_DOWN which sets the
        controller mode to ETH_MODE_DOWN shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_10_02_WaitOnlineState_to_WaitCtrlMindDown_Transition</srcid><srcstatus/><internalId>326</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03006_WaitOnlineToWaitCtrlMindDown_SingleNetwork</srcid><srcstatus/><internalId>388</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitOnlineState_to_WaitCtrlMindDown_Transition</srcid><srcstatus/><internalId>415</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToOnHold</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03007_OnlineToOnHold_SingleNetwork</srcid><srcstatus/><internalId>389</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToWaitOnline</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03008_OnlineToWaitOnline_SingleNetwork</srcid><srcstatus/><internalId>390</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToWaitOffline</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_OFFLINE shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03009_OnlineToWaitOffline_SingleNetwork</srcid><srcstatus/><internalId>391</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.OnHoldToWaitLinkDown</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_ONHOLD to ETHSM_STATE_WAIT_LINK_DOWN shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03012_OnHoldToWaitLinkDown_SingleNetwork</srcid><srcstatus/><internalId>394</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.WaitLinkDownToOffline</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_WAIT_LINK_DOWN to ETHSM_STATE_OFFLINE shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03014_WaitLinkDownToOffline_MainFunctionTrigger_SingleNetwork</srcid><srcstatus/><internalId>396</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.OnHoldToWaitTrcvLink</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_ONHOLD to ETHSM_STATE_WAIT_TRCVLINK shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03010_OnHoldToWaitTrcvLink_SingleNetwork</srcid><srcstatus/><internalId>392</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.OnHoldToOnline</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03011_OnHoldToOnline_SingleNetwork</srcid><srcstatus/><internalId>393</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOfflineToWaitLinkDown</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSMSingleNetworkOptEnable is enabled, the correct transition from
        ETHSM_STATE_WAIT_OFFLINE to ETHSM_STATE_WAIT_LINK_DOWN which sets the
        controller mode to ETH_MODE_DOWN shall be verified.

        For single network optimization:
        - Controller index shall be zero.
        - Network index shall be zero.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03013_WaitOfflineToWaitLinkDown_MainFunctionTrigger_SingleNetwork</srcid><srcstatus/><internalId>395</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.SMTransition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>

    <specobject>
      <id>EthSM.EB.MainFunction.Uninit</id>
      <status>approved</status>
      <source>EB specific: ASCCCB-1403</source>
      <version>1</version>
      <description>
        If a main function of an uninitialized module is called from the BSW
        Scheduler, then it shall return immediately without performing any
        functionality and without raising any errors.
      </description>
      <comment>
        EB requirement is in line with the AUTOSAR 4.0 General SRS requirement
        BSW00450. https://issue.ebgroup.elektrobit.com/browse/ASCCCB-1403
        ----
        Main Function processing of an uninitialized Module may result in
        undesired and non defined behaviour.

        Rationale for the deviation list: The SchM module may schedule the modules
        main function before the module is initialized. This would result in lots
        of Det errors during start up. Therefore the modules main function does
        not throw a Det error if the module is not yet initialized and simply
        returns in this case.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01001_MainFunction_Uninit</srcid><srcstatus/><internalId>353</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>

    <!-- Extension to SWS (Missing requirements\deviated requirements) ============================= -->
    <specobject>
      <id>EthSM.EB.GetVersionInfo_Error</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The function EthSM_GetVersionInfo shall report ETHSM_E_PARAM_POINTER to the
        DET, if the parameter versioninfo is invalid.
      </description>
      <needscoverage>
        <!-- For all Det tests: Always verify all Det_ReportError() parameters -->
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_T101_00_GetVersionInfo_DetInvPointer</srcid><srcstatus/><internalId>435</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>

    <specobject>
      <id>EthSM.EB.GetVersionInfo.GetInfoNotInit</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The API EthSM_GetVersionInfo() shall return the version information even if EthSM is not
        initialized.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_T101_01_GetVersionInfo_VersionTest_Uninit</srcid><srcstatus/><internalId>436</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>

    <specobject>
      <id>EthSM.EB.SWS_EthSM_00043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V2.0.0</source>
      <version>2</version>
      <description>
        Service name: EthSM_Init
        Syntax: Std_ReturnType EthSM_Init(const EthSM_ConfigType* ConfigPtr)
        Service ID[hex]: 0x07
        Sync/Async: Synchronous
        Reentrancy: Non Reentrant
        Parameters (in): ConfigPtr
        Parameters (inout): None
        Parameters (out): None
        Return value: Std_ReturnType
        Description: This function initialize the EthSM.
        (BSW0405, SRS_BSW_00101, SRS_BSW_00358, SRS_BSW_00414)
      </description>
      <comment>
        API syntax of AUTOSAR 4.1.1 is used.
      </comment>
      <releases>
        <release>AUTOSAR 4.1.1</release>
      </releases>
      <needscoverage>
        <!-- Syntax shall be tested with a compile test only. No link to other tests. -->
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_01</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_02</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>

    <specobject>
      <id>EthSM.EB.Det.EthSM_Init.InvPtr</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        EthSM_Init() shall report ETHSM_E_PARAM_POINTER to DET, if the parameter pointer
        ConfigPtr is invalid.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01000_Init_NullPtr</srcid><srcstatus/><internalId>352</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>

    <specobject>
      <id>EthSM.EB.Det.EthSM_DevAuthNoComModeIndication.Uninit</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If the EthSM module is not initialized, when the function EthSM_DevAuthNoComModeIndication
           is called, then the function EthSM_DevAuthNoComModeIndication shall call the function
           Det_ReportError with ErrorId parameter ETHSM_E_UNINIT.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01012_Det_DevAuthNoComModeIndication_Uninit</srcid><srcstatus/><internalId>364</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>

    <specobject>
      <id>EthSM.EB.Det.EthSM_DevAuthNoComModeIndication.InvCtrlInd</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If the function EthSM_DevAuthNoComModeIndication gets a CtrlIdx, which is not configured
           in the configuration of the EthSM module, it shall call the function Det_ReportError with
           ErrorId parameter ETHSM_E_PARAM_CONTROLLER.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01013_Det_DevAuthNoComModeIndication_InvCtrlIdx</srcid><srcstatus/><internalId>365</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>

    <specobject>
      <id>EthSM.EB.SWS_EthSM_00118.TolerateTcpIpStates</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSM_TcpIpModeIndication() is called with TcpIpState set to
        TCPIP_STATE_ONHOLD, TCPIP_STATE_STARTUP or TCPIP_STATE_SHUTDOWN, EthSM shall accept the
        state and perform no further operations.
      </description>
      <comment>
        See known issue ASCETHSM-66.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest02009_IgnoreTcpIpModeIndication_ONHOLD</srcid><srcstatus/><internalId>376</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00118</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>

    <specobject>
      <id>EthSM.EB.SWS_EthSM_00026_FunctionCallOrder</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        In the state ETHSM_STATE_OFFLINE the state machine shall have a transition to
        state ETHSM_STATE_WAIT_CTRLMODEIND and then ETHSM_STATE_WAIT_TRCVLINK, if the
        ComM requests COMM_FULL_COMMUNICATION for the corresponding network handle.
        EthSM shall perform the function calls in following order:
        1st: EthIf_SetControllerMode()
        2nd: BswM_EthSM_CurrentState()
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00097</srcid><srcstatus/><internalId>131</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthIf_ControllerInit</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        In the function EthSM_Init the module shall call EthIf_ControllerInit() with correct EthIf CtrlIdx and CfgIdx set to
        0U for all configured networks.
        Call order: 1st call call after module initialisation.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_01_Transition_From_Uninitialized_To_StateOffline</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>EthSM_Transition_From_Uninitialized_To_StateOffline</srcid><srcstatus/><internalId>407</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthIf_TransceiverInit</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        In the function EthSM_Init() the module shall call EthIf_TransceiverInit() with correct EthIf CtrlIdx and CfgIdx
        set to 0U for all configured networks.
        Call order: 2rd call after module initialisation.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_01_Transition_From_Uninitialized_To_StateOffline</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>EthSM_Transition_From_Uninitialized_To_StateOffline</srcid><srcstatus/><internalId>407</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>

    <specobject>
      <id>EthSM.EB.UnexpectedTrcvLinkStateChg</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSM_TrcvLinkStateChg() is called in a state which is not expected (no trigger of any
        transition in this state), the module shall ignore the call.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest02003_Unexpected_TrcvLinkStateChg</srcid><srcstatus/><internalId>370</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest02005_Unexpected_TrcvLinkStateChg2</srcid><srcstatus/><internalId>372</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>

    <specobject>
      <id>EthSM.EB.UnexpectedRequestComMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSM_RequestComMode() is called in a state which is not expected (no trigger of any
        transition in this state), the module shall ignore the call.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest02001_NO_COM_in_STATE_OFFLINE</srcid><srcstatus/><internalId>368</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest02006_Unexpected_ReqComMode</srcid><srcstatus/><internalId>373</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>

    <specobject>
      <id>EthSM.EB.UnexpectedTcpIpModeIndication</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSM_TcpIpModeIndication() is called in a state which is not expected (no trigger of any
        transition in this state), the module shall ignore the call.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest02002_Unexpected_TcpIpModeIndication</srcid><srcstatus/><internalId>369</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest02004_Unexpected_TcpIpModeIndication2</srcid><srcstatus/><internalId>371</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>

    <specobject>
      <id>EthSM.EB.UnexpectedCtrlModeIndication</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSM_CtrlModeIndication() is called in a state which is not expected (no trigger of any
        transition in this state), the module shall ignore the call.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest02007_Unexpected_CtrlModeIndication</srcid><srcstatus/><internalId>374</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest02008_Unexpected_CtrlModeIndication2</srcid><srcstatus/><internalId>375</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>

    <specobject>
      <id>EthSM.EB.UnexpectedHandleDevAuthNoComInd</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If EthSM_HandleDevAuthNoComInd() is called in a state which is not expected (no trigger
           of any transition in this state), the module shall ignore the call.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Unexpected_HandleDevAuthNoComInd</srcid><srcstatus/><internalId>408</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>

    <specobject>
      <id>EthSM.EB.SWS_EthSM_00188_NoDemRefExist</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If the optional configuration parameter ETHSM_E_LINK_DOWN doesn't exist,
        the module shall not report any error when switching from
        ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD.
      </description>
      <comment>
        Precondition: Configuration parameter EthSMDemCtrlTestResultReportToDem is set to DEM.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_04_OnlineState_to_OnHoldState_Transition_NoErrorReport</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_OnHoldState_Transition_NoErrorReport</srcid><srcstatus/><internalId>420</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>

    <specobject>
      <id>EthSM.EB.SWS_EthSM_00196_NoDemRefExist</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If the optional configuration parameter ETHSM_E_LINK_DOWN doesn't exist,
        the module shall not report any error when switching from
        ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE.
      </description>
      <comment>
        Precondition: Configuration parameter EthSMDemCtrlTestResultReportToDem is set to DEM.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_03_OnHoldState_to_OnlineState_Transition_NoErrorReport</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnHoldState_to_OnlineState_Transition_NoErrorReport</srcid><srcstatus/><internalId>424</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00196</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>

    <specobject>
      <id>EthSM.EB.SWS_EthSM_00188_ReportToDem</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If configuration parameter EthSMDemCtrlTestResultReportToDem is set to DEM, and the
           optional configuration parameter ETHSM_E_LINK_DOWN exists, ETHSM_E_LINK_DOWN with
           EventStatus DEM_EVENT_STATUS_PREFAILED  shall be reported to the DEM module when
           switching from ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_01_OnlineState_to_OnHoldState_Transition</srcid><srcstatus/><internalId>330</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSM_0188_ReportToDet</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If configuration parameter EthSMDemCtrlTestResultReportToDem is set to DET,
        ETHSM_E_DEMTODET_CTRL_TEST shall be reported to the DET module when switching from
        ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01010_Det_OnlineToOnHold</srcid><srcstatus/><internalId>362</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>

    <specobject>
      <id>EthSM.EB.SWS_EthSM_00196_ReportToDem</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If configuration parameter EthSMDemCtrlTestResultReportToDem is set to DEM, and the
           optional configuration parameter ETHSM_E_LINK_DOWN exists, ETHSM_E_LINK_DOWN with
           EventStatus DEM_EVENT_STATUS_PREPASSED shall be reported to the DEM module when switching
           from ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_01_OnHoldState_to_OnlineState_Transition</srcid><srcstatus/><internalId>337</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00196</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>

    <specobject>
      <id>EthSM.EB.SWS_EthSM_00196_ReportToDet</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If configuration parameter EthSMDemCtrlTestResultReportToDem is set to DET,
        ETHSM_E_DEMTODET_CTRL_TEST shall be reported to the DET module when switching from
        ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01011_Det_OnHoldToOnline</srcid><srcstatus/><internalId>363</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSM_0188_ReportDisabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If configuration parameter EthSMDemCtrlTestResultReportToDem is set to DISABLE,
        the module shall not report any error when switching from
        ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03007_OnlineToOnHold_SingleNetwork</srcid><srcstatus/><internalId>389</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>

    <specobject>
      <id>EthSM.EB.SWS_EthSM_00196_ReportDisabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If configuration parameter EthSMDemCtrlTestResultReportToDem is set to DISABLE,
        the module shall not report any error when switching from
        ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03011_OnHoldToOnline_SingleNetwork</srcid><srcstatus/><internalId>393</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSM_WaitTrcvLink_To_WaitOnline_ReportToDem</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If configuration parameter EthSMDemCtrlTestResultReportToDem is set to DEM, and the
           optional configuration parameter ETHSM_E_LINK_DOWN exists, ETHSM_E_LINK_DOWN with
           EventStatus DEM_EVENT_STATUS_PREPASSED shall be reported to the DEM module when switching
           from ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_WAIT_ONLINE.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_05_00_WaitTrcvLinkState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>

    <specobject>
      <id>EthSM.EB.StateTransistions.AdditionalModeStateTypes</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        Three additional elements of EthSM_NetworkModeStateType are required
        to handle additional states.
        ETHSM_STATE_WAIT_CTRLMODEIND
            EthSM waits for EthSM_CtrlModeIndication(ETH_MODE_ACTIVE)
            * state was ETHSM_STATE_OFFLINE and EthIf_SetControllerMode(ETH_MODE_ACTIVE)
              was called
            Value:  6
        ETHSM_STATE_WAIT_LINK_DOWN
            EthSM waits for EthSM_CtrlModeIndication(ETH_MODE_DOWN)
            * state was ETHSM_STATE_ONHOLD and EthIf_SetControllerMode(ETH_MODE_DOWN)
              was called
            * state was  ETHSM_STATE_WAIT_OFFLINE and EthIf_SetControllerMode(ETH_MODE_DOWN)
              was called
            Value : 7
        ETHSM_STATE_WAIT_CTRLMIND_DOWN
            EthSM waits for EthSM_CtrlModeIndication(ETH_MODE_DOWN)
            * state was ETHSM_STATE_WAIT_TRCV_LINK and EthIf_SetControllerMode(ETH_MODE_DOWN)
              was called
            Value : 8
      </description>
      <comment>
        Based on coding guideline BSWM_C_020 enums shall be replaced by macros. It shall only be
        tested that the macros above exist and have the correct value.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>

    <specobject>
      <id>EthSM.EB.StateTransistions.OnHoldToWaitLinkDown</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        In the state ETHSM_STATE_ONHOLD the state machine shall have a transition to
        ETHSM_STATE_WAIT_LINK_DOWN, if the ComM requests COMM_NO_COMMUNICATION
        for the corresponding network handle which shall set the controller mode
        to ETH_MODE_DOWN.
      </description>
      <comment>
        replaces SWS_EthSM_00178
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_02_OnHoldState_to_WaitLinkDownState_Transition_TrcvOk</srcid><srcstatus/><internalId>338</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>

    <specobject>
      <id>EthSM.EB.StateTransistions.OnHoldToWaitDevAuthOffline.Enabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If Device Authentification support is enabled i.e. configuration parameter
         EthSMDevAuthSupport is set to TRUE and config parameter EthSMDevAuthNoComNotificationEnable
         is set for this EthSMNetwork, then in the state ETHSM_STATE_ONHOLD the state
         machine shall have a transition to state ETHSM_STATE_WAIT_DEVAUTH_OFFLINE.
         This transition calls a callback function of DevAuth module DevAuth_RequestComModeNoCom()
         for the appropriate EthIfCtrlIdx.
      </description>
      <comment>
        replaces SWS_EthSM_00178
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_OnHoldState_to_WaitDevAuthOfflineState_Transition</srcid><srcstatus/><internalId>423</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>

    <specobject>
      <id>EthSM.EB.StateTransistions.OnHoldToWaitDevAuthOffline.Disabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If Device Authentification support is enabled i.e. configuration parameter
         EthSMDevAuthSupport is set to TRUE and config parameter EthSMDevAuthNoComNotificationEnable
         is not set for this EthSMNetwork, then in the state ETHSM_STATE_ONHOLD the state machine
         shall have a transition to state ETHSM_STATE_WAIT_LINK_DOWN.
         This transition calls EthIf_SetControllerMode() with ETH_MODE_DOWN.
      </description>
      <comment>
        replaces SWS_EthSM_00178
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_OnHoldState_to_WaitDevAuthOfflineState_Transition</srcid><srcstatus/><internalId>423</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>

    <specobject>
      <id>EthSM.EB.StateTransistions.WaitOfflineToWaitDevAuthOffline.Enabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If Device Authentification support is enabled i.e. configuration parameter
         EthSMDevAuthSupport is set to TRUE and config parameter EthSMDevAuthNoComNotificationEnable
         is set for this EthSMNetwork, then in the state ETHSM_STATE_WAIT_OFFLINE the state machine
         shall have a transition to state ETHSM_STATE_WAIT_DEVAUTH_OFFLINE.
         This transition calls a callback function of DevAuth module DevAuth_RequestComModeNoCom()
         for the appropriate EthIfCtrlIdx.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_WaitOfflineState_to_WaitDevAuthOfflineState_Transition</srcid><srcstatus/><internalId>425</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>

    <specobject>
      <id>EthSM.EB.StateTransistions.WaitOfflineToWaitDevAuthOffline.Disabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If Device Authentification support is enabled i.e. configuration parameter
         EthSMDevAuthSupport is set to TRUE and config parameter EthSMDevAuthNoComNotificationEnable
         is not set for this EthSMNetwork, then in the state ETHSM_STATE_WAIT_OFFLINE the state machine
         shall have a transition to state ETHSM_STATE_WAIT_LINK_DOWN.
         This transition calls EthIf_SetControllerMode() with ETH_MODE_DOWN.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_WaitOfflineState_to_WaitDevAuthOfflineState_Transition</srcid><srcstatus/><internalId>425</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>

    <specobject>
      <id>EthSM.EB.StateTransistions.WaitDevAuthOfflineToWaitLinkDown</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If Device Authentification support is enabled i.e. configuration parameter
         EthSMDevAuthSupport is set to TRUE and config parameter EthSMDevAuthNoComNotificationEnable
         is set for this EthSMNetwork, then in the state ETHSM_STATE_WAIT_DEVAUTH_OFFLINE
         the state machine shall have a transition to state ETHSM_STATE_WAIT_LINK_DOWN, if
         callback EthSM_DevAuthNoComModeIndication() was called.
         This transition calls EthIf_SetControllerMode() with ETH_MODE_DOWN.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_WaitDevAuthOfflineState_to_WaitLinkDownState_Transition</srcid><srcstatus/><internalId>426</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>

    <specobject>
      <id>EthSM.EB.StateTransistions.WaitOfflineToWaitLinkDown</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        In the state ETHSM_STATE_WAIT_OFFLINE the state machine shall have a
        transition to ETHSM_STATE_WAIT_LINK_DOWN, if the TcpIp module reports
        TCPIP_STATE_OFFLINE for the corresponding network handle.
      </description>
      <comment>
        replaces EthSM.ASR430.SWS_EthSM_00160
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_25_00_WaitOfflineState_to_WaitLinkDownState_Transition</srcid><srcstatus/><internalId>342</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>

    <specobject>
      <id>EthSM.EB.StateTransitions.WaitOffline_To_WaitOffline_FullCom</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_OFFLINE the state machine shall have a transition
        to ETHSM_STATE_WAIT_OFFLINE which sets the controller mode to ETH_MODE_ACTIVE and
        requests TcpIp state TCPIP_STATE_ONLINE.
      </description>
      <comment>
        The transition is triggered by calling EthSM_RequestComMode(COMM_FULL_COMMUNICATION).
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_25_01_WaitOfflineState_to_WaitOfflineState_Transition</srcid><srcstatus/><internalId>343</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>

    <specobject>
      <id>EthSM.EB.StateTransitions.WaitOffline_To_WaitOffline_NoCom</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_OFFLINE the state machine shall have a transition
        to ETHSM_STATE_WAIT_OFFLINE which requests TcpIp state TCPIP_STATE_OFFLINE.
      </description>
      <comment>
        The transition is triggered by calling EthSM_RequestComMode(COMM_NO_COMMUNICATION).
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_25_05_WaitOfflineState_to_WaitOfflineState_Transition_NO_COMM</srcid><srcstatus/><internalId>347</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>

    <!-- === ETHSM_STATE_WAIT_TRCVLINK === -->
    <specobject>
      <id>EthSM.EB.StateTransistions.WaitTrcvLinkToWaitCtrlMIndDown</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        In the state ETHSM_STATE_WAIT_TRCVLINK the state machine shall have a
        transition to ETHSM_STATE_WAIT_CTRLMIND_DOWN when EthSM_RequestComMode()
        is called with COMM_NO_COMMUNICATION.
        This transition calls EthIf_SetControllerMode() with ETH_MODE_DOWN.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_05_01_WaitTrcvLinkState_to_StateWaitCtrlMIndDown_Transition</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitTrcvLinkState_to_StateWaitCtrlMIndDown_Transition</srcid><srcstatus/><internalId>411</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>
    <!-- === ETHSM_STATE_WAIT_LINK_DOWN === -->
    <specobject>
      <id>EthSM.EB.StateTransistions.WaitLinkDownToOffline</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        In the state ETHSM_STATE_WAIT_LINK_DOWN the state machine shall have a
        transition to ETHSM_STATE_OFFLINE when EthSM_CtrlModeIndication() is
        called with  ETH_MODE_DOWN.
        This transition calls:
        1st TcpIp_RequestComMode(TCPIP_STATE_OFFLINE)
        2nd BswM_EthSM_CurrentState(ETHSM_STATE_OFFLINE)
        3rd ComM_BusSM_ModeIndication(COMM_NO_COMMUNICATION)
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_30_00_WaitLinkDownState_To_Offline_Transition_MainFunctionTrigger</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_30_01_WaitLinkDownState_To_Offline_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>349</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitLinkDownState_To_Offline_Transition_MainFunctionTrigger</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>
    <!-- === ETHSM_STATE_WAIT_CTRLMIND_DOWN === -->
    <specobject>
      <id>EthSM.EB.StateTransistions.WaitCtrlMIndDownToOffline</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        In the state ETHSM_STATE_WAIT_CTRLMIND_DOWN the state machine shall have a
        transition to ETHSM_STATE_OFFLINE when EthSM_CtrlModeIndication() is
        called with  ETH_MODE_DOWN.
        This transition calls:
        BswM_EthSM_CurrentState(ETHSM_STATE_OFFLINE)
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_07_00_WaitCtrlModeIndDownState_to_OfflineState_Transition</srcid><srcstatus/><internalId>321</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03015_WaitCtrlMIndDownToOffline_SingleNetwork</srcid><srcstatus/><internalId>397</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitCtrlModeIndDownState_to_OfflineState_Transition</srcid><srcstatus/><internalId>412</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>

    <specobject>
      <id>EthSM.EB.ECUC_EthSM_00108_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name: EthSM
          Description: Configuration of the Ethernet State Manager.
          Post-Build Variant Support: true
          Supported Config Variants: VARIANT-POST-BUILD
      </description>
      <comment>
        Post-build variant support is added as EB extension.
      </comment>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/xgen/EthSM.xgen_38</srcid><srcstatus/><internalId>290</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>

    <specobject>
      <id>EthSM.EB.RelocatablePBCfg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name: EthSMRelocatablePbcfgEnable
          Description: In order to support post-build-time configuration data handled
                       by relative offsets to the configuration start address,
                       the container EthSMGeneral is extended with the configuration
                       parameter EthSMRelocatablePbcfgEnable.
          Config class: Pre-compile : VARIANT-POST-BUILD
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/EthSM_EBParameters.xdm.m4_118</srcid><srcstatus/><internalId>287</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_PBcfgM_Off</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>EthSM_Test_PBcfgM_On</srcid><srcstatus/><internalId>294</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.Online_To_Online</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled, the correct transition from
        ETHSM_STATE_ONLINE to ETHSM_STATE_ONLINE which sets the controller mode
        to ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST shall be verified.
      </description>
      <comment>
        The transition is triggered by calling EthSM_RequestComMode(COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST).
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_06_OnlineState_to_OnlineState_WKUP</srcid><srcstatus/><internalId>335</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitOnline_To_WaitOnline</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled, the correct transition from
        ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_ONLINE which sets the controller mode
        to ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST shall be verified.
      </description>
      <comment>
        The transition is triggered by calling EthSM_RequestComMode(COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST).
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_10_04_WaitOnlineState_to_WaitOnlineState_WKUP</srcid><srcstatus/><internalId>328</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitTrcvLink_To_WaitTrcvLink</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled, the correct transition from
        ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_WAIT_TRCVLINK which sets the controller mode
        to ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST shall be verified.
      </description>
      <comment>
        The transition is triggered by calling EthSM_RequestComMode(COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST).
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_05_02_WaitTrcvLinkState_to_WaitTrcvLinkState_WKUP</srcid><srcstatus/><internalId>320</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.OnHold_To_OnHold</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled, the correct transition from
        ETHSM_STATE_ONHOLD to ETHSM_STATE_ONHOLD which sets the controller mode
        to ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST shall be verified.
      </description>
      <comment>
        The transition is triggered by calling EthSM_RequestComMode(COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST).
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_05_OnHoldState_to_OnHoldState_WKUP</srcid><srcstatus/><internalId>341</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.Offline_To_WaitTrcvLink</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled, the correct transition from
        ETHSM_STATE_OFFLINE to ETHSM_STATE_WAIT_TRCVLINK which sets the controller mode
        to ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST shall be verified.
      </description>
      <comment>
        The transition is triggered by calling EthSM_RequestComMode(COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST).
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_00_01_OfflineState_to_WaitCtrlModeIndState_Transition_WKUP</srcid><srcstatus/><internalId>314</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitCtrlModInd_To_WaitCtrlModeInd</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled, the correct transition from
        ETHSM_STATE_WAIT_CTRLMODEIND to ETHSM_STATE_WAIT_CTRLMODEIND which sets the controller mode
        to ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST shall be verified.
      </description>
      <comment>
        The transition is triggered by calling EthSM_RequestComMode(COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST).
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_02_01_WaitCtrlModeIndState_to_WaitCtrlModeIndState_Transition_WKUP</srcid><srcstatus/><internalId>317</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitOffline_To_WaitOffline</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled, the correct transition from
        ETHSM_STATE_WAIT_OFFLINE to ETHSM_STATE_WAIT_OFFLINE which sets the controller mode
        to ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST and requests TcpIp state TCPIP_STATE_ONLINE
        shall be verified.
      </description>
      <comment>
        The transition is triggered by calling EthSM_RequestComMode(COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST).
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_25_02_WaitOfflineState_to_WaitOfflineState_Transition_WKUP</srcid><srcstatus/><internalId>344</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.NoTransition.ETHSM_STATE_WAIT_CTRLMIND_DOWN</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled,
        and EthSM_RequestComMode(ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST) is called
        from of the state ETHSM_STATE_WAIT_CTRLMIND_DOWN there shall be no state transition.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_07_01_WaitCtrlModeIndDownState_NoTransition_WKUP</srcid><srcstatus/><internalId>322</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.NoTransition.ETHSM_STATE_WAIT_LINK_DOWN</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled,
        and EthSM_RequestComMode(ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST) is called
        from of the state ETHSM_STATE_WAIT_LINK_DOWN there shall be no state transition.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_30_02_WaitLinkDownState_NoTransition_WKUP</srcid><srcstatus/><internalId>350</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.NoTransition.ETHSM_STATE_WAIT_DEVAUTH_OFFLINE</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled,
        and EthSM_RequestComMode(ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST) is called
        from of the state ETHSM_STATE_WAIT_DEVAUTH_OFFLINE there shall be no state transition.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_WaitDevAuthOfflineState_NoTransition_WKUP</srcid><srcstatus/><internalId>427</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.ProcessWakeUpRequest.ETHSM_STATE_WAIT_CTRLMIND_DOWN</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled,
        and EthSM_RequestComMode(ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST) was called
        from of the state ETHSM_STATE_WAIT_CTRLMIND_DOWN, the request shall be processed
        as soon as the controller enters the state ETHSM_STATE_OFFLINE.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_07_02_WaitCtrlModeIndDownState_OfflineState_WaitCtrlModeIndState_WKUP</srcid><srcstatus/><internalId>323</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.ProcessWakeUpRequest.ETHSM_STATE_WAIT_LINK_DOWN</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled,
        and EthSM_RequestComMode(ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST) was called
        from of the state ETHSM_STATE_WAIT_LINK_DOWN, the request shall be processed
        as soon as the controller enters the state ETHSM_STATE_OFFLINE.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_30_03_WaitLinkDownState_OfflineState_WaitCtrlModeIndState_WKUP</srcid><srcstatus/><internalId>351</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.ProcessWakeUpRequest.ETHSM_STATE_WAIT_DEVAUTH_OFFLINE</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled,
        and EthSM_RequestComMode(ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST) was called
        from of the state ETHSM_STATE_WAIT_DEVAUTH_OFFLINE, the request shall be processed
        as soon as the controller enters the state ETHSM_STATE_OFFLINE.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_WaitDevAuthOfflineState_to_WaitCtrlModeIndState_WKUP_Transition</srcid><srcstatus/><internalId>428</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>

    <specobject>
      <id>EthSM.EB.SWS_EthSM_00088</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_OFFLINE to ETHSM_STATE_WAIT_CTRLMIND shall set the controller
        mode according to the requested ComM communication mode:
        If ComM requested COMM_FULL_COMMUNICATION, then the controller mode of the corresponding
        EthIfCtrl shall be requested with ETH_MODE_ACTIVE
        If ComM requested COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST, then the controller mode of
        corresponding EthIfCtrl shall be requested with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_00_01_OfflineState_to_WaitCtrlModeIndState_Transition_WKUP</srcid><srcstatus/><internalId>314</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>

    <specobject>
      <id>EthSM.EB.MainFunction.ProcessFlags.RequestComModeFlag_Before_TcpIpModeIndFlag</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        During the EthSM_MainFunction() call the RequestComModeFlag flag
        shall be processed before TcpIpModeIndFlag flag.
      </description>
      <comment>
        EthSM is more dynamic in state WAIT_OFFLINE this way. Eg. if NO_COMM and
        FULL_COMM were requested in succession, EthSM will request TCPIP_STATE_ONLINE and wait
        to go to STATE_ONLINE regardless if TcpIp indicates STATE_OFFLINE.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest02010_TcpIpModeIndication_Offline_Ignored</srcid><srcstatus/><internalId>377</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest02011_TcpIpModeIndication_Offline_Ignored_WKUP</srcid><srcstatus/><internalId>378</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest02012_TcpIpModeIndication_Online_Ignored</srcid><srcstatus/><internalId>379</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>

    <specobject>
      <id>EthSM.EB.MainFunction.ClearFlags.TcpIpModeIndFlag.OFFLINE</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the TcpIpModeIndFlag is set and the indicated mode is TCPIP_STATE_OFFLINE,
        EthSM_MainFunction() is able to clear the TcpIpModeIndFlagflag if
        COMM_FULL_COMMUNICATION was requested with latest EthSM_RequestComMode() call.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest02010_TcpIpModeIndication_Offline_Ignored</srcid><srcstatus/><internalId>377</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>

    <specobject>
      <id>EthSM.EB.MainFunction.ClearFlags.TcpIpModeIndFlag.OFFLINE.Wakeup</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is enabled, and if the TcpIpModeIndFlag is set
        and the indicated mode is TCPIP_STATE_OFFLINE, EthSM_MainFunction() is able to clear
        the TcpIpModeIndFlagflag if COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST was requested
        with latest EthSM_RequestComMode() call.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest02011_TcpIpModeIndication_Offline_Ignored_WKUP</srcid><srcstatus/><internalId>378</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>

    <specobject>
      <id>EthSM.EB.MainFunction.ClearFlags.TcpIpModeIndFlag.ONLINE</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the TcpIpModeIndFlag is set and the indicated mode is TCPIP_STATE_ONLINE,
        EthSM_MainFunction() is able to clear the TcpIpModeIndFlagflag if
        COMM_NO_COMMUNICATION was requested with latest EthSM_RequestComMode() call.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest02012_TcpIpModeIndication_Online_Ignored</srcid><srcstatus/><internalId>379</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>

    <specobject>
      <id>EthSM.EB.EthSMWakeupSleepOnDatalineSupportEnabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a configuration parameter 'EthSMWakeupSleepOnDatalineSupportEnabled'
        which enables or disables the support for wakeup and sleep on data line.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_01</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_04</srcid><srcstatus/><internalId>299</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>

    <specobject>
      <id>EthSM.EB.Startup.TrcvLinkStateActive</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If transceiver link state is already active and FULL_COMM is requested for an offline
        controller, EthSM will transition from WAIT_CTRLMODEIND to WAIT_ONLINE directly.
      </description>
      <comment>
        This way there a risk of missing a TrcvLinkStateChg call is mitigated, avoiding blocking the controller.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest02013_Wait_Online_TrcvLinkCheckActive</srcid><srcstatus/><internalId>380</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest02014_Wait_Online_TrcvLinkCheckLinkDown</srcid><srcstatus/><internalId>381</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03016_WaitTrcvLinkToWaitOnline_SingleNetwork_TrcvLinkStateActive</srcid><srcstatus/><internalId>398</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03017_WaitTrcvLinkToWaitOnline_SingleNetwork_TrcvLinkStateDown</srcid><srcstatus/><internalId>399</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>EthSM.ECUC_EthSM_00108</id>
      <status>approved</status>
      <version>1</version>
      <description>
        description=Name: EthSM
        Description: Configuration of the Ethernet State Manager.
        Post-Build Variant Support: false
        Supported Config Variants: VARIANT-PRE-COMPILE}
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.PostbuildSupport</srcid><srcstatus/><internalId>261</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.EB.ECUC_EthSM_00108_Conf</srcid><srcstatus/><internalId>62</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>
    <specobject>
      <id>EthSM.ECUC_EthSM_00063</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: EthSMGeneral
        Container Type: Container
        Description: This container contains the global parameter of the Ethernet State Manager.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00065</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: EthSMDevErrorDetect
        Parameter Type: Boolean
        Parent Containers: EthSMGeneral,
        Description: Switches the development error detection and notification on or off.
        Introduction: * true: detection and notification is enabled. * false: detection and
        notification is disabled.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.ECUC_EthSM_00065_Conf.Enabled</srcid><srcstatus/><internalId>233</internalId></linkedfrom><linkedfrom><srcid>EthSM.ECUC_EthSM_00065_Conf.Disabled</srcid><srcstatus/><internalId>234</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00066</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: EthSMMainFunctionPeriod
        Parameter Type: FloatValue
        Parent Containers: EthSMGeneral,
        Description: Specifies the period in seconds that the MainFunction has to be triggered with.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: OPEN)
        Min-Value: 0 (Type: OPEN)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00067</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: EthSMNetwork
        Container Type: Container
        Sub-Containers: EthSMDemEventParameterRefs
        Description: This container contains the Ethernet network-specific parameters of each Ethernet
        network. It also contains the reference to combination of controller and transceiver assigned
        to an Ethernet network.
        Lower Multiplicity: 1
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00068</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: EthSMComMNetworkHandleRef
        Parameter Type: Reference
        Parent Containers: EthSMNetwork,
        Description: Unique handle to identify one certain Ethernet network. Reference to one of the
        network handles configured for the ComM.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00079</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: EthSMDummyMode
        Parameter Type: Boolean
        Parent Containers: EthSMGeneral,
        Description: Disables the API to the EthIf. The API to the ComM is available but the
        functionality is deactivated. The function calls from the ComM will be answered with the return
        value E_OK.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.DummyMode</srcid><srcstatus/><internalId>256</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00092</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: EthSMVersionInfoApi
        Parameter Type: Boolean
        Parent Containers: EthSMGeneral,
        Description: Enables and disables the version info API.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.ECUC_EthSM_00092_Conf.EnableAPI</srcid><srcstatus/><internalId>235</internalId></linkedfrom><linkedfrom><srcid>EthSM.ECUC_EthSM_00092_Conf.DisableAPI</srcid><srcstatus/><internalId>236</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00001</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Ethernet State Manager shall provide an abstract interface to the AUTOSAR Communication
        Manager to startup or shutdown the communication on an Ethernet cluster.
      </description>
      <comment>
        This requirement is informational only.
        Rationale:
        This requirement is too general to provide implementation relevant aspects.
        EthSM provides APIs to ComM which are specified in more precise requirements.
        - EthSM_RequestComMode()
        - EthSM_GetCurrentComMode()
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00002</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Ethernet State Manager does not directly access the Ethernet hardware (Ethernet
        Communication Controller and Ethernet Transceiver), but by means of the Ethernet Interface. The
        Ethernet Interface redirects the request to the appropriate driver module.
      </description>
      <comment>
        This requirement is informational only.
        Rational:
        This description is no requirement for the EthSM.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00008</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The EthSM needs to report development errors if development errors are enabled by configuration.
        Therefore, it includes the header file Det.h.
      </description>
      <comment>
        This requirement is informational only.
        Rational:
        Header files will only be included if needed. In this case other requirements shall exist
        to define the usage of the included content.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00010</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The EthSM implementation (EthSM.c) references the API of the EthIf. Therefore, it includes the
        header file EthIf.h.
      </description>
      <comment>
        This requirement is informational only.
        Rational:
        Header files will only be included if needed. In this case other requirements shall exist
        to define the usage of the included content.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00013</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The EthSM module shall include the ComM_Bus_SM.h header file.
      </description>
      <comment>
        This requirement is informational only.
        Rational:
        Header files will only be included if needed. In this case other requirements shall exist
        to define the usage of the included content.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The EthSM shall provide to the ComM an API, which can be used by the ComM to request
        communication modes of Ethernet networks.
      </description>
      <comment>
        Linked to corresponding API specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00050</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Depending on the parameters handed over by this API, the EthSM shall execute a state transition
        of the related network mode state machine (refer to section 7.6)
      </description>
      <comment>
        Duplicates linked requirement.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00053</srcid><srcstatus/><internalId>115</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00016</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        This transition shall translate the request into a respective API call to control the assigned
        Ethernet peripherals.
      </description>
      <comment>
        This requirement is not applicable.
        Rationale:
        Requirement is imprecise and only duplicates existing state machine requirements.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The EthSM shall provide an API, which can be polled by the ComM to get the current
        communication mode of an Ethernet network.
      </description>
      <comment>
        Linked to corresponding API specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00055</srcid><srcstatus/><internalId>117</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00018</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The EthSM shall use a call-back notification of ComM to notify ComM of a change in
        communication modes.
      </description>
      <comment>
        This requirement is not applicable.
        Rationale:
        Requirement is imprecise and only duplicates existing state machine requirements.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00022</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Depending on the network mode state machine, the EthSM shall control the Ethernet Interface
        Controller modes of each Ethernet network.
      </description>
      <comment>
        This requirement is not applicable.
        Rationale:
        Requirement is imprecise and only duplicates existing state machine requirements.
        AUTOSAR R20-11 comment: Requirement was changed without functional impact. The requirement
        was always interpreted for controlling of EthIf controllers.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00023</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The EthSM shall use the API of the EthIf to control the operating modes of the assigned
        Ethernet Interface Controllers.
      </description>
      <comment>
        This requirement is not applicable.
        Rationale:
        Requirement is imprecise and only duplicates existing state machine requirements.
        AUTOSAR R20-11 comment: Requirement was changed without functional impact. The requirement was always interpreted for controlling of EthIf controllers.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The EthSM shall implement for each configured network handle one network mode state machine (
        EthSM statemachine)
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest02000_Independent_Networks</srcid><srcstatus/><internalId>367</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00025</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the initialization of the EthSM the state machine shall have a transition to
        ETHSM_STATE_OFFLINE.
      </description>
      <comment>
       EthSM only calls APIs during initialization if EthIfInitControllersTransceivers is enabled
       which is only valid for drivers and transceivers smaller than AUTOSAR 4.2.2.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_01_Transition_From_Uninitialized_To_StateOffline</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>EthSM_Transition_From_Uninitialized_To_StateOffline</srcid><srcstatus/><internalId>407</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_OFFLINE the state machine shall have a transition to
        ETHSM_STATE_WAIT_TRCVLINK, if ComM requests COMM_FULL_COMMUNICATION or
        COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the corresponding network handle.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>dev.EthSM.States</srcid><srcstatus/><internalId>262</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | EthSM_MainFunction
        Syntax
        void EthSM_MainFunction (void)
        Service ID [hex] | 0x01
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | None
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Cyclic Main Function which is called from the Scheduler.
        Available via | EthSM_SchM.h
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_01</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_02</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00035.ServiceId</srcid><srcstatus/><internalId>232</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00038</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If ComM calls the EthSM to request a certain communication mode for a certain Ethernet network,
        the EthSM shall map the requested communication mode to the corresponding EthSM state machine
        main state:
        If communication mode COMM_FULL_COMMUNICATION or COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST is
        requested, then the EthSM shall request internally the state ETHSM_FULL_COMMUNICATION for the
        corresponding EthSM statemachine
        If communication mode COMM_NO_COMMUNICATION is requested, then EthSM shall request internally
        the state ETHSM_NO_COMMUNICATION for the corresponding EthSM statemachine
      </description>
      <comment>
        Linked to corresponding API parameter requirement.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.EB.StateTransistions.WaitLinkDownToOffline</srcid><srcstatus/><internalId>60</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00095</srcid><srcstatus/><internalId>130</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00150</srcid><srcstatus/><internalId>160</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00154</srcid><srcstatus/><internalId>163</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00177</srcid><srcstatus/><internalId>179</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00041</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | EthSM_NetworkModeStateType
        Kind | Enumeration
        Range | ETHSM_STATE_OFFLINE | -- | EthSM is initialized in this state.
        ETHSM_STATE_WAIT_TRCVLINK | -- | ComM requests COMM_FULL_COMMUNICATION in this state.
        Controller will be set to ACTIVE. EthSM waits for transceiver link state (ACTIVE)
        ETHSM_STATE_WAIT_ONLINE | -- | Transceiver link state is ACTIVE EthSM waits for IP
        communication (TcpIP state = ONLINE)
        ETHSM_STATE_ONLINE | -- | IP communication is available ComM state COMM_FULL_COMMUNICATION is
        reached
        ETHSM_STATE_ONHOLD | -- | EthSM lost active transceiver link state, TcpIP state is still ONLINE)
        ETHSM_STATE_WAIT_OFFLINE | -- | ComM requests COMM_NO_COMMUNICATION in this state.
        Description | This type shall define the states of the network mode state machine.
        Available via | EthSM.h
      </description>
      <comment>
        Based on coding guideline BSWM_C_020 enums shall be replaced by macros. It shall only be
        tested that the macros above exist and have the correct value.
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | EthSM_Init
        Syntax
        void EthSM_Init (void)
        Service ID [hex] | 0x07
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | None
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | This function initialize the EthSM.
        Available via | EthSM.h
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.InitAPISyntax</srcid><srcstatus/><internalId>257</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.EB.SWS_EthSM_00043</srcid><srcstatus/><internalId>27</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00043.ServiceId</srcid><srcstatus/><internalId>218</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00046</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | EthSM_GetVersionInfo
        Syntax
        void EthSM_GetVersionInfo (Std_VersionInfoType* versioninfo)
        Service ID [hex] | 0x02
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | None
        Parameters (inout) | None
        Parameters (out) | versioninfo | Pointer where to put out the version information.
        Return value | None
        Description | This service puts out the version information of this module.
        Available via | EthSM.h
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_01</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>EthSM_T101_00_GetVersionInfo_DetInvPointer</srcid><srcstatus/><internalId>435</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00046.ServiceId</srcid><srcstatus/><internalId>219</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00046.VersionInfo</srcid><srcstatus/><internalId>220</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00050</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | EthSM_RequestComMode
        Syntax
        Std_ReturnType EthSM_RequestComMode (NetworkHandleType NetworkHandle, ComM_ModeType ComM_Mode)
        Service ID [hex] | 0x05
        Sync/Async | Asynchronous
        Reentrancy | Non Reentrant
        Parameters (in) | NetworkHandle | Handle of destinated communication network for request
        ComM_Mode | Requested communication mode
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: Service acceptedE_NOT_OK: Service denied
        Description | Handles the communication mode and sets the Ethernet network active or passive.
        Available via | EthSM.h
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_01</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_02</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00050.ServiceId</srcid><srcstatus/><internalId>221</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00051</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_RequestComMode checks the network handle of the request. It only accepts the
        request, if the network handle of the request is a handle contained in the EthSM configuration
        configuration parameter EthSMNetworkHandle). In this case the return value is set to E_OK. If
        it is not contained in the configuration, the function denies the request. In this case the
        return value is set to E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00051.ValidNetworkHandle</srcid><srcstatus/><internalId>222</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00051.InvalidNetworkHandle</srcid><srcstatus/><internalId>223</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00052</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_RequestComMode shall report ETHSM_E_INVALID_NETWORK_HANDLE to the DET, if it
        does not accept the network handle of the request.
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
        Extension: The API shall return E_NOT_OK in this case.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_T100_05_RequestComMode_DetInvNetwork_NoCom</srcid><srcstatus/><internalId>431</internalId></linkedfrom><linkedfrom><srcid>EthSM_T100_06_RequestComMode_DetInvNetwork_FullCom</srcid><srcstatus/><internalId>432</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00053</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function EthSM_RequestComMode accepts the function call, it shall store the
        communication mode for the network handle and the corresponding network mode switch of the
        state machine shall be initiated in the next main function cycle latest.
      </description>
      <comment>
        Test: Verify that transition does not start before EthSM_MainFunction() is called.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_02_OnHoldState_to_WaitLinkDownState_Transition_TrcvOk</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnHoldState_to_WaitDevAuthOfflineState_Transition</srcid><srcstatus/><internalId>423</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00053.RetValue</srcid><srcstatus/><internalId>224</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00197</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00054</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_RequestComMode shall report ETHSM_E_UNINIT to the DET, if the EthSM is not
        initialized yet.
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
        Extension: The API shall return E_NOT_OK in this case.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_T100_00_RequestComMode_DetUninit</srcid><srcstatus/><internalId>430</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00055</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | EthSM_GetCurrentComMode
        Syntax
        Std_ReturnType EthSM_GetCurrentComMode (NetworkHandleType NetworkHandle, ComM_ModeType*
        ComM_ModePtr)
        Service ID [hex] | 0x04
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | NetworkHandle | Network handle whose current communication mode shall be put
        out
        Parameters (inout) | None
        Parameters (out) | ComM_ModePtr | Pointer where to put out the current communication mode
        Return value | Std_ReturnType | E_OK: Service acceptedE_NOT_OK: Service denied
        Description | This service shall put out the current communication mode of a Ethernet network.
        Available via | EthSM.h
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_01</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_02</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00055.ServiceId</srcid><srcstatus/><internalId>225</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_GetCurrentComMode checks the network handle of the service request. It only
        accepts the service, if the network handle of the request is a handle contained in the EthSM
        configuration (configuration parameter EthSMNetworkHandle). In this case the return value is
        set to E_OK. If it is not contained in the configuration, the function denies the request. In
        this case the return value is set to E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00057.ValidNetworkHandle</srcid><srcstatus/><internalId>226</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00057.InvalidNetworkHandle</srcid><srcstatus/><internalId>227</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00058</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_GetCurrentComMode shall report ETHSM_E_INVALID_NETWORK_HANDLE to the DET, if
        it does not accept the network handle of the request.
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
        Extension: The API shall return E_NOT_OK in this case.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_T102_01_GetCurrentComMode_DetInvNetwork</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00059</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_GetCurrentComMode puts out the current communication mode for the network
        handle to the designated pointer of type ComM_ModeType, if it accepts the request.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_03_OnlineState_to_WaitOnlineState_ModeCheck</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_WaitOnlineState_ModeCheck</srcid><srcstatus/><internalId>419</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00059.RetValue</srcid><srcstatus/><internalId>228</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00060</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_GetCurrentComMode shall report ETHSM_E_UNINIT to the DET, if the EthSM is
        not initialized yet.
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
        Extension: The API shall return E_NOT_OK in this case.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_T102_00_GetCurrentComMode_DetUninit</srcid><srcstatus/><internalId>438</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00078</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        It is possible to set the Ethernet State Manager in a dummy mode . In this mode, the Ethernet
        State Manager doesn't support the API to the Ethernet interface. The API to the ComM is
        available but the functionality is deactivated. The function calls from the ComM will be
        answered with the return value E_OK.
      </description>
      <comment>
        - Feature is not implemented.
        - Feature is not specified completely. Not clear what EthSM shall do internally in this
        case. Shall it stay in ETHSM_STATE_OFFLINE? Shall it call BswM_EthSM_CurrentState()?
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.DummyMode</srcid><srcstatus/><internalId>256</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00081</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        A configuration tool will create a configuration structure that is understood by the EthSM.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/xgen/EthSM.xgen_37</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00083</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Evertime the EthSM statemachine enters a sub-state, the EthSM shall report the entered sub-
        state towards the BswM by calling BswM_EthSM_CurrentState(&lt;entered sub-state&gt;) (e.g. when
        entering sub-state ETHSM_STATE_ONLINE, EthSM shall call BswM_EthSM_CurrentState(
        ETHSM_STATE_ONLINE). The transistion to ETHSM_STATE_OFFLINE after initialization  shall not be
        reported towards the BswM.
      </description>
      <comment>
        This requirement is informational only.
        Rationale:
        This requirement duplicates the more precise state machine transition requirement.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00025</srcid><srcstatus/><internalId>105</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00097</srcid><srcstatus/><internalId>131</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00130</srcid><srcstatus/><internalId>147</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00134</srcid><srcstatus/><internalId>150</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00138</srcid><srcstatus/><internalId>153</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00144</srcid><srcstatus/><internalId>157</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00148</srcid><srcstatus/><internalId>159</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00152</srcid><srcstatus/><internalId>162</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00158</srcid><srcstatus/><internalId>166</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00163</srcid><srcstatus/><internalId>169</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00168</srcid><srcstatus/><internalId>173</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00172</srcid><srcstatus/><internalId>176</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00175</srcid><srcstatus/><internalId>178</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00182</srcid><srcstatus/><internalId>183</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00085</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If FULL_COMMUNICATION is requested the Ethernet Interface Controller is set to the state ACTIVE.
        To reach FULL_COMMUNICATION it is also necessary to get an ACTIVE link state (Ethernet cable is
        connected) and an ONLINE TcpIP state (IP communication is available). The link state will be
        detected by the Ethernet Transceiver module and will be communicated by the Ethernet Interface.
        The TcpIP state will be detected and communicated by the TcpIp module.
      </description>
      <comment>
        This requirement is informational only.
        Rationale:
        This general requirement is only a summary about what is required to reach
        ETHSM_STATE_ONLINE. This is already specified by state machine transition requirements.
        AUTOSAR R20-11 comment: Requirement was changed without functional impact. The requirement was already interpreted for controlling of EthIf controllers.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00086</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the ComM request NO_COMMUNICATION the Ethernet Interface Controller is set to the state DOWN.
      </description>
      <comment>
        This requirement is informational only.
        Rationale:
        This general requirement is only a summary about what is required to reach
        ETHSM_STATE_OFFLINE. This is already specified by state machine transition requirements.
        AUTOSAR R20-11 comment: Requirement was changed without functional impact. The requirement was already interpreted for controlling of EthIf controllers.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00087</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Ethernet network has to be wake up by the application and it's either on (
        FULL_COMMUNICATION) or off (NO_COMMUNICATION). So there is no need for other states e.g. like
        SILENT_COMMUNICATION.
      </description>
      <comment>
        This requirement is informational only.
        Rationale:
        This general requirement does not contain implementation specific content.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00088</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_OFFLINE to ETHSM_STATE_WAIT_TRCVLINK shall set the controller
        mode according to the requested ComM communication mode:
        If ComM requested COMM_FULL_COMMUNICATION, then the controller mode of the corresponding
        EthIfCtrl shall be requested with ETH_MODE_ACTIVE
        If ComM requested COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST, then the controller mode of
        corresponding EthIfCtrl shall be requested with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>dev.EthSM.States</srcid><srcstatus/><internalId>262</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00093</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_MainFunction shall be called cyclically with a fixed cycle time. The cycle
        time could be defined via the configuration parameter ETHSM_MAIN_FUNCTION_PERIOD.
      </description>
      <comment>
        This requirement is informational only.
        Rationale:
        Only the usage of EthSM_MainFunction() and ETHSM_MAIN_FUNCTION_PERIOD by other modules is
        described.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00095</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_RequestComMode shall report ETHSM_E_INVALID_NETWORK_MODE to the DET, if it
        does not accept the ComM_Mode of the request.
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
        Extension: The API shall return E_NOT_OK in this case.
        Note: Does not accept means other values than COMM_SILENT_COMMUNICATION,
        COMM_NO_COMMUNICATION and COMM_FULL_COMMUNICATION.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01014_Det_EthSM_RequestComMode</srcid><srcstatus/><internalId>366</internalId></linkedfrom><linkedfrom><srcid>EthSM_T100_07_RequestComMode_DetInvNetworkMode</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00097</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_OFFLINE to ETHSM_STATE_WAIT_TRCVLINK the
        Ethernet State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and
        transmit the internal state ETHSM_STATE_WAIT_TRCVLINK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_02_00_WaitCtrlModeIndState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03001_WaitCtrlModeInd_To_WaitTrcvLink_SingleNetwork</srcid><srcstatus/><internalId>383</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitCtrlModeIndState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>409</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00026_FunctionCallOrder</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00999</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        These requirements are not applicable to this specification.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00105</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: EthSMEthIfControllerRef
        Parameter Type: Reference
        Parent Containers: EthSMNetwork,
        Description: Reference to EthIfCtrl container where a ETH controller and
        Introduction: transceiver (optional) combination is configured.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/EthIf/EthIfConfigSet/EthIfController
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: EthSMDemEventParameterRefs
        Container Type: Sub-Container
        Parent Containers: EthSMNetwork,
        Description: Container for the references to DemEventParameter elements which shall be invoked
        using the API Dem_SetEventStatus in case the corresponding error occurs. The EventId is taken
        from the referenced DemEventParameter's DemEventId symbolic value. The standardized errors are
        provided in this container and can be extended by vendor-specific error references.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00107</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: ETHSM_E_LINK_DOWN
        Parameter Type: Reference
        Parent Containers: EthSMDemEventParameterRefs,
        Description: Reference to configured DEM event to report bus off errors for this Eth network.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00109</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | EthSM_TrcvLinkStateChg
        Syntax
        void EthSM_TrcvLinkStateChg (uint8 CtrlIdx, EthTrcv_LinkStateType TransceiverLinkState)
        Service ID [hex] | 0x06
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | CtrlIdx | Index of the Ethernet controller within the context of the Ethernet
        Interface
        TransceiverLinkState | Actual transceiver link state of the specific network handle
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | This service is called by the Ethernet Interface to report a transceiver link
        state change.
        Available via | EthSM.h
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00109.ServiceId</srcid><srcstatus/><internalId>229</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00110</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | EthSM_TcpIpModeIndication
        Syntax
        void EthSM_TcpIpModeIndication (uint8 CtrlIdx, TcpIp_StateType TcpIpState)
        Service ID [hex] | 0x08
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | CtrlIdx | EthIf controller index to identify the communication network where
        the TcpIp state is changed
        TcpIpState | Actual TcpIp state of the specific network handle
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | This service is called by the TcpIp to report the actual TcpIp state (e.g. online,
        offline)
        Available via | EthSM_TcpIp.h
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00110.ServiceId</srcid><srcstatus/><internalId>230</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00112</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_TrcvLinkStateChg shall report ETHSM_E_PARAM_CONTROLLER to the DET, if it
        does not accept the CtrlIdx of the function call.
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01006_Det_TrcvLinkStateChg_InvalidCtrlIdx</srcid><srcstatus/><internalId>358</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00114</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function EthSM_TrcvLinkStateChg does not report a DET error, it shall store the
        transceiver link state for the affected network handle and the corresponding network mode
        switch of the state machine shall be initiated in the next main function cycle latest.
      </description>
      <comment>
        Test: Verify that transition does not start before EthSM_MainFunction() is called.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_01_OnHoldState_to_OnlineState_Transition</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest01011_Det_OnHoldToOnline</srcid><srcstatus/><internalId>363</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03011_OnHoldToOnline_SingleNetwork</srcid><srcstatus/><internalId>393</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnHoldState_to_OnlineState_Transition</srcid><srcstatus/><internalId>422</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00197</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00198</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00115</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_TrcvLinkStateChg shall report ETHSM_E_UNINIT to the DET, if the EthSM is not
        initialized yet.
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01002_Det_TrcvLinkStateChg_Uninit</srcid><srcstatus/><internalId>354</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00116</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function EthSM_TcpIpModeIndication gets a CtrlIdx, which is not configured in the
        configuration of the EthSM module, it shall call the function Det_ReportError with ErrorId
        parameter ETHSM_E_PARAM_CONTROLLER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01009_Det_TcpIpModeIndication_InvCtrlIdx</srcid><srcstatus/><internalId>361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00118</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the parameter TcpIpState shall be checked for being
        in the allowed range. In case it is outside of the allowed range, the function
        EthSM_TcpIpModeIndication shall ignore the state indication and report development error
        ETHSM_E_INVALID_TCP_IP_MODE to the DET.
      </description>
      <comment>
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01008_Det_TcpIpModeIndication_InvalidTcpIpState</srcid><srcstatus/><internalId>360</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.EB.SWS_EthSM_00118.TolerateTcpIpStates</srcid><srcstatus/><internalId>31</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00119</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function EthSM_TcpIpModeIndication accepts the function call, it shall store the TcpIp
        state for the affected network handle and the corresponding network mode switch of the state
        machine shall be initiated in the next main function cycle latest.
      </description>
      <comment>
        Test: Verify that transition does not start before EthSM_MainFunction() is called.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_00_OnHoldState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>336</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_20_04_OnHoldState_to_WaitTrcvLinkState_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03010_OnHoldToWaitTrcvLink_SingleNetwork</srcid><srcstatus/><internalId>392</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnHoldState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>421</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00197</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00120</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_TcpIpModeIndication shall report ETHSM_E_UNINIT to the DET, if the EthSM is
        not initialized yet.
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01003_Det_TcpIpModeIndication_Uninit</srcid><srcstatus/><internalId>355</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00127</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_TRCVLINK the state machine shall have a transition to
        ETHSM_STATE_OFFLINE, if the ComM requests COMM_NO_COMMUNICATION for the corresponding network
        handle.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00128</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_OFFLINE shall set the controller
        mode to ETH_MODE_DOWN.
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00130</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_OFFLINE the
        Ethernet State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and
        transmit the internal state ETHSM_STATE_OFFLINE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00132</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_TRCVLINK the state machine shall have a transition to
        ETHSM_STATE_WAIT_ONLINE, if the Ethernet Interface reports ETHTRCV_LINK_STATE_ACTIVE for the
        corresponding network handle.
      </description>
      <comment>
        EthSM shall perform the function calls in following order (figure 9-1):
        1st: TcpIp_RequestComMode()
        2nd: BswM_EthSM_CurrentState()
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00133</srcid><srcstatus/><internalId>149</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00134</srcid><srcstatus/><internalId>150</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00133</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_WAIT_ONLINE shall request the
        TcpIp state TCPIP_STATE_ONLINE from the TcpIp module.
      </description>
      <comment>
        - Call order: 1st call after EthSM_TrcvLinkStateChg(ETHRTCV_LINK_STATE_AKTIVE)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_05_00_WaitTrcvLinkState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>318</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03002_WaitTrcvLinkToWaitOnline_SingleNetwork</srcid><srcstatus/><internalId>384</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitTrcvLinkState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>410</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00132</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00134</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_WAIT_ONLINE the
        Ethernet State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and
        transmit the internal state ETHSM_STATE_WAIT_ONLINE.
      </description>
      <comment>
        - Call order: 2nd call after EthSM_TrcvLinkStateChg(ETHRTCV_LINK_STATE_AKTIVE)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_05_00_WaitTrcvLinkState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>318</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03002_WaitTrcvLinkToWaitOnline_SingleNetwork</srcid><srcstatus/><internalId>384</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitTrcvLinkState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>410</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00132</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00136</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_ONLINE the state machine shall have a transition to
        ETHSM_STATE_WAIT_TRCVLINK, if the Ethernet interface reports ETHTRCV_LINK_STATE_DOWN for the
        corresponding network handle.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_10_01_WaitOnlineState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03004_WaitOnlineToWaitTrcvLink_SingleNetwork</srcid><srcstatus/><internalId>386</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitOnlineState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>414</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00137</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_TRCVLINK shall request the
        TcpIp state TCPIP_STATE_OFFLINE from the TcpIp module.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_10_01_WaitOnlineState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03004_WaitOnlineToWaitTrcvLink_SingleNetwork</srcid><srcstatus/><internalId>386</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitOnlineState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>414</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00138</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_TRCVLINK the
        Ethernet State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and
        transmit the internal state ETHSM_STATE_WAIT_TRCVLINK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_10_01_WaitOnlineState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03004_WaitOnlineToWaitTrcvLink_SingleNetwork</srcid><srcstatus/><internalId>386</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitOnlineState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>414</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00140</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_ONLINE the state machine shall have a transition to
        ETHSM_STATE_OFFLINE, if the ComM requests COMM_NO_COMMUNICATION for the corresponding network
        handle.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest03006_WaitOnlineToWaitCtrlMindDown_SingleNetwork</srcid><srcstatus/><internalId>388</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00141</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_OFFLINE sets the controller mode to
        ETH_MODE_DOWN.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00143</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_OFFLINE shall request the TcpIp
        state TCPIP_STATE_OFFLINE from the TcpIp module.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00144</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_OFFLINE the
        Ethernet State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and
        transmit the internal state ETHSM_STATE_OFFLINE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00146</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_ONLINE the state machine shall have a transition to
        ETHSM_STATE_ONLINE, if the TcpIp modul reports TCPIP_STATE_ONLINE for the corresponding network
        handle.
      </description>
      <comment>
        EthSM shall perform the function calls in following order (figure 9-1):
        1st: BswM_EthSM_CurrentState()
        2nd: ComM_BusSM_ModeIndication()
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00148</srcid><srcstatus/><internalId>159</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00150</srcid><srcstatus/><internalId>160</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00148</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_ONLINE the Ethernet
        State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and transmit
        the internal state ETHSM_STATE_ONLINE.
      </description>
      <comment>
        - Call order: 1st call after EthSM_TcpIpModeIndication(TCPIP_STATE_ONLINE)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_10_00_WaitOnlineState_to_OnlineState_Transition</srcid><srcstatus/><internalId>324</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_10_03_WaitOnlineState_to_OnlineState_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>327</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03005_WaitOnlineToOnline_SingleNetwork</srcid><srcstatus/><internalId>387</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitOnlineState_to_OnlineState_Transition</srcid><srcstatus/><internalId>413</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00150</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_ONLINE the Ethernet
        State Manager shall set the main state to ETHSM_FULL_COMMUNICATION and call the callback
        function ComM_BusSM_ModeIndication of the ComM with communication mode COMM_FULL_COMMUNICATION.
      </description>
      <comment>
        - Call order: 2nd call after EthSM_TcpIpModeIndication(TCPIP_STATE_ONLINE)
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_10_00_WaitOnlineState_to_OnlineState_Transition</srcid><srcstatus/><internalId>324</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03005_WaitOnlineToOnline_SingleNetwork</srcid><srcstatus/><internalId>387</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitOnlineState_to_OnlineState_Transition</srcid><srcstatus/><internalId>413</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00151</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_ONLINE the state machine shall have a transition to
        ETHSM_STATE_WAIT_ONLINE, if the TcpIp modul reports TCPIP_STATE_OFFLINE for the corresponding
        network handle.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_00_OnlineState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>329</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_15_05_OnlineState_to_WaitOnlineState_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>416</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00152</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE the Ethernet
        State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and transmit
        the internal state ETHSM_STATE_WAIT_ONLINE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_00_OnlineState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>329</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_15_05_OnlineState_to_WaitOnlineState_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03008_OnlineToWaitOnline_SingleNetwork</srcid><srcstatus/><internalId>390</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>416</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00154</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE the Ethernet
        State Manager shall set the main state to ETHSM_NO_COMMUNICATION and call the callback function
        ComM_BusSM_ModeIndication of the ComM with communication mode COMM_NO_COMMUNICATION.
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_00_OnlineState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>329</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03008_OnlineToWaitOnline_SingleNetwork</srcid><srcstatus/><internalId>390</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>416</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00155</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_ONLINE the state machine shall have a transition to
        ETHSM_STATE_WAIT_OFFLINE, if the ComM requests COMM_NO_COMMUNICATION for the corresponding
        network handle.
      </description>
      <comment>
        EthSM shall perform the function calls in following order (figure 9-2):
        1st: TcpIp_RequestComMode()
        2nd: BswM_EthSM_CurrentState()
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00157</srcid><srcstatus/><internalId>165</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00158</srcid><srcstatus/><internalId>166</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00157</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After entering the state ETHSM_STATE_WAIT_OFFLINE, the API TcpIp_RequestComMode shall be called
        with TCPIP_STATE_OFFLINE.
      </description>
      <comment>
        - Call order: 1st call after EthSM_RequestComMode(COMM_NO_COMMUNICATION)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_02_OnlineState_to_WaitOfflineState_Transition</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03009_OnlineToWaitOffline_SingleNetwork</srcid><srcstatus/><internalId>391</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_WaitOfflineState_Transition</srcid><srcstatus/><internalId>418</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00158</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_OFFLINE the
        Ethernet State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and
        transmit the internal state ETHSM_STATE_WAIT_OFFLINE.
      </description>
      <comment>
        - Call order: 2nd call after EthSM_RequestComMode(COMM_NO_COMMUNICATION)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_02_OnlineState_to_WaitOfflineState_Transition</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03009_OnlineToWaitOffline_SingleNetwork</srcid><srcstatus/><internalId>391</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_WaitOfflineState_Transition</srcid><srcstatus/><internalId>418</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00160</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_OFFLINE the state machine shall have a transition to
        ETHSM_STATE_OFFLINE, if the TcpIp modul reports TCPIP_STATE_OFFLINE for the corresponding
        network handle.
      </description>
      <comment>
        EthSM shall perform the function calls in following order:
        1st: EthIf_SetControllerMode()
        2nd: EthIf_SetTransceiverMode()
        3rd: BswM_EthSM_CurrentState()
        4th: ComM_BusSM_ModeIndication()
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>dev.EthSM.NewModeStatesForWaitLinkDown</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00161</srcid><srcstatus/><internalId>168</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00163</srcid><srcstatus/><internalId>169</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00165</srcid><srcstatus/><internalId>170</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00161</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_WAIT_OFFLINE to ETHSM_STATE_OFFLINE shall set the controller
        mode to ETH_MODE_DOWN.
      </description>
      <comment>
        - Call order: 1st call after EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE)
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>dev.EthSM.NewModeStatesForWaitLinkDown</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00163</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_WAIT_OFFLINE to ETHSM_STATE_OFFLINE the
        Ethernet State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and
        transmit the internal state ETHSM_STATE_OFFLINE.
      </description>
      <comment>
        - Call order: 3rd call after EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>dev.EthSM.NewModeStatesForWaitLinkDown</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00165</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_WAIT_OFFLINE to ETHSM_STATE_OFFLINE the
        Ethernet State Manager shall set the main state to ETHSM_NO_COMMUNICATION and call the callback
        function ComM_BusSM_ModeIndication of the ComM with communication mode COMM_NO_COMMUNICATION.
      </description>
      <comment>
        - Call order: 4th call after EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE)
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>dev.EthSM.NewModeStatesForWaitLinkDown</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00166</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_ONLINE the state machine shall have a transition to ETHSM_STATE_ONHOLD,
        if the Ethernet Interface reports ETHTRCV_LINK_STATE_DOWN for the corresponding network handle.
      </description>
      <comment>
        EthSM shall perform the function calls in following order:
        1st: TcpIp_RequestComMode()
        2nd: BswM_EthSM_CurrentState()
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00167</srcid><srcstatus/><internalId>172</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00168</srcid><srcstatus/><internalId>173</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00167</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD shall request the TcpIp state
        TCPIP_STATE_ONHOLD from the TcpIp module.
      </description>
      <comment>
        - Call order: 1st call after EthSM_TrcvLinkState(ETHTRCV_LINK_STATE_DOWN)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_01_OnlineState_to_OnHoldState_Transition</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03007_OnlineToOnHold_SingleNetwork</srcid><srcstatus/><internalId>389</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_OnHoldState_Transition</srcid><srcstatus/><internalId>417</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00168</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD the Ethernet
        State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and transmit
        the internal state ETHSM_STATE_ONHOLD.
      </description>
      <comment>
        - Call order: 2nd call after EthSM_TrcvLinkState(ETHTRCV_LINK_STATE_DOWN)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_01_OnlineState_to_OnHoldState_Transition</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03007_OnlineToOnHold_SingleNetwork</srcid><srcstatus/><internalId>389</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_OnHoldState_Transition</srcid><srcstatus/><internalId>417</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00170</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_ONHOLD the state machine shall have a transition to ETHSM_STATE_ONLINE,
        if the Ethernet interface reports ETHTRCV_LINK_STATE_ACTIVE for the corresponding network
        handle.
      </description>
      <comment>
        EthSM shall perform the function calls in following order:
        1st: TcpIp_RequestComMode()
        2nd: BswM_EthSM_CurrentState()
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00171</srcid><srcstatus/><internalId>175</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00172</srcid><srcstatus/><internalId>176</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00171</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE shall request the TcpIp state
        TCPIP_STATE_ONLINE from the TcpIp module.
      </description>
      <comment>
        - Call order: 1st call after EthSM_TrcvLinkState(ETHTRCV_LINK_STATE_ACTIVE)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_01_OnHoldState_to_OnlineState_Transition</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03011_OnHoldToOnline_SingleNetwork</srcid><srcstatus/><internalId>393</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnHoldState_to_OnlineState_Transition</srcid><srcstatus/><internalId>422</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00172</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE the Ethernet
        State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and transmit
        the internal state ETHSM_STATE_ONLINE.
      </description>
      <comment>
        - Call order: 2nd call after EthSM_TrcvLinkState(ETHTRCV_LINK_STATE_ACTIVE)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_01_OnHoldState_to_OnlineState_Transition</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03011_OnHoldToOnline_SingleNetwork</srcid><srcstatus/><internalId>393</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnHoldState_to_OnlineState_Transition</srcid><srcstatus/><internalId>422</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00174</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_ONHOLD the state machine shall have a transition to
        ETHSM_STATE_WAIT_TRCVLINK, if the TcpIp modul reports TCPIP_STATE_OFFLINE for the corresponding
        network handle.
      </description>
      <comment>
        EthSM shall perform the function calls in following order:
        1st: BswM_EthSM_CurrentState()
        2nd: ComM_BusSM_ModeIndication()
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00175</srcid><srcstatus/><internalId>178</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00177</srcid><srcstatus/><internalId>179</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00175</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_WAIT_TRCVLINK the
        Ethernet State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and
        transmit the internal state ETHSM_STATE_WAIT_TRCVLINK.
      </description>
      <comment>
        - Call order: 1st call after EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_00_OnHoldState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>336</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_20_04_OnHoldState_to_WaitTrcvLinkState_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03010_OnHoldToWaitTrcvLink_SingleNetwork</srcid><srcstatus/><internalId>392</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnHoldState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>421</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00177</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_ONHOLD to E ETHSM_STATE_WAIT_TRCVLINK the
        Ethernet State Manager shall set the main state to ETHSM_NO_COMMUNICATION and call the callback
        function ComM_BusSM_ModeIndication of the ComM with communication mode COMM_NO_COMMUNICATION.
      </description>
      <comment>
        - Call order: 2nd call after EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE)
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_00_OnHoldState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>336</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03010_OnHoldToWaitTrcvLink_SingleNetwork</srcid><srcstatus/><internalId>392</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnHoldState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>421</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00178</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_ONHOLD the state machine shall have a transition to
        ETHSM_STATE_OFFLINE, if the ComM requests COMM_NO_COMMUNICATION for the corresponding network
        handle.
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>dev.EthSM.NewModeStatesForWaitLinkDown</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00179</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_OFFLINE shall set the controller mode to
        ETH_MODE_DOWN.
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>dev.EthSM.NewModeStatesForWaitLinkDown</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00181</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_OFFLINE shall request the TcpIp state
        TCPIP_STATE_OFFLINE from the TcpIp module.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>dev.EthSM.NewModeStatesForWaitLinkDown</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00182</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_OFFLINE the Ethernet
        State Manager shall call the callback function BswM_EthSM_CurrentState of the BswM and transmit
        the internal state ETHSM_STATE_OFFLINE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>dev.EthSM.NewModeStatesForWaitLinkDown</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00184</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        After the successful transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_OFFLINE the Ethernet
        State Manager shall set the main state to ETHSM_NO_COMMUNICATION and call the callback function
        ComM_BusSM_ModeIndication of the ComM with communication mode COMM_NO_COMMUNICATION.
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.StateTransitions</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>dev.EthSM.NewModeStatesForWaitLinkDown</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00188</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the optional configuration parameter ETHSM_E_LINK_DOWN exists, ETHSM_E_LINK_DOWN with
        EventStatus DEM_EVENT_STATUS_FAILED shall be reported to the DEM module when switching from
        ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD.
      </description>
      <comment>
        Precondition: Configuration parameter EthSMDemCtrlTestResultReportToDem is set to Dem.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.DemEventReporting</srcid><srcstatus/><internalId>260</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.EB.SWS_EthSM_00188_NoDemRefExist</srcid><srcstatus/><internalId>40</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.SWS_EthSM_00188_ReportToDem</srcid><srcstatus/><internalId>42</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00190</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | EthSM_CtrlModeIndication
        Syntax
        void EthSM_CtrlModeIndication (uint8 CtrlIdx, Eth_ModeType CtrlMode)
        Service ID [hex] | 0x09
        Sync/Async | Synchronous
        Reentrancy | Reentrant (only for different Ethernet controllers)
        Parameters (in) | CtrlIdx | Ethernet Interface Controller whose mode has changed
        CtrlMode | Notified Ethernet Interface Controller mode
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Called when mode has been read out. Either triggered by previous
        EthIf_GetControllerMode or by EthIf_SetControllerMode call. Can directly be called within the
        trigger functions.
        Available via | EthSM.h
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact. The requirement was already interpreted for controlling of EthIf controllers.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00190.ServiceId</srcid><srcstatus/><internalId>231</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00191</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function EthSM_CtrlModeIndication gets a CtrlIdx, which is not configured in the
        configuration of the EthSM module, it shall call the function Det_ReportError with ErrorId
        parameter ETHSM_E_PARAM_CONTROLLER.
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
        Extension: The API shall return E_NOT_OK in this case.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01007_Det_CtrlModeIndication_InvalidCtrlIdx</srcid><srcstatus/><internalId>359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00192</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the EthSM module is not initialized, when the function EthSM_CtrlModeIndication is called,
        then the function EthSM_CtrlModeIndication shall call the function Det_ReportError with ErrorId
        parameter ETHSM_E_UNINIT.
      </description>
      <comment>
        This is only valid if EthSMDevErrorDetect is enabled.
        Extension: The API shall return E_NOT_OK in this case.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest01004_Det_CtrlModeIndication_Uninit</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00196</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the optional configuration parameter ETHSM_E_LINK_DOWN exists, ETHSM_E_LINK_DOWN with
        EventStatus DEM_EVENT_STATUS_PASSED shall be reported to the DEM module when switching from
        ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE.
      </description>
      <comment>
        Precondition: Configuration parameter EthSMDemCtrlTestResultReportToDem is set to Dem.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.DemEventReporting</srcid><srcstatus/><internalId>260</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.EB.SWS_EthSM_00196_NoDemRefExist</srcid><srcstatus/><internalId>41</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.SWS_EthSM_00196_ReportToDem</srcid><srcstatus/><internalId>44</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00197</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The main function of the EthSM module shall operate the effects of the EthSM state machine,
        which the EthSM module shall implement for each configured network.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00053</srcid><srcstatus/><internalId>115</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00114</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00119</srcid><srcstatus/><internalId>143</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00198</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The EthSM shall monitor the requested and current state of the Ethernet Interface Controller.
        If the EthSM detects a mismatch, it shall bring the hardware back to the corresponding state. (
        i.e. FullCOM requires the state ETH_MODE_ACTIVE; NoCom requires ETH_MODE_DOWN)
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact. The requirement was already interpreted for controlling of EthIf controllers.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00114</srcid><srcstatus/><internalId>139</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00199</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function EthSM_RequestComMode shall accept SilentCom request from ComM and will return E_OK.
        No error shall be reported to ComM in this case, though SilentCom is not available according to
        SWS_EthSM_00203 and SWS_EthSM_00038
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact. Reference to new requirement does not change the behaviour.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_T100_08_RequestComMode_SilentMode</srcid><srcstatus/><internalId>434</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_91001</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Module | Header File | Imported Type
        ComM | Rte_ComM_Type.h | ComM_ModeType
        ComStack_Types | ComStack_Types.h | NetworkHandleType
        Dem | Rte_Dem_Type.h | Dem_EventIdType
        Rte_Dem_Type.h | Dem_EventStatusType
        Eth | Eth_GeneralTypes.h | Eth_ModeType
        EthTrcv | Eth_GeneralTypes.h | EthTrcv_LinkStateType
        Std | Std_Types.h | Std_ReturnType
        Std_Types.h | Std_VersionInfoType
        TcpIp | TcpIp.h | TcpIp_StateType
      </description>
      <comment>
        This requirement is informational only.
        Rational:
        It defines which header files provide which type. External types are only imported if
        required by any interface.The presence of a type is automatically verified via interface
        test.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_91002</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        API Function | Header File | Description
        BswM_EthSM_CurrentState | BswM_EthSM.h | Function called by EthSM to indicate its current state.
        ComM_BusSM_ModeIndication | ComM.h | Indication of the actual bus mode by the corresponding Bus
        State Manager. ComM shall propagate the indicated state to the users with means of the RTE and
        BswM.
        Dem_SetEventStatus | Dem.h | Called by SW-Cs or BSW modules to report monitor status
        information to the Dem. BSW modules calling Dem_SetEventStatus can safely ignore the return
        value. This API will be available only if ({Dem/DemConfigSet/DemEventParameter/
        DemEventReportingType} == STANDARD_REPORTING)
        EthIf_SetControllerMode | EthIf.h | Enables / disables the indexed controller
        TcpIp_RequestComMode | TcpIp.h | By this API service the TCP/IP stack is requested to change
        the TcpIp state of the communication network identified by EthIf controller index.
      </description>
      <comment>
        This requirement is informational only.
        Rationale:
        This general requirement is only a summary of all the interfaces.
        AUTOSAR R20-11 comment: Requirement was changed without functional impact. Dem reporting is a configuration option and up to the integrator if configured or not.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_91003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        API Function | Header File | Description
        ComM_BusSM_BusSleepMode | ComM.h | Notification of the corresponding Bus State Manager that the
        actual bus mode is Bus-Sleep. Only applicable for ComM channels with ComMNmVariant set to
        SLAVE_ACTIVE or SLAVE_PASSIVE. E.g. LIN slaves (ComMNMVariant = SLAVE_ACTIVE) or Ethernet
        channels with OA TC10 compliant Ethernet hardware which act as passive communication slave (
        ComMNMVariant = SLAVE_PASSIVE and EthTrcvActAsSlavePassiveEnabled set to TRUE)
        Det_ReportError | Det.h | Service to report development errors.
        EthIf_GetControllerMode | EthIf.h | Obtains the state of the indexed controller
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00191</srcid><srcstatus/><internalId>187</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00200</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type of error | Related error code | Error value
        Invalid communication mode requested | ETHSM_E_INVALID_NETWORK_MODEEthSM.
        ETHSM_E_INVALID_NETWORK_MODE | 0x01
        EthSM module was not initialized | ETHSM_E_UNINITEthSM.ETHSM_E_UNINIT | 0x02
        Invalid pointer in parameter list | ETHSM_E_PARAM_POINTEREthSM.ETHSM_E_PARAM_POINTER | 0x03
        Invalid parameter in parameter list | ETHSM_E_INVALID_NETWORK_HANDLEEthSM.
        ETHSM_E_INVALID_NETWORK_HANDLE | 0x04
        Invalid TcpIp state | ETHSM_E_INVALID_TCP_IP_MODEEthSM.ETHSM_E_INVALID_TCP_IP_MODE | 0x05
        Invalid parameter in parameter list | ETHSM_E_PARAM_CONTROLLEREthSM.ETHSM_E_PARAM_CONTROLLER |
        0x07
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.ValueCheck.ETHSM_E_INVALID_NETWORK_MODE</srcid><srcstatus/><internalId>212</internalId></linkedfrom><linkedfrom><srcid>EthSM.ValueCheck.ETHSM_E_UNINIT</srcid><srcstatus/><internalId>213</internalId></linkedfrom><linkedfrom><srcid>EthSM.ValueCheck.ETHSM_E_PARAM_POINTER</srcid><srcstatus/><internalId>214</internalId></linkedfrom><linkedfrom><srcid>EthSM.ValueCheck.ETHSM_E_INVALID_NETWORK_HANDLE</srcid><srcstatus/><internalId>215</internalId></linkedfrom><linkedfrom><srcid>EthSM.ValueCheck.ETHSM_E_INVALID_TcpIpMode</srcid><srcstatus/><internalId>216</internalId></linkedfrom><linkedfrom><srcid>EthSM.ValueCheck.ETHSM_E_PARAM_CONTROLLER</srcid><srcstatus/><internalId>217</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00202</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Error Name: | ETHSM_E_LINK_DOWN
        Short Description: | Link down detection
        Long Description: | It shall be reported when the transceiver switches to "down" while
        communication has already been established and is requested because of communication request
        Recommended DTC: | N/A
        Detection Criteria: | FAIL | During transition from ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD,
        which is triggered by EthSM_TrcvLinkStateChg(ETHTRCV_LINK_STATE_DOWN)
        PASS | During transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE, which is triggered by
        EthSM_TrcvLinkStateChg(ETHTRCV_LINK_STATE_ACTIVE)
        Secondary Parameters: | None
        Time Required: | PRE_FAIL: Immediately PASS: Configuration dependent
        Monitor Frequency | Continuous
        MIL illumniation: | N/A
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00188</srcid><srcstatus/><internalId>185</internalId></linkedfrom><linkedfrom><srcid>EthSM.SWS_EthSM_00196</srcid><srcstatus/><internalId>189</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00109</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: EthSMWakeupSleepOnDatalineEnabled
        Parameter Type: Boolean
        Parent Containers: EthSMNetwork,
        Description: Specifies if an active communication request shall be forwarded to the lower layer
        to trigger a wake-up on the Ethernet network, e.g. trigger a wake-up on dataline if OA TC10
        compliant Ethernet hardware is used. Tags: atp.Status=draft
        Introduction: If the parameter is set to TRUE and EthSM in called with
        COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST, then EthSM call the corresponding EthIfController
        everytime with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST to trigger an wake-up request in the lower
        layer.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ConTest04000_Wakeup_Not_Configured</srcid><srcstatus/><internalId>400</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00203</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The EthSM statemachine shall consist of 2 main states: ETHSM_FULL_COMMUNICATION and
        ETHSM_NO_COMMUNICATION.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00038</srcid><srcstatus/><internalId>108</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00204</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The ETHSM_FULL_COMMUNICATION shall have 3 sub-states: ETHSM_STATE_OFFLINE,
        ETHSM_STATE_WAIT_TRCVLINK and ETHSM_STATE_WAIT_ONLINE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.States</srcid><srcstatus/><internalId>262</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00205</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The ETHSM_NO_COMMUNICATION shall have 3 sub-states: ETHSM_STATE_ONLINE, ETHSM_STATE_ONHOLD and
        ETHSM_STATE_WAIT_OFFLINE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.EthSM.States</srcid><srcstatus/><internalId>262</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00206</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is set to TRUE and the EthSM statmachine is in state
        ETHSM_STATE_WAIT_TRCVLINK, and ComM requests now COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST,
        then EthSM shall request the corresponding EthIfCtrl with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_05_02_WaitTrcvLinkState_to_WaitTrcvLinkState_WKUP</srcid><srcstatus/><internalId>320</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00207</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If EthSMWakeupSleepOnDatalineEnabled is set to TRUE and EthSM is in state
        ETHSM_STATE_WAIT_ONLINE and ComM requests now COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST, then
        EthSM shall request the corresponding EthIfCtrl with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_10_04_WaitOnlineState_to_WaitOnlineState_WKUP</srcid><srcstatus/><internalId>328</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00208</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the EthSM statmachine is in state ETHSM_STATE_ONLINE, EthSMWakeupSleepOnDatalineEnabled
        is set to TRUE and ComM requests COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST, then the controller
        mode of the corresponding EthIfCtrl shall be requested with
        ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_06_OnlineState_to_OnlineState_WKUP</srcid><srcstatus/><internalId>335</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00212</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the EthSM statmachine is in state ETHSM_STATE_ONHOLD, EthSMWakeupSleepOnDatalineEnabled is
        set to TRUE and ComM request COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST, then the controller
        mode of the corresponding EthIfCtrl shall be requested with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_20_05_OnHoldState_to_OnHoldState_WKUP</srcid><srcstatus/><internalId>341</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00213</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function EthSM_SleepIndication gets a CtrlIdx, which is not configured in the
        configuration of the EthSM module, it shall call the function Det_ReportError with ErrorId
        parameter ETHSM_E_PARAM_CONTROLLER, if development error reporting is enabled
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_TC10_05_SleepIndication_NotConfigured</srcid><srcstatus/><internalId>405</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00214</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the EthSM module is not initialized, when the function EthSM_SleepIndication is called, then
        the function EthSM_SleepIndication shall call the function Det_ReportError with ErrorId
        parameter ETHSM_E_UNINIT, if development error reporting is enabled
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_TC10_01_SleepIndication_Uninit</srcid><srcstatus/><internalId>401</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00215</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If EthSM_SleepIndication is called, EthSM shall forward this call to ComM by calling
        ComM_BusSM_BusSleepMode with the corresponding communication channel.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_TC10_02_OnlineState_BusSleepMode</srcid><srcstatus/><internalId>402</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_91004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | EthSM_SleepIndication (draft)
        Syntax
        void EthSM_SleepIndication (uint8 Ctrl_Idx)
        Service ID [hex] | 0xa
        Sync/Async | Asynchronous
        Reentrancy | Non Reentrant
        Parameters (in) | Ctrl_Idx | Ethernet Interface Controller where the corresponding EthTrcv
        detect a sleep indication on the network.Sleep.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | This API is called by the EthIf and indicate that a sleep indication was detected
        on the network. This API is only called if the ECU is acting as a passive communication slave
        on the corresponding communication channel (the referenced EthTrcv of the affected
        EthIfTransceiver has set EthTrcvActAsSlavePassiveEnabled to TRUE). This could be used e.g. for
        Ethernet hardware which is compliant to the OA TC10. In this case the Ethernet hardware detect
        an Sleep.Indication which was triggered by a Sleep.Request of the connected link partner. Tags:
        atp.Status=draft
        Available via | EthSM.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_TC10_02_OnlineState_BusSleepMode</srcid><srcstatus/><internalId>402</internalId></linkedfrom><linkedfrom><srcid>EthSM_TC10_03_OnlineState_BusSleepMode_Multicore</srcid><srcstatus/><internalId>403</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_91004.ServiceId</srcid><srcstatus/><internalId>237</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_91004.Sleep</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function EthSM_SleepIndication gets a CtrlIdx and the referenced EthTrcv of the affected
        EthIfTransceiver has set EthTrcvActAsSlavePassiveEnabled to FALSE, it shall call the function
        Det_ReportError with ErrorId parameter ETHSM_E_PARAM_CONTROLLER, if development error reporting
        is enabled
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_TC10_04_SleepIndication_NoSleep</srcid><srcstatus/><internalId>404</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>EthSM.SWS_EthSM_ModuleId</id>
      <status>approved</status>
      <source>AUTOSAR_TR_BSWModuleList.pdf, V1.7.0</source>
      <version>1</version>
      <description>
        The EthSM shall use the module ID 143.
      </description>
      <comment>
        Note: Since the SWS does not provide the module ID this requirement was extracted from the
        module list document.
      </comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>

    <specobject>
      <id>EthSM.ValueCheck.ETHSM_E_INVALID_NETWORK_MODE</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        ETHSM_E_INVALID_NETWORK_MODE shall have the value 0x01.
      </description>
      <comment>
        See SWS chapter 7.8.1
      </comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>

    <specobject>
      <id>EthSM.ValueCheck.ETHSM_E_UNINIT</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        ETHSM_E_UNINIT shall have the value 0x02.
      </description>
      <comment>
        See SWS chapter 7.8.1
      </comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>

    <specobject>
      <id>EthSM.ValueCheck.ETHSM_E_PARAM_POINTER</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        ETHSM_E_PARAM_POINTER shall have the value 0x03.
      </description>
      <comment>
        See SWS chapter 7.8.1
      </comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>

    <specobject>
      <id>EthSM.ValueCheck.ETHSM_E_INVALID_NETWORK_HANDLE</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        ETHSM_E_INVALID_NETWORK_HANDLE shall have the value 0x04.
      </description>
      <comment>
        See SWS chapter 7.8.1
      </comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>

    <specobject>
      <id>EthSM.ValueCheck.ETHSM_E_INVALID_TcpIpMode</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        ETHSM_E_INVALID_TcpIpMode shall have the value 0x05.
      </description>
      <comment>
        See SWS chapter 7.8.2
      </comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>

    <specobject>
      <id>EthSM.ValueCheck.ETHSM_E_PARAM_CONTROLLER</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        ETHSM_E_PARAM_CONTROLLER shall have the value 0x07.
      </description>
      <comment>
        See SWS chapter 7.8.1
      </comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00043.ServiceId</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The macro ETHSM_INIT_SVCID shall have the value:
        Service ID[hex]: 0x07
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00046.ServiceId</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The macro ETHSM_GETVERSIONINFO_SVCID shall have the value:
        Service ID[hex]: 0x02
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00046.VersionInfo</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The API EthSM_GetVersionInfo() shall return the version information.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_T101_02_GetVersionInfo_VersionTest_Initialized</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00050.ServiceId</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The macro ETHSM_REQUESTCOMMODE_SVCID shall have the value:
        Service ID[hex]: 0x05
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00051.ValidNetworkHandle</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The function EthSM_RequestComMode checks the network handle of the request. It
        only accepts the request, if the network handle of the request is a handle contained in
        the EthSM configuration (configuration parameter EthSMNetworkHandle). In this case
        the return value is set to E_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00053.RetValue</srcid><srcstatus/><internalId>224</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00051.InvalidNetworkHandle</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The function EthSM_RequestComMode checks the network handle of the request. It
        only accepts the request, if the network handle of the request is a handle contained in
        the EthSM configuration (configuration parameter EthSMNetworkHandle).
        If it is not contained in the configuration, the function denies the request. In this case
        the return value is set to E_NOT_OK.()
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_T100_05_RequestComMode_DetInvNetwork_NoCom</srcid><srcstatus/><internalId>431</internalId></linkedfrom><linkedfrom><srcid>EthSM_T100_06_RequestComMode_DetInvNetwork_FullCom</srcid><srcstatus/><internalId>432</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00053.RetValue</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If EthSM_RequestComMode() accepts the function call it shall return E_OK.
      </description>
      <furtherinfo>
        WRN.tsc.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_00_00_OfflineState_to_WaitCtrlModeIndState_Transition</srcid><srcstatus/><internalId>313</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_05_01_WaitTrcvLinkState_to_StateWaitCtrlMIndDown_Transition</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_15_02_OnlineState_to_WaitOfflineState_Transition</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_20_02_OnHoldState_to_WaitLinkDownState_Transition_TrcvOk</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03000_OfflineToWaitCtrlModeInd_SingleNetwork</srcid><srcstatus/><internalId>382</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03003_WaitTrcvLinkToWaitCtrlMIndDown_SingleNetwork</srcid><srcstatus/><internalId>385</internalId></linkedfrom><linkedfrom><srcid>EthSM_ConTest03009_OnlineToWaitOffline_SingleNetwork</srcid><srcstatus/><internalId>391</internalId></linkedfrom><linkedfrom><srcid>EthSM_OfflineState_to_WaitCtrlModeIndState_Transition</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitTrcvLinkState_to_StateWaitCtrlMIndDown_Transition</srcid><srcstatus/><internalId>411</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_WaitOfflineState_Transition</srcid><srcstatus/><internalId>418</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnHoldState_to_WaitDevAuthOfflineState_Transition</srcid><srcstatus/><internalId>423</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00051.ValidNetworkHandle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00055.ServiceId</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The macro ETHSM_GETCURRENTCOMMODE_SVCID shall have the value:
        Service ID[hex]: 0x04
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00057.ValidNetworkHandle</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The function EthSM_GetCurrentComMode checks the network handle of the service
        request. It only accepts the service, if the network handle of the request is a handle
        contained in the EthSM configuration (configuration parameter EthSMNetworkHandle).
        In this case the return value is set to E_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.SWS_EthSM_00059.RetValue</srcid><srcstatus/><internalId>228</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00057.InvalidNetworkHandle</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The function EthSM_GetCurrentComMode checks the network handle of the service
        request. It only accepts the service, if the network handle of the request is a handle
        contained in the EthSM configuration (configuration parameter EthSMNetworkHandle).
        If it is not contained in the configuration, the function denies the request. In this case
        the return value is set to E_NOT_OK.()
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_T102_01_GetCurrentComMode_DetInvNetwork</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00059.RetValue</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If EthSM_GetCurrentComMode() accepts the function call it shall return E_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_03_OnlineState_to_WaitOnlineState_ModeCheck</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_WaitOnlineState_ModeCheck</srcid><srcstatus/><internalId>419</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00057.ValidNetworkHandle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00109.ServiceId</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The macro ETHSM_TRCVLINKSTATECHG_SVCID shall have the value:
        Service ID[hex]: 0x06
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00110.ServiceId</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The macro ETHSM_TCPIPMODEINDICATION_SVCID shall have the value:
        Service ID[hex]: 0x08
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00190.ServiceId</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The macro ETHSM_CTRLMODEINDICATION_SVCID shall have the value:
        Service ID[hex]: 0x09
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00190</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00035.ServiceId</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The macro ETHSM_MAINFUNCTION_SVCID shall have the value:
        Service ID[hex]: 0x01
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00065_Conf.Enabled</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If EthSMDevErrorDetect is enabled the macro ETHSM_DEV_ERROR_DETECT shall have the value
        STD_ON.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_01</srcid><srcstatus/><internalId>296</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00065_Conf.Disabled</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If EthSMDevErrorDetect is disabled the macro ETHSM_DEV_ERROR_DETECT shall have the value
        STD_OFF.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_02</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00092_Conf.EnableAPI</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If configuration parameter EthSMVersionInfoApi is enabled, the API EthSM_GetVersionInfo()
        shall be available.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_01</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_02</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00092</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>

    <specobject>
      <id>EthSM.ECUC_EthSM_00092_Conf.DisableAPI</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If configuration parameter EthSMVersionInfoApi is disabled, the API EthSM_GetVersionInfo()
        shall 'not' be available.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_01</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>TS_EthSM_CompileTest_02</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00092</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_91004.ServiceId</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetStateManager.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The macro ETHSM_SLEEPINDICATION_SVCID shall have the value:
        Service ID[hex]: 0x0A
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_CompileTest_04</srcid><srcstatus/><internalId>299</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_91004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>EthSM.SWS_EthSM_00218</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R22-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_OFFLINE, if ComM requests
        COMM_NO_COMMUNICATION for the corresponding network handle, EthSM shall
        call the API TcpIp_RequestComMode with TCPIP_STATE_OFFLINE.
      </description>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_25_05_WaitOfflineState_to_WaitOfflineState_Transition_NO_COMM</srcid><srcstatus/><internalId>347</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00220</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R22-11.arxml</source>
      <version>1</version>
      <description>
        During the transition between ETHSM_STATE_ONLINE and
        ETHSM_STATE_WAIT_OFFLINE triggered by EthSM_ComRequestComMode() with
        COMM_NO_COMMUNICATION, the API TcpIp_RequestComMode() shall be called
        with TCPIP_STATE_OFFLINE
      </description>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_15_02_OnlineState_to_WaitOfflineState_Transition</srcid><srcstatus/><internalId>331</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00221</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R22-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_OFFLINE, if ComM requests
        COMM_FULL_COMMUNICATION for the corresponding network handle,
        EthSM shall set the controller mode to ETH_MODE_ACTIVE
        and call the API TcpIp_RequestComMode with TCPIP_STATE_ONLINE.
      </description>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_25_04_WaitOfflineState_to_OnlineState_Transition</srcid><srcstatus/><internalId>346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00222</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R22-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_OFFLINE, if ComM requests
        COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the corresponding network handle,
        EthSM shall set the controller mode to ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST
        and call the API TcpIp_RequestComMode with TCPIP_STATE_ONLINE.
      </description>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_25_02_WaitOfflineState_to_WaitOfflineState_Transition_WKUP</srcid><srcstatus/><internalId>344</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_25_03_WaitOfflineState_to_OnlineState_Transition_WKUP</srcid><srcstatus/><internalId>345</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>

    <specobject>
      <id>EthSM.SWS_EthSM_00223</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthSM_R22-11.arxml</source>
      <version>1</version>
      <description>
        In the state ETHSM_STATE_WAIT_OFFLINE the state machine shall have a
        transition to ETHSM_STATE_ONLINE, if the TcpIp module reports
        TCPIP_STATE_ONLINE for the corresponding network handle.
      </description>
      <comment>
        This is possible if the last ComM request was COMM_FULL_COMMUNICATION or
        COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST.
      </comment>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_25_03_WaitOfflineState_to_OnlineState_Transition_WKUP</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_25_04_WaitOfflineState_to_OnlineState_Transition</srcid><srcstatus/><internalId>346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>EthSM.EB.PBCFGM101</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: EthSM_IsValidConfig
        Syntax: Std_ReturnType EthSM_IsValidConfig( void* ConfigPtr )
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters (in): ConfigPtr, post build configuration manager
        configuration.
        Parameters (inout): None
        Parameters (out): None
        Return value: Returns E_OK if the EthSM configuration is valid otherwise E_NOT_OK. A
        null pointer is interpreted as invalid configuration.
        Description: This function determines if the EthSM configuration is valid. This
        function can be called also before the EthSM is initialized. No error reporting
        is necessary within this function.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_IsValidConfig</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>

    <specobject>
      <id>EthSM.EB.PBCFGM102</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        A configuration is valid
        - if the platform signature in the post build configuration equals the value
          determined by the macro TS_PlatformSigIsValid.
        - if the link time signature in the post build configuration equals the link time
          signature in the link time configuration file.
        - if the compile time signature in the post build configuration equals the value of
          the macro ETHSM_CFG_SIGNATURE.
        - if the compile time signature of Published information in the post build configuration
          equals the value of the macro ETHSM_PUBLIC_INFO_SIGNATURE.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_IsValidConfig</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>

    <specobject>
      <id>EthSM.EB.PBCFGM104</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          CfgSignature.
        - the EthSM_Cfg.h file shall contain the macro
          ETHSM_CFG_SIGNATURE.
        - the MCG shall generate this signature value of compile time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of compile time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_IsValidConfig</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>

    <specobject>
      <id>EthSM.EB.PBCFGM104_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          PublicInfoSignature.
        - the EthSM_Cfg.h file shall contain the macro
          ETHSM_PUBLIC_INFO_SIGNATURE.
        - The MCG shall generate this signature value from the list of parameters of
          configuration class 'PublishedInformation' except 'Release'. The XPath function
          asc:getConfigSignature(nodeset) shall be used to determine the signature out of the
          list of parameters. The list of parameters shall be determined with the function
          asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_IsValidConfig</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>

    <specobject>
      <id>EthSM.EB.PBCFGM105</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the link time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          LcfgSignature.
        - the link time configuration shall contain the uint32 value
          EthSM_LcfgSignature.
        - the MCG shall generate this signature value of link time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of link time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_IsValidConfig</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>

    <specobject>
      <id>EthSM.EB.PBCFGM106</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For Platform verification:
        - the EthSM post build configuration structure shall contain the value
          uint32 PlatformSignature. This uint32 must be the first value of the post build
          configuration structure to guarantee the correct access not disturbed by any padding
          bytes.
        - the MCG shall generate this signature for the selected target. The generator shall
          use the x-path function asc:getPlatformSignature() to determine this value.
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
        https://issue.ebgroup.elektrobit.com/browse/ASCBASE-1485
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_IsValidConfig</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>

    <specobject>
      <id>EthSM.EB.PBCFGM107</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The PbcfgM support shall be enabled or disabled via the macro
        ETHSM_PBCFGM_SUPPORT_ENABLED defined in the file
        EthSM_Cfg.h.
        If the PbcfgM configuration references the EthSM configuration
        the macro is set to STD_ON otherwise, or if no PbcfgM configuration is
        available it is set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_IsValidConfig</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>EthSM_Test_PBcfgM_Off</srcid><srcstatus/><internalId>293</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>

    <specobject>
      <id>EthSM.EB.PBCFGM108</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the EthSM is referenced by the PbcfgM, the parameter regarding the
        relocatable feature, shall not be editable and the MCG shall use the configuration of
        the PbcfgM.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_PBcfgM_Off</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>EthSM_Test_PBcfgM_On</srcid><srcstatus/><internalId>294</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/EthSM_EBParameters.xdm.m4_141</srcid><srcstatus/><internalId>288</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>

    <specobject>
      <id>EthSM.EB.PBCFGM110</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The EthSM_Init() function must be extended to enable the PbcgfM
        features.
        The initialization function shall obtain the EthSM configuration
        from the PbcfgM if the PbcfgM support is enabled within this EthSM
        and the initialization function is called with a null pointer.
        The validity of the configuration shall be checked by the function
        EthSM_IsValidConfig(). The validity shall be check regardless the PbcfgM
        support is enabled or not.
        If no valid configuration can be obtained the initialization function shall
        return, leaving the EthSM uninitialized.
        In the case error reporting is enabled and no valid configuration can be obtained
        an erroneous parameter shall be indicated.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_VerifyInitWithPcfgM</srcid><srcstatus/><internalId>292</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>

    <specobject>
      <id>EthSM.EB.PostBuild_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The EthSM module shall compile and build an executable even in the absence
        of a post build configuration, i.e. without any post build generated .c and .h files
        available.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_ComTest_NoPBCfg</srcid><srcstatus/><internalId>300</internalId></linkedfrom><linkedfrom><srcid>TS_ETHSM_Gen_00000_OnlyPbCfg</srcid><srcstatus/><internalId>441</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>

    <specobject>
      <id>EthSM.EB.PbcfgM_General_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The EthSM shall provide the following macros in the header file
        EthSM_Cfg.h:
        - ETHSM_RELOCATABLE_CFG_ENABLE which is set to STD_ON
          if relocatable config shall be enabled, otherwise it's set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_PBcfgM_On</srcid><srcstatus/><internalId>294</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>

    <specobject>
      <id>EthSM.EB.PbcfgM_General_6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If PbcfgM support is enabled EthSM shall define the following macros in
        EthSM_PBCfg.c:
        - TS_PB_CFG_LAYOUT_TYPE: Shall expand to the type definition of the Postbuild
          configuration layout type (e.g. EthSM_ConstConfigLayoutType)
        - TS_PB_CFG_NAME: Shall expand to the name of the structure defining the Postbuild
          configuration layout (e.g. EthSM_ConfigLayout)
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_Test_PBcfgM_Off</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>EthSM_Test_PBcfgM_On</srcid><srcstatus/><internalId>294</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>EthSM.EB.Interface.Consistency</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        The module shall provide a mechanism to guarantee consistency of interfaces and
        types between its implementation and its code stub.
       </description>
       <comment>
        The code stub of a module shall provide the same external view than the module itself.
        This is mandatory because unit test of modules test against the code stubs of
        adjacent modules. Inconsistent stubs may result in the situation that incompatible
        interfaces are not detected as unit test stage.
       </comment>
       <verifycrit>
        Create a compile test with two permutations that call all interfaces of a module
        (in both permutations).
        p0: Behave like a regular compile test; call the module generator and compile against
        the implementation of the module.
        p1: Do not generate module code and do not compile the implementation of the module.
        Instead the module shall be replaced with its own code stub.
       </verifycrit>
       <needscoverage>
          <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_EthSM_VerifyCodeStub</srcid><srcstatus/><internalId>295</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.EthSM.DummyMode</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>16</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>
    <specobject>
      <id>dev.EthSM.InitAPISyntax</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>
    <specobject>
      <id>dev.EthSM.StateTransitions</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>63</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00143</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00165</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00182</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00184</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>
    <specobject>
      <id>dev.EthSM.NewModeStatesForWaitLinkDown</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>96</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00182</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00184</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00165</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>
    <specobject>
      <id>dev.EthSM.DemEventReporting</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>118</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00196</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>
    <specobject>
      <id>dev.EthSM.PostbuildSupport</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>134</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>
    <specobject>
      <id>dev.EthSM.States</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>151</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>
  </specobjects>
    <specobjects doctype="req">
    <specobject>
      <id>EthSM.EB.MultiCoreSupport</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>896</sourceline>
      <version>1</version>
      <description>
         Multi core support Feature provides mechanism which allows interaction of EthSM mapped to
         dedicated cores with a central ComM module which is mapped to the dedicated master core.
        </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.EB.MultiCoreSupport.MultiCore_Conf</srcid><srcstatus/><internalId>264</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</srcid><srcstatus/><internalId>265</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.MultiCoreSupport.SchM_Call_DET</srcid><srcstatus/><internalId>266</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSleepMode</srcid><srcstatus/><internalId>267</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>
  </specobjects>
    <specobjects doctype="req" title="Requirements:">
    <specobject>
      <id>EthSM.EB.MultiCoreSupport.MultiCore_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>2996</sourceline>
      <version>1</version>
      <description>
        Name              EthSMMultiCoreSupport {ETHSM_MULTI_CORE}
        Description       Enables Multi Core support.
        Multiplicity 1
        Type EcucBooleanParamDef
        Default value false
        ConfigurationClass
        Pre-compile time X All Variants
        Link time --
        Post-build time --
        Scope / Dependency scope: local
      </description>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</srcid><srcstatus/><internalId>265</internalId></linkedfrom><linkedfrom><srcid>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSleepMode</srcid><srcstatus/><internalId>267</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>
    <specobject>
      <id>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>3024</sourceline>
      <version>1</version>
      <description>
        If EthSMMultiCoreSupport is TRUE, EthSM shall call
        SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication
        instead of ComM_BusSM_ModeIndication.
      </description>
      <furtherinfo>
        WRN.tsc.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/EthSM.c.m4_1402</srcid><srcstatus/><internalId>279</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/EthSM.c.m4_1536</srcid><srcstatus/><internalId>281</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/EthSM.c.m4_1622</srcid><srcstatus/><internalId>283</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/EthSM.c.m4_1658</srcid><srcstatus/><internalId>285</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_10_00_WaitOnlineState_to_OnlineState_Transition</srcid><srcstatus/><internalId>324</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_10_03_WaitOnlineState_to_OnlineState_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>327</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_15_00_OnlineState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>329</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_15_05_OnlineState_to_WaitOnlineState_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_20_00_OnHoldState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>336</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_20_04_OnHoldState_to_WaitTrcvLinkState_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_30_00_WaitLinkDownState_To_Offline_Transition_MainFunctionTrigger</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_30_01_WaitLinkDownState_To_Offline_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>349</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitOnlineState_to_OnlineState_Transition</srcid><srcstatus/><internalId>413</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnlineState_to_WaitOnlineState_Transition</srcid><srcstatus/><internalId>416</internalId></linkedfrom><linkedfrom><srcid>EthSM_OnHoldState_to_WaitTrcvLinkState_Transition</srcid><srcstatus/><internalId>421</internalId></linkedfrom><linkedfrom><srcid>EthSM_WaitLinkDownState_To_Offline_Transition_MainFunctionTrigger</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.MultiCore_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>
    <specobject>
      <id>EthSM.EB.MultiCoreSupport.SchM_Call_DET</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>3052</sourceline>
      <version>1</version>
      <description>
        If EthSMMultiCoreSupport is TRUE and DET is enabled and SchM_Call returns a different value 
        than SCHM_E_OK, DET error ETHSM_E_BUSSMMODEIND shall be reported.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/EthSM.c.m4_1406</srcid><srcstatus/><internalId>280</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/EthSM.c.m4_1540</srcid><srcstatus/><internalId>282</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/EthSM.c.m4_1626</srcid><srcstatus/><internalId>284</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/EthSM.c.m4_1662</srcid><srcstatus/><internalId>286</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_CT01_10_03_WaitOnlineState_to_OnlineState_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>327</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_15_05_OnlineState_to_WaitOnlineState_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_20_04_OnHoldState_to_WaitTrcvLinkState_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>EthSM_CT01_30_01_WaitLinkDownState_To_Offline_Transition_SCHM_E_NOT_OK</srcid><srcstatus/><internalId>349</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>
    <specobject>
      <id>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSleepMode</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>3072</sourceline>
      <version>1</version>
      <description>
        If EthSMMultiCoreSupport is TRUE, EthSM shall call
        SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_BusSleepMode
        instead of ComM_BusSM_BusSleepMode.
      </description>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/EthSM.c.m4_1206</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_TC10_03_OnlineState_BusSleepMode_Multicore</srcid><srcstatus/><internalId>403</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.MultiCore_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>
  </specobjects>
    <specobjects doctype="req" title="Tresos XDM checks">
    <specobject>
      <id>EthSM.EB.XdmCheck.MaxNetworks.MoreNetworks</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>7313</sourceline>
      <version>2</version>
      <description>
        An error shall be reported if EthSM contains more configured networks as set by
        EthSMMaxNetworks.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_GenTest01001_Err_MaxNetworks_Exceeded</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MaxNetworks_Conf</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>
    <specobject>
      <id>EthSM.EB.XdmCheck.EthSMSingleNetworkOptEnable.MoreNetworks</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>7334</sourceline>
      <version>2</version>
      <description>
        If configuration parameter EthSMSingleNetworkOptEnable is enabled and more than one EthSM
        network is configured, an error shall be reported.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_GenTest01002_Err_SingleNetwork_Enabled</srcid><srcstatus/><internalId>303</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>
    <specobject>
      <id>EthSM.EB.XdmCheck.EthSMComMNetworkHandleRef.InvalidRef</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>7349</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if configuration parameter
        EthSMComMNetworkHandleRef does not point to a valid reference.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_GenTest01003_Err_EthSMComMNetworkHandleRef_Invalid</srcid><srcstatus/><internalId>304</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>
    <specobject>
      <id>EthSM.EB.XdmCheck.EthSMComMNetworkHandleRef.Unique</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>7364</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if configuration parameter
        EthSMComMNetworkHandleRef is not unique.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_GenTest01004_Err_EthSMComMNetworkHandleRef_NotUnique</srcid><srcstatus/><internalId>305</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>
    <specobject>
      <id>EthSM.EB.XdmCheck.EthSMComMNetworkHandleRef.ComMBusTypeEth</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>7379</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if configuration parameter
        EthSMComMNetworkHandleRef does not reference an ETH channel.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_GenTest01005_Err_EthSMComMNetworkHandleRef_ComMBusTypeNotEth</srcid><srcstatus/><internalId>306</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>
    <specobject>
      <id>EthSM.EB.XdmCheck.EthSMEthIfControllerRef.InvalidRef</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>7394</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if configuration parameter
        EthSMEthIfControllerRef does not point to a valid reference.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_GenTest01006_Err_EthSMEthIfControllerRef_Invalid</srcid><srcstatus/><internalId>307</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>
    <specobject>
      <id>EthSM.EB.XdmCheck.EthSMDemEventParameterRefs.InvalidRef</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>7409</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if configuration parameter 
        EthSMDemEventParameterRefs/ETHSM_E_LINK_DOWN does not point to a valid reference.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_GenTest01007_Err_EthSMDemEventParameterRefs_Invalid</srcid><srcstatus/><internalId>308</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>
    <specobject>
      <id>EthIf.EB.XdmCheck.EthSMMainFunctionPeriod.Range</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>7424</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if EthSMMainFunctionPeriod is not within a range
        [0.005, 1].
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_GenTest01008_Err_EthSMMainFunctionPeriod_OutOfRange1</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>EthSM_GenTest01009_Err_EthSMMainFunctionPeriod_OutOfRange2</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>
    <specobject>
      <id>EthSM.EB.XdmCheck.EthSMEthIfControllerRef.NotUnique</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>7438</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if configuration parameter
        EthSMEthIfControllerRef is not unique.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_GenTest01010_Err_EthSMEthIfControllerRef_NotUnique</srcid><srcstatus/><internalId>311</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>
    <specobject>
      <id>EthSM.EB.XdmCheck.EthSMWakeupSleepOnDatalineEnabled.NoSupport</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/doc/project/design/pdf/EthSM_Design-profiled.xml</sourcefile>
      <sourceline>7453</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if EthSMWakeupSleepOnDatalineEnabled is enabled
        on one of the transceivers when EthSMWakeupSleepOnDatalineSupportEnabled is disabled.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EthSM_GenTest01011_Err_EthSMWakeupSleepOnDatalineEnabled_NoSupport</srcid><srcstatus/><internalId>312</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/EthSM.c.m4_1206</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/src/EthSM.c.m4</sourcefile>
      <sourceline>1206</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/EthSM.c.m4_1402</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/src/EthSM.c.m4</sourcefile>
      <sourceline>1402</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/EthSM.c.m4_1406</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/src/EthSM.c.m4</sourcefile>
      <sourceline>1406</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/EthSM.c.m4_1536</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/src/EthSM.c.m4</sourcefile>
      <sourceline>1536</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/EthSM.c.m4_1540</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/src/EthSM.c.m4</sourcefile>
      <sourceline>1540</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/EthSM.c.m4_1622</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/src/EthSM.c.m4</sourcefile>
      <sourceline>1622</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/EthSM.c.m4_1626</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/src/EthSM.c.m4</sourcefile>
      <sourceline>1626</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/EthSM.c.m4_1658</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/src/EthSM.c.m4</sourcefile>
      <sourceline>1658</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/EthSM.c.m4_1662</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/src/EthSM.c.m4</sourcefile>
      <sourceline>1662</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/config/EthSM_EBParameters.xdm.m4_118</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/config/EthSM_EBParameters.xdm.m4</sourcefile>
      <sourceline>118</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/EthSM_EBParameters.xdm.m4_141</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/config/EthSM_EBParameters.xdm.m4</sourcefile>
      <sourceline>141</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/generate/xgen/EthSM.xgen_37</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/generate/xgen/EthSM.xgen</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00081</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/xgen/EthSM.xgen_38</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/src/Autosar/generate/xgen/EthSM.xgen</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.ECUC_EthSM_00108_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_Test_IsValidConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/common_req/EthSM_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the function EthSM_IsValidConfig() is implemented as specified.
  
Test Object: 
    EthSM_IsValidConfig()
  
Test Precondition: 
    The EthSM module is not initialized.
  
Test Execution: 
    01: Call the function EthSM_IsValidConfig() with an NULL_PTR.
    02: VP:
        The function must have returned with E_NOT_OK.
    03: Create an invalid configuration regarding the endianness and alignment.
    04: Call the function EthSM_IsValidConfig() with this invalid configuration.
    05: VP(EthSM.EB.PBCFGM106):
        The function must have returned with E_NOT_OK.
    The following 3 steps are only executed if the module has a link-time configuration:
        06: Create an invalid configuration regarding the link time configuration.
        07: Call the function EthSM_IsValidConfig() with this invalid configuration.
        08: VP(EthSM.EB.PBCFGM105):
                The function must have returned with E_NOT_OK.
    09: Create an invalid configuration regarding the compile time configuration.
    10: Call the function EthSM_IsValidConfig() with this invalid configuration.
    11: VP(EthSM.EB.PBCFGM104):
        The function must have returned with E_NOT_OK.
    12: Create an invalid configuration regarding the published information configuration.
    13: Call the function EthSM_IsValidConfig() with this invalid configuration.
    14: VP(EthSM.EB.PBCFGM104_1):
        The function must have returned with E_NOT_OK.
    15: Call the function EthSM_IsValidConfig() with a valid configuration.
    16: VP:
        The function must have returned with E_OK.
    17: VP(EthSM.EB.PBCFGM107):
        Check if ETHSM_PBCFGM_SUPPORT_ENABLED is set to STD_ON.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.PBCFGM101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.PBCFGM102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.PBCFGM104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.PBCFGM104_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.PBCFGM105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.PBCFGM106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>
    <specobject>
      <id>EthSM_Test_VerifyInitWithPcfgM</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/common_req/EthSM_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the EthSM can be initialized via the PbcfgM.
  
Test Object: 
    EthSM_IsValidConfig()
  
Test Precondition: 
    The EthSM module must not have been initialized.
  
Test Execution: 
    01: Create an invalid configuration regarding the endianness and alignment.
    02: Call the function EthSM_Init() with this invalid configuration.
    03: VP:
        A Det call must have been performed correctly.
    04: Create an invalid configuration regarding the compile time configuration.
    05: Call the function EthSM_Init() with this invalid configuration.
    06: VP:
        A Det call must have been performed correctly.
    The following 3 steps are only executed if the module has a link-time configuration:
        07: Create an invalid configuration regarding the link time configuration.
        08: Call the function EthSM_Init() with this invalid configuration.
        09: VP:
            A Det call must have been performed correctly.
    10: Create an invalid configuration regarding the published information configuration.
    11: Call the function EthSM_Init() with this invalid configuration.
    12: VP:
        A Det call must have been performed correctly.
    13: Initialize the PbcfgM_GetConfig() stub that way that it can return a valid function.
    14: Call the function EthSM_Init() with a null pointer.
    15: VP:
        The function PbcfgM_GetConfig() must have been called once.
    16: VP:
        No Det call must have been performed.
    17: VP:
        The module internal configuration pointer EthSM_RootPtr must equal
        the pointer supplied to the initialization function
    18: PbcfgM_GetConfig shall return E_NOT_OK.
        set the configuration pointer which is returned to NULL_PTR
    19: Call EthSM_Init with NULL_PTR.
    20: VP(EthSM.EB.PBCFGM110):
        Check if Det error is reported.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.PBCFGM110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_Test_PBcfgM_Off</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/common_req/EthSM_PbcfgM_Off_Compile_Test.c</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Verify that if PbcfgM support is disabled then EthSM_PBCfg.c shall define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
      ETHSM_PBCFGM_SUPPORT_ENABLED shall be set to STD_OFF.
      ETHSM_RELOCATABLE_CFG_ENABLE shall be set to STD_OFF.
    
Test Object: None.
Test Precondition: 
      - PbcfgM configuration does not refer to module EthSM (or no config exists)
      - Include EthSM_PBcfg.c only for step 01 and 02.
      - Include EthSM_Cfg.h for step 03.
    
Test Execution: 
        01: VP(EthSM.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exists.
        02: VP(EthSM.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME has the value
            EthSM_ConfigLayoutType and ETHSM_CONFIG_NAME respectively.
        03: VP (EthSM.EB.PBCFGM107):
            Verify that ETHSM_PBCFGM_SUPPORT_ENABLED is set to STD_OFF.
        04: VP(EthSM.EB.PBCFGM108, EthSM.EB.RelocatablePBCfg):
            ETHSM_RELOCATABLE_CFG_ENABLE shall be STD_OFF
    
Test Input: 
    
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_Test_PBcfgM_On</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/common_req/EthSM_PbcfgM_On_Compile_Test.c</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      1.)
      Verify that ETHSM_RELOCATABLE_CFG_ENABLE is defined
      in the header file EthSM_Cfg.h.
      2.)
      Verify that if PbcfgM support is enabled then EthSM_PBCfg.c shall NOT define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
    
Test Object: None.
Test Precondition: 
        - ETHSM_PBCFGM_SUPPORT_ENABLED = STD_ON
    
Test Execution: 
        ------------------------ 1.) ---------------------
        01: VP (EthSM.EB.PbcfgM_General_3,
                EthSM.EB.PBCFGM108,
                EthSM.EB.RelocatablePBCfg):
            Verify that ETHSM_RELOCATABLE_CFG_ENABLE is set to STD_ON.
        ------------------------ 2.) ---------------------
        02: Include EthSM_PBcfg.c.
        03: VP(EthSM.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exist.
    
Test Input: 
        None.
    
Test Output: 
        Binary file.
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.PbcfgM_General_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_EthSM_VerifyCodeStub</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/build/reqm/common_req/EthSM_VerifyStub_testspec.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the code stub of the module is consistent with the
    implementation.
  
Test Object: 
    Relocatable post-build configuration macros generation.
  
Test Precondition: 
    Permutation [VerifyStub == true]:
      - Unit test contains its own code stub
      - Module is excluded from generation and compilation
    Permutation [VerifyStub == false]:
      - unit test excludes its own code stub
  
Test Execution: 
    01: Invoke all module APIs
    02: VP(EthSM.EB.Interface.Consistency):
        Unit test compiles (implicitly tested)
  
Test Input: 
  
Test Output: 
    Test is correctly generated and compiled.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.Interface.Consistency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_EthSM_CompileTest_01</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_ComTest_01/source/application/test_config.h</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Test to compile the module for the following configuration
      - DET STD_ON
      - EthSM_GetVersionInfo API available
      - EthSMMaxNetworks = 16
      - EthSMSingleNetworkOptEnable is disabled
      - EthSMWakeupSleepOnDatalineSupportEnabled is disabled
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: None.
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00043</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00065_Conf.Enabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00092_Conf.DisableAPI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00092_Conf.EnableAPI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineSupportEnabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_EthSM_CompileTest_02</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_ComTest_02/source/application/test_config.h</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Test to compile the module for the following configuration
      - DET STD_OFF
      - EthSM_GetVersionInfo API not available.
      - Optimizations are enabled
      - EthSMSingleNetworkOptEnable is enabled
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: None.
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00043</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00065_Conf.Disabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00092_Conf.EnableAPI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00092_Conf.DisableAPI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_EthSM_CompileTest_03_ServiceId_ErrorId</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_ComTest_03_ServiceId_ErrorId/source/application/test_config.h</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Test to compile the module for the following configuration
      - DET STD_ON
      - EthSM_GetVersionInfo API available.
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: None.
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00043</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00190</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00035.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00043.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00046.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00050.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00055.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00109.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00110.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00190.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_ModuleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>EthSM.ValueCheck.ETHSM_E_INVALID_NETWORK_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
        <provcov>
          <linksto>EthSM.ValueCheck.ETHSM_E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>EthSM.ValueCheck.ETHSM_E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>EthSM.ValueCheck.ETHSM_E_INVALID_NETWORK_HANDLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>EthSM.ValueCheck.ETHSM_E_INVALID_TcpIpMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>EthSM.ValueCheck.ETHSM_E_PARAM_CONTROLLER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.AdditionalModeStateTypes</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_EthSM_CompileTest_04</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_ComTest_04/source/application/test_config.h</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Test to compile the module for the following configuration
      - EthSMWakeupSleepOnDatalineSupportEnabled is enabled
      - API EthSM_SleepIndication exists when EthTrcv is configured as passive slave
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: None.
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineSupportEnabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_91004.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_ComTest_NoPBCfg</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_ComTest_NoPBCfg/source/application/EthSM_ComTest_NoPBCfg.c</sourcefile>
      <sourceline>20</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall prove that that EthSM can compile without any post build information.
  
Test Object: 
    Compile test
  
Test Precondition: 
    * Set TS_ETHSM_COMPILE_WITH_POSTBUILD to FALSE in the merged make file to prevent the
      compilation of the post build C file.
    * The merged make file holds a rule which removes all post build files after generation.
  
Test Execution: 
    The test run is successful when the EthSM compiles under sticking to the precondition.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.PostBuild_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_EthSM_CompileTest_SchM</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_ComTest_SchM/source/application/test_config.h</sourcefile>
      <sourceline>12</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   This test checks that the EthSM module's generator generates a
   syntactically and semantically valid basic software module
   description (BSWMD) when the generator mode "generate_swcd" is
   invoked. It further tests that the SchM exclusive area API is
   correctly generated by the RTE generator based on the EthSM module's
   generated BSWMD.

Test Object: None.
Test Precondition: None.
Test Execution: 
  Ts5 build environment steps:
    The module configuration generator produces the BSWMD containing
    the information on the required exclusive areas.  This information
    is then used by the RTE generator to create the required SchM API
    for these exclusive areas. This implicitly verifies that the BSWMD
    is syntactically and semantically correct.  EthSM's static code
    makes use of this API (and the respective #defines) thus causing
    compile/link errors if the BSWMD does not contain the correct
    information.

Test Input: 
  Usage of a common ASR configuration having all adjacent ASR modules
  configured.

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.BSWMDGeneration_1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.BSWMDGeneration_2</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.BSWMDGeneration_3</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_GenTest01001_Err_MaxNetworks_Exceeded</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>28</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If there are more configured networks than MaxNetworks allows
    the generator shall report an error.
  
Test Object: XDM check
Test Precondition: 
    MaxNetworks = 2
    3 configured networks
  
Test Execution: 
    VP: The generator shall report an error which states that there are more networks
        configured than allowed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.XdmCheck.MaxNetworks.MoreNetworks</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>
    <specobject>
      <id>EthSM_GenTest01002_Err_SingleNetwork_Enabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If there are more configured networks and EthSMSingleNetworkOptEnable is true
    the generator shall report an error.
  
Test Object: XDM check
Test Precondition: 
    EthSMSingleNetworkOptEnable = true
    3 configured networks
  
Test Execution: 
    VP: The generator shall report an error which states that EthSMSingleNetworkOptEnable must be
        disabled if there are more than 1 configured network.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.XdmCheck.EthSMSingleNetworkOptEnable.MoreNetworks</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>
    <specobject>
      <id>EthSM_GenTest01003_Err_EthSMComMNetworkHandleRef_Invalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>76</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameter EthSMComMNetworkHandleRef does not point to a valid reference the
    generator shall report an error.
  
Test Object: XDM check
Test Precondition: 
    EthSMComMNetworkHandleRef shall be invalid.
  
Test Execution: 
    VP: The generator shall report an error which states that reference shall point to a valid node.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.XdmCheck.EthSMComMNetworkHandleRef.InvalidRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>
    <specobject>
      <id>EthSM_GenTest01004_Err_EthSMComMNetworkHandleRef_NotUnique</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>98</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameter EthSMComMNetworkHandleRef is not unique the generator shall report an
    error.
  
Test Object: XDM check
Test Precondition: 
    Same EthSMComMNetworkHandleRef shall be referenced be 2 EthSMNetwork elements.
  
Test Execution: 
    VP: The generator shall report an error which states that EthSMComMNetworkHandleRef reference
    must be unique.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.XdmCheck.EthSMComMNetworkHandleRef.Unique</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>
    <specobject>
      <id>EthSM_GenTest01005_Err_EthSMComMNetworkHandleRef_ComMBusTypeNotEth</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>121</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Generator shall report an error if configuration parameter EthSMComMNetworkHandleRef does not
    reference an ETH channel.
  
Test Object: XDM check
Test Precondition: 
    EthSMComMNetworkHandleRef references COMM_BUS_TYPE_CAN.
  
Test Execution: 
    VP: The generator shall report an error which states that EthSM can only be used for ETH
        networks.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.XdmCheck.EthSMComMNetworkHandleRef.ComMBusTypeEth</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>
    <specobject>
      <id>EthSM_GenTest01006_Err_EthSMEthIfControllerRef_Invalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>144</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameter EthSMEthIfControllerRef does not point to a valid reference the
    generator shall report an error.
  
Test Object: XDM check
Test Precondition: 
    EthSMEthIfControllerRef shall be invalid.
  
Test Execution: 
    VP: The generator shall report an error which states that the configured node does not exist or
    may not be referenced.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.XdmCheck.EthSMEthIfControllerRef.InvalidRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>
    <specobject>
      <id>EthSM_GenTest01007_Err_EthSMDemEventParameterRefs_Invalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>167</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameter EthSMDemEventParameterRefs/ETHSM_E_LINK_DOWN does not point to a
    valid reference the generator shall report an error.
  
Test Object: XDM check
Test Precondition: 
    EthSMDemEventParameterRefs/ETHSM_E_LINK_DOWN shall be invalid.
  
Test Execution: 
    VP: The generator shall report an error which states that the valid reference is required.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.XdmCheck.EthSMDemEventParameterRefs.InvalidRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>
    <specobject>
      <id>EthSM_GenTest01008_Err_EthSMMainFunctionPeriod_OutOfRange1</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>189</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The generator shall raise an error message if EthSMMainFunctionPeriod is below the range
    [0.005, 1].
  
Test Object: XDM check
Test Precondition: 
    EthSMMainFunctionPeriod is set to 2.
  
Test Execution: 
    VP: The generator shall report an error which states that the value of
    EthSMMainFunctionPeriod is out of the range and it must be "&gt;= 0.005" and "&lt;= 1".
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthIf.EB.XdmCheck.EthSMMainFunctionPeriod.Range</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>275</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>
    <specobject>
      <id>EthSM_GenTest01009_Err_EthSMMainFunctionPeriod_OutOfRange2</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>212</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The generator shall raise an error message if EthSMMainFunctionPeriod is above the range
    [0.005, 1].
  
Test Object: XDM check
Test Precondition: 
    EthSMMainFunctionPeriod is set to 0.001.
  
Test Execution: 
    VP: The generator shall report an error which states that the value of
    EthSMMainFunctionPeriod is out of the range and it must be "&gt;= 0.005" and "&lt;= 1".
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthIf.EB.XdmCheck.EthSMMainFunctionPeriod.Range</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>275</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>
    <specobject>
      <id>EthSM_GenTest01010_Err_EthSMEthIfControllerRef_NotUnique</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>235</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameter EthSMEthIfControllerRef is not unique reference the generator shall
    report an error.
  
Test Object: XDM check
Test Precondition: 
    EthSMEthIfControllerRef shall not be unique.
  
Test Execution: 
    VP: The generator shall report an error which states that the EthIf controller may be
        referrenced by at most one EthSM network.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.XdmCheck.EthSMEthIfControllerRef.NotUnique</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>
    <specobject>
      <id>EthSM_GenTest01011_Err_EthSMWakeupSleepOnDatalineEnabled_NoSupport</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Compile/IN/EthSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>258</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameter EthSMWakeupSleepOnDatalineEnabled is enabled while
    EthSMWakeupSleepOnDatalineSupportEnabled is not enabled the generator shall
    report an error.
  
Test Object: XDM check
Test Precondition: 
    EthSMWakeupSleepOnDatalineEnabled is enabled.
    EthSMWakeupSleepOnDatalineSupportEnabled is not enabled.
  
Test Execution: 
    VP: The generator shall report an error which states that EthSMWakeupSleepOnDatalineEnabled
    is enabled then EthSMWakeupSleepOnDatalineSupportEnabled also has to be enabled.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.XdmCheck.EthSMWakeupSleepOnDatalineEnabled.NoSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>277</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_CT01_00_00_OfflineState_to_WaitCtrlModeIndState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_00_STATE_OFFLINE.c</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_OFFLINE to ETHSM_STATE_WAIT_CTRLMODEIND.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_RequestComMode with the parameter(s) defined in the input section.
    02: VP(EthSM.SWS_EthSM_00053.RetValue):
        EthSM_RequestComMode returns E_OK
    03: Call EthSM_MainFunction().
    04: VP(EthSM.EB.EthSMSingleNetworkOptEnable.OfflineToWaitCtrlModeInd):
        The function EthIf_SetControllerMode shall be called with the expected output parameter(s).
  
Test Input: 
    Test step 01:
    EthSM_RequestComMode() Parameters(s):
      Input_EthSM_NetworkHandle[0U] = 255U;
      Input_EthSM_NetworkHandle[1U] = 0U;
      Input_ComM_Mode[x] = COMM_FULL_COMMUNICATION;
  
Test Output: 
    Test step 04:
    EthIf_SetControllerMode() Parameter(s):
      Output_EthIf_CtrlIdx[0U] = 0U;
      Output_EthIf_CtrlIdx[1U] = 2U;
      Output_EthIf_CtrlMode[x] = ETH_MODE_ACTIVE;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.OfflineToWaitCtrlModeInd</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_00_01_OfflineState_to_WaitCtrlModeIndState_Transition_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_00_STATE_OFFLINE.c</sourcefile>
      <sourceline>149</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_OFFLINE to ETHSM_STATE_WAIT_CTRLMODEIND by calling
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.Offline_To_WaitTrcvLink,
           EthSM.EB.SWS_EthSM_00088):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST which
        indicates that the controller state transitioned to ETHSM_STATE_WAIT_CTRLMODEIND.
    04: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.Offline_To_WaitTrcvLink</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_01_Transition_From_Uninitialized_To_StateOffline</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_00_STATE_OFFLINE.c</sourcefile>
      <sourceline>211</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that after calling EthSM_Init() no other module is called,
    and the module is in STATE_OFFLINE.
  
Test Object: None.
Test Precondition: 
    EthSM uninitialized
  
Test Execution: 
    01: Initialize EthSM
    02: VP(SWS_EthSM_00025): Verify that the channel is in COMM_NO_COMMUNICATION
    03: VP(SWS_EthSM_00025): Verify that a change to ETHSM_STATE_WAIT_CTRLMODEIND is possible
    04: VP(SWS_EthSM_00025): Verify that no transaction to other module is made
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthIf_ControllerInit</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.EthIf_TransceiverInit</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_CT01_02_00_WaitCtrlModeIndState_to_WaitTrcvLinkState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_02_STATE_WAIT_CTRLMODEIND.c</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_CTRLMODEIND to ETHSM_STATE_WAIT_TRCVLINK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_CTRLMODEIND
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: Call EthSM_CtrlModeIndication() with ETH_MODE_ACTIVE for all configured CtrlIdx's.
    02: Call EthSM_MainFunction() to initiate state change.
    03: VP(EthSM.SWS_EthSM_00097,
           EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlModeIndToWaitTrcvLink):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_TRCVLINK

  
Test Input: 
    Test step 01:
    EthSM_TrcvLinkStateChg() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 2U;
      Input_EthTrcv_LinkStateType[x] = ETHTRCV_LINK_STATE_ACTIVE;
  
Test Output: 
    Test step 03:
    BswM_EthSM_CurrentState() Parameter(s):
     Output_EthSM_NetworkHandle[0U] = 255U;
     Output_EthSM_NetworkHandle[1U] = 0U;
     Output_BswM_CurrentState[x] = ETHSM_STATE_WAIT_TRCVLINK;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlModeIndToWaitTrcvLink</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_02_01_WaitCtrlModeIndState_to_WaitCtrlModeIndState_Transition_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_02_STATE_WAIT_CTRLMODEIND.c</sourcefile>
      <sourceline>149</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the self transition in state ETHSM_STATE_WAIT_CTRLMODEIND by calling
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_CTRLMODEIND
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitCtrlModInd_To_WaitCtrlModeInd):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST which
        indicates that the controller state self-transitioned to ETHSM_STATE_WAIT_CTRLMODEIND.
    04: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitCtrlModInd_To_WaitCtrlModeInd</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_CT01_05_00_WaitTrcvLinkState_to_WaitOnlineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_05_STATE_WAIT_TRCVLINK.c</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_WAIT_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_TRCVLINK
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
      EthSMDemCtrlTestResultReportToDem is set to DEM
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg with the parameter(s) defined in the input section.
    02: Call EthSM_MainFunction to initiate state change.
    03: VP(EthSM.SWS_EthSM_00133):
        The function TcpIp_RequestComMode shall be called with the expected output parameter(s).
    04: VP(EthSM.SWS_EthSM_00134):
        The function BswM_EthSM_CurrentState shall be called with the expected output parameter(s).
    05: VP(EthSM.EB.EthSM_WaitTrcvLink_To_WaitOnline_ReportToDem):
        Function Dem_ReportErrorStatus() shall be called with DEM_EVENT_STATUS_PREPASSED.
  
Test Input: 
    Test step 01:
    EthSM_TrcvLinkStateChg() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 1U;
      Input_EthTrcv_LinkStateType[x] = ETHTRCV_LINK_STATE_ACTIVE;
  
Test Output: 
    Test step 03:
    TcpIp_RequestComMode() Parameter(s):
      Output_EthIf_CtrlIdx[x] = Input_EthIf_CtrlIdx[x];
      Output_TcpIp_State = TCPIP_STATE_ONLINE;
    Test step 04:
    BswM_EthSM_CurrentState() Parameter(s):
     Output_EthSM_NetworkHandle[0U] = 255U;
     Output_EthSM_NetworkHandle[1U] = 50U;
     Output_BswM_CurrentState[x] = ETHSM_STATE_WAIT_ONLINE;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00133</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00134</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.EthSM_WaitTrcvLink_To_WaitOnline_ReportToDem</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_05_01_WaitTrcvLinkState_to_StateWaitCtrlMIndDown_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_05_STATE_WAIT_TRCVLINK.c</sourcefile>
      <sourceline>167</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_WAIT_CTRLMIND_DOWN.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_TRCVLINK.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
    02: 02: VP(EthSM.SWS_EthSM_00053.RetValue): Verify that it returns E_OK.
    03: Call EthSM_MainFunction to initiate state change.
    04: VP(EthSM.EB.StateTransistions.WaitTrcvLinkToWaitCtrlMIndDown):
        Verify that EthIf_SetControllerMode() was called with ETH_MODE_DOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitTrcvLinkToWaitCtrlMIndDown</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_05_02_WaitTrcvLinkState_to_WaitTrcvLinkState_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_05_STATE_WAIT_TRCVLINK.c</sourcefile>
      <sourceline>235</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the self-transition in state ETHSM_STATE_WAIT_TRCVLINK by calling
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_TRCVLINK
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.SWS_EthSM_00206, EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitTrcvLink_To_WaitTrcvLink):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST which
        indicates that the controller state self-transitioned to ETHSM_STATE_WAIT_TRCVLINK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitTrcvLink_To_WaitTrcvLink</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_CT01_07_00_WaitCtrlModeIndDownState_to_OfflineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_07_STATE_WAIT_CTRLMODEIND_DOWN.c</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_CTRLMIND_DOWN to ETHSM_STATE_OFFLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_CTRLMIND_DOWN
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_CtrlModeIndication() with ETH_MODE_DOWN for all configured CtrlIdx's.
    02: Call EthSM_MainFunction() to initiate state change.
    03: VP(): Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_OFFLINE
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitCtrlMIndDownToOffline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_07_01_WaitCtrlModeIndDownState_NoTransition_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_07_STATE_WAIT_CTRLMODEIND_DOWN.c</sourcefile>
      <sourceline>129</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies that there is no transition if EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST
    is called from state ETHSM_STATE_WAIT_CTRLMIND_DOWN.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_CTRLMIND_DOWN
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.NoTransition.ETHSM_STATE_WAIT_CTRLMIND_DOWN):
        Verify that nothing happened which indicates that the controller state did not transition from
        ETHSM_STATE_WAIT_CTRLMIND_DOWN.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.NoTransition.ETHSM_STATE_WAIT_CTRLMIND_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_07_02_WaitCtrlModeIndDownState_OfflineState_WaitCtrlModeIndState_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_07_STATE_WAIT_CTRLMODEIND_DOWN.c</sourcefile>
      <sourceline>187</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that EthSM remembers wake-up request when EthSM_RequestComMode() was called
    from state ETHSM_STATE_WAIT_CTRLMIND_DOWN.
    The transition from ETHSM_STATE_WAIT_CTRLMIND_DOWN to ETHSM_STATE_WAIT_CTRLMODEIND over
    ETHSM_STATE_OFFLINE is verified.
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST is called from state
    ETHSM_STATE_WAIT_CTRLMIND_DOWN then EthSM_CtrlModeIndication() with ETH_MODE_DOWN is called from the same state
    triggering state transition to ETHSM_STATE_OFFLINE. After two EthSM_MainFunction() calls, the EthSM
    will transition to ETHSM_STATE_WAIT_CTRLMODEIND state.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_CTRLMIND_DOWN
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction().
    03: Call EthSM_CtrlModeIndication() with ETH_MODE_DOWN to trigger the transition to state ETHSM_STATE_OFFLINE.
    04: Call EthSM_MainFunction() to transition to state ETHSM_STATE_OFFLINE.
    05: Check that state transitioned to ETHSM_STATE_OFFLINE.
    06: Call EthSM_MainFunction() to transition to state ETHSM_STATE_WAIT_CTRLMODEIND.
    07: VP(EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.ProcessWakeUpRequest.ETHSM_STATE_WAIT_CTRLMIND_DOWN)
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST indicating the
        current state is ETHSM_STATE_WAIT_CTRLMODEIND.
    08: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.ProcessWakeUpRequest.ETHSM_STATE_WAIT_CTRLMIND_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_CT01_10_00_WaitOnlineState_to_OnlineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_10_STATE_WAIT_ONLINE.c</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication with the parameter(s) defined in the input section.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.SWS_EthSM_00148):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_ONLINE.
    04: VP(EthSM.SWS_EthSM_00150, EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication):
        Function ComM_BusSM_ModeIndication() or
        SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication() shall be called with
        COMM_FULL_COMMUNICATION.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_10_01_WaitOnlineState_to_WaitTrcvLinkState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_10_STATE_WAIT_ONLINE.c</sourcefile>
      <sourceline>165</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_TRCVLINK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: VP(EthSM.SWS_EthSM_00136):
        EthSM_TrcvLinkStateChg() with ETHTRCV_LINK_STATE_DOWN is called to initiate state change
        from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_TRCVLINK.
    02: Call EthSM_MainFunction to initiate state change.
    03: VP(EthSM.SWS_EthSM_00137):
        The function TcpIp_RequestComMode shall be called with the expected output parameter(s).
    04: VP(EthSM.SWS_EthSM_00138):
        The function BswM_EthSM_CurrentState shall be called with the expected output parameter(s).
  
Test Input: 
    Test step 01:
    EthSM_TrcvLinkStateChg() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 2U;
      Input_EthTrcv_LinkStateType[x] = ETHTRCV_LINK_STATE_DOWN;
  
Test Output: 
    Test step 03:
    TcpIp_RequestComMode() Parameter(s):
      Output_EthIf_CtrlIdx[x] = Input_EthIf_CtrlIdx[x];
      Output_TcpIp_State = TCPIP_STATE_OFFLINE;
    Test step 04:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_EthSM_NetworkHandle[0U] = 255U;
       Output_EthSM_NetworkHandle[1U] = 0U;
       Output_BswM_CurrentState[x] = ETHSM_STATE_WAIT_TRCVLINK;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00136</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00138</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_10_02_WaitOnlineState_to_WaitCtrlMindDown_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_10_STATE_WAIT_ONLINE.c</sourcefile>
      <sourceline>271</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_CTRLMIND_DOWN.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_ONLINE.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
    02: VP(SWS_EthSM_00140): Verify that ComM request with COMM_NO_COMMUNICATION is accepted.
    03: Call EthSM_MainFunction().
    04: VP(WaitOnlineToWaitCtrlMindDown):
        Verify that TcpIp_RequestComMode() is called with TCPIP_STATE_OFFLINE.
    05: VP(WaitOnlineToWaitCtrlMindDown):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_DOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToWaitCtrlMindDown</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_10_03_WaitOnlineState_to_OnlineState_Transition_SCHM_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_10_STATE_WAIT_ONLINE.c</sourcefile>
      <sourceline>345</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
  
Test Execution: 
    01: Set SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication_EthChannel_Stub
        to return SCHM_E_NOT_OK.
    02: Call EthSM_TcpIpModeIndication with the parameter(s) defined in the input section.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.SWS_EthSM_00148):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_ONLINE.
    05: VP(EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication):
        Function SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication shall be called with
        COMM_FULL_COMMUNICATION.
    06: VP(EthSM.EB.MultiCoreSupport.SchM_Call_DET):
        Verify that DET Error shall be raised if no SCHM_E_OK is received after SchM_Call.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_10_04_WaitOnlineState_to_WaitOnlineState_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_10_STATE_WAIT_ONLINE.c</sourcefile>
      <sourceline>434</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the self-transition in state ETHSM_STATE_WAIT_ONLINE by calling
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_ONLINE
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.SWS_EthSM_00207, EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitOnline_To_WaitOnline):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST which
        indicates that the controller state self-transitioned to ETHSM_STATE_WAIT_ONLINE.
    04: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitOnline_To_WaitOnline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_CT01_15_00_OnlineState_to_WaitOnlineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: VP(EthSM.SWS_EthSM_00151):
        Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE to initiate a state transition
        from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.SWS_EthSM_00152):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_ONLINE.
    04: VP(EthSM.SWS_EthSM_00154, EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication):
        Function ComM_BusSM_ModeIndication() or SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication()
        shall be called with COMM_NO_COMMUNICATION.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_15_01_OnlineState_to_OnHoldState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>150</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
      EthSMDemCtrlTestResultReportToDem is set to DEM
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg() with ETHTRCV_LINK_STATE_DOWN.
    02: Call EthSM_MainFunction() to initiate state change.
    03: VP(EthSM.SWS_EthSM_00167):
        Function TcpIp_RequestComMode() shall be called with TCPIP_STATE_ONHOLD.
    04: VP(EthSM.SWS_EthSM_00168):
        Function BswM_EthSM_CurrentStat() shall be called with ETHSM_STATE_ONHOLD.
    05: VP(EthSM.EB.SWS_EthSM_00188_ReportToDem):
        The function Dem_ReportErrorStatus() shall be called with DEM_EVENT_STATUS_PREFAILED.
  
Test Input: 
    Test step 01:
    EthSM_TrcvLinkStateChg() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 1U;
      Input_EthTrcv_LinkStateType[x] = ETHTRCV_LINK_STATE_DOWN;
  
Test Output: 
    Test step 03:
    TcpIp_RequestComMode() Parameter(s):
      Output_EthIf_CtrlIdx[x] = Input_EthIf_CtrlIdx[x];
      Output_TcpIp_State = TCPIP_STATE_ONHOLD;
    Test step 04:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_EthSM_NetworkHandle[0U] = 255U;
       Output_EthSM_NetworkHandle[1U] = 50U;
       Output_BswM_CurrentState[x] = ETHSM_STATE_ONHOLD;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00188_ReportToDem</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_15_02_OnlineState_to_WaitOfflineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>261</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_OFFLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
    02: VP(EthSM.SWS_EthSM_00053.RetValue):
        EthSM_RequestComMode() returns E_OK.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.SWS_EthSM_00157, EthSM.SWS_EthSM_00220):
        TcpIp_RequestComMode() shall be called with TCPIP_STATE_OFFLINE.
    05: VP(EthSM.SWS_EthSM_00158):
        BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_OFFLINE.
  
Test Input: 
    Test step 01:
    EthSM_RequestComMode() Parameters(s):
      Input_EthSM_NetworkHandle[0U] = 255U;
      Input_EthSM_NetworkHandle[1U] = 0U;
      Input_EthSM_ComM_Mode[x] = COMM_NO_COMMUNICATION;
  
Test Output: 
    Test step 04:
    TcpIp_RequestComMode() Parameter(s):
      Output_EthIf_CtrlIdx[x] = Input_EthIf_CtrlIdx[x];
      Output_TcpIp_State = TCPIP_STATE_OFFLINE;
    Test step 05:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_BswM_NetworkHandle[x] = Input_EthSM_NetworkHandle[x];
       Output_BswM_CurrentState[x] = ETHSM_STATE_WAIT_OFFLINE;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_15_03_OnlineState_to_WaitOnlineState_ModeCheck</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>364</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the COM mode during the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE.
    The COM mode shall change from COMM_FULL_COMMUNICATION to COMM_NO_COMMUNICATION.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: Call EthSM_GetCurrentComMode with the parameter(s) defined in the input section.
    02: VP(EthSM.SWS_EthSM_00059.RetValue):
        EthSM_GetCurrentComMode shall return E_OK.
    03: VP(EthSM.SWS_EthSM_00059):
        EthSM_GetCurrentComMode shall return the parameter(s) defined in the output section.
    04: Call EthSM_TcpIpModeIndication with the parameter(s) defined in the input section.
    05: Call EthSM_MainFunction().
    06: Call EthSM_GetCurrentComMode with the parameter(s) defined in the input section.
    07: VP(EthSM.SWS_EthSM_00059.RetValue):
        EthSM_GetCurrentComMode shall return E_OK.
    08: VP(EthSM.SWS_EthSM_00059):
        EthSM_GetCurrentComMode shall return the parameter(s) defined in the output section.
  
Test Input: 
    Test step 01:
    EthSM_GetCurrentComMode() Parameters(s):
       Input_EthSM_NetworkHandle[0U] = 255U;
       Input_EthSM_NetworkHandle[1U] = 0U;
    Test step 04:
    EthSM_TcpIpModeIndication() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 2U;
      Input_TcpIp_State[x] = TCPIP_STATE_OFFLINE;
    Test step 06:
    EthSM_GetCurrentComMode() Parameters(s):
       Input_EthSM_NetworkHandle[0U] = 255U;
       Input_EthSM_NetworkHandle[1U] = 0U;
  
Test Output: 
    Test step 03:
    EthSM_GetCurrentComMode() Parameters(s):
       Output_ComM_Mode[x] = COMM_FULL_COMMUNICATION;
    Test step 08:
    EthSM_GetCurrentComMode() Parameters(s):
       Output_ComM_Mode[x] = COMM_NO_COMMUNICATION;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00059.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_15_04_OnlineState_to_OnHoldState_Transition_NoErrorReport</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>483</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if report to Dem is enabled and optional configuration
    parameter ETHSM_E_LINK_DOWN doesn't exist, the transition from ETHSM_STATE_ONLINE
    to ETHSM_STATE_ONHOLD shall not report any error.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init() is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Perform a transition from ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD.
        * Call EthSM_TrcvLinkStateChg(ETHTRCV_LINK_STATE_ACTIVE).
        * Call EthSM_MainFunction() to initiate state change.
    02: VP(EthSM.EB.SWS_EthSM_00188_NoDemRefExist): Verify that no error is reported during transition.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00188_NoDemRefExist</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_15_05_OnlineState_to_WaitOnlineState_Transition_SCHM_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>555</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Set SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication_EthChannel_Stub
        to return SCHM_E_NOT_OK.
    02: VP(EthSM.SWS_EthSM_00151):
        Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE to initiate a state transition
        from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.SWS_EthSM_00152):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_ONLINE.
    05: VP(EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication):
        Function SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication() shall be called with
        COMM_NO_COMMUNICATION.
    06: VP(EthSM.EB.MultiCoreSupport.SchM_Call_DET):
        Verify that DET Error shall be raised if no SCHM_E_OK is received after SchM_Call.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_15_06_OnlineState_to_OnlineState_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>647</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the self-transition in state ETHSM_STATE_ONLINE by calling
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_ONLINE
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.SWS_EthSM_00208, EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.Online_To_Online):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST which
        indicates that the controller state self-transitioned to ETHSM_STATE_ONLINE.
    04: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.Online_To_Online</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_CT01_20_00_OnHoldState_to_WaitTrcvLinkState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_20_STATE_ONHOLD.c</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_WAIT_TRCVLINK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE.
    02: VP(EthSM.SWS_EthSM_00119): Verify that transition does not start before
        EthSM_MainFunction() is called.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.SWS_EthSM_00175, EthSM.SWS_EthSM_0119):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_TRCVLINK.
    05: VP(EthSM.SWS_EthSM_00177, EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication):
        Function ComM_BusSM_ModeIndication() or SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication()
        shall be called with COMM_NO_COMMUNICATION.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_20_01_OnHoldState_to_OnlineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_20_STATE_ONHOLD.c</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
      EthSMDemCtrlTestResultReportToDem is set to DEM
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg() with ETHTRCV_LINK_STATE_ACTIVE.
    02: VP(EthSM.SWS_EthSM_00114): Verify that transition does not start before
        EthSM_MainFunction() is called.
    03: Call EthSM_MainFunction() to initiate state change.
    04: VP(EthSM.SWS_EthSM_00171, EthSM.SWS_EthSM_00114):
        Function TcpIp_RequestComMode() shall be called with TCPIP_STATE_ONLINE.
    05: VP(EthSM.SWS_EthSM_00172):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_ONLINE.
    06: VP(EthSM.EB.SWS_EthSM_00196_ReportToDem):
        Function Dem_ReportErrorStatus() shall be called with DEM_EVENT_STATUS_PREPASSED.
  
Test Input: 
    Test step 01:
    EthSM_TrcvLinkStateChg() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 1U;
      Input_EthTrcv_LinkStateType[x] = ETHTRCV_LINK_STATE_ACTIVE;
  
Test Output: 
    Test step 03:
    TcpIp_RequestComMode() Parameter(s):
      Output_EthIf_CtrlIdx[x] = Input_EthIf_CtrlIdx[x];
      Output_TcpIp_State = TCPIP_STATE_ONLINE;
    Test step 04:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_EthSM_NetworkHandle[0U] = 255U;
       Output_EthSM_NetworkHandle[1U] = 50U;
       Output_BswM_CurrentState[x] = ETHSM_STATE_ONLINE;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00172</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00196_ReportToDem</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_20_02_OnHoldState_to_WaitLinkDownState_Transition_TrcvOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_20_STATE_ONHOLD.c</sourcefile>
      <sourceline>267</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_OFFLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
    02: VP(EthSM.SWS_EthSM_00053.RetValue):
        EthSM_RequestComMode returns E_OK
    03: VP(EthSM.SWS_EthSM_00053): Verify that transition does not start before
        EthSM_MainFunction() is called.
    04: Call EthSM_MainFunction().
    05: VP(EthSM.EB.StateTransistions.OnHoldToWaitLinkDown):
        Verify that EthIf_SetControllerMode() was called with ETH_MODE_DOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.OnHoldToWaitLinkDown</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_20_03_OnHoldState_to_OnlineState_Transition_NoErrorReport</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_20_STATE_ONHOLD.c</sourcefile>
      <sourceline>342</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if report to Dem is enabled and optional configuration
    parameter ETHSM_E_LINK_DOWN doesn't exist, the transition from ETHSM_STATE_ONHOLD
    to ETHSM_STATE_ONLINE shall not report any error.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init() is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Perform a transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE.
        * Call EthSM_TrcvLinkStateChg(ETHTRCV_LINK_STATE_ACTIVE).
        * Call EthSM_MainFunction() to initiate state change.
    02: VP(EthSM.EB.SWS_EthSM_00196_NoDemRefExist): Verify that no error is reported during transition.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00196_NoDemRefExist</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_20_04_OnHoldState_to_WaitTrcvLinkState_Transition_SCHM_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_20_STATE_ONHOLD.c</sourcefile>
      <sourceline>412</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_WAIT_TRCVLINK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: Set SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication_EthChannel_Stub
        to return SCHM_E_NOT_OK.
    02: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE.
    03: VP(EthSM.SWS_EthSM_00119): Verify that transition does not start before
        EthSM_MainFunction() is called.
    04: Call EthSM_MainFunction().
    05: VP(EthSM.SWS_EthSM_00175, EthSM.SWS_EthSM_0119):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_TRCVLINK.
    06: VP(EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication):
        Function SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication() shall be called with
        COMM_NO_COMMUNICATION.
    07: VP(EthSM.EB.MultiCoreSupport.SchM_Call_DET):
        Verify that DET Error shall be raised if no SCHM_E_OK is received after SchM_Call.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_20_05_OnHoldState_to_OnHoldState_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_20_STATE_ONHOLD.c</sourcefile>
      <sourceline>506</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the self-transition in state ETHSM_STATE_ONHOLD by calling
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_ONHOLD
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.SWS_EthSM_00212, EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.OnHold_To_OnHold):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST which
        indicates that the controller state self-transitioned to ETHSM_STATE_ONHOLD.
    04: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.OnHold_To_OnHold</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_CT01_25_00_WaitOfflineState_to_WaitLinkDownState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_25_STATE_WAIT_OFFLINE.c</sourcefile>
      <sourceline>50</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_OFFLINE to ETHSM_STATE_WAIT_LINK_DOWN.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_OFFLINE.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE.
    02: Call EthSM_MainFunction() to perform transition.
    03: VP(EthSM.EB.EthSMSingleNetworkOptEnable.WaitOfflineToWaitLinkDown):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_DOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitOfflineToWaitLinkDown</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_25_01_WaitOfflineState_to_WaitOfflineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_25_STATE_WAIT_OFFLINE.c</sourcefile>
      <sourceline>111</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the self-transition in state ETHSM_STATE_WAIT_OFFLINE by calling
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_OFFLINE
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.EB.StateTransitions.WaitOffline_To_WaitOffline_FullCom):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_ACTIVE which
        indicates that the controller state self-transitioned to ETHSM_STATE_WAIT_OFFLINE.
    04: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.StateTransitions.WaitOffline_To_WaitOffline_FullCom</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_25_02_WaitOfflineState_to_WaitOfflineState_Transition_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_25_STATE_WAIT_OFFLINE.c</sourcefile>
      <sourceline>181</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the self-transition in state ETHSM_STATE_WAIT_OFFLINE by calling
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_OFFLINE
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitOffline_To_WaitOffline, EthSM.SWS_EthSM_00222):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST
        and that TcpIp_RequestComMode() is called with TCPIP_STATE_ONLINE which
        indicates that the controller state self-transitioned to ETHSM_STATE_WAIT_OFFLINE.
    04: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.WaitOffline_To_WaitOffline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_25_03_WaitOfflineState_to_OnlineState_Transition_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_25_STATE_WAIT_OFFLINE.c</sourcefile>
      <sourceline>255</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_OFFLINE to ETHSM_STATE_ONLINE after TcpIp indicates
    TCPIP_STATE_ONLINE after wake-up is requested via EthSM_RequestComMode() call
    with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_OFFLINE
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_ONLINE.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.SWS_EthSM_00222):
        Verify that EthSM set the controller mode to ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST
        and that TcpIp_RequestComMode with TCPIP_STATE_ONLINE is called.
    05: VP(EthSM.SWS_EthSM_00223):
        Verify that  which indicates that the controller state
        transitioned to ETHSM_STATE_ONLINE.
    06: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_25_04_WaitOfflineState_to_OnlineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_25_STATE_WAIT_OFFLINE.c</sourcefile>
      <sourceline>338</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_OFFLINE to ETHSM_STATE_ONLINE by calling
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_OFFLINE
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_ONLINE.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.SWS_EthSM_00221):
        Verify that EthSM set the controller mode to ETH_MODE_ACTIVE
        and that TcpIp_RequestComMode with TCPIP_STATE_ONLINE is called.
    05: VP(SWS_EthSM_00223):
        Verify that  which indicates that the controller state
        transitioned to ETHSM_STATE_ONLINE.
    06: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_25_05_WaitOfflineState_to_WaitOfflineState_Transition_NO_COMM</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_25_STATE_WAIT_OFFLINE.c</sourcefile>
      <sourceline>420</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the self-transition in state ETHSM_STATE_WAIT_OFFLINE by calling
    EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_OFFLINE
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.EB.StateTransitions.WaitOffline_To_WaitOffline_NoCom, EthSM.SWS_EthSM_00218):
        Verify that TcpIp_RequestComMode() is called with TCPIP_STATE_OFFLINE which
        indicates that the controller state self-transitioned to ETHSM_STATE_WAIT_OFFLINE.
    04: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.StateTransitions.WaitOffline_To_WaitOffline_NoCom</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00218</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_CT01_30_00_WaitLinkDownState_To_Offline_Transition_MainFunctionTrigger</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_30_STATE_WAIT_LINK_DOWN.c</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the transition from ETHSM_STATE_WAIT_LINK_DOWN to ETHSM_STATE_WAIT_OFFLINE.
    performed.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_OFFLINE.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: EthSM_CtrlModeIndication() is called with  ETH_MODE_DOWN.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.EB.StateTransistions.WaitLinkDownToOffline):
        Verify that TcpIp_RequestComMode() is called with TCPIP_STATE_OFFLINE.
    04: VP(EthSM.EB.StateTransistions.WaitLinkDownToOffline):
        BswM_EthSM_CurrentState(ETHSM_STATE_OFFLINE) shall be called.
    05: VP(EthSM.EB.StateTransistions.WaitLinkDownToOffline,
          EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication, EthSM.SWS_EthSM_00038):
          Function ComM_BusSM_ModeIndication or SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication()
          shall be called with COMM_NO_COMMUNICATION.
  
Test Input: 
  
Test Output: 
    Test step 10:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_EthSM_NetworkHandle = 50U;
       Output_BswM_CurrentState = ETHSM_STATE_OFFLINE;
    Test step 11:
    ComM_BusSM_ModeIndication() Parameter(s):
      Output_EthSM_NetworkHandle = 50U;
      Output_ComM_Mode = COMM_NO_COMMUNICATION;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitLinkDownToOffline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_30_01_WaitLinkDownState_To_Offline_Transition_SCHM_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_30_STATE_WAIT_LINK_DOWN.c</sourcefile>
      <sourceline>149</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the transition from ETHSM_STATE_WAIT_LINK_DOWN to ETHSM_STATE_WAIT_OFFLINE
    when SchM_Call does not return SCHM_E_OK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_OFFLINE.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Set SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication_EthChannel_Stub
        to return SCHM_E_NOT_OK.
    02: EthSM_CtrlModeIndication() is called with  ETH_MODE_DOWN.
    03: Call EthSM_MainFunction().
    04: VP(): Verify that TcpIp_RequestComMode() is called with TCPIP_STATE_OFFLINE.
    05: VP(): BswM_EthSM_CurrentState(ETHSM_STATE_OFFLINE) shall be called.
    06: VP(EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication):
        Function SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication shall be
        called with COMM_NO_COMMUNICATION.
    07: VP(EthSM.EB.MultiCoreSupport.SchM_Call_DET):
        Verify that DET Error shall be raised if no SCHM_E_OK is received after SchM_Call.
  
Test Input: 
  
Test Output: 
    Test step 05:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_EthSM_NetworkHandle = 50U;
       Output_BswM_CurrentState = ETHSM_STATE_OFFLINE;
    Test step 06:
    ComM_BusSM_ModeIndication() Parameter(s):
      Output_EthSM_NetworkHandle = 50U;
      Output_ComM_Mode = COMM_NO_COMMUNICATION;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitLinkDownToOffline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_30_02_WaitLinkDownState_NoTransition_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_30_STATE_WAIT_LINK_DOWN.c</sourcefile>
      <sourceline>257</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies that there is no transition if EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST
    is called from state ETHSM_STATE_WAIT_LINK_DOWN.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_LINK_DOWN
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.NoTransition.ETHSM_STATE_WAIT_LINK_DOWN):
        Verify that nothing happened which indicates that the controller state did not transition from
        ETHSM_STATE_WAIT_LINK_DOWN.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.NoTransition.ETHSM_STATE_WAIT_LINK_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>
    <specobject>
      <id>EthSM_CT01_30_03_WaitLinkDownState_OfflineState_WaitCtrlModeIndState_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_CT01_VerifyStateMachine/source/application/EthSM_CT01_30_STATE_WAIT_LINK_DOWN.c</sourcefile>
      <sourceline>315</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the transition from ETHSM_STATE_WAIT_LINK_DOWN to ETHSM_STATE_WAIT_CTRLMODEIND over
    ETHSM_STATE_OFFLINE.
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST is called from state
    ETHSM_STATE_WAIT_LINK_DOWN then EthSM_CtrlModeIndication() with ETH_MODE_DOWN is called from the same state
    triggering state transition to ETHSM_STATE_OFFLINE. After two EthSM_MainFunction() calls, the EthSM
    will transition to ETHSM_STATE_WAIT_CTRLMODEIND state.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_LINK_DOWN
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: Call EthSM_CtrlModeIndication() with ETH_MODE_DOWN to trigger the transition to state ETHSM_STATE_OFFLINE.
    04: Call EthSM_MainFunction() to transition to state ETHSM_STATE_OFFLINE.
    05: Check that state transitioned to ETHSM_STATE_OFFLINE.
    06: Call EthSM_MainFunction() to transition to state ETHSM_STATE_WAIT_CTRLMODEIND.
    07: VP(EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.ProcessWakeUpRequest.ETHSM_STATE_WAIT_LINK_DOWN)
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST indicating the
        current state is ETHSM_STATE_WAIT_CTRLMODEIND.
    08: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.ProcessWakeUpRequest.ETHSM_STATE_WAIT_LINK_DOWN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_ConTest01000_Init_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_Init shall report ETHSM_E_PARAM_POINTER to the DET,
    if it is called using NULL_PTR.
  
Test Object: None.
Test Precondition: 
    - EthSM uninitialized.
  
Test Execution: 
    01: Call EthSM_Init() using NULL_PTR.
    02: VP(EthSM.EB.Det.EthSM_Init.InvPtr):
        Verify that ETHSM_E_PARAM_POINTER is reported to DET.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.Det.EthSM_Init.InvPtr</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01001_MainFunction_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>93</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_MainFunction shall do nothing if called in uninit state.
  
Test Object: None.
Test Precondition: 
    - EthSM uninitialized
  
Test Execution: 
    01: Call EthSM_MainFunction in uninitialized state.
    02: VP(EthSM.EB.MainFunction.Uninit): Verify that nothing was called.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MainFunction.Uninit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01002_Det_TrcvLinkStateChg_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>129</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_TrcvLinkStateChg shall report ETHSM_E_UNINIT to the DET,
    if it is called in uninitialized state.
  
Test Object: None.
Test Precondition: 
    - EthSM uninitialized
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg in uninitialized state
    02: VP(EthSM.SWS_EthSM_00115):
        Verify that ETHSM_E_UNINIT is reported to DET
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01003_Det_TcpIpModeIndication_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>177</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_TcpIpModeIndication shall report ETHSM_E_UNINIT to the DET,
    if it is called while the module is uninitialized.
  
Test Object: None.
Test Precondition: 
    - EthSM is not initialized
  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication while the module is uninitialized
    02: VP(EthSM.SWS_EthSM_00120):
        Verify that ETHSM_E_UNINIT is reported to DET
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01004_Det_CtrlModeIndication_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>221</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_CtrlModeIndication shall report ETHSM_E_UNINIT to the DET,
    if it is called in uninitialized state.
  
Test Object: None.
Test Precondition: 
    - EthSM uninitialized
  
Test Execution: 
    01: Call EthSM_CtrlModeIndication() in uninitialized state.
    02: VP(EthSM.SWS_EthSM_00192):
        Verify that ETHSM_E_UNINIT is reported to DET.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01005_Det_TrcvLinkStateChg_InvalidState</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>265</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_TrcvLinkStateChg shall report ETHSM_E_INVALID_TRCV_LINK_STATE to the DET,
    if it does not accept the transceiver link state.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg using an invalid state
    02: VP(EthSM.ASR41.SWS_EthSM_0113):
        Verify that ETHSM_E_INVALID_TRCV_LINK_STATE is reported to DET
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.ASR41.SWS_EthSM_0113</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01006_Det_TrcvLinkStateChg_InvalidCtrlIdx</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>315</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_TrcvLinkStateChg shall report ETHSM_E_PARAM_CONTROLLER to the DET,
    if it does not accept the CtrlIdx of the function call.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg using an network handle
    02: VP(EthSM.SWS_EthSM_00112):
        Verify that ETHSM_E_PARAM_CONTROLLER is reported to DET
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01007_Det_CtrlModeIndication_InvalidCtrlIdx</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>365</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_CtrlModeIndication shall report ETHSM_E_PARAM_CONTROLLER to the DET,
    if it does not accept the CtrlIdx of the function call.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
  
Test Execution: 
    01: Call EthSM_CtrlModeIndication() using an network handle
    02: VP(EthSM.SWS_EthSM_00191):
        Verify that ETHSM_E_PARAM_CONTROLLER is reported to DET
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01008_Det_TcpIpModeIndication_InvalidTcpIpState</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>415</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_TcpIpModeIndication shall report ETHSM_E_INVALID_TcpIpMode to the DET,
    if it does not accept the TcpIp state.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication using an invalid state
    02: VP(EthSM.SWS_EthSM_00118):
        Verify that ETHSM_E_INVALID_TcpIpMode is reported to DET
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00118</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01009_Det_TcpIpModeIndication_InvCtrlIdx</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>466</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_TcpIpModeIndication() shall report ETHSM_E_PARAM_CONTROLLER to the DET,
    if called with invalid NetworkIdx.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication() using an invalid NetworkIdx.
    02: VP(EthSM.SWS_EthSM_00116):
        Verify that ETHSM_E_PARAM_CONTROLLER is reported to DET.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00116</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01010_Det_OnlineToOnHold</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>516</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD while DEM is not enabled.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE.
    - ETHSM_E_LINK_DOWN not configured.
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg() with ETHTRCV_LINK_STATE_DOWN.
    02: Call EthSM_MainFunction to initiate state change.
    03: VP(EthSM.EB.EthSM_0188_ReportToDet):
        The function Det_ReportError() shall be called with ETHSM_E_DEMTODET_CTRL_TEST.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSM_0188_ReportToDet</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01011_Det_OnHoldToOnline</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>592</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE while DEM is not enabled.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - EthSMSingleNetworkOptEnable = true.
    - ETHSM_E_LINK_DOWN is not configured.
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg with ETHTRCV_LINK_STATE_ACTIVE.
    02: VP(EthSM.SWS_EthSM_00114): Verify that nothing was called
    03: Call EthSM_MainFunction() to initiate state change.
    04: VP(EthSM.EB.SWS_EthSM_00196_ReportToDet):
        The function Det_ReportError() shall be called with ETHSM_E_DEMTODET_CTRL_TEST.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00196_ReportToDet</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01012_Det_DevAuthNoComModeIndication_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>673</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_DevAuthNoComModeIndication shall report ETHSM_E_UNINIT to the DET,
    if it is called in uninitialized state.
  
Test Object: None.
Test Precondition: 
    - EthSM uninitialized
  
Test Execution: 
    01: Call EthSM_DevAuthNoComModeIndication() in uninitialized state.
    02: VP(EthSM.EB.Det.EthSM_DevAuthNoComModeIndication.Uninit):
        Verify that ETHSM_E_UNINIT is reported to DET.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.Det.EthSM_DevAuthNoComModeIndication.Uninit</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01013_Det_DevAuthNoComModeIndication_InvCtrlIdx</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>719</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_DevAuthNoComModeIndication() shall report ETHSM_E_PARAM_CONTROLLER to
    the DET, if called with invalid NetworkIdx.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
  
Test Execution: 
    01: Call EthSM_DevAuthNoComModeIndication() using an invalid NetworkIdx.
    02: VP(EthSM.EB.Det.EthSM_DevAuthNoComModeIndication.InvCtrlInd):
        Verify that ETHSM_E_PARAM_CONTROLLER is reported to DET.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.Det.EthSM_DevAuthNoComModeIndication.InvCtrlInd</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest01014_Det_EthSM_RequestComMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest01_DetChecks/source/application/EthSM_ConTest01_DetChecks.c</sourcefile>
      <sourceline>773</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_RequestComMode shall report ETHSM_E_INVALID_NETWORK_MODE to the DET,
    if called with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for a controller while
    EthSMWakeupSleepOnDatalineEnabled = FALSE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
  
Test Execution: 
    01: Call EthSM_RequestComMode with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST while
        EthSMWakeupSleepOnDatalineEnabled = FALSE and check E_NOT_OK is returned.
    02: VP(EthSM.SWS_EthSM_00095):
        Verify that ETHSM_E_INVALID_NETWORK_MODE is reported to DET
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00095</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_ConTest02000_Independent_Networks</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>45</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM shall implement for each configured network handle one network mode
    state machine.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init() is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Bring the first network to ETHSM_STATE_WAIT_CTRLMODEIND.
    02: VP(EthSM.SWS_EthSM_00024):
        Verify that EthIf_SetControllerMode() is called with correct network or controller index.
    03: VP(EthSM.SWS_EthSM_00024): Verify that nothing else was called
    04: Bring the second network to ETHSM_STATE_WAIT_CTRLMODEIND.
    05: VP(EthSM.SWS_EthSM_00024):
        Verify that EthIf_SetControllerMode() is called with correct network or controller index.
    06: VP(EthSM.SWS_EthSM_00024): Verify that nothing else was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02001_NO_COM_in_STATE_OFFLINE</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>119</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if EthSM_RequestComMode(NO_COM) is called in STATE_OFFLINE, calling
    EthSM_MainFunction() will not do anything.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init() is called.
    - Current state is STATE_OFFLINE.
  
Test Execution: 
    01: Call EthSM_RequestComMode(NO_COM).
    02: Call EthSM_MainFunction().
    03: VP(EthSM.EB.UnexpectedRequestComMode): Verify that EthSM_MainFunction() didn`t call any
        other API.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.UnexpectedRequestComMode</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02002_Unexpected_TcpIpModeIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if EthSM_TcpIpModeIndication() is called in a state which is not
    expected, the module shall ignore the call.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init() is called.
    - CurrentState is ETHSM_STATE_WAIT_ONLINE.
    - ComMode is COMM_NO_COMMUNICATION.
  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.EB.UnexpectedTcpIpModeIndication): Verify that the call was ignored.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.UnexpectedTcpIpModeIndication</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02003_Unexpected_TrcvLinkStateChg</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>243</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if EthSM_TrcvLinkStateChg() is called in a state which is not
    expected, the module shall ignore the call.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init() is called.
    - CurrentState is ETHSM_STATE_WAIT_OFFLINE.
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg() using ETHTRCV_LINK_STATE_DOWN.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.EB.UnexpectedTrcvLinkStateChg): Verify that the call was ignored.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.UnexpectedTrcvLinkStateChg</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02004_Unexpected_TcpIpModeIndication2</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>293</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if EthSM_TcpIpModeIndication() is called in a state which is not
    expected, the module shall ignore the call.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - CurrentState is ETHSM_STATE_OFFLINE.
    - ComMode is COMM_NO_COMMUNICATION.
  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_ONLINE.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.EB.UnexpectedTcpIpModeIndication): Verify that the call was ignored.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.UnexpectedTcpIpModeIndication</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02005_Unexpected_TrcvLinkStateChg2</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>343</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if EthSM_TrcvLinkStateChg() is called in a state which is not
    expected, the module shall ignore the call.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init() is called.
    - CurrentState is ETHSM_STATE_ONLINE.
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg() using ETHTRCV_LINK_STATE_ACTIVE.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.EB.UnexpectedTrcvLinkStateChg): Verify that the call was ignored.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.UnexpectedTrcvLinkStateChg</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02006_Unexpected_ReqComMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>393</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if EthSM_RequestComMode() is called in a state which is not expected
    the module shall ignore the call.
  
Test Object: None.
Test Precondition: 
    EthSM is initialized.
    CurrentState is ETHSM_STATE_WAIT_TRCVLINK.
  
Test Execution: 
    01: Call EthSM_RequestComMode(FULL_COM) in STATE_WAIT_TRCVLINK.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.EB.UnexpectedRequestComMode): Verify that the call was ignored.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.UnexpectedRequestComMode</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02007_Unexpected_CtrlModeIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>443</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if EthSM_CtrlModeIndication() is called in a state where it is not
    expected the module shall ignore the call.
  
Test Object: None.
Test Precondition: 
    EthSM is initialized.
    CurrentState is ETHSM_STATE_ONLINE.
  
Test Execution: 
    01: Call EthSM_CtrlModeIndication() with ETH_MODE_ACTIVE.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.EB.UnexpectedCtrlModeIndication): Verify that the call was ignored.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.UnexpectedCtrlModeIndication</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02008_Unexpected_CtrlModeIndication2</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>493</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if EthSM_CtrlModeIndication() is called in a state where it is not
    expected the module shall ignore the call.
  
Test Object: None.
Test Precondition: 
    EthSM is initialized.
    CurrentState is ETHSM_STATE_WAIT_ONLINE.
  
Test Execution: 
    01: Call EthSM_CtrlModeIndication() with ETH_MODE_DOWN.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.EB.UnexpectedCtrlModeIndication): Verify that the call was ignored.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.UnexpectedCtrlModeIndication</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02009_IgnoreTcpIpModeIndication_ONHOLD</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>543</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies EthSM_TcpIpModeIndication() will tolerate the TcpIp states
    TCPIP_STATE_ONHOLD, TCPIP_STATE_STARTUP and TCPIP_STATE_SHUTDOWN and perform no further action.
  
Test Object: None.
Test Precondition: 
    EthSM is initialized.
  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication() with TcpIpState TCPIP_STATE_ONHOLD.
    02: VP: Verify that the call was ignored.
    03: Call EthSM_TcpIpModeIndication() with TcpIpState TCPIP_STATE_STARTUP.
    04: VP: Verify that the call was ignored.
    05: Call EthSM_TcpIpModeIndication() with TcpIpState TCPIP_STATE_SHUTDOWN.
    06: VP: Verify that the call was ignored.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00118.TolerateTcpIpStates</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02010_TcpIpModeIndication_Offline_Ignored</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>604</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if EthSM_RequestComMode(COMM_FULL_COMMUNICATION) is called in state
    ETHSM_STATE_WAIT_OFFLINE followed by EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE) call,
    TcpIp mode indication of TCPIP_STATE_OFFLINE will be ignored.
  
Test Object: None.
Test Precondition: 
    EthSM is initialized.
    EthSM is in state WaitOffline.
  
Test Execution: 
    01: Call EthSM_RequestComMode(COMM_FULL_COMMUNICATION) while EthSM is in WaitOffline state.
    02: Call EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE) to bring the module in Offline state.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.EB.MainFunction.ProcessFlags.RequestComModeFlag_Before_TcpIpModeIndFlag,
           EthSM.EB.MainFunction.ClearFlags.TcpIpModeIndFlag.OFFLINE):
        Verify that EthIf_SetControllerMode(ETH_MODE_ACTIVE) and TcpIp_RequestComMode(TCPIP_STATE_ONLINE)
        are called and that EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE) is ignored because online
        was requested.
    05: Call EthSM_MainFunction() and check nothing happens.
    06: Call EthSM_TcpIpModeIndication(TCPIP_STATE_ONLINE) to bring the module in Online state.
    07: Call EthSM_MainFunction() to trigger the state transition.
    08: Check that the current state is ETHSM_STATE_ONLINE.
    09: Call EthSM_MainFunction() and check nothing happens.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MainFunction.ProcessFlags.RequestComModeFlag_Before_TcpIpModeIndFlag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MainFunction.ClearFlags.TcpIpModeIndFlag.OFFLINE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02011_TcpIpModeIndication_Offline_Ignored_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>703</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if EthSM_RequestComMode(COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST) is called in state
    ETHSM_STATE_WAIT_OFFLINE followed by EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE) call,
    TcpIp mode indication of TCPIP_STATE_OFFLINE will be ignored.
  
Test Object: None.
Test Precondition: 
    EthSM is initialized.
    EthSM is in state WaitOffline.
  
Test Execution: 
    01: Call EthSM_RequestComMode(COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST) while EthSM is in WaitOffline state.
    02: Call EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE) to bring the module in Offline state.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.EB.MainFunction.ProcessFlags.RequestComModeFlag_Before_TcpIpModeIndFlag,
           EthSM.EB.MainFunction.ClearFlags.TcpIpModeIndFlag.OFFLINE):
        Verify that EthIf_SetControllerMode(ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST) and
        TcpIp_RequestComMode(TCPIP_STATE_ONLINE) are called and that
        EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE) is ignored because online was requested.
    05: Call EthSM_MainFunction() and check nothing happens.
    06: Call EthSM_TcpIpModeIndication(TCPIP_STATE_ONLINE) to bring the module in Online state.
    07: Call EthSM_MainFunction() to trigger the state transition.
    08: Check that the current state is ETHSM_STATE_ONLINE.
    09: Call EthSM_MainFunction() and check nothing happens.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MainFunction.ProcessFlags.RequestComModeFlag_Before_TcpIpModeIndFlag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MainFunction.ClearFlags.TcpIpModeIndFlag.OFFLINE.Wakeup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02012_TcpIpModeIndication_Online_Ignored</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>802</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if EthSM_RequestComMode(COMM_NO_COMMUNICATION) is called in state
    ETHSM_STATE_WAIT_OFFLINE followed by EthSM_TcpIpModeIndication(TCPIP_STATE_ONLINE) call,
    TcpIp mode indication of TCPIP_STATE_ONLINE will be ignored.
  
Test Object: None.
Test Precondition: 
    EthSM is initialized.
    EthSM is in state WaitOffline.
  
Test Execution: 
    01: Call EthSM_RequestComMode(COMM_NO_COMMUNICATION) while EthSM is in WaitOffline state.
    02: Call EthSM_TcpIpModeIndication(TCPIP_STATE_ONLINE) to bring the module in Online state.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.EB.MainFunction.ProcessFlags.RequestComModeFlag_Before_TcpIpModeIndFlag,
           EthSM.EB.MainFunction.ClearFlags.TcpIpModeIndFlag.ONLINE):
        Verify that TcpIp_RequestComMode(TCPIP_STATE_OFFLINE) is called and that
        EthSM_TcpIpModeIndication(TCPIP_STATE_ONLINE) is ignored because offline
        was requested.
    05: Call EthSM_MainFunction() and check nothing happens.
    06: Call EthSM_TcpIpModeIndication(TCPIP_STATE_OFFLINE) to bring the module in Offline state.
    07: Call EthSM_MainFunction() to trigger the state transition.
    08: Check that EthIf_SetControllerMode(ETH_MODE_DOWN) is called indicating that the current
        state is ETHSM_STATE_WAIT_LINK_DOWN.
    09: Call EthSM_MainFunction() and check nothing happens.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.MainFunction.ProcessFlags.RequestComModeFlag_Before_TcpIpModeIndFlag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MainFunction.ClearFlags.TcpIpModeIndFlag.ONLINE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02013_Wait_Online_TrcvLinkCheckActive</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>898</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies that upon controller startup, EthSM reads the transceiver
    link state directly instead of waiting for a EthSM_TrcvLinkStateChg call.

    1. For the initial controller startup link is down, so a EthSM_TrcvLinkStateChg
       will have to be called.
    2. Controller is shut down.
    3. Controller is started again and is expected to transition to WAIT_ONLINE without
       a EthSM_TrcvLinkStateChg.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init() is called.
  
Test Execution: 
    01: Set the controller to state WAIT_TRCVLINK.
    02: Call a number of EthSM_MainFunction calls to make sure the controller stays in state WAIT_TRCVLINK.
    03: VP(EthSM.EB.Startup.TrcvLinkStateActive): Verify nothing happened and the controller is still in state WAIT_TRCVLINK
    04: Shutdown the controller.
    05: Start the controller again.
    06: VP(EthSM.EB.Startup.TrcvLinkStateActive): Verify transition to WAIT_ONLINE did not depend on a EthSM_TrcvLinkStateChg call.
  
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.Startup.TrcvLinkStateActive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest02014_Wait_Online_TrcvLinkCheckLinkDown</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest02_FunctionChecks/source/application/EthSM_ConTest02_FunctionChecks.c</sourcefile>
      <sourceline>994</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies that upon controller startup, EthSM reads the transceiver
    link state directly instead of waiting for a EthSM_TrcvLinkStateChg call.

    1. For the initial controller startup link is down, so a EthSM_TrcvLinkStateChg
       will have to be called.
    2. Controller is shut down.
    3. EthSM_TrcvLinkStateChg reports link is down.
    4. Controller is started again and is expected to transition to WAIT_TRCVLINK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init() is called.
  
Test Execution: 
    01: Set the controller to state WAIT_TRCVLINK.
    02: Call a number of EthSM_MainFunction calls to make sure the controller stays in state WAIT_TRCVLINK.
    03: VP(EthSM.EB.Startup.TrcvLinkStateActive): Verify nothing happened and the controller is still in state WAIT_TRCVLINK
    04: Shutdown the controller.
    05: Start the controller again.
    06: Call EthSM_TrcvLinkStateChg to report link is down
    07: VP(EthSM.EB.Startup.TrcvLinkStateActive): Verify transition to WAIT_TRCVLINK since EthSM_TrcvLinkStateChg reported link DOWN.
    08: Sanity check - Bring controller to state ONLINE.
  
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.Startup.TrcvLinkStateActive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_ConTest03000_OfflineToWaitCtrlModeInd_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_OFFLINE to ETHSM_STATE_WAIT_CTRLMODEIND when
    EthSMSingleNetworkOptEnable = true.
  
Test Object: None.
Test Precondition: 
    EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_RequestComMode(FULL_COM).
    02: VP(EthSM.SWS_EthSM_00053.RetValue): Verify that it returned E_OK.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.EB.EthSMSingleNetworkOptEnable.OfflineToWaitCtrlModeInd):
        The function EthIf_SetControllerMode shall be called with ETH_MODE_ACTIVE.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.OfflineToWaitCtrlModeInd</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03001_WaitCtrlModeInd_To_WaitTrcvLink_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>110</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_CTRLMODEIND to ETHSM_STATE_WAIT_TRCVLINK when
    EthSMSingleNetworkOptEnable = true.
  
Test Object: None.
Test Precondition: 
    EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_CtrlModeIndication() with ETH_MODE_ACTIVE.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.SWS_EthSM_00097,
           EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlModeIndToWaitTrcvLink):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_TRCVLINK.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlModeIndToWaitTrcvLink</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03002_WaitTrcvLinkToWaitOnline_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>178</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_WAIT_ONLINE when
    EthSMSingleNetworkOptEnable = true.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_TRCVLINK.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg with ETHTRCV_LINK_STATE_ACTIVE.
    02: Call EthSM_MainFunction to initiate state change.
    03: VP(EthSM.SWS_EthSM_00133):
        The function TcpIp_RequestComMode shall be called with TCPIP_STATE_ONLINE.
    04: VP(EthSM.SWS_EthSM_00134,
           EthSM.EB.EthSMSingleNetworkOptEnable.WaitTrcvLinkToWaitOnline):
        The function BswM_EthSM_CurrentState shall be called with ETHSM_STATE_WAIT_ONLINE.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitTrcvLinkToWaitOnline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00133</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00134</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03003_WaitTrcvLinkToWaitCtrlMIndDown_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>255</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_WAIT_CTRLMIND_DOWN when
    EthSMSingleNetworkOptEnable = true.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_TRCVLINK.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
    02: VP(EthSM.SWS_EthSM_00053.RetValue): Verify that it returns E_OK.
    03: Call EthSM_MainFunction to initiate state change.
    04: VP(EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlMIndDown):
        Verify that EthIf_SetControllerMode() was called with ETH_MODE_DOWN.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlMIndDown</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03004_WaitOnlineToWaitTrcvLink_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>328</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_TRCVLINK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_ONLINE.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: VP(EthSM.SWS_EthSM_00136):
        EthSM_TrcvLinkStateChg() with ETHTRCV_LINK_STATE_DOWN is called to initiate state change
        from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_TRCVLINK.
    02: Call EthSM_MainFunction to initiate state change.
    03: VP(EthSM.SWS_EthSM_00137):
        The function TcpIp_RequestComMode() shall be called with TCPIP_STATE_OFFLINE.
    04: VP(EthSM.SWS_EthSM_00138,
           EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToWaitTrcvLink):
        The function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_TRCVLINK.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToWaitTrcvLink</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00136</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00138</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03005_WaitOnlineToOnline_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>408</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_ONLINE.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication with TCPIP_STATE_ONLINE.
    02: Call EthSM_MainFunction().
    03: VP(SWS_EthSM_00148, EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToOnline):
        The function BswM_EthSM_CurrentState shall be called with ETHSM_STATE_ONLINE.
    04: VP(SWS_EthSM_00150):
        The function ComM_BusSM_ModeIndication shall be called with COMM_FULL_COMMUNICATION.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToOnline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03006_WaitOnlineToWaitCtrlMindDown_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>486</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_CTRLMIND_DOWN.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_ONLINE.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
    02: VP(SWS_EthSM_00140): Verify that ComM request with COMM_NO_COMMUNICATION is accepted.
    03: Call EthSM_MainFunction().
    04: VP(): Verify that TcpIp_RequestComMode() is called with TCPIP_STATE_OFFLINE.
    05: VP(EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToWaitCtrlMindDown):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_DOWN.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToWaitCtrlMindDown</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00140</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03007_OnlineToOnHold_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>564</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE.
    - Configuration: EthSMSingleNetworkOptEnable = true.
    - Configuration: EthSMDemCtrlTestResultReportToDem = DISBALE
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg() with ETHTRCV_LINK_STATE_DOWN.
    02: Call EthSM_MainFunction to initiate state change.
    03: VP(EthSM.SWS_EthSM_00167):
        The function TcpIp_RequestComMode() shall be called with TCPIP_STATE_ONHOLD.
    04: VP(EthSM.SWS_EthSM_00168, EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToOnHold):
        The function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_ONHOLD.
    05: VP(EthSM.EB.EthSM_0188_ReportDisabled):
        Since error reporting is disabled, no Dem or Det API call shall be performed.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToOnHold</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.EthSM_0188_ReportDisabled</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03008_OnlineToWaitOnline_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>646</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the COM mode during the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE.
    The COM mode shall change from COMM_FULL_COMMUNICATION to COMM_NO_COMMUNICATION.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_GetCurrentComMode().
    02: EthSM_GetCurrentComMode shall return COMM_FULL_COMMUNICATION.
    03: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE.
    04: Call EthSM_MainFunction().
    05: VP(EthSM.SWS_EthSM_00152, EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToWaitOnline):
        BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_ONLINE.
    06: VP(EthSM.SWS_EthSM_00154):
        Function ComM_BusSM_ModeIndication() shall be called with COMM_NO_COMMUNICATION.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToWaitOnline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03009_OnlineToWaitOffline_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>736</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_OFFLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
    02: VP(EthSM.SWS_EthSM_00053.RetValue): Verify that it returns E_OK.
    03: Call EthSM_MainFunction()
    04: VP(EthSM.SWS_EthSM_00157):
        The function TcpIp_RequestComMode() shall be called with TCPIP_STATE_OFFLINE.
    05: VP(EthSM.SWS_EthSM_00158, EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToWaitOffline):
        The function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_OFFLINE.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.OnlineToWaitOffline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03010_OnHoldToWaitTrcvLink_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>818</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_WAIT_TRCVLINK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE.
    02: VP(EthSM.SWS_EthSM_00119): Verify that nothing was called
    03: Call EthSM_MainFunction().
    04: VP(EthSM.SWS_EthSM_00175, EthSM.SWS_EthSM_00119,
           EthSM_ConTest03010_OnHoldToWaitTrcvLink_SingleNetwork):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_TRCVLINK.
    05: VP(EthSM.SWS_EthSM_00177):
        Function ComM_BusSM_ModeIndication() shall be called with COMM_NO_COMMUNICATION.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.OnHoldToWaitTrcvLink</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03011_OnHoldToOnline_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>904</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - EthSMSingleNetworkOptEnable = true.
    - ETHSM_E_LINK_DOWN configured, and DEM enabled.
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg with ETHTRCV_LINK_STATE_ACTIVE.
    02: VP(EthSM.SWS_EthSM_00114): Verify that nothing was called
    03: Call EthSM_MainFunction() to initiate state change.
    04: VP(EthSM.SWS_EthSM_00171, EthSM.SWS_EthSM_00114,
           EthSM.EB.EthSMSingleNetworkOptEnable.OnHoldToOnline):
        Function TcpIp_RequestComMode() shall be called with TCPIP_STATE_ONLINE.
    05: VP(EthSM.SWS_EthSM_00172):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_ONLINE.
    06: VP(EthSM.EB.SWS_EthSM_00196_ReportDisabled):
        Since error reporting is disabled, no Dem or Det API call shall be performed.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.OnHoldToOnline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00172</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00196_ReportDisabled</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03012_OnHoldToWaitLinkDown_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>993</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_WAIT_LINK_DOWN when
    EthSMSingleNetworkOptEnable = true.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
    02: Call EthSM_MainFunction() to initiate state change.
    03: VP(EthSM.EB.StateTransistions.OnHoldToWaitLinkDown):
        Verify that EthIf_SetControllerMode() was called with ETH_MODE_DOWN.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.OnHoldToWaitLinkDown</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03013_WaitOfflineToWaitLinkDown_MainFunctionTrigger_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>1062</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For single network optimization:
    This test verifies for transition from ETHSM_STATE_WAIT_OFFLINE to ETHSM_STATE_WAIT_LINK_DOWN
    when EthSMSingleNetworkOptEnable = true.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_OFFLINE.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 0U
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE.
    02: Call thSM_MainFunction().
    03: VP(EthSM.EB.EthSMSingleNetworkOptEnable.WaitOfflineToWaitLinkDown):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_DOWN.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOfflineToWaitLinkDown</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03014_WaitLinkDownToOffline_MainFunctionTrigger_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>1130</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For single network optimization:
    This test verifies for transition from ETHSM_STATE_WAIT_LINK_DOWN to ETHSM_STATE_WAIT_OFFLINE
    when EthSMSingleNetworkOptEnable = true.
    performed.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_LINK_DOWN.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 0U
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: EthSM_CtrlModeIndication() is called with  ETH_MODE_DOWN.
    02: Call EthSM_MainFunction().
    03: VP(): Verify that TcpIp_RequestComMode() is called with TCPIP_STATE_OFFLINE.
    04: VP(): BswM_EthSM_CurrentState(ETHSM_STATE_OFFLINE) shall be called.
    05: VP(): Function ComM_BusSM_ModeIndication shall be called with COMM_NO_COMMUNICATION.
  
Test Input: 
  
Test Output: 
    Test step 10:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_EthSM_NetworkHandle = 50U;
       Output_BswM_CurrentState = ETHSM_STATE_OFFLINE;
    Test step 11:
    ComM_BusSM_ModeIndication() Parameter(s):
      Output_EthSM_NetworkHandle = 50U;
      Output_ComM_Mode = COMM_NO_COMMUNICATION;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitLinkDownToOffline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03015_WaitCtrlMIndDownToOffline_SingleNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>1224</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_CTRLMIND_DOWN to ETHSM_STATE_OFFLINE when
    EthSMSingleNetworkOptEnable = true.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_CTRLMIND_DOWN.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call EthSM_CtrlModeIndication() with ETH_MODE_DOWN.
    03: Call EthSM_MainFunction() to initiate state change.
    05: VP(EthSM.EB.StateTransistions.WaitCtrlMIndDownToOffline):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_OFFLINE.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitCtrlMIndDownToOffline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03016_WaitTrcvLinkToWaitOnline_SingleNetwork_TrcvLinkStateActive</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>1290</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies that upon controller startup, EthSM reads the last reported transceiver
    link state directly instead of waiting for a EthSM_TrcvLinkStateChg call when
    EthSMSingleNetworkOptEnable = true.

    1. For the initial controller startup link is down, so a EthSM_TrcvLinkStateChg
      will have to be called.
    2. Controller is shut down.
    3. Controller is started again and is expected to transition to WAIT_ONLINE without
       a EthSM_TrcvLinkStateChg.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_TRCVLINK.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call a number of EthSM_Mainfunctions in state WaitTrcvLink.
    02: VP(EthSM.EB.Startup.TrcvLinkStateActive): Verify network did not transition to WAIT_ONLINE since link is still down.
    03: Transition from WAIT_TRCVLINK to OFFLINE.
    04: Transition the network to WAIT_TRCVLINK.
    05: VP(EthSM.EB.Startup.TrcvLinkStateActive): Verify Network transitioned to WAIT_ONLINE since last known link state is active.
  
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.Startup.TrcvLinkStateActive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>
    <specobject>
      <id>EthSM_ConTest03017_WaitTrcvLinkToWaitOnline_SingleNetwork_TrcvLinkStateDown</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest03_StateMachine_SingleNetwork/source/application/EthSM_ConTest03_StateMachine_SingleNetwork.c</sourcefile>
      <sourceline>1384</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies that upon controller startup, EthSM reads the transceiver
    link state directly instead of waiting for a EthSM_TrcvLinkStateChg call when
    EthSMSingleNetworkOptEnable = true.

    1. For the initial controller startup link is down, so a EthSM_TrcvLinkStateChg
       will have to be called.
    2. Controller is shut down.
    3. EthSM_TrcvLinkStateChg reports link is down.
    4. Controller is started again and is expected to transition to WAIT_TRCVLINK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_TRCVLINK.
    - EthSMSingleNetworkOptEnable = true.
  
Test Execution: 
    01: Call a number of EthSM_Mainfunctions in state WaitTrcvLink.
    02: VP(EthSM.EB.Startup.TrcvLinkStateActive): Verify network did not transition to WAIT_ONLINE since link is still down.
    03: Transition from WAIT_TRCVLINK to OFFLINE.
    04: Call EthSM_TrcvLinkStateChg to report link is down.
    05: Transition the network to WAIT_TRCVLINK.
    06: VP(EthSM.EB.Startup.TrcvLinkStateActive): Verify Network transitioned to WAIT_ONLINE since last known link state is active.
    07: Call a number of EthSM_Mainfunctions in state WaitTrcvLink.
    08: Call EthSM_TrcvLinkStateChg to report link is down.
    09: Call a number of EthSM_Mainfunctions in state WaitTrcvLink.
    10: VP(EthSM.EB.Startup.TrcvLinkStateActive): Verify network remained in state WAIT_TRCVLINK.
    11: Call EthSM_TrcvLinkStateChg() to report link is active.
    12: VP(EthSM.EB.Startup.TrcvLinkStateActive): Verify Network transitioned to WAIT_ONLINE since last known link state is active.
  
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.Startup.TrcvLinkStateActive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_ConTest04000_Wakeup_Not_Configured</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest04_NoDetChecks/source/application/EthSM_ConTest04_NoDetChecks.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM shall ignore the COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST if
    EthSMWakeupSleepOnDatalineEnabled is not enabled on the given Network.
  
Test Object: None.
Test Precondition: 
    - EthSMDevErrorDetect is disabled
    - EthSM_Init() is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSMWakeupSleepOnDatalineEnabled is enabled on different NetworkHandle
  
Test Execution: 
    01: Call EthSM_RequestComMode to request wakeup on a Network with wakeup disabled
    02: Call EthSM_MainFunction to process the request
    03: VP(EthSM.ECUC_EthSM_00109): Verify that nothing was called because the request was ignored
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.ECUC_EthSM_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_TC10_01_SleepIndication_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest05_TC10/source/application/EthSM_ConTest05_TC10.c</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify if the EthSM module is not initialized, when the function EthSM_SleepIndication is
    called, then the function EthSM_SleepIndication shall call the function Det_ReportError with
    ErrorId parameter ETHSM_E_UNINIT, if development error reporting is enabled.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is not called.
    - EthTrcv acts as passive slave (sleep is enabled)
    - Det is Enabled
  
Test Execution: 
    01: Call EthSM_SleepIndication to indicate sleep from EthTrcv.
    02: VP(EthSM.SWS_EthSM_00214):
        Verify that Development error with ErrorId parameter ETHSM_E_UNINIT was reported
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>
    <specobject>
      <id>EthSM_TC10_02_OnlineState_BusSleepMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest05_TC10/source/application/EthSM_ConTest05_TC10.c</sourcefile>
      <sourceline>90</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify if EthSM_SleepIndication is called, EthSM shall forward this call to ComM by calling
    ComM_BusSM_BusSleepMode with the corresponding communication channel.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - EthTrcv acts as passive slave (sleep is enabled)
  
Test Execution: 
    01: Call EthSM_SleepIndication to indicate sleep from EthTrcv.
    02: VP(EthSM.SWS_EthSM_91004, EthSM.SWS_EthSM_00215):
        Verify that function ComM_BusSM_BusSleepMode() shall be called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_91004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>
    <specobject>
      <id>EthSM_TC10_03_OnlineState_BusSleepMode_Multicore</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest05_TC10/source/application/EthSM_ConTest05_TC10.c</sourcefile>
      <sourceline>156</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify if EthSMMultiCoreSupport is TRUE, EthSM shall call
    SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_BusSleepMode instead of ComM_BusSM_BusSleepMode.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
    - EthTrcv acts as passive slave (sleep is enabled)
  
Test Execution: 
    01: Call EthSM_SleepIndication to indicate sleep from EthTrcv.
    02: VP(EthSM.SWS_EthSM_91004, EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSleepMode):
        Verify that function SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_BusSleepMode() shall be called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_91004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>
    <specobject>
      <id>EthSM_TC10_04_SleepIndication_NoSleep</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest05_TC10/source/application/EthSM_ConTest05_TC10.c</sourcefile>
      <sourceline>227</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify if the function EthSM_SleepIndication gets a CtrlIdx and the referenced EthTrcv of the
    affected EthIfTransceiver has set EthTrcvActAsSlavePassiveEnabled to FALSE, it shall call the
    function Det_ReportError with ErrorId  parameter ETHSM_E_PARAM_CONTROLLER, if development error
    reporting is enabled.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - EthTrcv doesn't act as passive slave (sleep is not enabled)
    - Det is Enabled
  
Test Execution: 
    01: Call EthSM_SleepIndication to indicate sleep from EthTrcv.
    02: VP(EthSM.SWS_EthSM_91004.Sleep):
        Verify that Development error with ErrorId parameter ETHSM_E_PARAM_CONTROLLER was reported
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_91004.Sleep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>
    <specobject>
      <id>EthSM_TC10_05_SleepIndication_NotConfigured</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_ConTest05_TC10/source/application/EthSM_ConTest05_TC10.c</sourcefile>
      <sourceline>284</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify if the function EthSM_SleepIndication gets a CtrlIdx, which is not configured in the
    configuration of the EthSM module, it shall call the function Det_ReportError with ErrorId
    parameter ETHSM_E_PARAM_CONTROLLER, if development error reporting is enabled.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - Det is Enabled
  
Test Execution: 
    01: Call EthSM_SleepIndication with CtrlIdx that is not configured to indicate sleep from EthTrcv.
    02: VP(EthSM.SWS_EthSM_00213):
        Verify that Development error with ErrorId parameter ETHSM_E_PARAM_CONTROLLER was reported
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_OfflineState_to_WaitCtrlModeIndState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_00_STATE_OFFLINE.c</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_OFFLINE to ETHSM_STATE_WAIT_CTRLMODEIND.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_RequestComMode with the parameter(s) defined in the input section.
    02: VP(EthSM.SWS_EthSM_00053.RetValue):
        EthSM_RequestComMode returns E_OK
    03: Call EthSM_MainFunction().
    04: VP(EthSM.EB.EthSMSingleNetworkOptEnable.OfflineToWaitCtrlModeInd):
        The function EthIf_SetControllerMode shall be called with the expected output parameter(s).
  
Test Input: 
    Test step 01:
    EthSM_RequestComMode() Parameters(s):
      Input_EthSM_NetworkHandle[0U] = 255U;
      Input_EthSM_NetworkHandle[1U] = 0U;
      Input_ComM_Mode[x] = COMM_FULL_COMMUNICATION;
  
Test Output: 
    Test step 04:
    EthIf_SetControllerMode() Parameter(s):
      Output_EthIf_CtrlIdx[0U] = 0U;
      Output_EthIf_CtrlIdx[1U] = 2U;
      Output_EthIf_CtrlMode[x] = ETH_MODE_ACTIVE;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.OfflineToWaitCtrlModeInd</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>
    <specobject>
      <id>EthSM_Transition_From_Uninitialized_To_StateOffline</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_00_STATE_OFFLINE.c</sourcefile>
      <sourceline>148</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that after calling EthSM_Init() no other module is called, and the module
    is in STATE_OFFLINE.
  
Test Object: None.
Test Precondition: 
    EthSM uninitialized
  
Test Execution: 
    01: Initialize EthSM
    02: VP(SWS_EthSM_00025): Verify that the channel is in COMM_NO_COMMUNICATION
    03: VP(SWS_EthSM_00025): Verify that a change to ETHSM_STATE_WAIT_CTRLMODEIND is possible
    04: VP(SWS_EthSM_00025): Verify that no transaction to other module is made
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthIf_ControllerInit</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.EthIf_TransceiverInit</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>
    <specobject>
      <id>EthSM_Unexpected_HandleDevAuthNoComInd</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_00_STATE_OFFLINE.c</sourcefile>
      <sourceline>210</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if EthSM_HandleDevAuthNoComInd() is called in a state which is not
    expected, the module shall ignore the call.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - CurrentState is ETHSM_STATE_OFFLINE.
    - ComMode is COMM_NO_COMMUNICATION.
  
Test Execution: 
    01: Call EthSM_HandleDevAuthNoComInd().
    02: Call EthSM_MainFunction().
    03: VP(EthSM.EB.UnexpectedHandleDevAuthNoComInd): Verify that the call was ignored.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.UnexpectedHandleDevAuthNoComInd</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_WaitCtrlModeIndState_to_WaitTrcvLinkState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_02_STATE_WAIT_CTRLMODEIND.c</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_CTRLMODEIND to ETHSM_STATE_WAIT_TRCVLINK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_CTRLMODEIND
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: Call EthSM_CtrlModeIndication() with ETH_MODE_ACTIVE for all configured CtrlIdx's.
    02: Call EthSM_MainFunction() to initiate state change.
    03: VP(EthSM.SWS_EthSM_00097,
           EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlModeIndToWaitTrcvLink):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_TRCVLINK

  
Test Input: 
    Test step 01:
    EthSM_TrcvLinkStateChg() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 2U;
      Input_EthTrcv_LinkStateType[x] = ETHTRCV_LINK_STATE_ACTIVE;
  
Test Output: 
    Test step 03:
    BswM_EthSM_CurrentState() Parameter(s):
     Output_EthSM_NetworkHandle[0U] = 255U;
     Output_EthSM_NetworkHandle[1U] = 0U;
     Output_BswM_CurrentState[x] = ETHSM_STATE_WAIT_TRCVLINK;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitCtrlModeIndToWaitTrcvLink</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_WaitTrcvLinkState_to_WaitOnlineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_05_STATE_WAIT_TRCVLINK.c</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_WAIT_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_TRCVLINK
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
      EthSMDemCtrlTestResultReportToDem is set to DEM
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg with the parameter(s) defined in the input section.
    02: Call EthSM_MainFunction to initiate state change.
    03: VP(EthSM.SWS_EthSM_00133):
        The function TcpIp_RequestComMode shall be called with the expected output parameter(s).
    04: VP(EthSM.SWS_EthSM_00134):
        The function BswM_EthSM_CurrentState shall be called with the expected output parameter(s).
  
Test Input: 
    Test step 01:
    EthSM_TrcvLinkStateChg() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 1U;
      Input_EthTrcv_LinkStateType[x] = ETHTRCV_LINK_STATE_ACTIVE;
  
Test Output: 
    Test step 03:
    TcpIp_RequestComMode() Parameter(s):
      Output_EthIf_CtrlIdx[x] = Input_EthIf_CtrlIdx[x];
      Output_TcpIp_State = TCPIP_STATE_ONLINE;
    Test step 04:
    BswM_EthSM_CurrentState() Parameter(s):
     Output_EthSM_NetworkHandle[0U] = 255U;
     Output_EthSM_NetworkHandle[1U] = 50U;
     Output_BswM_CurrentState[x] = ETHSM_STATE_WAIT_ONLINE;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00133</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00134</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>
    <specobject>
      <id>EthSM_WaitTrcvLinkState_to_StateWaitCtrlMIndDown_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_05_STATE_WAIT_TRCVLINK.c</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_TRCVLINK to ETHSM_STATE_WAIT_CTRLMIND_DOWN.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_TRCVLINK.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
    02: 02: VP(EthSM.SWS_EthSM_00053.RetValue): Verify that it returns E_OK.
    03: Call EthSM_MainFunction to initiate state change.
    04: VP(EthSM.EB.StateTransistions.WaitTrcvLinkToWaitCtrlMIndDown):
        Verify that EthIf_SetControllerMode() was called with ETH_MODE_DOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitTrcvLinkToWaitCtrlMIndDown</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_WaitCtrlModeIndDownState_to_OfflineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_07_STATE_WAIT_CTRLMODEIND_DOWN.c</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_CTRLMIND_DOWN to ETHSM_STATE_OFFLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_CTRLMIND_DOWN
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_CtrlModeIndication() with ETH_MODE_DOWN for all configured CtrlIdx's.
    02: Call EthSM_MainFunction() to initiate state change.
    03: VP(): Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_OFFLINE
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitCtrlMIndDownToOffline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_WaitOnlineState_to_OnlineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_10_STATE_WAIT_ONLINE.c</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication with the parameter(s) defined in the input section.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.SWS_EthSM_00148):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_ONLINE.
    04: VP(EthSM.SWS_EthSM_00150, EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication):
        Function ComM_BusSM_ModeIndication() or
        SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication() shall be called with
        COMM_FULL_COMMUNICATION.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>
    <specobject>
      <id>EthSM_WaitOnlineState_to_WaitTrcvLinkState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_10_STATE_WAIT_ONLINE.c</sourcefile>
      <sourceline>164</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_TRCVLINK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: VP(EthSM.SWS_EthSM_00136):
        EthSM_TrcvLinkStateChg() with ETHTRCV_LINK_STATE_DOWN is called to initiate state change
        from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_TRCVLINK.
    02: Call EthSM_MainFunction to initiate state change.
    03: VP(EthSM.SWS_EthSM_00137):
        The function TcpIp_RequestComMode shall be called with the expected output parameter(s).
    04: VP(EthSM.SWS_EthSM_00138):
        The function BswM_EthSM_CurrentState shall be called with the expected output parameter(s).
  
Test Input: 
    Test step 01:
    EthSM_TrcvLinkStateChg() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 2U;
      Input_EthTrcv_LinkStateType[x] = ETHTRCV_LINK_STATE_DOWN;
  
Test Output: 
    Test step 03:
    TcpIp_RequestComMode() Parameter(s):
      Output_EthIf_CtrlIdx[x] = Input_EthIf_CtrlIdx[x];
      Output_TcpIp_State = TCPIP_STATE_OFFLINE;
    Test step 04:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_EthSM_NetworkHandle[0U] = 255U;
       Output_EthSM_NetworkHandle[1U] = 0U;
       Output_BswM_CurrentState[x] = ETHSM_STATE_WAIT_TRCVLINK;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00136</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00138</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>
    <specobject>
      <id>EthSM_WaitOnlineState_to_WaitCtrlMindDown_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_10_STATE_WAIT_ONLINE.c</sourcefile>
      <sourceline>270</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_ONLINE to ETHSM_STATE_WAIT_CTRLMIND_DOWN.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_ONLINE.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
    02: VP(SWS_EthSM_00140): Verify that ComM request with COMM_NO_COMMUNICATION is accepted.
    03: Call EthSM_MainFunction().
    04: VP(WaitOnlineToWaitCtrlMindDown):
        Verify that TcpIp_RequestComMode() is called with TCPIP_STATE_OFFLINE.
    05: VP(WaitOnlineToWaitCtrlMindDown):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_DOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMSingleNetworkOptEnable.WaitOnlineToWaitCtrlMindDown</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_OnlineState_to_WaitOnlineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: VP(EthSM.SWS_EthSM_00151):
        Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE to initiate a state transition
        from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.SWS_EthSM_00152):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_ONLINE.
    04: VP(EthSM.SWS_EthSM_00154, EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication):
        Function ComM_BusSM_ModeIndication() or SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication()
        shall be called with COMM_NO_COMMUNICATION.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>416</internalId></specobject>
    <specobject>
      <id>EthSM_OnlineState_to_OnHoldState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>149</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
      EthSMDemCtrlTestResultReportToDem is set to DEM
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg() with ETHTRCV_LINK_STATE_DOWN.
    02: Call EthSM_MainFunction() to initiate state change.
    03: VP(EthSM.SWS_EthSM_00167):
        Function TcpIp_RequestComMode() shall be called with TCPIP_STATE_ONHOLD.
    04: VP(EthSM.SWS_EthSM_00168):
        Function BswM_EthSM_CurrentStat() shall be called with ETHSM_STATE_ONHOLD.
  
Test Input: 
    Test step 01:
    EthSM_TrcvLinkStateChg() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 1U;
      Input_EthTrcv_LinkStateType[x] = ETHTRCV_LINK_STATE_DOWN;
  
Test Output: 
    Test step 03:
    TcpIp_RequestComMode() Parameter(s):
      Output_EthIf_CtrlIdx[x] = Input_EthIf_CtrlIdx[x];
      Output_TcpIp_State = TCPIP_STATE_ONHOLD;
    Test step 04:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_EthSM_NetworkHandle[0U] = 255U;
       Output_EthSM_NetworkHandle[1U] = 50U;
       Output_BswM_CurrentState[x] = ETHSM_STATE_ONHOLD;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>417</internalId></specobject>
    <specobject>
      <id>EthSM_OnlineState_to_WaitOfflineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>251</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_OFFLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION.
    02: VP(EthSM.SWS_EthSM_00053.RetValue):
        EthSM_RequestComMode() returns E_OK.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.SWS_EthSM_00157):
        TcpIp_RequestComMode() shall be called with TCPIP_STATE_OFFLINE.
    05: VP(EthSM.SWS_EthSM_00158):
        BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_OFFLINE.
  
Test Input: 
    Test step 01:
    EthSM_RequestComMode() Parameters(s):
      Input_EthSM_NetworkHandle[0U] = 255U;
      Input_EthSM_NetworkHandle[1U] = 0U;
      Input_EthSM_ComM_Mode[x] = COMM_NO_COMMUNICATION;
  
Test Output: 
    Test step 04:
    TcpIp_RequestComMode() Parameter(s):
      Output_EthIf_CtrlIdx[x] = Input_EthIf_CtrlIdx[x];
      Output_TcpIp_State = TCPIP_STATE_OFFLINE;
    Test step 05:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_BswM_NetworkHandle[x] = Input_EthSM_NetworkHandle[x];
       Output_BswM_CurrentState[x] = ETHSM_STATE_WAIT_OFFLINE;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>418</internalId></specobject>
    <specobject>
      <id>EthSM_OnlineState_to_WaitOnlineState_ModeCheck</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>353</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the COM mode during the transition from ETHSM_STATE_ONLINE to ETHSM_STATE_WAIT_ONLINE.
    The COM mode shall change from COMM_FULL_COMMUNICATION to COMM_NO_COMMUNICATION.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: Call EthSM_GetCurrentComMode with the parameter(s) defined in the input section.
    02: VP(EthSM.SWS_EthSM_00059.RetValue):
        EthSM_GetCurrentComMode shall return E_OK.
    03: VP(EthSM.SWS_EthSM_00059):
        EthSM_GetCurrentComMode shall return the parameter(s) defined in the output section.
    04: Call EthSM_TcpIpModeIndication with the parameter(s) defined in the input section.
    05: Call EthSM_MainFunction().
    06: Call EthSM_GetCurrentComMode with the parameter(s) defined in the input section.
    07: VP(EthSM.SWS_EthSM_00059.RetValue):
        EthSM_GetCurrentComMode shall return E_OK.
    08: VP(EthSM.SWS_EthSM_00059):
        EthSM_GetCurrentComMode shall return the parameter(s) defined in the output section.
  
Test Input: 
    Test step 01:
    EthSM_GetCurrentComMode() Parameters(s):
       Input_EthSM_NetworkHandle[0U] = 255U;
       Input_EthSM_NetworkHandle[1U] = 0U;
    Test step 04:
    EthSM_TcpIpModeIndication() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 2U;
      Input_TcpIp_State[x] = TCPIP_STATE_OFFLINE;
    Test step 06:
    EthSM_GetCurrentComMode() Parameters(s):
       Input_EthSM_NetworkHandle[0U] = 255U;
       Input_EthSM_NetworkHandle[1U] = 0U;
  
Test Output: 
    Test step 03:
    EthSM_GetCurrentComMode() Parameters(s):
       Output_ComM_Mode[x] = COMM_FULL_COMMUNICATION;
    Test step 08:
    EthSM_GetCurrentComMode() Parameters(s):
       Output_ComM_Mode[x] = COMM_NO_COMMUNICATION;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00059.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>419</internalId></specobject>
    <specobject>
      <id>EthSM_OnlineState_to_OnHoldState_Transition_NoErrorReport</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_15_STATE_ONLINE.c</sourcefile>
      <sourceline>472</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if report to Dem is enabled and optional configuration
    parameter ETHSM_E_LINK_DOWN doesn't exist, the transition from ETHSM_STATE_ONLINE
    to ETHSM_STATE_ONHOLD shall not report any error.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init() is called.
    - EthSM state machine is in ETHSM_STATE_ONLINE.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Perform a transition from ETHSM_STATE_ONLINE to ETHSM_STATE_ONHOLD.
        * Call EthSM_TrcvLinkStateChg(ETHTRCV_LINK_STATE_ACTIVE).
        * Call EthSM_MainFunction() to initiate state change.
    02: VP(EthSM.EB.SWS_EthSM_00188_NoDemRefExist): Verify that no error is reported during transition.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00188_NoDemRefExist</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>420</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_OnHoldState_to_WaitTrcvLinkState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_20_STATE_ONHOLD.c</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_WAIT_TRCVLINK.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U

  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE.
    02: VP(EthSM.SWS_EthSM_00119): Verify that transition does not start before
        EthSM_MainFunction() is called.
    03: Call EthSM_MainFunction().
    04: VP(EthSM.SWS_EthSM_00175, EthSM.SWS_EthSM_0119):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_WAIT_TRCVLINK.
    05: VP(EthSM.SWS_EthSM_00177, EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication):
        Function ComM_BusSM_ModeIndication() or SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication()
        shall be called with COMM_NO_COMMUNICATION.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>421</internalId></specobject>
    <specobject>
      <id>EthSM_OnHoldState_to_OnlineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_20_STATE_ONHOLD.c</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
      EthSMDemCtrlTestResultReportToDem is set to DEM
  
Test Execution: 
    01: Call EthSM_TrcvLinkStateChg() with ETHTRCV_LINK_STATE_ACTIVE.
    02: VP(EthSM.SWS_EthSM_00114): Verify that transition does not start before
        EthSM_MainFunction() is called.
    03: Call EthSM_MainFunction() to initiate state change.
    04: VP(EthSM.SWS_EthSM_00171, EthSM.SWS_EthSM_00114):
        Function TcpIp_RequestComMode() shall be called with TCPIP_STATE_ONLINE.
    05: VP(EthSM.SWS_EthSM_00172):
        Function BswM_EthSM_CurrentState() shall be called with ETHSM_STATE_ONLINE.
  
Test Input: 
    Test step 01:
    EthSM_TrcvLinkStateChg() Parameters(s):
      Input_EthIf_CtrlIdx[0U] = 0U;
      Input_EthIf_CtrlIdx[1U] = 1U;
      Input_EthTrcv_LinkStateType[x] = ETHTRCV_LINK_STATE_ACTIVE;
  
Test Output: 
    Test step 03:
    TcpIp_RequestComMode() Parameter(s):
      Output_EthIf_CtrlIdx[x] = Input_EthIf_CtrlIdx[x];
      Output_TcpIp_State = TCPIP_STATE_ONLINE;
    Test step 04:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_EthSM_NetworkHandle[0U] = 255U;
       Output_EthSM_NetworkHandle[1U] = 50U;
       Output_BswM_CurrentState[x] = ETHSM_STATE_ONLINE;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00172</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>422</internalId></specobject>
    <specobject>
      <id>EthSM_OnHoldState_to_WaitDevAuthOfflineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_20_STATE_ONHOLD.c</sourcefile>
      <sourceline>258</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_WAIT_DEVAUTH_OFFLINE
    for EthSM_Network which has EthSMDevAuthNoComNotificationEnable config parameter enabled
    and the transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_WAIT_LINK_DOWN for
    EthSM_Network which does not have EthSMDevAuthNoComNotificationEnable enabled.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U -&gt; EthSMDevAuthNoComNotificationEnable 
      not set
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U -&gt; EthSMDevAuthNoComNotificationEnable set
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U  -&gt; EthSMDevAuthNoComNotificationEnable set
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION for the Network which has config parameter
        EthSMDevAuthNoComNotificationEnable set.
    02: VP(EthSM.SWS_EthSM_00053.RetValue):
        EthSM_RequestComMode returns E_OK
    03: VP(EthSM.SWS_EthSM_00053): Verify that transition does not start before
        EthSM_MainFunction() is called.
    04: Call EthSM_MainFunction().
    05: VP(EthSM.EB.StateTransistions.OnHoldToWaitDevAuthOffline.Enabled):
        Verify that DevAuth_RequestComModeNoCom() was called as config parameter
        EthSMDevAuthNoComNotificationEnable is set for this EthSM_Network.
    06: Call EthSM_RequestComMode() with COMM_NO_COMMUNICATION for the Network which does not config parameter
        EthSMDevAuthNoComNotificationEnable set.
    07: VP(EthSM.SWS_EthSM_00053.RetValue):
        EthSM_RequestComMode returns E_OK
    08: VP(EthSM.SWS_EthSM_00053): Verify that transition does not start before
        EthSM_MainFunction() is called.
    09: Call EthSM_MainFunction().
    10: VP(EthSM.EB.StateTransistions.OnHoldToWaitDevAuthOffline.Disabled):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_DOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053.RetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.OnHoldToWaitDevAuthOffline.Enabled</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.OnHoldToWaitDevAuthOffline.Disabled</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>423</internalId></specobject>
    <specobject>
      <id>EthSM_OnHoldState_to_OnlineState_Transition_NoErrorReport</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_20_STATE_ONHOLD.c</sourcefile>
      <sourceline>370</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if report to Dem is enabled and optional configuration
    parameter ETHSM_E_LINK_DOWN doesn't exist, the transition from ETHSM_STATE_ONHOLD
    to ETHSM_STATE_ONLINE shall not report any error.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init() is called.
    - EthSM state machine is in ETHSM_STATE_ONHOLD.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Perform a transition from ETHSM_STATE_ONHOLD to ETHSM_STATE_ONLINE.
        * Call EthSM_TrcvLinkStateChg(ETHTRCV_LINK_STATE_ACTIVE).
        * Call EthSM_MainFunction() to initiate state change.
    02: VP(EthSM.EB.SWS_EthSM_00196_NoDemRefExist): Verify that no error is reported during transition.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.SWS_EthSM_00196_NoDemRefExist</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>424</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_WaitOfflineState_to_WaitDevAuthOfflineState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_25_STATE_WAIT_OFFLINE.c</sourcefile>
      <sourceline>50</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_OFFLINE to ETHSM_STATE_WAIT_DEVAUTH_OFFLINE
    for EthSM_Network which has EthSMDevAuthNoComNotificationEnable config parameter enabled
    and the transition from ETHSM_STATE_WAIT_OFFLINE to ETHSM_STATE_WAIT_LINK_DOWN for 
    EthSM_Network which does not have EthSMDevAuthNoComNotificationEnable enabled.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_OFFLINE.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle0 = 255U -&gt; EthIf_CtrlIdx = 0U 0U -&gt; EthSMDevAuthNoComNotificationEnable 
      not set
      EthSM_NetworkHandle1 = 50U -&gt; EthIf_CtrlIdx = 1U -&gt; EthSMDevAuthNoComNotificationEnable set
      EthSM_NetworkHandle2 = 0U -&gt; EthIf_CtrlIdx = 2U -&gt; EthSMDevAuthNoComNotificationEnable set
  
Test Execution: 
    01: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE for EthSM_NetworkHandle1.
    02: Call EthSM_MainFunction() to perform transition.
    03: VP(EthSM.EB.StateTransistions.WaitOfflineToWaitDevAuthOffline.Enabled):
        Verify that DevAuth_RequestComModeNoCom() was called as config parameter
        EthSMDevAuthNoComNotificationEnable is set for this EthSM_Network.
    04: Call EthSM_TcpIpModeIndication() with TCPIP_STATE_OFFLINE for EthSM_NetworkHandle0 which has
        parameter EthSMDevAuthNoComNotificationEnable not set.
    05: Call EthSM_MainFunction() to perform transition.
    06: VP(EthSM.EB.StateTransistions.WaitOfflineToWaitDevAuthOffline.Disabled):
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_DOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitOfflineToWaitDevAuthOffline.Enabled</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitOfflineToWaitDevAuthOffline.Disabled</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>425</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_WaitDevAuthOfflineState_to_WaitLinkDownState_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_30_STATE_WAIT_DEVAUTH_OFFLINE.c</sourcefile>
      <sourceline>50</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the transition from ETHSM_STATE_WAIT_DEVAUTH_OFFLINE to ETHSM_STATE_WAIT_LINK_DOWN.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_DEVAUTH_OFFLINE.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle0 = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle1 = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle2 = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: Call EthSM_DevAuthNoComModeIndication() for EthIf_CtrlIdx1.
    02: Call EthSM_MainFunction() to perform transition.
    03: VP(EthSM.EB.StateTransistions.WaitDevAuthOfflineToWaitLinkDown):
        Verify that EthIf_SetControllerMode() was called with ETH_MODE_DOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitDevAuthOfflineToWaitLinkDown</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>426</internalId></specobject>
    <specobject>
      <id>EthSM_WaitDevAuthOfflineState_NoTransition_WKUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_30_STATE_WAIT_DEVAUTH_OFFLINE.c</sourcefile>
      <sourceline>117</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies that there is no transition if EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST
    is called from state ETHSM_STATE_WAIT_DEVAUTH_OFFLINE.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_DEVAUTH_OFFLINE
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction() to trigger the state transition.
    03: VP(EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.NoTransition.ETHSM_STATE_WAIT_DEVAUTH_OFFLINE):
        Verify that nothing happened which indicates that the controller state did not transition from
        ETHSM_STATE_WAIT_DEVAUTH_OFFLINE.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.NoTransition.ETHSM_STATE_WAIT_DEVAUTH_OFFLINE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>427</internalId></specobject>
    <specobject>
      <id>EthSM_WaitDevAuthOfflineState_to_WaitCtrlModeIndState_WKUP_Transition</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_30_STATE_WAIT_DEVAUTH_OFFLINE.c</sourcefile>
      <sourceline>181</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the transition from ETHSM_STATE_WAIT_DEVAUTH_OFFLINE to ETHSM_STATE_WAIT_CTRLMODEIND over
    ETHSM_STATE_OFFLINE.
    EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST is called from state
    ETHSM_STATE_WAIT_DEVAUTH_OFFLINE then EthSM_DevAuthNoComModeIndication() is called for the given
    controller triggering the transition to state ETHSM_STATE_WAIT_LINK_DOWN.
    From state ETHSM_STATE_WAIT_LINK_DOWN EthSM_CtrlModeIndication() with ETH_MODE_DOWN is called
    triggering state transition to ETHSM_STATE_OFFLINE.
    After two EthSM_MainFunction() calls, the EthSM
    will transition to ETHSM_STATE_WAIT_CTRLMODEIND state.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
    - EthSM state machine is in state ETHSM_STATE_WAIT_DEVAUTH_OFFLINE
  
Test Execution: 
    01: Call EthSM_RequestComMode() with COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST for the controller
        defined by EthSM_NetworkHandle and check that E_OK is returned.
    02: Call EthSM_MainFunction().
    03: Check that nothing happened.
    04: Call EthSM_DevAuthNoComModeIndication() for the controller to transition to state ETHSM_STATE_WAIT_LINK_DOWN.
    05: Call EthSM_MainFunction().
    06: Call EthSM_CtrlModeIndication() with ETH_MODE_DOWN to trigger the transition to state ETHSM_STATE_OFFLINE.
    07: Call EthSM_MainFunction() to transition to state ETHSM_STATE_OFFLINE.
    08: Check that state transitioned to ETHSM_STATE_OFFLINE.
    09: Call EthSM_MainFunction() to transition to state ETHSM_STATE_WAIT_CTRLMODEIND.
    10: VP(EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.ProcessWakeUpRequest.ETHSM_STATE_WAIT_DEVAUTH_OFFLINE)
        Verify that EthIf_SetControllerMode() is called with ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST indicating the
        current state is ETHSM_STATE_WAIT_CTRLMODEIND.
    11: Call EthSM_MainFunction() and check nothing happened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.EthSMWakeupSleepOnDatalineEnabled.ProcessWakeUpRequest.ETHSM_STATE_WAIT_DEVAUTH_OFFLINE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>428</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_WaitLinkDownState_To_Offline_Transition_MainFunctionTrigger</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_StateMachine_DevAuth/source/application/EthSM_CT01_35_STATE_WAIT_LINK_DOWN.c</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the transition from ETHSM_STATE_WAIT_LINK_DOWN to ETHSM_STATE_WAIT_OFFLINE.
    performed.
  
Test Object: None.
Test Precondition: 
    - EthSM_Init is called.
    - EthSM state machine is in ETHSM_STATE_WAIT_LINK_DOWN.
    - The modules EthIf, ComM and EthSM are configured to provide a mapping between ComMChannelId
      and EthIf_CtrlIdx.
      EthSM_NetworkHandle = 255U -&gt; EthIf_CtrlIdx = 0U
      EthSM_NetworkHandle = 50U -&gt; EthIf_CtrlIdx = 1U
      EthSM_NetworkHandle = 0U -&gt; EthIf_CtrlIdx = 2U
  
Test Execution: 
    01: EthSM_CtrlModeIndication() is called with  ETH_MODE_DOWN.
    02: Call EthSM_MainFunction().
    03: VP(EthSM.EB.StateTransistions.WaitLinkDownToOffline):
        Verify that TcpIp_RequestComMode() is called with TCPIP_STATE_OFFLINE.
    04: VP(EthSM.EB.StateTransistions.WaitLinkDownToOffline):
        BswM_EthSM_CurrentState(ETHSM_STATE_OFFLINE) shall be called.
    05: VP(EthSM.EB.StateTransistions.WaitLinkDownToOffline,
          EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication): Function
          ComM_BusSM_ModeIndication or SchM_Call_EthSM_RequiredCSEntry_ComM_BusSM_ModeIndication()
          shall be called with COMM_NO_COMMUNICATION.
  
Test Input: 
  
Test Output: 
    Test step 10:
    BswM_EthSM_CurrentState() Parameter(s):
       Output_EthSM_NetworkHandle = 50U;
       Output_BswM_CurrentState = ETHSM_STATE_OFFLINE;
    Test step 11:
    ComM_BusSM_ModeIndication() Parameter(s):
      Output_EthSM_NetworkHandle = 50U;
      Output_ComM_Mode = COMM_NO_COMMUNICATION;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.StateTransistions.WaitLinkDownToOffline</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.MultiCoreSupport.SchM_Call_ComM_BusSM_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>429</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_T100_00_RequestComMode_DetUninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_T100_RequestComMode_ParameterTest/source/application/EthSM_T100_EthSM_RequestComMode_ParameterTest.c</sourcefile>
      <sourceline>49</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the response of EthSM_RequestComMode when EthSM_Init is not called.
  
Test Object: None.
Test Precondition: 
    EthSM_Init is not called.
    The modules EthIf, ComM and EthSM are configured to provide a mapping between EthSM_NetworkHandle
    and EthIf_CtrlIdx.
  
Test Execution: 
    01: Call function with the parameter(s) defined in the input section.
    02: Returns E_NOT_OK
    03: VP(EthSM.SWS_EthSM_00054):
        The function Det_ReportError shall be called with the expected output parameter(s).
  
Test Input: 
    EthSM_RequestComMode() Parameters(s):
      Input_EthSM_NetworkHandle = 255U;
      Input_EthSM_ComM_Mode = COMM_NO_COMMUNICATION;
  
Test Output: 
     Det_ReportError() Parameter(s):
       Output_Det_ModuleId = ETHSM_MODULE_ID;
       Output_Det_InstanceId = ETHSM_INSTANCE_ID;
       Output_Det_ApiId = ETHSM_REQUESTCOMMODE_SVCID;
       Output_Det_ErrorId = ETHSM_E_UNINIT;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>430</internalId></specobject>
    <specobject>
      <id>EthSM_T100_05_RequestComMode_DetInvNetwork_NoCom</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_T100_RequestComMode_ParameterTest/source/application/EthSM_T100_EthSM_RequestComMode_ParameterTest.c</sourcefile>
      <sourceline>125</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the response of EthSM_RequestComMode when the network handle parameter is invalid
    and the mode is COMM_NO_COMMUNICATION.
  
Test Object: None.
Test Precondition: 
    EthSM_Init is called.
    The modules EthIf, ComM and EthSM are configured to provide a mapping between EthSM_NetworkHandle
    and EthIf_CtrlIdx.
  
Test Execution: 
    01: Call function with the parameter(s) defined in the input section.
    02  VP(EthSM.SWS_EthSM_00051.InvalidNetworkHandle):
        Returns E_NOT_OK
    03: VP(EthSM.SWS_EthSM_00052):
        The function Det_ReportError shall be called with the expected output parameter(s).
  
Test Input: 
    EthSM_RequestComMode() Parameters(s):
      Input_EthSM_NetworkHandle = 20U;
      Input_EthSM_ComM_Mode = COMM_NO_COMMUNICATION;
  
Test Output: 
     Det_ReportError() Parameter(s):
       Output_Det_ModuleId = ETHSM_MODULE_ID;
       Output_Det_InstanceId = ETHSM_INSTANCE_ID;
       Output_Det_ApiId = ETHSM_REQUESTCOMMODE_SVCID;
       Output_Det_ErrorId = ETHSM_E_INVALID_NETWORK_HANDLE;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00051.InvalidNetworkHandle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>431</internalId></specobject>
    <specobject>
      <id>EthSM_T100_06_RequestComMode_DetInvNetwork_FullCom</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_T100_RequestComMode_ParameterTest/source/application/EthSM_T100_EthSM_RequestComMode_ParameterTest.c</sourcefile>
      <sourceline>202</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the response of EthSM_RequestComMode when the network handle parameter is invalid
    and the mode is COMM_FULL_COMMUNICATION.
  
Test Object: None.
Test Precondition: 
    EthSM_Init is called.
    The modules EthIf, ComM and EthSM are configured to provide a mapping between EthSM_NetworkHandle
    and EthIf_CtrlIdx.
  
Test Execution: 
    01: Call function with the parameter(s) defined in the input section.
    02  VP(EthSM.SWS_EthSM_00051.InvalidNetworkHandle):
        Returns E_NOT_OK
    03: VP(EthSM.SWS_EthSM_00052):
        The function Det_ReportError shall be called with the expected output parameter(s).
  
Test Input: 
    EthSM_RequestComMode() Parameters(s):
      Input_EthSM_NetworkHandle = 20U;
      Input_EthSM_ComM_Mode = COMM_FULL_COMMUNICATION;
  
Test Output: 
     Det_ReportError() Parameter(s):
       Output_Det_ModuleId = ETHSM_MODULE_ID;
       Output_Det_InstanceId = ETHSM_INSTANCE_ID;
       Output_Det_ApiId = ETHSM_REQUESTCOMMODE_SVCID;
       Output_Det_ErrorId = ETHSM_E_INVALID_NETWORK_HANDLE;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00051.InvalidNetworkHandle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>432</internalId></specobject>
    <specobject>
      <id>EthSM_T100_07_RequestComMode_DetInvNetworkMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_T100_RequestComMode_ParameterTest/source/application/EthSM_T100_EthSM_RequestComMode_ParameterTest.c</sourcefile>
      <sourceline>281</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if EthSM_RequestComMode is called with an invalid network communication mode parameter
    ETHSM_E_INVALID_NETWORK_MODE will be reported to DET.
  
Test Object: None.
Test Precondition: 
    EthSM_Init is called.
  
Test Execution: 
    01: Call EthSM_RequestComMode using an invalid communication mode
    02: VP(EthSM.SWS_EthSM_00095):
        Verify that EthSM_RequestComMode returns E_NOT_OK
    03: VP(EthSM.SWS_EthSM_00095):
        Verify that ETHSM_E_INVALID_NETWORK_MODE is reported to DET
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00095</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>433</internalId></specobject>
    <specobject>
      <id>EthSM_T100_08_RequestComMode_SilentMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_T100_RequestComMode_ParameterTest/source/application/EthSM_T100_EthSM_RequestComMode_ParameterTest.c</sourcefile>
      <sourceline>335</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that EthSM_RequestComMode shall accept the SILENT_COMMUNICATION mode when requested.
  
Test Object: None.
Test Precondition: 
    EthSM_Init is called.
  
Test Execution: 
    01: Call EthSM_RequestComMode using SILENT_COMMUNICATION
    02: VP(EthSM.SWS_EthSM_00199):
        Verify that EthSM_RequestComMode returns E_OK.
    03: VP(EthSM.SWS_EthSM_00199):
        Verify that no DET is reported.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00199</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>434</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_T101_00_GetVersionInfo_DetInvPointer</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_T101_GetVersionInfo_ParameterTest/source/application/EthSM_T101_EthSM_GetVersionInfo_ParameterTest.c</sourcefile>
      <sourceline>80</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the functionality of GetVersionInfo function when parameter is a invalid pointer.
  
Test Object: None.
Test Precondition: 
    The module under test needs to have version information
  
Test Execution: 
    01: Call function with the parameter(s) defined in the input section.
    02: VP(EthSM.EB.GetVersionInfo_Error):
        The function Det_ReportError shall be called with the expected output parameter(s).
  
Test Input: 
    Test Step 01:
    &lt;ModuleName&gt;_GetVersionInfo() Parameter(s):
      Std_VersionInfoType *Input_VersionInfo = NULL_PTR;
  
Test Output: 
    Det_ReportError() Parameter(s):
      uint16 Output_Det_ModuleId = TEST_CURRENT_MODULE_ID(TEST_MODULE_PREFIX);
      uint8 Output_Det_InstanceId = TEST_CURRENT_DET_INSTANCE_ID(TEST_MODULE_PREFIX);
      uint8 Output_Det_ApiId = TEST_CURRENT_DET_API_ID(TEST_MODULE_PREFIX);
      uint8 Output_Det_ErrorId = &lt;ModuleName&gt;_E_PARAM_POINTER;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>EthSM.EB.GetVersionInfo_Error</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>435</internalId></specobject>
    <specobject>
      <id>EthSM_T101_01_GetVersionInfo_VersionTest_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_T101_GetVersionInfo_ParameterTest/source/application/EthSM_T101_EthSM_GetVersionInfo_ParameterTest.c</sourcefile>
      <sourceline>150</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test calls the EthSM_GetVersionInfo() function while the module is uninitialized
    and compares the returned values with the version info stored in the module.
  
Test Object: None.
Test Precondition: 
    The module under test needs to have version information.
  
Test Execution: 
    01: Call EthSM_GetVersionInfo without EthSM_Init before
    02: VP(EthSM.EB.GetVersionInfo.GetInfoNotInit):
        The returned version information shall match output version information.
  
Test Input: 
  
Test Output: 
    Output_VersionInfo.moduleID = TEST_CURRENT_MODULE_ID(TEST_MODULE_PREFIX);
    Output_VersionInfo.sw_major_version = TEST_CURRENT_SW_MAJOR_VERSION(TEST_MODULE_PREFIX);
    Output_VersionInfo.sw_minor_version = TEST_CURRENT_SW_MINOR_VERSION(TEST_MODULE_PREFIX);
    Output_VersionInfo.sw_patch_version = TEST_CURRENT_SW_PATCH_VERSION(TEST_MODULE_PREFIX);
    Output_VersionInfo.vendorID = TEST_CURRENT_VENDOR_ID(TEST_MODULE_PREFIX);
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.GetVersionInfo.GetInfoNotInit</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>436</internalId></specobject>
    <specobject>
      <id>EthSM_T101_02_GetVersionInfo_VersionTest_Initialized</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_T101_GetVersionInfo_ParameterTest/source/application/EthSM_T101_EthSM_GetVersionInfo_ParameterTest.c</sourcefile>
      <sourceline>203</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test calls the EthSM_GetVersionInfo() function after the module was initialized
    and compares the returned values with the version info stored in the module.
  
Test Object: None.
Test Precondition: 
    The module under test needs to have version information.
  
Test Execution: 
    01: Initialize the module
    02: Call EthSM_GetVersionInfo
    03: VP(EthSM.SWS_EthSM_00046.VersionInfo):
        The returned version information shall match output version information.
  
Test Input: 
  
Test Output: 
    Output_VersionInfo.moduleID = TEST_CURRENT_MODULE_ID(TEST_MODULE_PREFIX);
    Output_VersionInfo.sw_major_version = TEST_CURRENT_SW_MAJOR_VERSION(TEST_MODULE_PREFIX);
    Output_VersionInfo.sw_minor_version = TEST_CURRENT_SW_MINOR_VERSION(TEST_MODULE_PREFIX);
    Output_VersionInfo.sw_patch_version = TEST_CURRENT_SW_PATCH_VERSION(TEST_MODULE_PREFIX);
    Output_VersionInfo.vendorID = TEST_CURRENT_VENDOR_ID(TEST_MODULE_PREFIX);
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00046.VersionInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>437</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>EthSM_T102_00_GetCurrentComMode_DetUninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_T102_GetCurrentComMode_ParameterTest/source/application/EthSM_T102_EthSM_GetCurrentComMode_ParameterTest.c</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the response of EthSM_GetCurrentComMode when EthSM_Init is not called.
  
Test Object: None.
Test Precondition: 
    EthSM_Init is not called.
    The modules EthIf, ComM and EthSM are configured to provide a mapping between EthSM_NetworkHandle
    and EthIf_CtrlIdx.
  
Test Execution: 
    01: Call function with the parameter(s) defined in the input section.
    02  Returns E_NOT_OK
    03: VP(EthSM.SWS_EthSM_00060):
        The function Det_ReportError shall be called with the expected output parameter(s).
  
Test Input: 
    Test step 01:
    EthSM_RequestComMode() Parameters(s):
      Input_EthSM_NetworkHandle = 255U;
  
Test Output: 
    Test step 02:
    Det_ReportError() Parameter(s):
      Output_Det_ModuleId = ETHSM_MODULE_ID;
      Output_Det_InstanceId = ETHSM_INSTANCE_ID;
      Output_Det_ApiId = ETHSM_GETCURRENTCOMMODE_SVCID;
      Output_Det_ErrorId = ETHSM_E_UNINIT;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>438</internalId></specobject>
    <specobject>
      <id>EthSM_T102_01_GetCurrentComMode_DetInvNetwork</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_T102_GetCurrentComMode_ParameterTest/source/application/EthSM_T102_EthSM_GetCurrentComMode_ParameterTest.c</sourcefile>
      <sourceline>122</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the response of EthSM_GetCurrentComMode when the network handle parameter is invalid
    and the mode is COMM_FULL_COMMUNICATION.
  
Test Object: None.
Test Precondition: 
    EthSM_Init is called.
    The modules EthIf, ComM and EthSM are configured to provide a mapping between EthSM_NetworkHandle
    and EthIf_CtrlIdx.
  
Test Execution: 
    01: Call function with the parameter(s) defined in the input section.
    02  VP(EthSM.SWS_EthSM_00057.InvalidNetworkHandle):
        Returns E_NOT_OK
    03: VP(EthSM.SWS_EthSM_00058):
        The function Det_ReportError shall be called with the expected output parameter(s).
  
Test Input: 
    Test step 01:
    EthSM_GetCurrentComMode() Parameters(s):
      Input_EthSM_NetworkHandle = 20U;
  
Test Output: 
    Test step 03:
    Det_ReportError() Parameter(s):
      Output_Det_ModuleId = ETHSM_MODULE_ID;
      Output_Det_InstanceId = ETHSM_INSTANCE_ID;
      Output_Det_ApiId = ETHSM_GETCURRENTCOMMODE_SVCID;
      Output_Det_ErrorId = ETHSM_E_INVALID_NETWORK_HANDLE;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00057.InvalidNetworkHandle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
        <provcov>
          <linksto>EthSM.SWS_EthSM_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>439</internalId></specobject>
    <specobject>
      <id>EthSM_T102_02_GetCurrentComMode_DetInvPointer</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Conformance/IN/EthSM_T102_GetCurrentComMode_ParameterTest/source/application/EthSM_T102_EthSM_GetCurrentComMode_ParameterTest.c</sourcefile>
      <sourceline>201</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the functionality of GetCurrentComMode function when parameter is a invalid pointer.
  
Test Object: None.
Test Precondition: 
    EthSM_Init is called.
    The modules EthIf, ComM and EthSM are configured to provide a mapping between EthSM_NetworkHandle
    and EthIf_CtrlIdx.
  
Test Execution: 
    01: Call function with the parameter(s) defined in the input section.
    02: EthSM_GetCurrentComMode returns E_NOT_OK.
    03: VP(EthSM.ASR41.SWS_EthSM_00084):
        The function Det_ReportError shall be called with the expected output parameter(s).
  
Test Input: 
    Test Step 01:
    EthSM_GetCurrentComMode() Parameter(s):
      NetworkHandleType Input_EthSM_NetworkHandle = 20U;
      ComM_ModeType *Input_EthSM_ComMode = NULL_PTR;
  
Test Output: 
    Test Step 02:
    Det_ReportError() Parameter(s):
      uint16 Output_Det_ModuleId = ETHSM_MODULE_ID;
      uint8 Output_Det_InstanceId = ETHSM_INSTANCE_ID;
      uint8 Output_Det_ApiId = ETHSM_GETCURRENTCOMMODE_SVCID;
      uint8 Output_Det_ErrorId = ETHSM_E_PARAM_POINTER;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.ASR41.SWS_EthSM_00084</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>440</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_ETHSM_Gen_00000_OnlyPbCfg</id>
      <status>approved</status>
      <source>EB test case specification (asc_EthSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_EthSM/test/ts5/Generic/IN/EthSM_GenTest_00_OnlyPbCfg/source/application/EthSM_GenTest_00_OnlyPBcfg.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall prove that the ETHSM post build configuration also compiles stand alone.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * Set TS_BUILD_POST_BUILD_BINARY to TRUE to prevent compilation of non post build files.
    * Remove all generated ETHSM C files except post build files if there are any.

Test Execution: 
    The test run is successful when the ETHSM compiles under sticking to the precondition and a
    binary file is generated.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EthSM.EB.PostBuild_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>441</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
